# mod.py
from genericTypeWithoutArgumentImported import SomeGeneric, SomeGenericWithTypeParam, MyImportedChild, MyImportedChild2, MyImportedChild3

def local_generic():
    from typing import Generic
    class LocalGeneric(Generic[T]):
      ...
    def bar() -> LocalGeneric: # Noncompliant
      ...

def foo() -> SomeGeneric: # Noncompliant
  ...

def bar() -> SomeGenericWithTypeParam: # Noncompliant
    ...

def returning_imported_child() -> MyImportedChild: ... # Noncompliant
def returning_imported_child2() -> MyImportedChild2: ... # OK
# FP SONARPY-2356: MyImportedChild3 is not actually generic (specialized class)
def returning_imported_child3() -> MyImportedChild3: ... # Noncompliant

class MyChild(SomeGeneric[T]): ...
def returning_my_child() -> MyChild: # FN
    ...

class MyChild2(SomeGeneric): ...
def returning_my_child_2() -> MyChild2: # OK
    ...

class MyChild3(SomeGeneric[str]): ...
def returning_my_child_3() -> MyChild2: # OK
    ...
