fully_qualified_name: "flask.app"
classes {
  name: "<subclass of \"HTTPException\" and \"RoutingException\">"
  fully_qualified_name: "flask.app.<subclass of \"HTTPException\" and \"RoutingException\">"
}
classes {
  name: "Flask"
  fully_qualified_name: "flask.app.Flask"
  methods {
    name: "__call__"
    fully_qualified_name: "flask.app.Flask.__call__"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "environ"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "start_response"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "__init__"
    fully_qualified_name: "flask.app.Flask.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "import_name"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "static_url_path"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "static_folder"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "static_host"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "host_matching"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "subdomain_matching"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "template_folder"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "instance_path"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "instance_relative_config"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "root_path"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
  }
  methods {
    name: "_check_setup_finished"
    fully_qualified_name: "flask.app.Flask._check_setup_finished"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f_name"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "_find_error_handler"
    fully_qualified_name: "flask.app.Flask._find_error_handler"
    return_annotation {
      pretty_printed_name: "Union[]"
      kind: UNION
      args {
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "e"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "add_template_filter"
    fully_qualified_name: "flask.app.Flask.add_template_filter"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    has_decorators: true
  }
  methods {
    name: "add_template_global"
    fully_qualified_name: "flask.app.Flask.add_template_global"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    has_decorators: true
  }
  methods {
    name: "add_template_test"
    fully_qualified_name: "flask.app.Flask.add_template_test"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    has_decorators: true
  }
  methods {
    name: "add_url_rule"
    fully_qualified_name: "flask.app.Flask.add_url_rule"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "view_func"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "provide_automatic_options"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "options"
      kind: VAR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "app_context"
    fully_qualified_name: "flask.app.Flask.app_context"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "async_to_sync"
    fully_qualified_name: "flask.app.Flask.async_to_sync"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "auto_find_instance_path"
    fully_qualified_name: "flask.app.Flask.auto_find_instance_path"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "create_global_jinja_loader"
    fully_qualified_name: "flask.app.Flask.create_global_jinja_loader"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "create_jinja_environment"
    fully_qualified_name: "flask.app.Flask.create_jinja_environment"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "create_url_adapter"
    fully_qualified_name: "flask.app.Flask.create_url_adapter"
    return_annotation {
      pretty_printed_name: "Union[None]"
      kind: UNION
      args {
        pretty_printed_name: "__"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "request"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "dispatch_request"
    fully_qualified_name: "flask.app.Flask.dispatch_request"
    return_annotation {
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "do_teardown_appcontext"
    fully_qualified_name: "flask.app.Flask.do_teardown_appcontext"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "exc"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
  }
  methods {
    name: "do_teardown_request"
    fully_qualified_name: "flask.app.Flask.do_teardown_request"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "exc"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
  }
  methods {
    name: "ensure_sync"
    fully_qualified_name: "flask.app.Flask.ensure_sync"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "finalize_request"
    fully_qualified_name: "flask.app.Flask.finalize_request"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "rv"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "from_error_handler"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
  }
  methods {
    name: "full_dispatch_request"
    fully_qualified_name: "flask.app.Flask.full_dispatch_request"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "got_first_request"
    fully_qualified_name: "flask.app.Flask.got_first_request"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
    is_property: true
  }
  methods {
    name: "handle_exception"
    fully_qualified_name: "flask.app.Flask.handle_exception"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "e"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "handle_http_exception"
    fully_qualified_name: "flask.app.Flask.handle_http_exception"
    return_annotation {
      pretty_printed_name: "Union[]"
      kind: UNION
      args {
        pretty_printed_name: "__"
      }
      args {
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "e"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "handle_url_build_error"
    fully_qualified_name: "flask.app.Flask.handle_url_build_error"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "error"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "handle_user_exception"
    fully_qualified_name: "flask.app.Flask.handle_user_exception"
    return_annotation {
      pretty_printed_name: "Union[]"
      kind: UNION
      args {
        pretty_printed_name: "__"
      }
      args {
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "e"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "inject_url_defaults"
    fully_qualified_name: "flask.app.Flask.inject_url_defaults"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "iter_blueprints"
    fully_qualified_name: "flask.app.Flask.iter_blueprints"
    return_annotation {
      pretty_printed_name: "None"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "jinja_env"
    fully_qualified_name: "flask.app.Flask.jinja_env"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "log_exception"
    fully_qualified_name: "flask.app.Flask.log_exception"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "exc_info"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "logger"
    fully_qualified_name: "flask.app.Flask.logger"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "make_aborter"
    fully_qualified_name: "flask.app.Flask.make_aborter"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "make_config"
    fully_qualified_name: "flask.app.Flask.make_config"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "instance_relative"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
  }
  methods {
    name: "make_default_options_response"
    fully_qualified_name: "flask.app.Flask.make_default_options_response"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "make_response"
    fully_qualified_name: "flask.app.Flask.make_response"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "rv"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "make_shell_context"
    fully_qualified_name: "flask.app.Flask.make_shell_context"
    return_annotation {
      pretty_printed_name: "None[Any,Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "name"
    fully_qualified_name: "flask.app.Flask.name"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "open_instance_resource"
    fully_qualified_name: "flask.app.Flask.open_instance_resource"
    return_annotation {
      pretty_printed_name: "None[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "resource"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
  }
  methods {
    name: "preprocess_request"
    fully_qualified_name: "flask.app.Flask.preprocess_request"
    return_annotation {
      pretty_printed_name: "Union[]"
      kind: UNION
      args {
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "process_response"
    fully_qualified_name: "flask.app.Flask.process_response"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "response"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "raise_routing_exception"
    fully_qualified_name: "flask.app.Flask.raise_routing_exception"
    return_annotation {
      pretty_printed_name: "NoReturn"
      kind: UNINHABITED
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "request"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "redirect"
    fully_qualified_name: "flask.app.Flask.redirect"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "location"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "code"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
  }
  methods {
    name: "register_blueprint"
    fully_qualified_name: "flask.app.Flask.register_blueprint"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "blueprint"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "options"
      kind: VAR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "request_context"
    fully_qualified_name: "flask.app.Flask.request_context"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "environ"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "run"
    fully_qualified_name: "flask.app.Flask.run"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "host"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "port"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "debug"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "load_dotenv"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "options"
      kind: VAR_KEYWORD
    }
  }
  methods {
    name: "select_jinja_autoescape"
    fully_qualified_name: "flask.app.Flask.select_jinja_autoescape"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "shell_context_processor"
    fully_qualified_name: "flask.app.Flask.shell_context_processor"
    return_annotation {
      pretty_printed_name: "flask.app.T_shell_context_processor"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "should_ignore_error"
    fully_qualified_name: "flask.app.Flask.should_ignore_error"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "error"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "teardown_appcontext"
    fully_qualified_name: "flask.app.Flask.teardown_appcontext"
    return_annotation {
      pretty_printed_name: "flask.app.T_teardown"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "template_filter"
    fully_qualified_name: "flask.app.Flask.template_filter"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    has_decorators: true
  }
  methods {
    name: "template_global"
    fully_qualified_name: "flask.app.Flask.template_global"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    has_decorators: true
  }
  methods {
    name: "template_test"
    fully_qualified_name: "flask.app.Flask.template_test"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    has_decorators: true
  }
  methods {
    name: "test_cli_runner"
    fully_qualified_name: "flask.app.Flask.test_cli_runner"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
    }
  }
  methods {
    name: "test_client"
    fully_qualified_name: "flask.app.Flask.test_client"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "use_cookies"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
    }
  }
  methods {
    name: "test_request_context"
    fully_qualified_name: "flask.app.Flask.test_request_context"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
    }
  }
  methods {
    name: "trap_http_exception"
    fully_qualified_name: "flask.app.Flask.trap_http_exception"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "e"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "update_template_context"
    fully_qualified_name: "flask.app.Flask.update_template_context"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "context"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "url_for"
    fully_qualified_name: "flask.app.Flask.url_for"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "_anchor"
      kind: KEYWORD_ONLY
      has_default: true
    }
    parameters {
      name: "_method"
      kind: KEYWORD_ONLY
      has_default: true
    }
    parameters {
      name: "_scheme"
      kind: KEYWORD_ONLY
      has_default: true
    }
    parameters {
      name: "_external"
      kind: KEYWORD_ONLY
      has_default: true
    }
    parameters {
      name: "values"
      kind: VAR_KEYWORD
    }
  }
  methods {
    name: "wsgi_app"
    fully_qualified_name: "flask.app.Flask.wsgi_app"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "environ"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "start_response"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  overloaded_methods {
    name: "debug"
    fullname: "flask.app.Flask.debug"
    definitions {
      name: "debug"
      fully_qualified_name: "flask.app.Flask.debug"
      return_annotation {
        pretty_printed_name: "__"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
      }
      has_decorators: true
      is_overload: true
      is_property: true
    }
    definitions {
      name: "debug"
      fully_qualified_name: "flask.app.Flask.debug"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
      }
      parameters {
        name: "value"
        kind: POSITIONAL_OR_KEYWORD
      }
      has_decorators: true
    }
  }
  attributes {
    name: "_got_first_request"
    fully_qualified_name: "flask.app.Flask._got_first_request"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "aborter"
    fully_qualified_name: "flask.app.Flask.aborter"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "aborter_class"
    fully_qualified_name: "flask.app.Flask.aborter_class"
    type_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
  }
  attributes {
    name: "app_ctx_globals_class"
    fully_qualified_name: "flask.app.Flask.app_ctx_globals_class"
    type_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
  }
  attributes {
    name: "blueprints"
    fully_qualified_name: "flask.app.Flask.blueprints"
    type_annotation {
      pretty_printed_name: "None"
    }
  }
  attributes {
    name: "config"
    fully_qualified_name: "flask.app.Flask.config"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "config_class"
    fully_qualified_name: "flask.app.Flask.config_class"
    type_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
  }
  attributes {
    name: "default_config"
    fully_qualified_name: "flask.app.Flask.default_config"
    type_annotation {
      pretty_printed_name: "None[Union[None]]"
      args {
        pretty_printed_name: "Union[None]"
        kind: UNION
        args {
          pretty_printed_name: "__"
        }
        args {
          pretty_printed_name: "__"
        }
        args {
          pretty_printed_name: "__"
        }
        args {
          pretty_printed_name: "__"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  attributes {
    name: "extensions"
    fully_qualified_name: "flask.app.Flask.extensions"
    type_annotation {
      pretty_printed_name: "None[Any,Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  attributes {
    name: "instance_path"
    fully_qualified_name: "flask.app.Flask.instance_path"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "jinja_environment"
    fully_qualified_name: "flask.app.Flask.jinja_environment"
    type_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
  }
  attributes {
    name: "jinja_options"
    fully_qualified_name: "flask.app.Flask.jinja_options"
    type_annotation {
      pretty_printed_name: "None[Any,Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  attributes {
    name: "json"
    fully_qualified_name: "flask.app.Flask.json"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "json_provider_class"
    fully_qualified_name: "flask.app.Flask.json_provider_class"
    type_annotation {
      pretty_printed_name: "Type[None]"
      kind: TYPE
      args {
        pretty_printed_name: "__"
      }
    }
  }
  attributes {
    name: "permanent_session_lifetime"
    fully_qualified_name: "flask.app.Flask.permanent_session_lifetime"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "request_class"
    fully_qualified_name: "flask.app.Flask.request_class"
    type_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
  }
  attributes {
    name: "response_class"
    fully_qualified_name: "flask.app.Flask.response_class"
    type_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
  }
  attributes {
    name: "secret_key"
    fully_qualified_name: "flask.app.Flask.secret_key"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "session_interface"
    fully_qualified_name: "flask.app.Flask.session_interface"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "shell_context_processors"
    fully_qualified_name: "flask.app.Flask.shell_context_processors"
    type_annotation {
      pretty_printed_name: "None"
      args {
      }
    }
  }
  attributes {
    name: "subdomain_matching"
    fully_qualified_name: "flask.app.Flask.subdomain_matching"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "teardown_appcontext_funcs"
    fully_qualified_name: "flask.app.Flask.teardown_appcontext_funcs"
    type_annotation {
      pretty_printed_name: "None"
      args {
      }
    }
  }
  attributes {
    name: "test_cli_runner_class"
    fully_qualified_name: "flask.app.Flask.test_cli_runner_class"
    type_annotation {
      pretty_printed_name: "Union[Type[None],None]"
      kind: UNION
      args {
        pretty_printed_name: "Type[None]"
        kind: TYPE
        args {
          pretty_printed_name: "__"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "test_client_class"
    fully_qualified_name: "flask.app.Flask.test_client_class"
    type_annotation {
      pretty_printed_name: "Union[Type[None],None]"
      kind: UNION
      args {
        pretty_printed_name: "Type[None]"
        kind: TYPE
        args {
          pretty_printed_name: "__"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "testing"
    fully_qualified_name: "flask.app.Flask.testing"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "url_build_error_handlers"
    fully_qualified_name: "flask.app.Flask.url_build_error_handlers"
    type_annotation {
      pretty_printed_name: "None[CallableType[None]]"
      args {
        pretty_printed_name: "CallableType[None]"
        kind: CALLABLE
        args {
          pretty_printed_name: "__"
        }
      }
    }
  }
  attributes {
    name: "url_map"
    fully_qualified_name: "flask.app.Flask.url_map"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "url_map_class"
    fully_qualified_name: "flask.app.Flask.url_map_class"
    type_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
  }
  attributes {
    name: "url_rule_class"
    fully_qualified_name: "flask.app.Flask.url_rule_class"
    type_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
  }
}
functions {
  name: "_make_timedelta"
  fully_qualified_name: "flask.app._make_timedelta"
  return_annotation {
    pretty_printed_name: "Union[None]"
    kind: UNION
    args {
      pretty_printed_name: "__"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  parameters {
    name: "value"
    kind: POSITIONAL_OR_KEYWORD
  }
}
