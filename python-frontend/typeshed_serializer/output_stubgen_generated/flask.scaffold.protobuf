fully_qualified_name: "flask.scaffold"
classes {
  name: "Scaffold"
  fully_qualified_name: "flask.scaffold.Scaffold"
  methods {
    name: "__init__"
    fully_qualified_name: "flask.scaffold.Scaffold.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "import_name"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "static_folder"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "static_url_path"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "template_folder"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "root_path"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
  }
  methods {
    name: "__repr__"
    fully_qualified_name: "flask.scaffold.Scaffold.__repr__"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
    }
  }
  methods {
    name: "_check_setup_finished"
    fully_qualified_name: "flask.scaffold.Scaffold._check_setup_finished"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f_name"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "_get_exc_class_and_code"
    fully_qualified_name: "flask.scaffold.Scaffold._get_exc_class_and_code"
    return_annotation {
      pretty_printed_name: "Tuple[Type[None],Union[None]]"
      kind: TUPLE
      args {
        pretty_printed_name: "Type[None]"
        kind: TYPE
        args {
          pretty_printed_name: "__"
        }
      }
      args {
        pretty_printed_name: "Union[None]"
        kind: UNION
        args {
          pretty_printed_name: "__"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc_class_or_code"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
    is_static: true
  }
  methods {
    name: "_method_route"
    fully_qualified_name: "flask.scaffold.Scaffold._method_route"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "add_url_rule"
    fully_qualified_name: "flask.scaffold.Scaffold.add_url_rule"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "view_func"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "provide_automatic_options"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "options"
      kind: VAR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "after_request"
    fully_qualified_name: "flask.scaffold.Scaffold.after_request"
    return_annotation {
      pretty_printed_name: "flask.scaffold.T_after_request"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "before_request"
    fully_qualified_name: "flask.scaffold.Scaffold.before_request"
    return_annotation {
      pretty_printed_name: "flask.scaffold.T_before_request"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "context_processor"
    fully_qualified_name: "flask.scaffold.Scaffold.context_processor"
    return_annotation {
      pretty_printed_name: "flask.scaffold.T_template_context_processor"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "delete"
    fully_qualified_name: "flask.scaffold.Scaffold.delete"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "options"
      kind: VAR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "endpoint"
    fully_qualified_name: "flask.scaffold.Scaffold.endpoint"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "errorhandler"
    fully_qualified_name: "flask.scaffold.Scaffold.errorhandler"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "code_or_exception"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "get"
    fully_qualified_name: "flask.scaffold.Scaffold.get"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "options"
      kind: VAR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "get_send_file_max_age"
    fully_qualified_name: "flask.scaffold.Scaffold.get_send_file_max_age"
    return_annotation {
      pretty_printed_name: "Union[None]"
      kind: UNION
      args {
        pretty_printed_name: "__"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "has_static_folder"
    fully_qualified_name: "flask.scaffold.Scaffold.has_static_folder"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
    is_property: true
  }
  methods {
    name: "jinja_loader"
    fully_qualified_name: "flask.scaffold.Scaffold.jinja_loader"
    return_annotation {
      pretty_printed_name: "Union[None]"
      kind: UNION
      args {
        pretty_printed_name: "__"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "open_resource"
    fully_qualified_name: "flask.scaffold.Scaffold.open_resource"
    return_annotation {
      pretty_printed_name: "None[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "resource"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
  }
  methods {
    name: "patch"
    fully_qualified_name: "flask.scaffold.Scaffold.patch"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "options"
      kind: VAR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "post"
    fully_qualified_name: "flask.scaffold.Scaffold.post"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "options"
      kind: VAR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "put"
    fully_qualified_name: "flask.scaffold.Scaffold.put"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "options"
      kind: VAR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "register_error_handler"
    fully_qualified_name: "flask.scaffold.Scaffold.register_error_handler"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "code_or_exception"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "route"
    fully_qualified_name: "flask.scaffold.Scaffold.route"
    return_annotation {
      pretty_printed_name: "CallableType[None]"
      kind: CALLABLE
      args {
        pretty_printed_name: "__"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "options"
      kind: VAR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "send_static_file"
    fully_qualified_name: "flask.scaffold.Scaffold.send_static_file"
    return_annotation {
      pretty_printed_name: "__"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "teardown_request"
    fully_qualified_name: "flask.scaffold.Scaffold.teardown_request"
    return_annotation {
      pretty_printed_name: "flask.scaffold.T_teardown"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "url_defaults"
    fully_qualified_name: "flask.scaffold.Scaffold.url_defaults"
    return_annotation {
      pretty_printed_name: "flask.scaffold.T_url_defaults"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  methods {
    name: "url_value_preprocessor"
    fully_qualified_name: "flask.scaffold.Scaffold.url_value_preprocessor"
    return_annotation {
      pretty_printed_name: "flask.scaffold.T_url_value_preprocessor"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
  }
  overloaded_methods {
    name: "static_folder"
    fullname: "flask.scaffold.Scaffold.static_folder"
    definitions {
      name: "static_folder"
      fully_qualified_name: "flask.scaffold.Scaffold.static_folder"
      return_annotation {
        pretty_printed_name: "Union[None]"
        kind: UNION
        args {
          pretty_printed_name: "__"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
      }
      has_decorators: true
      is_overload: true
      is_property: true
    }
    definitions {
      name: "static_folder"
      fully_qualified_name: "flask.scaffold.Scaffold.static_folder"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
      }
      parameters {
        name: "value"
        kind: POSITIONAL_OR_KEYWORD
      }
      has_decorators: true
    }
  }
  overloaded_methods {
    name: "static_url_path"
    fullname: "flask.scaffold.Scaffold.static_url_path"
    definitions {
      name: "static_url_path"
      fully_qualified_name: "flask.scaffold.Scaffold.static_url_path"
      return_annotation {
        pretty_printed_name: "Union[None]"
        kind: UNION
        args {
          pretty_printed_name: "__"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
      }
      has_decorators: true
      is_overload: true
      is_property: true
    }
    definitions {
      name: "static_url_path"
      fully_qualified_name: "flask.scaffold.Scaffold.static_url_path"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
      }
      parameters {
        name: "value"
        kind: POSITIONAL_OR_KEYWORD
      }
      has_decorators: true
    }
  }
  attributes {
    name: "_static_folder"
    fully_qualified_name: "flask.scaffold.Scaffold._static_folder"
    type_annotation {
      pretty_printed_name: "Union[None]"
      kind: UNION
      args {
        pretty_printed_name: "__"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "_static_url_path"
    fully_qualified_name: "flask.scaffold.Scaffold._static_url_path"
    type_annotation {
      pretty_printed_name: "Union[None]"
      kind: UNION
      args {
        pretty_printed_name: "__"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "after_request_funcs"
    fully_qualified_name: "flask.scaffold.Scaffold.after_request_funcs"
    type_annotation {
      pretty_printed_name: "None"
      args {
      }
    }
  }
  attributes {
    name: "before_request_funcs"
    fully_qualified_name: "flask.scaffold.Scaffold.before_request_funcs"
    type_annotation {
      pretty_printed_name: "None"
      args {
      }
    }
  }
  attributes {
    name: "cli"
    fully_qualified_name: "flask.scaffold.Scaffold.cli"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "error_handler_spec"
    fully_qualified_name: "flask.scaffold.Scaffold.error_handler_spec"
    type_annotation {
      pretty_printed_name: "None"
      args {
      }
    }
  }
  attributes {
    name: "import_name"
    fully_qualified_name: "flask.scaffold.Scaffold.import_name"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "name"
    fully_qualified_name: "flask.scaffold.Scaffold.name"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "root_path"
    fully_qualified_name: "flask.scaffold.Scaffold.root_path"
    type_annotation {
      pretty_printed_name: "__"
    }
  }
  attributes {
    name: "teardown_request_funcs"
    fully_qualified_name: "flask.scaffold.Scaffold.teardown_request_funcs"
    type_annotation {
      pretty_printed_name: "None"
      args {
      }
    }
  }
  attributes {
    name: "template_context_processors"
    fully_qualified_name: "flask.scaffold.Scaffold.template_context_processors"
    type_annotation {
      pretty_printed_name: "None"
      args {
      }
    }
  }
  attributes {
    name: "template_folder"
    fully_qualified_name: "flask.scaffold.Scaffold.template_folder"
    type_annotation {
      pretty_printed_name: "Union[None[Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "__"
      }
      args {
        pretty_printed_name: "None[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "url_default_functions"
    fully_qualified_name: "flask.scaffold.Scaffold.url_default_functions"
    type_annotation {
      pretty_printed_name: "None"
      args {
      }
    }
  }
  attributes {
    name: "url_value_preprocessors"
    fully_qualified_name: "flask.scaffold.Scaffold.url_value_preprocessors"
    type_annotation {
      pretty_printed_name: "None"
      args {
      }
    }
  }
  attributes {
    name: "view_functions"
    fully_qualified_name: "flask.scaffold.Scaffold.view_functions"
    type_annotation {
      pretty_printed_name: "None[CallableType[None]]"
      args {
        pretty_printed_name: "CallableType[None]"
        kind: CALLABLE
        args {
          pretty_printed_name: "__"
        }
      }
    }
  }
}
functions {
  name: "_endpoint_from_view_func"
  fully_qualified_name: "flask.scaffold._endpoint_from_view_func"
  return_annotation {
    pretty_printed_name: "__"
  }
  parameters {
    name: "view_func"
    kind: POSITIONAL_OR_KEYWORD
  }
}
functions {
  name: "_find_package_path"
  fully_qualified_name: "flask.scaffold._find_package_path"
  parameters {
    name: "import_name"
    kind: POSITIONAL_OR_KEYWORD
  }
}
functions {
  name: "_matching_loader_thinks_module_is_package"
  fully_qualified_name: "flask.scaffold._matching_loader_thinks_module_is_package"
  parameters {
    name: "loader"
    kind: POSITIONAL_OR_KEYWORD
  }
  parameters {
    name: "mod_name"
    kind: POSITIONAL_OR_KEYWORD
  }
}
functions {
  name: "_path_is_relative_to"
  fully_qualified_name: "flask.scaffold._path_is_relative_to"
  return_annotation {
    pretty_printed_name: "__"
  }
  parameters {
    name: "path"
    kind: POSITIONAL_OR_KEYWORD
  }
  parameters {
    name: "base"
    kind: POSITIONAL_OR_KEYWORD
  }
}
functions {
  name: "find_package"
  fully_qualified_name: "flask.scaffold.find_package"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "import_name"
    kind: POSITIONAL_OR_KEYWORD
  }
}
functions {
  name: "setupmethod"
  fully_qualified_name: "flask.scaffold.setupmethod"
  return_annotation {
    pretty_printed_name: "flask.scaffold.F"
    kind: TYPE_VAR
  }
  parameters {
    name: "f"
    kind: POSITIONAL_OR_KEYWORD
  }
}
vars {
  name: "_sentinel"
  fully_qualified_name: "flask.scaffold._sentinel"
  type_annotation {
    pretty_printed_name: "__"
  }
}
