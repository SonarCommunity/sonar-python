from torch import Tensor as Tensor, nn as nn
from torchvision.ops import FrozenBatchNorm2d as FrozenBatchNorm2d, complete_box_iou_loss as complete_box_iou_loss, distance_box_iou_loss as distance_box_iou_loss, generalized_box_iou_loss as generalized_box_iou_loss
from typing import Any, List, Tuple

class BalancedPositiveNegativeSampler:
    batch_size_per_image: Any
    positive_fraction: Any
    def __init__(self, batch_size_per_image: int, positive_fraction: float) -> None: ...
    def __call__(self, matched_idxs: List[Tensor]) -> Tuple[List[Tensor], List[Tensor]]: ...

def encode_boxes(reference_boxes: Tensor, proposals: Tensor, weights: Tensor) -> Tensor: ...

class BoxCoder:
    weights: Any
    bbox_xform_clip: Any
    def __init__(self, weights: Tuple[float, float, float, float], bbox_xform_clip: float = ...) -> None: ...
    def encode(self, reference_boxes: List[Tensor], proposals: List[Tensor]) -> List[Tensor]: ...
    def encode_single(self, reference_boxes: Tensor, proposals: Tensor) -> Tensor: ...
    def decode(self, rel_codes: Tensor, boxes: List[Tensor]) -> Tensor: ...
    def decode_single(self, rel_codes: Tensor, boxes: Tensor) -> Tensor: ...

class BoxLinearCoder:
    normalize_by_size: Any
    def __init__(self, normalize_by_size: bool = ...) -> None: ...
    def encode(self, reference_boxes: Tensor, proposals: Tensor) -> Tensor: ...
    def decode(self, rel_codes: Tensor, boxes: Tensor) -> Tensor: ...

class Matcher:
    BELOW_LOW_THRESHOLD: int
    BETWEEN_THRESHOLDS: int
    __annotations__: Any
    high_threshold: Any
    low_threshold: Any
    allow_low_quality_matches: Any
    def __init__(self, high_threshold: float, low_threshold: float, allow_low_quality_matches: bool = ...) -> None: ...
    def __call__(self, match_quality_matrix: Tensor) -> Tensor: ...
    def set_low_quality_matches_(self, matches: Tensor, all_matches: Tensor, match_quality_matrix: Tensor) -> None: ...

class SSDMatcher(Matcher):
    def __init__(self, threshold: float) -> None: ...
    def __call__(self, match_quality_matrix: Tensor) -> Tensor: ...

def overwrite_eps(model: nn.Module, eps: float) -> None: ...
def retrieve_out_channels(model: nn.Module, size: Tuple[int, int]) -> List[int]: ...
