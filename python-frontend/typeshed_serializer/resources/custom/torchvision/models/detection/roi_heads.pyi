from torch import Tensor as Tensor, nn
from torchvision.ops import roi_align as roi_align
from typing import Any, Dict, List, Optional, Tuple

def fastrcnn_loss(class_logits: Tensor, box_regression: Tensor, labels: List[Tensor], regression_targets: List[Tensor]) -> Tuple[Tensor, Tensor]: ...
def maskrcnn_inference(x: Tensor, labels: List[Tensor]) -> List[Tensor]: ...
def project_masks_on_boxes(gt_masks: Tensor, boxes: Tensor, matched_idxs: Tensor, M: int) -> Tensor: ...
def maskrcnn_loss(mask_logits: Tensor, proposals: List[Tensor], gt_masks: List[Tensor], gt_labels: List[Tensor], mask_matched_idxs: List[Tensor]) -> Tensor: ...
def keypoints_to_heatmap(keypoints: Tensor, rois: Tensor, heatmap_size: int) -> Tuple[Tensor, Tensor]: ...
def heatmaps_to_keypoints(maps, rois): ...
def keypointrcnn_loss(keypoint_logits: Tensor, proposals: List[Tensor], gt_keypoints: List[Tensor], keypoint_matched_idxs: List[Tensor]) -> Tensor: ...
def keypointrcnn_inference(x: Tensor, boxes: List[Tensor]) -> Tuple[List[Tensor], List[Tensor]]: ...
def expand_boxes(boxes: Tensor, scale: float) -> Tensor: ...
def expand_masks_tracing_scale(M: int, padding: int) -> float: ...
def expand_masks(mask: Tensor, padding: int) -> Tuple[Tensor, float]: ...
def paste_mask_in_image(mask: Tensor, box: Tensor, im_h: int, im_w: int) -> Tensor: ...
def paste_masks_in_image(masks: Tensor, boxes: Tensor, img_shape: Tuple[int, int], padding: int = ...) -> Tensor: ...

class RoIHeads(nn.Module):
    __annotations__: Any
    box_similarity: Any
    proposal_matcher: Any
    fg_bg_sampler: Any
    box_coder: Any
    box_roi_pool: Any
    box_head: Any
    box_predictor: Any
    score_thresh: Any
    nms_thresh: Any
    detections_per_img: Any
    mask_roi_pool: Any
    mask_head: Any
    mask_predictor: Any
    keypoint_roi_pool: Any
    keypoint_head: Any
    keypoint_predictor: Any
    def __init__(self, box_roi_pool, box_head, box_predictor, fg_iou_thresh, bg_iou_thresh, batch_size_per_image, positive_fraction, bbox_reg_weights, score_thresh, nms_thresh, detections_per_img, mask_roi_pool: Any | None = ..., mask_head: Any | None = ..., mask_predictor: Any | None = ..., keypoint_roi_pool: Any | None = ..., keypoint_head: Any | None = ..., keypoint_predictor: Any | None = ...) -> None: ...
    def has_mask(self): ...
    def has_keypoint(self): ...
    def assign_targets_to_proposals(self, proposals: List[Tensor], gt_boxes: List[Tensor], gt_labels: List[Tensor]) -> Tuple[List[Tensor], List[Tensor]]: ...
    def subsample(self, labels: List[Tensor]) -> List[Tensor]: ...
    def add_gt_proposals(self, proposals: List[Tensor], gt_boxes: List[Tensor]) -> List[Tensor]: ...
    def check_targets(self, targets: Optional[List[Dict[str, Tensor]]]) -> None: ...
    def select_training_samples(self, proposals: List[Tensor], targets: Optional[List[Dict[str, Tensor]]]) -> Tuple[List[Tensor], List[Tensor], List[Tensor], List[Tensor]]: ...
    def postprocess_detections(self, class_logits: Tensor, box_regression: Tensor, proposals: List[Tensor], image_shapes: List[Tuple[int, int]]) -> Tuple[List[Tensor], List[Tensor], List[Tensor]]: ...
    def forward(self, features: Dict[str, Tensor], proposals: List[Tensor], image_shapes: List[Tuple[int, int]], targets: Optional[List[Dict[str, Tensor]]] = ...) -> Tuple[List[Dict[str, Tensor]], Dict[str, Tensor]]: ...
