import torch
from .image_list import ImageList as ImageList
from torch import Tensor as Tensor, nn
from typing import Any, List, Optional

class AnchorGenerator(nn.Module):
    __annotations__: Any
    sizes: Any
    aspect_ratios: Any
    cell_anchors: Any
    def __init__(self, sizes=..., aspect_ratios=...) -> None: ...
    def generate_anchors(self, scales: List[int], aspect_ratios: List[float], dtype: torch.dtype = ..., device: torch.device = ...) -> Tensor: ...
    def set_cell_anchors(self, dtype: torch.dtype, device: torch.device): ...
    def num_anchors_per_location(self) -> List[int]: ...
    def grid_anchors(self, grid_sizes: List[List[int]], strides: List[List[Tensor]]) -> List[Tensor]: ...
    def forward(self, image_list: ImageList, feature_maps: List[Tensor]) -> List[Tensor]: ...

class DefaultBoxGenerator(nn.Module):
    aspect_ratios: Any
    steps: Any
    clip: Any
    scales: Any
    def __init__(self, aspect_ratios: List[List[int]], min_ratio: float = ..., max_ratio: float = ..., scales: Optional[List[float]] = ..., steps: Optional[List[int]] = ..., clip: bool = ...) -> None: ...
    def num_anchors_per_location(self) -> List[int]: ...
    def forward(self, image_list: ImageList, feature_maps: List[Tensor]) -> List[Tensor]: ...
