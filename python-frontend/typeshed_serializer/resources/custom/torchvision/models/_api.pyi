from enum import Enum
from torch import nn
from types import ModuleType
from typing import Any, Callable, Dict, Iterable, List, Mapping, Optional, Type, TypeVar, Union

class Weights:
    url: str
    transforms: Callable
    meta: Dict[str, Any]
    def __eq__(self, other: Any) -> bool: ...
    def __init__(self, url, transforms, meta) -> None: ...

class WeightsEnum(Enum):
    @classmethod
    def verify(cls, obj: Any) -> Any: ...
    def get_state_dict(self, *args: Any, **kwargs: Any) -> Mapping[str, Any]: ...
    @property
    def url(self): ...
    @property
    def transforms(self): ...
    @property
    def meta(self): ...

def get_weight(name: str) -> WeightsEnum: ...
def get_model_weights(name: Union[Callable, str]) -> Type[WeightsEnum]: ...
M = TypeVar('M', bound=nn.Module)

def list_models(module: Optional[ModuleType] = ..., include: Union[Iterable[str], str, None] = ..., exclude: Union[Iterable[str], str, None] = ...) -> List[str]: ...
def get_model_builder(name: str) -> Callable[..., nn.Module]: ...
def get_model(name: str, **config: Any) -> nn.Module: ...
