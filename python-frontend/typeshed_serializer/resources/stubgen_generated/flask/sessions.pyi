import abc
import typing as t
from .app import Flask as Flask
from .helpers import is_ip as is_ip
from .json.tag import TaggedJSONSerializer as TaggedJSONSerializer
from .wrappers import Request as Request, Response as Response
from collections.abc import MutableMapping
from datetime import datetime
from itsdangerous import URLSafeTimedSerializer
from typing import Any
from werkzeug.datastructures import CallbackDict

class SessionMixin(MutableMapping, metaclass=abc.ABCMeta):
    @property
    def permanent(self) -> bool: ...
    @permanent.setter
    def permanent(self, value: bool) -> None: ...
    new: bool
    modified: bool
    accessed: bool

class SecureCookieSession(CallbackDict, SessionMixin, metaclass=abc.ABCMeta):
    modified: bool
    accessed: bool
    def __init__(self, initial: t.Any = ...) -> None: ...
    def __getitem__(self, key: str) -> t.Any: ...
    def get(self, key: str, default: t.Any = ...) -> t.Any: ...
    def setdefault(self, key: str, default: t.Any = ...) -> t.Any: ...

class NullSession(SecureCookieSession, metaclass=abc.ABCMeta):
    __setitem__: Any
    __delitem__: Any
    clear: Any
    pop: Any
    popitem: Any
    update: Any
    setdefault: Any

class SessionInterface:
    null_session_class: Any
    pickle_based: bool
    def make_null_session(self, app: Flask) -> NullSession: ...
    def is_null_session(self, obj: object) -> bool: ...
    def get_cookie_name(self, app: Flask) -> str: ...
    def get_cookie_domain(self, app: Flask) -> t.Optional[str]: ...
    def get_cookie_path(self, app: Flask) -> str: ...
    def get_cookie_httponly(self, app: Flask) -> bool: ...
    def get_cookie_secure(self, app: Flask) -> bool: ...
    def get_cookie_samesite(self, app: Flask) -> str: ...
    def get_expiration_time(self, app: Flask, session: SessionMixin) -> t.Optional[datetime]: ...
    def should_set_cookie(self, app: Flask, session: SessionMixin) -> bool: ...
    def open_session(self, app: Flask, request: Request) -> t.Optional[SessionMixin]: ...
    def save_session(self, app: Flask, session: SessionMixin, response: Response) -> None: ...

session_json_serializer: Any

class SecureCookieSessionInterface(SessionInterface):
    salt: str
    digest_method: Any
    key_derivation: str
    serializer: Any
    session_class: Any
    def get_signing_serializer(self, app: Flask) -> t.Optional[URLSafeTimedSerializer]: ...
    def open_session(self, app: Flask, request: Request) -> t.Optional[SecureCookieSession]: ...
    def save_session(self, app: Flask, session: SessionMixin, response: Response) -> None: ...
