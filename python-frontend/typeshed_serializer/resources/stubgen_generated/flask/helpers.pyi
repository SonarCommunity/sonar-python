import os
import typing as t
import typing_extensions as te
import werkzeug.utils
from .globals import current_app as current_app, request as request, request_ctx as request_ctx, session as session
from .signals import message_flashed as message_flashed
from .wrappers import Response as Response
from datetime import datetime
from typing import Any
from werkzeug.wrappers import Response as BaseResponse

def get_env() -> str: ...
def get_debug_flag() -> bool: ...
def get_load_dotenv(default: bool = ...) -> bool: ...
def stream_with_context(generator_or_function: t.Union[t.Iterator[t.AnyStr], t.Callable[..., t.Iterator[t.AnyStr]]]) -> t.Iterator[t.AnyStr]: ...
def make_response(*args: t.Any) -> Response: ...
def url_for(endpoint: str, *, _anchor: t.Optional[str] = ..., _method: t.Optional[str] = ..., _scheme: t.Optional[str] = ..., _external: t.Optional[bool] = ..., **values: t.Any) -> str: ...
def redirect(location: str, code: int = ..., Response: t.Optional[t.Type[BaseResponse]] = ...) -> BaseResponse: ...
def abort(code: t.Union[int, BaseResponse], *args: t.Any, **kwargs: t.Any) -> te.NoReturn: ...
def get_template_attribute(template_name: str, attribute: str) -> t.Any: ...
def flash(message: str, category: str = ...) -> None: ...
def get_flashed_messages(with_categories: bool = ..., category_filter: t.Iterable[str] = ...) -> t.Union[t.List[str], t.List[t.Tuple[str, str]]]: ...
def send_file(path_or_file: t.Union[os.PathLike, str, t.BinaryIO], mimetype: t.Optional[str] = ..., as_attachment: bool = ..., download_name: t.Optional[str] = ..., conditional: bool = ..., etag: t.Union[bool, str] = ..., last_modified: t.Optional[t.Union[datetime, int, float]] = ..., max_age: t.Optional[t.Union[int, t.Callable[[t.Optional[str]], t.Optional[int]]]] = ...) -> Response: ...
def send_from_directory(directory: t.Union[os.PathLike, str], path: t.Union[os.PathLike, str], **kwargs: t.Any) -> Response: ...
def get_root_path(import_name: str) -> str: ...

class locked_cached_property(werkzeug.utils.cached_property):
    lock: Any
    def __init__(self, fget: t.Callable[[t.Any], t.Any], name: t.Optional[str] = ..., doc: t.Optional[str] = ...) -> None: ...
    def __get__(self, obj: object, type: type = ...) -> t.Any: ...
    def __set__(self, obj: object, value: t.Any) -> None: ...
    def __delete__(self, obj: object) -> None: ...

def is_ip(value: str) -> bool: ...
