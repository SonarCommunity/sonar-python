import click
import os
import typing as t
from .app import Flask as Flask
from .globals import current_app as current_app
from .helpers import get_debug_flag as get_debug_flag, get_load_dotenv as get_load_dotenv
from typing import Any

class NoAppException(click.UsageError): ...

def find_best_app(module): ...
def find_app_by_string(module, app_name): ...
def prepare_import(path): ...
def locate_app(module_name, app_name, raise_if_not_found: bool = ...): ...
def get_version(ctx, param, value) -> None: ...

version_option: Any

class ScriptInfo:
    app_import_path: Any
    create_app: Any
    data: Any
    set_debug_flag: Any
    def __init__(self, app_import_path: Union[str, None] = ..., create_app: Union[t.Callable[..., Flask], None] = ..., set_debug_flag: bool = ...) -> None: ...
    def load_app(self) -> Flask: ...

pass_script_info: Any

def with_appcontext(f): ...

class AppGroup(click.Group):
    def command(self, *args, **kwargs): ...
    def group(self, *args, **kwargs): ...

class FlaskGroup(AppGroup):
    create_app: Any
    load_dotenv: Any
    set_debug_flag: Any
    def __init__(self, add_default_commands: bool = ..., create_app: Union[t.Callable[..., Flask], None] = ..., add_version_option: bool = ..., load_dotenv: bool = ..., set_debug_flag: bool = ..., **extra: t.Any) -> None: ...
    def get_command(self, ctx, name): ...
    def list_commands(self, ctx): ...
    def make_context(self, info_name: Union[str, None], args: list[str], parent: Union[click.Context, None] = ..., **extra: t.Any) -> click.Context: ...
    def parse_args(self, ctx: click.Context, args: list[str]) -> list[str]: ...

def load_dotenv(path: Union[str, os.PathLike, None] = ...) -> bool: ...
def show_server_banner(debug, app_import_path) -> None: ...

class CertParamType(click.ParamType):
    name: str
    path_type: Any
    def __init__(self) -> None: ...
    def convert(self, value, param, ctx): ...

class SeparatedPathType(click.Path):
    def convert(self, value, param, ctx): ...

def run_command(info, host, port, reload, debugger, with_threads, cert, extra_files, exclude_patterns) -> None: ...
def shell_command() -> None: ...
def routes_command(sort: str, all_methods: bool) -> None: ...

cli: Any

def main() -> None: ...
