import json
import logging
import os
import typing as t
import typing_extensions as te
from . import cli as cli, typing as ft
from .blueprints import Blueprint as Blueprint
from .config import Config as Config, ConfigAttribute as ConfigAttribute
from .ctx import AppContext as AppContext, RequestContext as RequestContext
from .globals import g as g, request as request, request_ctx as request_ctx, session as session
from .helpers import get_debug_flag as get_debug_flag, get_flashed_messages as get_flashed_messages, get_load_dotenv as get_load_dotenv, locked_cached_property as locked_cached_property
from .json.provider import DefaultJSONProvider as DefaultJSONProvider, JSONProvider as JSONProvider
from .logging import create_logger as create_logger
from .scaffold import Scaffold as Scaffold, find_package as find_package, setupmethod as setupmethod
from .sessions import SecureCookieSessionInterface as SecureCookieSessionInterface, SessionInterface as SessionInterface
from .signals import appcontext_tearing_down as appcontext_tearing_down, got_request_exception as got_request_exception, request_finished as request_finished, request_started as request_started, request_tearing_down as request_tearing_down
from .templating import DispatchingJinjaLoader as DispatchingJinjaLoader, Environment as Environment
from .testing import FlaskCliRunner as FlaskCliRunner, FlaskClient as FlaskClient
from .wrappers import Request as Request, Response as Response
from datetime import timedelta
from types import TracebackType
from typing import Any
from werkzeug.exceptions import Aborter, HTTPException
from werkzeug.routing import BuildError, MapAdapter as MapAdapter
from werkzeug.wrappers import Response as BaseResponse

T_before_first_request: Any
T_shell_context_processor: Any
T_teardown: Any
T_template_filter: Any
T_template_global: Any
T_template_test: Any

def iscoroutinefunction(func: t.Any) -> bool: ...

class Flask(Scaffold):
    request_class: Any
    response_class: Any
    aborter_class: Any
    jinja_environment: Any
    app_ctx_globals_class: Any
    config_class: Any
    testing: Any
    secret_key: Any
    @property
    def session_cookie_name(self) -> str: ...
    @session_cookie_name.setter
    def session_cookie_name(self, value: str) -> None: ...
    permanent_session_lifetime: Any
    @property
    def send_file_max_age_default(self) -> t.Optional[timedelta]: ...
    @send_file_max_age_default.setter
    def send_file_max_age_default(self, value: t.Union[int, timedelta, None]) -> None: ...
    @property
    def use_x_sendfile(self) -> bool: ...
    @use_x_sendfile.setter
    def use_x_sendfile(self, value: bool) -> None: ...
    @property
    def json_encoder(self) -> t.Type[json.JSONEncoder]: ...
    @json_encoder.setter
    def json_encoder(self, value: t.Type[json.JSONEncoder]) -> None: ...
    @property
    def json_decoder(self) -> t.Type[json.JSONDecoder]: ...
    @json_decoder.setter
    def json_decoder(self, value: t.Type[json.JSONDecoder]) -> None: ...
    json_provider_class: t.Type[JSONProvider]
    jinja_options: dict
    default_config: Any
    url_rule_class: Any
    url_map_class: Any
    test_client_class: t.Optional[t.Type[FlaskClient]]
    test_cli_runner_class: t.Optional[t.Type[FlaskCliRunner]]
    session_interface: SessionInterface
    instance_path: Any
    config: Any
    aborter: Any
    json: Any
    url_build_error_handlers: Any
    before_first_request_funcs: Any
    teardown_appcontext_funcs: Any
    shell_context_processors: Any
    blueprints: Any
    extensions: Any
    url_map: Any
    subdomain_matching: Any
    def __init__(self, import_name: str, static_url_path: t.Optional[str] = ..., static_folder: t.Optional[t.Union[str, os.PathLike]] = ..., static_host: t.Optional[str] = ..., host_matching: bool = ..., subdomain_matching: bool = ..., template_folder: t.Optional[t.Union[str, os.PathLike]] = ..., instance_path: t.Optional[str] = ..., instance_relative_config: bool = ..., root_path: t.Optional[str] = ...): ...
    def name(self) -> str: ...
    @property
    def propagate_exceptions(self) -> bool: ...
    def logger(self) -> logging.Logger: ...
    def jinja_env(self) -> Environment: ...
    @property
    def got_first_request(self) -> bool: ...
    def make_config(self, instance_relative: bool = ...) -> Config: ...
    def make_aborter(self) -> Aborter: ...
    def auto_find_instance_path(self) -> str: ...
    def open_instance_resource(self, resource: str, mode: str = ...) -> t.IO[t.AnyStr]: ...
    @property
    def templates_auto_reload(self) -> bool: ...
    @templates_auto_reload.setter
    def templates_auto_reload(self, value: bool) -> None: ...
    def create_jinja_environment(self) -> Environment: ...
    def create_global_jinja_loader(self) -> DispatchingJinjaLoader: ...
    def select_jinja_autoescape(self, filename: str) -> bool: ...
    def update_template_context(self, context: dict) -> None: ...
    def make_shell_context(self) -> dict: ...
    @property
    def env(self) -> str: ...
    @env.setter
    def env(self, value: str) -> None: ...
    @property
    def debug(self) -> bool: ...
    @debug.setter
    def debug(self, value: bool) -> None: ...
    def run(self, host: t.Optional[str] = ..., port: t.Optional[int] = ..., debug: t.Optional[bool] = ..., load_dotenv: bool = ..., **options: t.Any) -> None: ...
    def test_client(self, use_cookies: bool = ..., **kwargs: t.Any) -> FlaskClient: ...
    def test_cli_runner(self, **kwargs: t.Any) -> FlaskCliRunner: ...
    def register_blueprint(self, blueprint: Blueprint, **options: t.Any) -> None: ...
    def iter_blueprints(self) -> t.ValuesView[Blueprint]: ...
    def add_url_rule(self, rule: str, endpoint: t.Optional[str] = ..., view_func: t.Optional[ft.RouteCallable] = ..., provide_automatic_options: t.Optional[bool] = ..., **options: t.Any) -> None: ...
    def template_filter(self, name: t.Optional[str] = ...) -> t.Callable[[T_template_filter], T_template_filter]: ...
    def add_template_filter(self, f: ft.TemplateFilterCallable, name: t.Optional[str] = ...) -> None: ...
    def template_test(self, name: t.Optional[str] = ...) -> t.Callable[[T_template_test], T_template_test]: ...
    def add_template_test(self, f: ft.TemplateTestCallable, name: t.Optional[str] = ...) -> None: ...
    def template_global(self, name: t.Optional[str] = ...) -> t.Callable[[T_template_global], T_template_global]: ...
    def add_template_global(self, f: ft.TemplateGlobalCallable, name: t.Optional[str] = ...) -> None: ...
    def before_first_request(self, f: T_before_first_request) -> T_before_first_request: ...
    def teardown_appcontext(self, f: T_teardown) -> T_teardown: ...
    def shell_context_processor(self, f: T_shell_context_processor) -> T_shell_context_processor: ...
    def handle_http_exception(self, e: HTTPException) -> t.Union[HTTPException, ft.ResponseReturnValue]: ...
    def trap_http_exception(self, e: Exception) -> bool: ...
    def handle_user_exception(self, e: Exception) -> t.Union[HTTPException, ft.ResponseReturnValue]: ...
    def handle_exception(self, e: Exception) -> Response: ...
    def log_exception(self, exc_info: t.Union[t.Tuple[type, BaseException, TracebackType], t.Tuple[None, None, None]]) -> None: ...
    def raise_routing_exception(self, request: Request) -> te.NoReturn: ...
    def dispatch_request(self) -> ft.ResponseReturnValue: ...
    def full_dispatch_request(self) -> Response: ...
    def finalize_request(self, rv: t.Union[ft.ResponseReturnValue, HTTPException], from_error_handler: bool = ...) -> Response: ...
    def make_default_options_response(self) -> Response: ...
    def should_ignore_error(self, error: t.Optional[BaseException]) -> bool: ...
    def ensure_sync(self, func: t.Callable) -> t.Callable: ...
    def async_to_sync(self, func: t.Callable[..., t.Coroutine]) -> t.Callable[..., t.Any]: ...
    def url_for(self, endpoint: str, *, _anchor: t.Optional[str] = ..., _method: t.Optional[str] = ..., _scheme: t.Optional[str] = ..., _external: t.Optional[bool] = ..., **values: t.Any) -> str: ...
    def redirect(self, location: str, code: int = ...) -> BaseResponse: ...
    def make_response(self, rv: ft.ResponseReturnValue) -> Response: ...
    def create_url_adapter(self, request: t.Optional[Request]) -> t.Optional[MapAdapter]: ...
    def inject_url_defaults(self, endpoint: str, values: dict) -> None: ...
    def handle_url_build_error(self, error: BuildError, endpoint: str, values: t.Dict[str, t.Any]) -> str: ...
    def preprocess_request(self) -> t.Optional[ft.ResponseReturnValue]: ...
    def process_response(self, response: Response) -> Response: ...
    def do_teardown_request(self, exc: t.Optional[BaseException] = ...) -> None: ...
    def do_teardown_appcontext(self, exc: t.Optional[BaseException] = ...) -> None: ...
    def app_context(self) -> AppContext: ...
    def request_context(self, environ: dict) -> RequestContext: ...
    def test_request_context(self, *args: t.Any, **kwargs: t.Any) -> RequestContext: ...
    def wsgi_app(self, environ: dict, start_response: t.Callable) -> t.Any: ...
    def __call__(self, environ: dict, start_response: t.Callable) -> t.Any: ...
