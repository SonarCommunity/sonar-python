import json
import os
import typing as t
from . import typing as ft
from .cli import AppGroup as AppGroup
from .globals import current_app as current_app
from .helpers import get_root_path as get_root_path, locked_cached_property as locked_cached_property, send_from_directory as send_from_directory
from .wrappers import Response as Response
from jinja2 import FileSystemLoader
from typing import Any

F: Any
T_after_request: Any
T_before_request: Any
T_error_handler: Any
T_teardown: Any
T_template_context_processor: Any
T_url_defaults: Any
T_url_value_preprocessor: Any
T_route: Any

def setupmethod(f: F) -> F: ...

class Scaffold:
    name: str
    json_encoder: t.Union[t.Type[json.JSONEncoder], None]
    json_decoder: t.Union[t.Type[json.JSONDecoder], None]
    import_name: Any
    template_folder: Any
    root_path: Any
    cli: Any
    view_functions: Any
    error_handler_spec: Any
    before_request_funcs: Any
    after_request_funcs: Any
    teardown_request_funcs: Any
    template_context_processors: Any
    url_value_preprocessors: Any
    url_default_functions: Any
    def __init__(self, import_name: str, static_folder: t.Optional[t.Union[str, os.PathLike]] = ..., static_url_path: t.Optional[str] = ..., template_folder: t.Optional[t.Union[str, os.PathLike]] = ..., root_path: t.Optional[str] = ...): ...
    @property
    def static_folder(self) -> t.Optional[str]: ...
    @static_folder.setter
    def static_folder(self, value: t.Optional[t.Union[str, os.PathLike]]) -> None: ...
    @property
    def has_static_folder(self) -> bool: ...
    @property
    def static_url_path(self) -> t.Optional[str]: ...
    @static_url_path.setter
    def static_url_path(self, value: t.Optional[str]) -> None: ...
    def get_send_file_max_age(self, filename: t.Optional[str]) -> t.Optional[int]: ...
    def send_static_file(self, filename: str) -> Response: ...
    def jinja_loader(self) -> t.Optional[FileSystemLoader]: ...
    def open_resource(self, resource: str, mode: str = ...) -> t.IO[t.AnyStr]: ...
    def get(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]: ...
    def post(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]: ...
    def put(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]: ...
    def delete(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]: ...
    def patch(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]: ...
    def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]: ...
    def add_url_rule(self, rule: str, endpoint: t.Optional[str] = ..., view_func: t.Optional[ft.RouteCallable] = ..., provide_automatic_options: t.Optional[bool] = ..., **options: t.Any) -> None: ...
    def endpoint(self, endpoint: str) -> t.Callable[[F], F]: ...
    def before_request(self, f: T_before_request) -> T_before_request: ...
    def after_request(self, f: T_after_request) -> T_after_request: ...
    def teardown_request(self, f: T_teardown) -> T_teardown: ...
    def context_processor(self, f: T_template_context_processor) -> T_template_context_processor: ...
    def url_value_preprocessor(self, f: T_url_value_preprocessor) -> T_url_value_preprocessor: ...
    def url_defaults(self, f: T_url_defaults) -> T_url_defaults: ...
    def errorhandler(self, code_or_exception: t.Union[t.Type[Exception], int]) -> t.Callable[[T_error_handler], T_error_handler]: ...
    def register_error_handler(self, code_or_exception: t.Union[t.Type[Exception], int], f: ft.ErrorHandlerCallable) -> None: ...

def find_package(import_name: str): ...
