import json
import os
import typing as t
from . import typing as ft
from .app import Flask as Flask
from .scaffold import Scaffold as Scaffold, setupmethod as setupmethod
from typing import Any

DeferredSetupFunction: Any
T_after_request: Any
T_before_first_request: Any
T_before_request: Any
T_error_handler: Any
T_teardown: Any
T_template_context_processor: Any
T_template_filter: Any
T_template_global: Any
T_template_test: Any
T_url_defaults: Any
T_url_value_preprocessor: Any

class BlueprintSetupState:
    app: Any
    blueprint: Any
    options: Any
    first_registration: Any
    subdomain: Any
    url_prefix: Any
    name: Any
    name_prefix: Any
    url_defaults: Any
    def __init__(self, blueprint: Blueprint, app: Flask, options: t.Any, first_registration: bool) -> None: ...
    def add_url_rule(self, rule: str, endpoint: t.Optional[str] = ..., view_func: t.Optional[t.Callable] = ..., **options: t.Any) -> None: ...

class Blueprint(Scaffold):
    @property
    def json_encoder(self) -> t.Union[t.Type[json.JSONEncoder], None]: ...
    @json_encoder.setter
    def json_encoder(self, value: t.Union[t.Type[json.JSONEncoder], None]) -> None: ...
    @property
    def json_decoder(self) -> t.Union[t.Type[json.JSONDecoder], None]: ...
    @json_decoder.setter
    def json_decoder(self, value: t.Union[t.Type[json.JSONDecoder], None]) -> None: ...
    name: Any
    url_prefix: Any
    subdomain: Any
    deferred_functions: Any
    url_values_defaults: Any
    cli_group: Any
    def __init__(self, name: str, import_name: str, static_folder: t.Optional[t.Union[str, os.PathLike]] = ..., static_url_path: t.Optional[str] = ..., template_folder: t.Optional[t.Union[str, os.PathLike]] = ..., url_prefix: t.Optional[str] = ..., subdomain: t.Optional[str] = ..., url_defaults: t.Optional[dict] = ..., root_path: t.Optional[str] = ..., cli_group: t.Optional[str] = ...) -> None: ...
    def record(self, func: t.Callable) -> None: ...
    def record_once(self, func: t.Callable) -> None: ...
    def make_setup_state(self, app: Flask, options: dict, first_registration: bool = ...) -> BlueprintSetupState: ...
    def register_blueprint(self, blueprint: Blueprint, **options: t.Any) -> None: ...
    def register(self, app: Flask, options: dict) -> None: ...
    def add_url_rule(self, rule: str, endpoint: t.Optional[str] = ..., view_func: t.Optional[ft.RouteCallable] = ..., provide_automatic_options: t.Optional[bool] = ..., **options: t.Any) -> None: ...
    def app_template_filter(self, name: t.Optional[str] = ...) -> t.Callable[[T_template_filter], T_template_filter]: ...
    def add_app_template_filter(self, f: ft.TemplateFilterCallable, name: t.Optional[str] = ...) -> None: ...
    def app_template_test(self, name: t.Optional[str] = ...) -> t.Callable[[T_template_test], T_template_test]: ...
    def add_app_template_test(self, f: ft.TemplateTestCallable, name: t.Optional[str] = ...) -> None: ...
    def app_template_global(self, name: t.Optional[str] = ...) -> t.Callable[[T_template_global], T_template_global]: ...
    def add_app_template_global(self, f: ft.TemplateGlobalCallable, name: t.Optional[str] = ...) -> None: ...
    def before_app_request(self, f: T_before_request) -> T_before_request: ...
    def before_app_first_request(self, f: T_before_first_request) -> T_before_first_request: ...
    def after_app_request(self, f: T_after_request) -> T_after_request: ...
    def teardown_app_request(self, f: T_teardown) -> T_teardown: ...
    def app_context_processor(self, f: T_template_context_processor) -> T_template_context_processor: ...
    def app_errorhandler(self, code: t.Union[t.Type[Exception], int]) -> t.Callable[[T_error_handler], T_error_handler]: ...
    def app_url_value_preprocessor(self, f: T_url_value_preprocessor) -> T_url_value_preprocessor: ...
    def app_url_defaults(self, f: T_url_defaults) -> T_url_defaults: ...
