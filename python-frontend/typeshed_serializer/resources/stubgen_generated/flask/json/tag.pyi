import typing as t
from ..json import dumps as dumps, loads as loads
from typing import Any

class JSONTag:
    key: t.Optional[str]
    serializer: Any
    def __init__(self, serializer: TaggedJSONSerializer) -> None: ...
    def check(self, value: t.Any) -> bool: ...
    def to_json(self, value: t.Any) -> t.Any: ...
    def to_python(self, value: t.Any) -> t.Any: ...
    def tag(self, value: t.Any) -> t.Any: ...

class TagDict(JSONTag):
    key: str
    def check(self, value: t.Any) -> bool: ...
    def to_json(self, value: t.Any) -> t.Any: ...
    def to_python(self, value: t.Any) -> t.Any: ...

class PassDict(JSONTag):
    def check(self, value: t.Any) -> bool: ...
    def to_json(self, value: t.Any) -> t.Any: ...
    tag: Any

class TagTuple(JSONTag):
    key: str
    def check(self, value: t.Any) -> bool: ...
    def to_json(self, value: t.Any) -> t.Any: ...
    def to_python(self, value: t.Any) -> t.Any: ...

class PassList(JSONTag):
    def check(self, value: t.Any) -> bool: ...
    def to_json(self, value: t.Any) -> t.Any: ...
    tag: Any

class TagBytes(JSONTag):
    key: str
    def check(self, value: t.Any) -> bool: ...
    def to_json(self, value: t.Any) -> t.Any: ...
    def to_python(self, value: t.Any) -> t.Any: ...

class TagMarkup(JSONTag):
    key: str
    def check(self, value: t.Any) -> bool: ...
    def to_json(self, value: t.Any) -> t.Any: ...
    def to_python(self, value: t.Any) -> t.Any: ...

class TagUUID(JSONTag):
    key: str
    def check(self, value: t.Any) -> bool: ...
    def to_json(self, value: t.Any) -> t.Any: ...
    def to_python(self, value: t.Any) -> t.Any: ...

class TagDateTime(JSONTag):
    key: str
    def check(self, value: t.Any) -> bool: ...
    def to_json(self, value: t.Any) -> t.Any: ...
    def to_python(self, value: t.Any) -> t.Any: ...

class TaggedJSONSerializer:
    default_tags: Any
    tags: Any
    order: Any
    def __init__(self) -> None: ...
    def register(self, tag_class: t.Type[JSONTag], force: bool = ..., index: t.Optional[int] = ...) -> None: ...
    def tag(self, value: t.Any) -> t.Dict[str, t.Any]: ...
    def untag(self, value: t.Dict[str, t.Any]) -> t.Any: ...
    def dumps(self, value: t.Any) -> str: ...
    def loads(self, value: str) -> t.Any: ...
