import typing as t
from .app import Flask as Flask
from .globals import current_app as current_app, request as request
from .helpers import stream_with_context as stream_with_context
from .scaffold import Scaffold as Scaffold
from .signals import before_render_template as before_render_template, template_rendered as template_rendered
from jinja2 import BaseLoader, Environment as BaseEnvironment, Template as Template
from typing import Any

class Environment(BaseEnvironment):
    app: Any
    def __init__(self, app: Flask, **options: t.Any) -> None: ...

class DispatchingJinjaLoader(BaseLoader):
    app: Any
    def __init__(self, app: Flask) -> None: ...
    def get_source(self, environment: Environment, template: str) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]: ...
    def list_templates(self) -> t.List[str]: ...

def render_template(template_name_or_list: t.Union[str, Template, t.List[t.Union[str, Template]]], **context: t.Any) -> str: ...
def render_template_string(source: str, **context: t.Any) -> str: ...
def stream_template(template_name_or_list: t.Union[str, Template, t.List[t.Union[str, Template]]], **context: t.Any) -> t.Iterator[str]: ...
def stream_template_string(source: str, **context: t.Any) -> t.Iterator[str]: ...
