fully_qualified_name: "flask.scaffold"
classes {
  name: "Scaffold"
  fully_qualified_name: "flask.scaffold.Scaffold"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "flask.scaffold.Scaffold.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "import_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "static_folder"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,os.PathLike[Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "os.PathLike[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "static_url_path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "template_folder"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,os.PathLike[Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "os.PathLike[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "root_path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "__repr__"
    fully_qualified_name: "flask.scaffold.Scaffold.__repr__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
  }
  methods {
    name: "_check_setup_finished"
    fully_qualified_name: "flask.scaffold.Scaffold._check_setup_finished"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "f_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "has_static_folder"
    fully_qualified_name: "flask.scaffold.Scaffold.has_static_folder"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "get_send_file_max_age"
    fully_qualified_name: "flask.scaffold.Scaffold.get_send_file_max_age"
    return_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "send_static_file"
    fully_qualified_name: "flask.scaffold.Scaffold.send_static_file"
    return_annotation {
      pretty_printed_name: "flask.wrappers.Response"
      fully_qualified_name: "flask.wrappers.Response"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "jinja_loader"
    fully_qualified_name: "flask.scaffold.Scaffold.jinja_loader"
    return_annotation {
      pretty_printed_name: "Union[jinja2.loaders.FileSystemLoader,None]"
      kind: UNION
      args {
        pretty_printed_name: "jinja2.loaders.FileSystemLoader"
        fully_qualified_name: "jinja2.loaders.FileSystemLoader"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    has_decorators: true
    resolved_decorator_names: "cached_property"
  }
  methods {
    name: "open_resource"
    fully_qualified_name: "flask.scaffold.Scaffold.open_resource"
    return_annotation {
      pretty_printed_name: "typing.IO[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.IO"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "resource"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "_method_route"
    fully_qualified_name: "flask.scaffold.Scaffold._method_route"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
    }
  }
  methods {
    name: "get"
    fully_qualified_name: "flask.scaffold.Scaffold.get"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "post"
    fully_qualified_name: "flask.scaffold.Scaffold.post"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "put"
    fully_qualified_name: "flask.scaffold.Scaffold.put"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "delete"
    fully_qualified_name: "flask.scaffold.Scaffold.delete"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "patch"
    fully_qualified_name: "flask.scaffold.Scaffold.patch"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "route"
    fully_qualified_name: "flask.scaffold.Scaffold.route"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "add_url_rule"
    fully_qualified_name: "flask.scaffold.Scaffold.add_url_rule"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "view_func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]],None]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[CallableType[builtins.function],CallableType[builtins.function]]"
            kind: UNION
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
          }
          fully_qualified_name: "flask.typing.RouteCallable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "provide_automatic_options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "endpoint"
    fully_qualified_name: "flask.scaffold.Scaffold.endpoint"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "before_request"
    fully_qualified_name: "flask.scaffold.Scaffold.before_request"
    return_annotation {
      pretty_printed_name: "flask.scaffold.T_before_request"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.T_before_request"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "after_request"
    fully_qualified_name: "flask.scaffold.Scaffold.after_request"
    return_annotation {
      pretty_printed_name: "flask.scaffold.T_after_request"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.T_after_request"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "teardown_request"
    fully_qualified_name: "flask.scaffold.Scaffold.teardown_request"
    return_annotation {
      pretty_printed_name: "flask.scaffold.T_teardown"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.T_teardown"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "context_processor"
    fully_qualified_name: "flask.scaffold.Scaffold.context_processor"
    return_annotation {
      pretty_printed_name: "flask.scaffold.T_template_context_processor"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.T_template_context_processor"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "url_value_preprocessor"
    fully_qualified_name: "flask.scaffold.Scaffold.url_value_preprocessor"
    return_annotation {
      pretty_printed_name: "flask.scaffold.T_url_value_preprocessor"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.T_url_value_preprocessor"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "url_defaults"
    fully_qualified_name: "flask.scaffold.Scaffold.url_defaults"
    return_annotation {
      pretty_printed_name: "flask.scaffold.T_url_defaults"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.T_url_defaults"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "errorhandler"
    fully_qualified_name: "flask.scaffold.Scaffold.errorhandler"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "code_or_exception"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.Exception],builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.Exception]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.Exception"
            fully_qualified_name: "builtins.Exception"
          }
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "register_error_handler"
    fully_qualified_name: "flask.scaffold.Scaffold.register_error_handler"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.scaffold.Scaffold"
        fully_qualified_name: "flask.scaffold.Scaffold"
      }
    }
    parameters {
      name: "code_or_exception"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.Exception],builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.Exception]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.Exception"
            fully_qualified_name: "builtins.Exception"
          }
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[CallableType[builtins.function]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        fully_qualified_name: "flask.typing.ErrorHandlerCallable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "setupmethod"
  }
  methods {
    name: "_get_exc_class_and_code"
    fully_qualified_name: "flask.scaffold.Scaffold._get_exc_class_and_code"
    return_annotation {
      pretty_printed_name: "Tuple[Type[builtins.Exception],Union[builtins.int,None]]"
      kind: TUPLE
      args {
        pretty_printed_name: "Type[builtins.Exception]"
        kind: TYPE
        args {
          pretty_printed_name: "builtins.Exception"
          fully_qualified_name: "builtins.Exception"
        }
      }
      args {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc_class_or_code"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.Exception],builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.Exception]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.Exception"
            fully_qualified_name: "builtins.Exception"
          }
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "staticmethod"
    is_static: true
  }
  overloaded_methods {
    name: "static_folder"
    fullname: "flask.scaffold.Scaffold.static_folder"
    definitions {
      name: "static_folder"
      fully_qualified_name: "flask.scaffold.Scaffold.static_folder"
      return_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "flask.scaffold.Scaffold"
          fully_qualified_name: "flask.scaffold.Scaffold"
        }
      }
      has_decorators: true
      resolved_decorator_names: "property"
      is_overload: true
      is_property: true
    }
    definitions {
      name: "static_folder"
      fully_qualified_name: "flask.scaffold.Scaffold.static_folder"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "flask.scaffold.Scaffold"
          fully_qualified_name: "flask.scaffold.Scaffold"
        }
      }
      parameters {
        name: "value"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,os.PathLike[Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "os.PathLike"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "static_folder.setter"
    }
  }
  overloaded_methods {
    name: "static_url_path"
    fullname: "flask.scaffold.Scaffold.static_url_path"
    definitions {
      name: "static_url_path"
      fully_qualified_name: "flask.scaffold.Scaffold.static_url_path"
      return_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "flask.scaffold.Scaffold"
          fully_qualified_name: "flask.scaffold.Scaffold"
        }
      }
      has_decorators: true
      resolved_decorator_names: "property"
      is_overload: true
      is_property: true
    }
    definitions {
      name: "static_url_path"
      fully_qualified_name: "flask.scaffold.Scaffold.static_url_path"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "flask.scaffold.Scaffold"
          fully_qualified_name: "flask.scaffold.Scaffold"
        }
      }
      parameters {
        name: "value"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "static_url_path.setter"
    }
  }
  attributes {
    name: "name"
    fully_qualified_name: "flask.scaffold.Scaffold.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "_static_folder"
    fully_qualified_name: "flask.scaffold.Scaffold._static_folder"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "_static_url_path"
    fully_qualified_name: "flask.scaffold.Scaffold._static_url_path"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "import_name"
    fully_qualified_name: "flask.scaffold.Scaffold.import_name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "template_folder"
    fully_qualified_name: "flask.scaffold.Scaffold.template_folder"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,os.PathLike[Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "os.PathLike[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "os.PathLike"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "root_path"
    fully_qualified_name: "flask.scaffold.Scaffold.root_path"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "cli"
    fully_qualified_name: "flask.scaffold.Scaffold.cli"
    type_annotation {
      pretty_printed_name: "flask.cli.AppGroup"
      fully_qualified_name: "flask.cli.AppGroup"
    }
  }
  attributes {
    name: "view_functions"
    fully_qualified_name: "flask.scaffold.Scaffold.view_functions"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,CallableType[builtins.function]]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "error_handler_spec"
    fully_qualified_name: "flask.scaffold.Scaffold.error_handler_spec"
    type_annotation {
      pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,None]],builtins.dict[Union[builtins.int,None],builtins.dict[Type[builtins.Exception],TypeAlias[CallableType[builtins.function]]]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,None]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        fully_qualified_name: "flask.typing.AppOrBlueprintKey"
      }
      args {
        pretty_printed_name: "builtins.dict[Union[builtins.int,None],builtins.dict[Type[builtins.Exception],TypeAlias[CallableType[builtins.function]]]]"
        args {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        args {
          pretty_printed_name: "builtins.dict[Type[builtins.Exception],TypeAlias[CallableType[builtins.function]]]"
          args {
            pretty_printed_name: "Type[builtins.Exception]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.Exception"
              fully_qualified_name: "builtins.Exception"
            }
          }
          args {
            pretty_printed_name: "TypeAlias[CallableType[builtins.function]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
            fully_qualified_name: "flask.typing.ErrorHandlerCallable"
          }
          fully_qualified_name: "builtins.dict"
        }
        fully_qualified_name: "builtins.dict"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "before_request_funcs"
    fully_qualified_name: "flask.scaffold.Scaffold.before_request_funcs"
    type_annotation {
      pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,None]],builtins.list[TypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,None]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        fully_qualified_name: "flask.typing.AppOrBlueprintKey"
      }
      args {
        pretty_printed_name: "builtins.list[TypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]]"
        args {
          pretty_printed_name: "TypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[CallableType[builtins.function],CallableType[builtins.function]]"
            kind: UNION
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
          }
          fully_qualified_name: "flask.typing.BeforeRequestCallable"
        }
        fully_qualified_name: "builtins.list"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "after_request_funcs"
    fully_qualified_name: "flask.scaffold.Scaffold.after_request_funcs"
    type_annotation {
      pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,None]],builtins.list[TypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,None]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        fully_qualified_name: "flask.typing.AppOrBlueprintKey"
      }
      args {
        pretty_printed_name: "builtins.list[TypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]]"
        args {
          pretty_printed_name: "TypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[CallableType[builtins.function],CallableType[builtins.function]]"
            kind: UNION
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
          }
          fully_qualified_name: "flask.typing.AfterRequestCallable"
        }
        fully_qualified_name: "builtins.list"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "teardown_request_funcs"
    fully_qualified_name: "flask.scaffold.Scaffold.teardown_request_funcs"
    type_annotation {
      pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,None]],builtins.list[TypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,None]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        fully_qualified_name: "flask.typing.AppOrBlueprintKey"
      }
      args {
        pretty_printed_name: "builtins.list[TypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]]"
        args {
          pretty_printed_name: "TypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[CallableType[builtins.function],CallableType[builtins.function]]"
            kind: UNION
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
          }
          fully_qualified_name: "flask.typing.TeardownCallable"
        }
        fully_qualified_name: "builtins.list"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "template_context_processors"
    fully_qualified_name: "flask.scaffold.Scaffold.template_context_processors"
    type_annotation {
      pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,None]],builtins.list[TypeAlias[CallableType[builtins.function]]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,None]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        fully_qualified_name: "flask.typing.AppOrBlueprintKey"
      }
      args {
        pretty_printed_name: "builtins.list[TypeAlias[CallableType[builtins.function]]]"
        args {
          pretty_printed_name: "TypeAlias[CallableType[builtins.function]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          fully_qualified_name: "flask.typing.TemplateContextProcessorCallable"
        }
        fully_qualified_name: "builtins.list"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "url_value_preprocessors"
    fully_qualified_name: "flask.scaffold.Scaffold.url_value_preprocessors"
    type_annotation {
      pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,None]],builtins.list[TypeAlias[CallableType[builtins.function]]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,None]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        fully_qualified_name: "flask.typing.AppOrBlueprintKey"
      }
      args {
        pretty_printed_name: "builtins.list[TypeAlias[CallableType[builtins.function]]]"
        args {
          pretty_printed_name: "TypeAlias[CallableType[builtins.function]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          fully_qualified_name: "flask.typing.URLValuePreprocessorCallable"
        }
        fully_qualified_name: "builtins.list"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "url_default_functions"
    fully_qualified_name: "flask.scaffold.Scaffold.url_default_functions"
    type_annotation {
      pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,None]],builtins.list[TypeAlias[CallableType[builtins.function]]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,None]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        fully_qualified_name: "flask.typing.AppOrBlueprintKey"
      }
      args {
        pretty_printed_name: "builtins.list[TypeAlias[CallableType[builtins.function]]]"
        args {
          pretty_printed_name: "TypeAlias[CallableType[builtins.function]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          fully_qualified_name: "flask.typing.URLDefaultCallable"
        }
        fully_qualified_name: "builtins.list"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
}
functions {
  name: "setupmethod"
  fully_qualified_name: "flask.scaffold.setupmethod"
  return_annotation {
    pretty_printed_name: "flask.scaffold.F"
    kind: TYPE_VAR
  }
  parameters {
    name: "f"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "flask.scaffold.F"
      kind: TYPE_VAR
    }
  }
}
functions {
  name: "_endpoint_from_view_func"
  fully_qualified_name: "flask.scaffold._endpoint_from_view_func"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "view_func"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
}
functions {
  name: "_matching_loader_thinks_module_is_package"
  fully_qualified_name: "flask.scaffold._matching_loader_thinks_module_is_package"
  parameters {
    name: "loader"
    kind: POSITIONAL_OR_KEYWORD
  }
  parameters {
    name: "mod_name"
    kind: POSITIONAL_OR_KEYWORD
  }
}
functions {
  name: "_path_is_relative_to"
  fully_qualified_name: "flask.scaffold._path_is_relative_to"
  return_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  parameters {
    name: "path"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "pathlib.PurePath"
      fully_qualified_name: "pathlib.PurePath"
    }
  }
  parameters {
    name: "base"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "_find_package_path"
  fully_qualified_name: "flask.scaffold._find_package_path"
  parameters {
    name: "import_name"
    kind: POSITIONAL_OR_KEYWORD
  }
}
functions {
  name: "find_package"
  fully_qualified_name: "flask.scaffold.find_package"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "import_name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "flask.scaffold.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "importlib"
  fully_qualified_name: "importlib"
  is_imported_module: true
}
vars {
  name: "t"
  fully_qualified_name: "typing"
  is_imported_module: true
}
vars {
  name: "ft"
  fully_qualified_name: "flask.typing"
  is_imported_module: true
}
vars {
  name: "_sentinel"
  fully_qualified_name: "flask.scaffold._sentinel"
  type_annotation {
    pretty_printed_name: "builtins.object"
    fully_qualified_name: "builtins.object"
  }
}
