fully_qualified_name: "lib2to3.fixes.fix_except"
classes {
  name: "FixExcept"
  fully_qualified_name: "lib2to3.fixes.fix_except.FixExcept"
  super_classes: "lib2to3.fixer_base.BaseFix"
  methods {
    name: "transform"
    fully_qualified_name: "lib2to3.fixes.fix_except.FixExcept.transform"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "node"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "results"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "BM_compatible"
    fully_qualified_name: "lib2to3.fixes.fix_except.FixExcept.BM_compatible"
    type_annotation {
      pretty_printed_name: "Literal[builtins.bool]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "PATTERN"
    fully_qualified_name: "lib2to3.fixes.fix_except.FixExcept.PATTERN"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "find_excepts"
  fully_qualified_name: "lib2to3.fixes.fix_except.find_excepts"
  return_annotation {
    pretty_printed_name: "typing.Generator[Tuple[lib2to3.fixes.fix_except._N,lib2to3.fixes.fix_except._N],None,None]"
    args {
      pretty_printed_name: "Tuple[lib2to3.fixes.fix_except._N,lib2to3.fixes.fix_except._N]"
      kind: TUPLE
      args {
        pretty_printed_name: "lib2to3.fixes.fix_except._N"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "lib2to3.fixes.fix_except._N"
        kind: TYPE_VAR
      }
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
    fully_qualified_name: "typing.Generator"
  }
  parameters {
    name: "nodes"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[lib2to3.fixes.fix_except._N]"
      args {
        pretty_printed_name: "lib2to3.fixes.fix_except._N"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
