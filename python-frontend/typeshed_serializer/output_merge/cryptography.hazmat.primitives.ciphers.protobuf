fully_qualified_name: "cryptography.hazmat.primitives.ciphers"
classes {
  name: "Mode"
  fully_qualified_name: "cryptography.hazmat.primitives.ciphers.modes.Mode"
  super_classes: "builtins.object"
  methods {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.modes.Mode.name"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.modes.Mode"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.modes.Mode"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "validate_for_algorithm"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.modes.Mode.validate_for_algorithm"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.modes.Mode"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.modes.Mode"
      }
    }
    parameters {
      name: "algorithm"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.CipherAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherAlgorithm"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "AEADCipherContext"
  fully_qualified_name: "cryptography.hazmat.primitives.ciphers.AEADCipherContext"
  super_classes: "builtins.object"
  methods {
    name: "authenticate_additional_data"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.AEADCipherContext.authenticate_additional_data"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.AEADCipherContext"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.AEADCipherContext"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "AEADDecryptionContext"
  fully_qualified_name: "cryptography.hazmat.primitives.ciphers.AEADDecryptionContext"
  super_classes: "builtins.object"
  methods {
    name: "finalize_with_tag"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.AEADDecryptionContext.finalize_with_tag"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.AEADDecryptionContext"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.AEADDecryptionContext"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "AEADEncryptionContext"
  fully_qualified_name: "cryptography.hazmat.primitives.ciphers.AEADEncryptionContext"
  super_classes: "builtins.object"
  methods {
    name: "tag"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.AEADEncryptionContext.tag"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.AEADEncryptionContext"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.AEADEncryptionContext"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "BlockCipherAlgorithm"
  fully_qualified_name: "cryptography.hazmat.primitives.ciphers.BlockCipherAlgorithm"
  super_classes: "builtins.object"
  methods {
    name: "block_size"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.BlockCipherAlgorithm.block_size"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.BlockCipherAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.BlockCipherAlgorithm"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Cipher"
  fully_qualified_name: "cryptography.hazmat.primitives.ciphers.Cipher"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.Cipher.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.Cipher"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.Cipher"
      }
    }
    parameters {
      name: "algorithm"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.CipherAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherAlgorithm"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[cryptography.hazmat.primitives.ciphers.modes.Mode,None]"
        kind: UNION
        args {
          pretty_printed_name: "cryptography.hazmat.primitives.ciphers.modes.Mode"
          fully_qualified_name: "cryptography.hazmat.primitives.ciphers.modes.Mode"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "backend"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[cryptography.hazmat.backends.interfaces.CipherBackend,None]"
        kind: UNION
        args {
          pretty_printed_name: "cryptography.hazmat.backends.interfaces.CipherBackend"
          fully_qualified_name: "cryptography.hazmat.backends.interfaces.CipherBackend"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "decryptor"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.Cipher.decryptor"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.ciphers.CipherContext"
      fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherContext"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.Cipher"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.Cipher"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "encryptor"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.Cipher.encryptor"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.ciphers.CipherContext"
      fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherContext"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.Cipher"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.Cipher"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "CipherAlgorithm"
  fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherAlgorithm"
  super_classes: "builtins.object"
  methods {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherAlgorithm.key_size"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.CipherAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherAlgorithm"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherAlgorithm.name"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.CipherAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherAlgorithm"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "CipherContext"
  fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherContext"
  super_classes: "builtins.object"
  methods {
    name: "finalize"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherContext.finalize"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.CipherContext"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherContext"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "update"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherContext.update"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.CipherContext"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherContext"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "update_into"
    fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherContext.update_into"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.ciphers.CipherContext"
        fully_qualified_name: "cryptography.hazmat.primitives.ciphers.CipherContext"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "buf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytearray"
        fully_qualified_name: "builtins.bytearray"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
