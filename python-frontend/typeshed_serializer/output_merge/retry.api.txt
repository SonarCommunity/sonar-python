fully_qualified_name: "retry.api"
functions {
  name: "retry_call"
  fully_qualified_name: "retry.api.retry_call"
  return_annotation {
    pretty_printed_name: "retry.api._R"
    kind: TYPE_VAR
  }
  parameters {
    name: "f"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
  parameters {
    name: "fargs"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[typing.Sequence[Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "fkwargs"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "exceptions"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[Type[builtins.Exception],builtins.tuple[Type[builtins.Exception]]]"
      kind: UNION
      args {
        pretty_printed_name: "Type[builtins.Exception]"
        kind: TYPE
        args {
          pretty_printed_name: "builtins.Exception"
          fully_qualified_name: "builtins.Exception"
        }
      }
      args {
        pretty_printed_name: "builtins.tuple[Type[builtins.Exception]]"
        args {
          pretty_printed_name: "Type[builtins.Exception]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.Exception"
            fully_qualified_name: "builtins.Exception"
          }
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
    has_default: true
  }
  parameters {
    name: "tries"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "delay"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    has_default: true
  }
  parameters {
    name: "max_delay"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.float,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "backoff"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    has_default: true
  }
  parameters {
    name: "jitter"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[Tuple[builtins.float,builtins.float],builtins.float]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.float,builtins.float]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      args {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    has_default: true
  }
  parameters {
    name: "logger"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[logging.Logger,None]"
      kind: UNION
      args {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "retry"
  fully_qualified_name: "retry.api.retry"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "exceptions"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[Type[builtins.Exception],builtins.tuple[Type[builtins.Exception]]]"
      kind: UNION
      args {
        pretty_printed_name: "Type[builtins.Exception]"
        kind: TYPE
        args {
          pretty_printed_name: "builtins.Exception"
          fully_qualified_name: "builtins.Exception"
        }
      }
      args {
        pretty_printed_name: "builtins.tuple[Type[builtins.Exception]]"
        args {
          pretty_printed_name: "Type[builtins.Exception]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.Exception"
            fully_qualified_name: "builtins.Exception"
          }
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
    has_default: true
  }
  parameters {
    name: "tries"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "delay"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    has_default: true
  }
  parameters {
    name: "max_delay"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.float,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "backoff"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    has_default: true
  }
  parameters {
    name: "jitter"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[Tuple[builtins.float,builtins.float],builtins.float]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.float,builtins.float]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      args {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    has_default: true
  }
  parameters {
    name: "logger"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[logging.Logger,None]"
      kind: UNION
      args {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "IdentityFunction"
  fully_qualified_name: "retry.api.IdentityFunction"
  type_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
