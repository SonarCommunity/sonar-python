fully_qualified_name: "collections"
classes {
  name: "Container"
  fully_qualified_name: "typing.Container"
  super_classes: "builtins.object"
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.Container.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Container[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Container"
      }
    }
    parameters {
      name: "x"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.Container.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Container[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Container"
      }
    }
    parameters {
      name: "__x"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "Hashable"
  fully_qualified_name: "typing.Hashable"
  super_classes: "builtins.object"
  methods {
    name: "__hash__"
    fully_qualified_name: "typing.Hashable.__hash__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Hashable"
        fully_qualified_name: "typing.Hashable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  has_decorators: true
  has_metaclass: true
  is_protocol: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "ItemsView"
  fully_qualified_name: "typing.ItemsView"
  super_classes: "typing.MappingView"
  super_classes: "typing.AbstractSet"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.ItemsView.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.ItemsView.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "o"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.ItemsView.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[typing._KT_co,typing._VT_co]]"
      args {
        pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
classes {
  name: "Iterable"
  fully_qualified_name: "typing.Iterable"
  super_classes: "builtins.object"
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.Iterable.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
  valid_for: "27"
}
classes {
  name: "Iterator"
  fully_qualified_name: "typing.Iterator"
  super_classes: "typing.Iterable"
  methods {
    name: "next"
    fully_qualified_name: "typing.Iterator.next"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.Iterator.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Iterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterator"
      }
    }
    valid_for: "27"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
  valid_for: "27"
}
classes {
  name: "KeysView"
  fully_qualified_name: "typing.KeysView"
  super_classes: "typing.MappingView"
  super_classes: "typing.AbstractSet"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.KeysView.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.KeysView.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "o"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.KeysView.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._KT_co]"
      args {
        pretty_printed_name: "typing._KT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
classes {
  name: "Mapping"
  fully_qualified_name: "typing.Mapping"
  super_classes: "typing.Iterable"
  super_classes: "typing.Container"
  methods {
    name: "__getitem__"
    fully_qualified_name: "typing.Mapping.__getitem__"
    return_annotation {
      pretty_printed_name: "typing._VT_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "k"
      type_annotation {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
  }
  methods {
    name: "keys"
    fully_qualified_name: "typing.Mapping.keys"
    return_annotation {
      pretty_printed_name: "builtins.list[typing._KT]"
      args {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "values"
    fully_qualified_name: "typing.Mapping.values"
    return_annotation {
      pretty_printed_name: "builtins.list[typing._VT_co]"
      args {
        pretty_printed_name: "typing._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "items"
    fully_qualified_name: "typing.Mapping.items"
    return_annotation {
      pretty_printed_name: "builtins.list[Tuple[typing._KT,typing._VT_co]]"
      args {
        pretty_printed_name: "Tuple[typing._KT,typing._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "iterkeys"
    fully_qualified_name: "typing.Mapping.iterkeys"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._KT]"
      args {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "itervalues"
    fully_qualified_name: "typing.Mapping.itervalues"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._VT_co]"
      args {
        pretty_printed_name: "typing._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "iteritems"
    fully_qualified_name: "typing.Mapping.iteritems"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[typing._KT,typing._VT_co]]"
      args {
        pretty_printed_name: "Tuple[typing._KT,typing._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.Mapping.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "o"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "typing.Mapping.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
  }
  overloaded_methods {
    name: "get"
    fullname: "typing.Mapping.get"
    definitions {
      name: "get"
      fully_qualified_name: "typing.Mapping.get"
      return_annotation {
        pretty_printed_name: "Union[typing._VT_co,None]"
        kind: UNION
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "k"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "get"
      fully_qualified_name: "typing.Mapping.get"
      return_annotation {
        pretty_printed_name: "Union[typing._VT_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "k"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing._VT_co,typing._T]"
          kind: UNION
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
classes {
  name: "MappingView"
  fully_qualified_name: "typing.MappingView"
  super_classes: "builtins.object"
  methods {
    name: "__len__"
    fully_qualified_name: "typing.MappingView.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MappingView"
        fully_qualified_name: "typing.MappingView"
      }
    }
    valid_for: "27"
  }
  valid_for: "27"
}
classes {
  name: "MappingView"
  fully_qualified_name: "typing.MappingView"
  super_classes: "typing.Sized"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.MappingView.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MappingView"
        fully_qualified_name: "typing.MappingView"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "typing.MappingView.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MappingView"
        fully_qualified_name: "typing.MappingView"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "MutableMapping"
  fully_qualified_name: "typing.MutableMapping"
  super_classes: "typing.Mapping"
  methods {
    name: "__setitem__"
    fully_qualified_name: "typing.MutableMapping.__setitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    parameters {
      name: "k"
      type_annotation {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "v"
      type_annotation {
        pretty_printed_name: "typing._VT"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "typing.MutableMapping.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    parameters {
      name: "v"
      type_annotation {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
  }
  methods {
    name: "clear"
    fully_qualified_name: "typing.MutableMapping.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "popitem"
    fully_qualified_name: "typing.MutableMapping.popitem"
    return_annotation {
      pretty_printed_name: "Tuple[typing._KT,typing._VT]"
      kind: TUPLE
      args {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing._VT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "setdefault"
    fully_qualified_name: "typing.MutableMapping.setdefault"
    return_annotation {
      pretty_printed_name: "typing._VT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    parameters {
      name: "k"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._VT"
        kind: TYPE_VAR
      }
      has_default: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "pop"
    fullname: "typing.MutableMapping.pop"
    definitions {
      name: "pop"
      fully_qualified_name: "typing.MutableMapping.pop"
      return_annotation {
        pretty_printed_name: "typing._VT"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "k"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "pop"
      fully_qualified_name: "typing.MutableMapping.pop"
      return_annotation {
        pretty_printed_name: "Union[typing._VT,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "k"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing._VT,typing._T]"
          kind: UNION
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "update"
    fullname: "typing.MutableMapping.update"
    definitions {
      name: "update"
      fully_qualified_name: "typing.MutableMapping.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__m"
        type_annotation {
          pretty_printed_name: "typing.Mapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "update"
      fully_qualified_name: "typing.MutableMapping.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__m"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[typing._KT,typing._VT]]"
          args {
            pretty_printed_name: "Tuple[typing._KT,typing._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "typing._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "typing._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "update"
      fully_qualified_name: "typing.MutableMapping.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
classes {
  name: "MutableSequence"
  fully_qualified_name: "typing.MutableSequence"
  super_classes: "typing.Sequence"
  methods {
    name: "insert"
    fully_qualified_name: "typing.MutableSequence.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "object"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
  }
  methods {
    name: "append"
    fully_qualified_name: "typing.MutableSequence.append"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "object"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "extend"
    fully_qualified_name: "typing.MutableSequence.extend"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "reverse"
    fully_qualified_name: "typing.MutableSequence.reverse"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "pop"
    fully_qualified_name: "typing.MutableSequence.pop"
    return_annotation {
      pretty_printed_name: "typing._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "remove"
    fully_qualified_name: "typing.MutableSequence.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "object"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iadd__"
    fully_qualified_name: "typing.MutableSequence.__iadd__"
    return_annotation {
      pretty_printed_name: "typing.MutableSequence[typing._T]"
      args {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.MutableSequence"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "x"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "__getitem__"
    fullname: "typing.MutableSequence.__getitem__"
    definitions {
      name: "__getitem__"
      fully_qualified_name: "typing.MutableSequence.__getitem__"
      return_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    definitions {
      name: "__getitem__"
      fully_qualified_name: "typing.MutableSequence.__getitem__"
      return_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "s"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "__setitem__"
    fullname: "typing.MutableSequence.__setitem__"
    definitions {
      name: "__setitem__"
      fully_qualified_name: "typing.MutableSequence.__setitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "o"
        type_annotation {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    definitions {
      name: "__setitem__"
      fully_qualified_name: "typing.MutableSequence.__setitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "s"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      parameters {
        name: "o"
        type_annotation {
          pretty_printed_name: "typing.Iterable[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "__delitem__"
    fullname: "typing.MutableSequence.__delitem__"
    definitions {
      name: "__delitem__"
      fully_qualified_name: "typing.MutableSequence.__delitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    definitions {
      name: "__delitem__"
      fully_qualified_name: "typing.MutableSequence.__delitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
classes {
  name: "MutableSet"
  fully_qualified_name: "typing.MutableSet"
  super_classes: "typing.AbstractSet"
  methods {
    name: "add"
    fully_qualified_name: "typing.MutableSet.add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
  }
  methods {
    name: "add"
    fully_qualified_name: "typing.MutableSet.add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "discard"
    fully_qualified_name: "typing.MutableSet.discard"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
  }
  methods {
    name: "discard"
    fully_qualified_name: "typing.MutableSet.discard"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "clear"
    fully_qualified_name: "typing.MutableSet.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "pop"
    fully_qualified_name: "typing.MutableSet.pop"
    return_annotation {
      pretty_printed_name: "typing._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "remove"
    fully_qualified_name: "typing.MutableSet.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "remove"
    fully_qualified_name: "typing.MutableSet.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__ior__"
    fully_qualified_name: "typing.MutableSet.__ior__"
    return_annotation {
      pretty_printed_name: "typing.MutableSet[Union[typing._T,typing._S]]"
      args {
        pretty_printed_name: "Union[typing._T,typing._S]"
        kind: UNION
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._S"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.MutableSet"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "s"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._S]"
        args {
          pretty_printed_name: "typing._S"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__ior__"
    fully_qualified_name: "typing.MutableSet.__ior__"
    return_annotation {
      pretty_printed_name: "UnboundType[typing_extensions.Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "it"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__iand__"
    fully_qualified_name: "typing.MutableSet.__iand__"
    return_annotation {
      pretty_printed_name: "typing.MutableSet[typing._T]"
      args {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.MutableSet"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "s"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iand__"
    fully_qualified_name: "typing.MutableSet.__iand__"
    return_annotation {
      pretty_printed_name: "UnboundType[typing_extensions.Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "it"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__ixor__"
    fully_qualified_name: "typing.MutableSet.__ixor__"
    return_annotation {
      pretty_printed_name: "typing.MutableSet[Union[typing._T,typing._S]]"
      args {
        pretty_printed_name: "Union[typing._T,typing._S]"
        kind: UNION
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._S"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.MutableSet"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "s"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._S]"
        args {
          pretty_printed_name: "typing._S"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__ixor__"
    fully_qualified_name: "typing.MutableSet.__ixor__"
    return_annotation {
      pretty_printed_name: "UnboundType[typing_extensions.Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "it"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__isub__"
    fully_qualified_name: "typing.MutableSet.__isub__"
    return_annotation {
      pretty_printed_name: "typing.MutableSet[typing._T]"
      args {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.MutableSet"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "s"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__isub__"
    fully_qualified_name: "typing.MutableSet.__isub__"
    return_annotation {
      pretty_printed_name: "UnboundType[typing_extensions.Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "it"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  is_generic: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "Sequence"
  fully_qualified_name: "typing.Sequence"
  super_classes: "typing.Iterable"
  super_classes: "typing.Container"
  super_classes: "typing.Reversible"
  methods {
    name: "index"
    fully_qualified_name: "typing.Sequence.index"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "count"
    fully_qualified_name: "typing.Sequence.count"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.Sequence.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "x"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.Sequence.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "typing.Sequence.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "typing.Sequence.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
  }
  overloaded_methods {
    name: "__getitem__"
    fullname: "typing.Sequence.__getitem__"
    definitions {
      name: "__getitem__"
      fully_qualified_name: "typing.Sequence.__getitem__"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "typing.Sequence[typing._T_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    definitions {
      name: "__getitem__"
      fully_qualified_name: "typing.Sequence.__getitem__"
      return_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "typing.Sequence[typing._T_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
      parameters {
        name: "s"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
classes {
  name: "Sized"
  fully_qualified_name: "typing.Sized"
  super_classes: "builtins.object"
  methods {
    name: "__len__"
    fully_qualified_name: "typing.Sized.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Sized"
        fully_qualified_name: "typing.Sized"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  has_decorators: true
  has_metaclass: true
  is_protocol: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "ValuesView"
  fully_qualified_name: "typing.ValuesView"
  super_classes: "typing.MappingView"
  super_classes: "typing.Iterable"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.ValuesView.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.ValuesView[typing._VT_co]"
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ValuesView"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.ValuesView.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.ValuesView[typing._VT_co]"
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ValuesView"
      }
    }
    parameters {
      name: "o"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.ValuesView.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._VT_co]"
      args {
        pretty_printed_name: "typing._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.ValuesView[typing._VT_co]"
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ValuesView"
      }
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
classes {
  name: "deque"
  fully_qualified_name: "collections.deque"
  super_classes: "typing.Sized"
  super_classes: "typing.Iterable"
  super_classes: "typing.Reversible"
  methods {
    name: "__init__"
    fully_qualified_name: "collections.deque.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
      has_default: true
    }
    parameters {
      name: "maxlen"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "maxlen"
    fully_qualified_name: "collections.deque.maxlen"
    return_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "27"
  }
  methods {
    name: "append"
    fully_qualified_name: "collections.deque.append"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "appendleft"
    fully_qualified_name: "collections.deque.appendleft"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "clear"
    fully_qualified_name: "collections.deque.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "count"
    fully_qualified_name: "collections.deque.count"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "extend"
    fully_qualified_name: "collections.deque.extend"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "extendleft"
    fully_qualified_name: "collections.deque.extendleft"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "pop"
    fully_qualified_name: "collections.deque.pop"
    return_annotation {
      pretty_printed_name: "collections._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "popleft"
    fully_qualified_name: "collections.deque.popleft"
    return_annotation {
      pretty_printed_name: "collections._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "remove"
    fully_qualified_name: "collections.deque.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "reverse"
    fully_qualified_name: "collections.deque.reverse"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "rotate"
    fully_qualified_name: "collections.deque.rotate"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "n"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "collections.deque.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "collections.deque.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__str__"
    fully_qualified_name: "collections.deque.__str__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__hash__"
    fully_qualified_name: "collections.deque.__hash__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "collections.deque.__getitem__"
    return_annotation {
      pretty_printed_name: "collections._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "i"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__setitem__"
    fully_qualified_name: "collections.deque.__setitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "i"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "x"
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "collections.deque.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "o"
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "collections.deque.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iadd__"
    fully_qualified_name: "collections.deque.__iadd__"
    return_annotation {
      pretty_printed_name: "collections._S"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections._S"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "iterable"
      type_annotation {
        pretty_printed_name: "typing.Iterable[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
classes {
  name: "deque"
  fully_qualified_name: "collections.deque"
  super_classes: "typing.MutableSequence"
  methods {
    name: "maxlen"
    fully_qualified_name: "collections.deque.maxlen"
    return_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "append"
    fully_qualified_name: "collections.deque.append"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__x"
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "appendleft"
    fully_qualified_name: "collections.deque.appendleft"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__x"
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "copy"
    fully_qualified_name: "collections.deque.copy"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "count"
    fully_qualified_name: "collections.deque.count"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__x"
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "extend"
    fully_qualified_name: "collections.deque.extend"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__iterable"
      type_annotation {
        pretty_printed_name: "typing.Iterable[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "extendleft"
    fully_qualified_name: "collections.deque.extendleft"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__iterable"
      type_annotation {
        pretty_printed_name: "typing.Iterable[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "collections.deque.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__i"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "__x"
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "index"
    fully_qualified_name: "collections.deque.index"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__x"
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__start"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "__stop"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "pop"
    fully_qualified_name: "collections.deque.pop"
    return_annotation {
      pretty_printed_name: "collections._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "popleft"
    fully_qualified_name: "collections.deque.popleft"
    return_annotation {
      pretty_printed_name: "collections._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "remove"
    fully_qualified_name: "collections.deque.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "rotate"
    fully_qualified_name: "collections.deque.rotate"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__n"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__copy__"
    fully_qualified_name: "collections.deque.__copy__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "collections.deque.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "collections.deque.__getitem__"
    return_annotation {
      pretty_printed_name: "collections._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__key"
      type_annotation {
        pretty_printed_name: "typing_extensions.SupportsIndex"
        fully_qualified_name: "typing_extensions.SupportsIndex"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__setitem__"
    fully_qualified_name: "collections.deque.__setitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__key"
      type_annotation {
        pretty_printed_name: "typing_extensions.SupportsIndex"
        fully_qualified_name: "typing_extensions.SupportsIndex"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "collections.deque.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__key"
      type_annotation {
        pretty_printed_name: "typing_extensions.SupportsIndex"
        fully_qualified_name: "typing_extensions.SupportsIndex"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "collections.deque.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__key"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__reduce__"
    fully_qualified_name: "collections.deque.__reduce__"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.type,builtins.tuple[Any],None,typing.Iterator[collections._T]]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
      args {
        pretty_printed_name: "builtins.tuple[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.tuple"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "typing.Iterator[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterator"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__reduce__"
    fully_qualified_name: "collections.deque.__reduce__"
    return_annotation {
      pretty_printed_name: "Tuple[Type[UnboundType[Self]],Tuple[],None,typing.Iterator[collections._T]]"
      kind: TUPLE
      args {
        pretty_printed_name: "Type[UnboundType[Self]]"
        kind: TYPE
        args {
          pretty_printed_name: "UnboundType[Self]"
          kind: UNBOUND
        }
      }
      args {
        pretty_printed_name: "Tuple[]"
        kind: TUPLE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "typing.Iterator[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterator"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iadd__"
    fully_qualified_name: "collections.deque.__iadd__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "typing.Iterable[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__add__"
    fully_qualified_name: "collections.deque.__add__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__mul__"
    fully_qualified_name: "collections.deque.__mul__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__imul__"
    fully_qualified_name: "collections.deque.__imul__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__lt__"
    fully_qualified_name: "collections.deque.__lt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__le__"
    fully_qualified_name: "collections.deque.__le__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__gt__"
    fully_qualified_name: "collections.deque.__gt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__ge__"
    fully_qualified_name: "collections.deque.__ge__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "collections.deque[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.deque"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__class_getitem__"
    fully_qualified_name: "collections.deque.__class_getitem__"
    return_annotation {
      pretty_printed_name: "types.GenericAlias"
      fully_qualified_name: "types.GenericAlias"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[collections.deque[collections._T]]"
        kind: TYPE
        args {
          pretty_printed_name: "collections.deque[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.deque"
        }
      }
    }
    parameters {
      name: "__item"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    is_class_method: true
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "collections.deque.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.deque.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.deque[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.deque"
        }
      }
      parameters {
        name: "maxlen"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.deque.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.deque[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.deque"
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "maxlen"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Counter"
  fully_qualified_name: "collections.Counter"
  super_classes: "builtins.dict"
  methods {
    name: "copy"
    fully_qualified_name: "collections.Counter.copy"
    return_annotation {
      pretty_printed_name: "collections._S"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._S"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "copy"
    fully_qualified_name: "collections.Counter.copy"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "elements"
    fully_qualified_name: "collections.Counter.elements"
    return_annotation {
      pretty_printed_name: "typing.Iterator[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "most_common"
    fully_qualified_name: "collections.Counter.most_common"
    return_annotation {
      pretty_printed_name: "builtins.list[Tuple[collections._T,builtins.int]]"
      args {
        pretty_printed_name: "Tuple[collections._T,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "n"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__add__"
    fully_qualified_name: "collections.Counter.__add__"
    return_annotation {
      pretty_printed_name: "collections.Counter[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections.Counter"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__add__"
    fully_qualified_name: "collections.Counter.__add__"
    return_annotation {
      pretty_printed_name: "collections.Counter[Union[collections._T,collections._S]]"
      args {
        pretty_printed_name: "Union[collections._T,collections._S]"
        kind: UNION
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._S"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "collections.Counter"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._S]"
        args {
          pretty_printed_name: "collections._S"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__sub__"
    fully_qualified_name: "collections.Counter.__sub__"
    return_annotation {
      pretty_printed_name: "collections.Counter[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections.Counter"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__and__"
    fully_qualified_name: "collections.Counter.__and__"
    return_annotation {
      pretty_printed_name: "collections.Counter[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections.Counter"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__or__"
    fully_qualified_name: "collections.Counter.__or__"
    return_annotation {
      pretty_printed_name: "collections.Counter[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections.Counter"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__or__"
    fully_qualified_name: "collections.Counter.__or__"
    return_annotation {
      pretty_printed_name: "collections.Counter[Union[collections._T,collections._S]]"
      args {
        pretty_printed_name: "Union[collections._T,collections._S]"
        kind: UNION
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._S"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "collections.Counter"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._S]"
        args {
          pretty_printed_name: "collections._S"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iadd__"
    fully_qualified_name: "collections.Counter.__iadd__"
    return_annotation {
      pretty_printed_name: "collections.Counter[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections.Counter"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iadd__"
    fully_qualified_name: "collections.Counter.__iadd__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__isub__"
    fully_qualified_name: "collections.Counter.__isub__"
    return_annotation {
      pretty_printed_name: "collections.Counter[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections.Counter"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__isub__"
    fully_qualified_name: "collections.Counter.__isub__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iand__"
    fully_qualified_name: "collections.Counter.__iand__"
    return_annotation {
      pretty_printed_name: "collections.Counter[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections.Counter"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iand__"
    fully_qualified_name: "collections.Counter.__iand__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__ior__"
    fully_qualified_name: "collections.Counter.__ior__"
    return_annotation {
      pretty_printed_name: "collections.Counter[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections.Counter"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__ior__"
    fully_qualified_name: "collections.Counter.__ior__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "fromkeys"
    fully_qualified_name: "collections.Counter.fromkeys"
    return_annotation {
      pretty_printed_name: "NoReturn"
      kind: UNINHABITED
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[collections.Counter[collections._T]]"
        kind: TYPE
        args {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "v"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__missing__"
    fully_qualified_name: "collections.Counter.__missing__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "collections.Counter.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "elem"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__pos__"
    fully_qualified_name: "collections.Counter.__pos__"
    return_annotation {
      pretty_printed_name: "collections.Counter[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections.Counter"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__neg__"
    fully_qualified_name: "collections.Counter.__neg__"
    return_annotation {
      pretty_printed_name: "collections.Counter[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections.Counter"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "collections.Counter.__eq__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "310"
  }
  methods {
    name: "__ne__"
    fully_qualified_name: "collections.Counter.__ne__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "310"
  }
  methods {
    name: "total"
    fully_qualified_name: "collections.Counter.total"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "310"
  }
  methods {
    name: "__le__"
    fully_qualified_name: "collections.Counter.__le__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "310"
  }
  methods {
    name: "__lt__"
    fully_qualified_name: "collections.Counter.__lt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "310"
  }
  methods {
    name: "__ge__"
    fully_qualified_name: "collections.Counter.__ge__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "310"
  }
  methods {
    name: "__gt__"
    fully_qualified_name: "collections.Counter.__gt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.Counter[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "collections.Counter[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "collections.Counter"
      }
    }
    valid_for: "310"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "collections.Counter.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.Counter.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.Counter.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "mapping"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Mapping[collections._T,builtins.int]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.Counter.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "collections.Counter.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.Counter.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.Counter.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.Counter.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__mapping"
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsKeysAndGetItem[collections._T,builtins.int]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "_typeshed.SupportsKeysAndGetItem"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.Counter.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "subtract"
    fullname: "collections.Counter.subtract"
    definitions {
      name: "subtract"
      fully_qualified_name: "collections.Counter.subtract"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__mapping"
        type_annotation {
          pretty_printed_name: "typing.Mapping[collections._T,builtins.int]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "subtract"
      fully_qualified_name: "collections.Counter.subtract"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "subtract"
    fullname: "collections.Counter.subtract"
    definitions {
      name: "subtract"
      fully_qualified_name: "collections.Counter.subtract"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "subtract"
      fully_qualified_name: "collections.Counter.subtract"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__mapping"
        type_annotation {
          pretty_printed_name: "typing.Mapping[collections._T,builtins.int]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "subtract"
      fully_qualified_name: "collections.Counter.subtract"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "update"
    fullname: "collections.Counter.update"
    definitions {
      name: "update"
      fully_qualified_name: "collections.Counter.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__m"
        type_annotation {
          pretty_printed_name: "typing.Mapping[collections._T,builtins.int]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "update"
      fully_qualified_name: "collections.Counter.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__m"
        type_annotation {
          pretty_printed_name: "Union[typing.Iterable[collections._T],typing.Iterable[Tuple[collections._T,builtins.int]]]"
          kind: UNION
          args {
            pretty_printed_name: "typing.Iterable[collections._T]"
            args {
              pretty_printed_name: "collections._T"
              kind: TYPE_VAR
            }
            fully_qualified_name: "typing.Iterable"
          }
          args {
            pretty_printed_name: "typing.Iterable[Tuple[collections._T,builtins.int]]"
            args {
              pretty_printed_name: "Tuple[collections._T,builtins.int]"
              kind: TUPLE
              args {
                pretty_printed_name: "collections._T"
                kind: TYPE_VAR
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "update"
      fully_qualified_name: "collections.Counter.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "update"
    fullname: "collections.Counter.update"
    definitions {
      name: "update"
      fully_qualified_name: "collections.Counter.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__m"
        type_annotation {
          pretty_printed_name: "typing.Mapping[collections._T,builtins.int]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "update"
      fully_qualified_name: "collections.Counter.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "update"
      fully_qualified_name: "collections.Counter.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.Counter[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.Counter"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "OrderedDict"
  fully_qualified_name: "collections.OrderedDict"
  super_classes: "builtins.dict"
  super_classes: "typing.Reversible"
  methods {
    name: "popitem"
    fully_qualified_name: "collections.OrderedDict.popitem"
    return_annotation {
      pretty_printed_name: "Tuple[collections._KT,collections._VT]"
      kind: TUPLE
      args {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    parameters {
      name: "last"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "copy"
    fully_qualified_name: "collections.OrderedDict.copy"
    return_annotation {
      pretty_printed_name: "collections._S"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._S"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "copy"
    fully_qualified_name: "collections.OrderedDict.copy"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "collections.OrderedDict.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[collections._KT]"
      args {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "move_to_end"
    fully_qualified_name: "collections.OrderedDict.move_to_end"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    parameters {
      name: "key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "last"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "keys"
    fully_qualified_name: "collections.OrderedDict.keys"
    return_annotation {
      pretty_printed_name: "collections._odict_keys[collections._KT,collections._VT]"
      args {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections._odict_keys"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "items"
    fully_qualified_name: "collections.OrderedDict.items"
    return_annotation {
      pretty_printed_name: "collections._odict_items[collections._KT,collections._VT]"
      args {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections._odict_items"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "values"
    fully_qualified_name: "collections.OrderedDict.values"
    return_annotation {
      pretty_printed_name: "collections._odict_values[collections._KT,collections._VT]"
      args {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections._odict_values"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "fromkeys"
    fullname: "collections.OrderedDict.fromkeys"
    definitions {
      name: "fromkeys"
      fully_qualified_name: "collections.OrderedDict.fromkeys"
      return_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._T,Union[Any,None]]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        fully_qualified_name: "collections.OrderedDict"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[collections.OrderedDict[collections._KT,collections._VT]]"
          kind: TYPE
          args {
            pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
            args {
              pretty_printed_name: "collections._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
            fully_qualified_name: "collections.OrderedDict"
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "value"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "classmethod"
      resolved_decorator_names: "overload"
      is_overload: true
      is_class_method: true
    }
    definitions {
      name: "fromkeys"
      fully_qualified_name: "collections.OrderedDict.fromkeys"
      return_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._T,collections._S]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._S"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[collections.OrderedDict[collections._KT,collections._VT]]"
          kind: TYPE
          args {
            pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
            args {
              pretty_printed_name: "collections._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
            fully_qualified_name: "collections.OrderedDict"
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "value"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._S"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "classmethod"
      resolved_decorator_names: "overload"
      is_overload: true
      is_class_method: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "setdefault"
    fullname: "collections.OrderedDict.setdefault"
    definitions {
      name: "setdefault"
      fully_qualified_name: "collections.OrderedDict.setdefault"
      return_annotation {
        pretty_printed_name: "Union[collections._T,None]"
        kind: UNION
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.OrderedDict[collections._KT,Union[collections._T,None]]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "Union[collections._T,None]"
            kind: UNION
            args {
              pretty_printed_name: "collections._T"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
          fully_qualified_name: "collections.OrderedDict"
        }
      }
      parameters {
        name: "key"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "setdefault"
      fully_qualified_name: "collections.OrderedDict.setdefault"
      return_annotation {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.OrderedDict"
        }
      }
      parameters {
        name: "key"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "defaultdict"
  fully_qualified_name: "collections.defaultdict"
  super_classes: "builtins.dict"
  methods {
    name: "__missing__"
    fully_qualified_name: "collections.defaultdict.__missing__"
    return_annotation {
      pretty_printed_name: "collections._VT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.defaultdict"
      }
    }
    parameters {
      name: "key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__missing__"
    fully_qualified_name: "collections.defaultdict.__missing__"
    return_annotation {
      pretty_printed_name: "collections._VT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.defaultdict"
      }
    }
    parameters {
      name: "__key"
      type_annotation {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "copy"
    fully_qualified_name: "collections.defaultdict.copy"
    return_annotation {
      pretty_printed_name: "collections._S"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._S"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "copy"
    fully_qualified_name: "collections.defaultdict.copy"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.defaultdict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__copy__"
    fully_qualified_name: "collections.defaultdict.__copy__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.defaultdict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "collections.defaultdict.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "default_factory"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "default_factory"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "default_factory"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "map"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Mapping[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "default_factory"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "map"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Mapping[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "default_factory"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[collections._KT,collections._VT]]"
          args {
            pretty_printed_name: "Tuple[collections._KT,collections._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "collections._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "default_factory"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[collections._KT,collections._VT]]"
          args {
            pretty_printed_name: "Tuple[collections._KT,collections._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "collections._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "collections.defaultdict.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[builtins.str,collections._VT]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "__default_factory"
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[builtins.str,collections._VT]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "__default_factory"
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "__default_factory"
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "__map"
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsKeysAndGetItem[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsKeysAndGetItem"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[builtins.str,collections._VT]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "__default_factory"
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "__map"
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsKeysAndGetItem[builtins.str,collections._VT]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsKeysAndGetItem"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "__default_factory"
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[collections._KT,collections._VT]]"
          args {
            pretty_printed_name: "Tuple[collections._KT,collections._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "collections._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.defaultdict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.defaultdict[builtins.str,collections._VT]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.defaultdict"
        }
      }
      parameters {
        name: "__default_factory"
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[builtins.str,collections._VT]]"
          args {
            pretty_printed_name: "Tuple[builtins.str,collections._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "default_factory"
    fully_qualified_name: "collections.defaultdict.default_factory"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "27"
  }
  attributes {
    name: "default_factory"
    fully_qualified_name: "collections.defaultdict.default_factory"
    type_annotation {
      pretty_printed_name: "Union[CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Set"
  fully_qualified_name: "typing.AbstractSet"
  super_classes: "typing.Collection"
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.AbstractSet.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "x"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "_hash"
    fully_qualified_name: "typing.AbstractSet._hash"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__le__"
    fully_qualified_name: "typing.AbstractSet.__le__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__lt__"
    fully_qualified_name: "typing.AbstractSet.__lt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__gt__"
    fully_qualified_name: "typing.AbstractSet.__gt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__ge__"
    fully_qualified_name: "typing.AbstractSet.__ge__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__and__"
    fully_qualified_name: "typing.AbstractSet.__and__"
    return_annotation {
      pretty_printed_name: "typing.AbstractSet[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AbstractSet"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__or__"
    fully_qualified_name: "typing.AbstractSet.__or__"
    return_annotation {
      pretty_printed_name: "typing.AbstractSet[Union[typing._T_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._T_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.AbstractSet"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__sub__"
    fully_qualified_name: "typing.AbstractSet.__sub__"
    return_annotation {
      pretty_printed_name: "typing.AbstractSet[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AbstractSet"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__xor__"
    fully_qualified_name: "typing.AbstractSet.__xor__"
    return_annotation {
      pretty_printed_name: "typing.AbstractSet[Union[typing._T_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._T_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.AbstractSet"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "isdisjoint"
    fully_qualified_name: "typing.AbstractSet.isdisjoint"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "AsyncGenerator"
  fully_qualified_name: "typing.AsyncGenerator"
  super_classes: "typing.AsyncIterator"
  methods {
    name: "__anext__"
    fully_qualified_name: "typing.AsyncGenerator.__anext__"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "asend"
    fully_qualified_name: "typing.AsyncGenerator.asend"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "aclose"
    fully_qualified_name: "typing.AsyncGenerator.aclose"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[None]"
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "ag_await"
    fully_qualified_name: "typing.AsyncGenerator.ag_await"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "ag_code"
    fully_qualified_name: "typing.AsyncGenerator.ag_code"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "ag_frame"
    fully_qualified_name: "typing.AsyncGenerator.ag_frame"
    return_annotation {
      pretty_printed_name: "types.FrameType"
      fully_qualified_name: "types.FrameType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "ag_running"
    fully_qualified_name: "typing.AsyncGenerator.ag_running"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  overloaded_methods {
    name: "athrow"
    fullname: "typing.AsyncGenerator.athrow"
    definitions {
      name: "athrow"
      fully_qualified_name: "typing.AsyncGenerator.athrow"
      return_annotation {
        pretty_printed_name: "typing.Awaitable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Awaitable"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.AsyncGenerator"
        }
      }
      parameters {
        name: "__typ"
        type_annotation {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
      }
      parameters {
        name: "__val"
        type_annotation {
          pretty_printed_name: "Union[builtins.BaseException,builtins.object]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "builtins.object"
            fully_qualified_name: "builtins.object"
          }
        }
        has_default: true
      }
      parameters {
        name: "__tb"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    definitions {
      name: "athrow"
      fully_qualified_name: "typing.AsyncGenerator.athrow"
      return_annotation {
        pretty_printed_name: "typing.Awaitable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Awaitable"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.AsyncGenerator"
        }
      }
      parameters {
        name: "__typ"
        type_annotation {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      parameters {
        name: "__val"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "__tb"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "AsyncIterable"
  fully_qualified_name: "typing.AsyncIterable"
  super_classes: "builtins.object"
  methods {
    name: "__aiter__"
    fully_qualified_name: "typing.AsyncIterable.__aiter__"
    return_annotation {
      pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AsyncIterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncIterable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncIterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "AsyncIterator"
  fully_qualified_name: "typing.AsyncIterator"
  super_classes: "typing.AsyncIterable"
  methods {
    name: "__anext__"
    fully_qualified_name: "typing.AsyncIterator.__anext__"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncIterator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__aiter__"
    fully_qualified_name: "typing.AsyncIterator.__aiter__"
    return_annotation {
      pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AsyncIterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncIterator"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "Awaitable"
  fully_qualified_name: "typing.Awaitable"
  super_classes: "builtins.object"
  methods {
    name: "__await__"
    fully_qualified_name: "typing.Awaitable.__await__"
    return_annotation {
      pretty_printed_name: "typing.Generator[Any,None,typing._T_co]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Awaitable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Awaitable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "ByteString"
  fully_qualified_name: "typing.ByteString"
  super_classes: "typing.Sequence"
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "Collection"
  fully_qualified_name: "typing.Collection"
  super_classes: "typing.Iterable"
  super_classes: "typing.Container"
  methods {
    name: "__len__"
    fully_qualified_name: "typing.Collection.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Collection[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Collection"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "Coroutine"
  fully_qualified_name: "typing.Coroutine"
  super_classes: "typing.Awaitable"
  methods {
    name: "cr_await"
    fully_qualified_name: "typing.Coroutine.cr_await"
    return_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "cr_code"
    fully_qualified_name: "typing.Coroutine.cr_code"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "cr_frame"
    fully_qualified_name: "typing.Coroutine.cr_frame"
    return_annotation {
      pretty_printed_name: "types.FrameType"
      fully_qualified_name: "types.FrameType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "cr_running"
    fully_qualified_name: "typing.Coroutine.cr_running"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "send"
    fully_qualified_name: "typing.Coroutine.send"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "close"
    fully_qualified_name: "typing.Coroutine.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  overloaded_methods {
    name: "throw"
    fullname: "typing.Coroutine.throw"
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Coroutine.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Coroutine"
        }
      }
      parameters {
        name: "__typ"
        type_annotation {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
      }
      parameters {
        name: "__val"
        type_annotation {
          pretty_printed_name: "Union[builtins.BaseException,builtins.object]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "builtins.object"
            fully_qualified_name: "builtins.object"
          }
        }
        has_default: true
      }
      parameters {
        name: "__tb"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Coroutine.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Coroutine"
        }
      }
      parameters {
        name: "__typ"
        type_annotation {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      parameters {
        name: "__val"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "__tb"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  attributes {
    name: "__qualname__"
    fully_qualified_name: "typing.Coroutine.__qualname__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
}
classes {
  name: "Generator"
  fully_qualified_name: "typing.Generator"
  super_classes: "typing.Iterator"
  methods {
    name: "__next__"
    fully_qualified_name: "typing.Generator.__next__"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "send"
    fully_qualified_name: "typing.Generator.send"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "close"
    fully_qualified_name: "typing.Generator.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.Generator.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing._V_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "gi_code"
    fully_qualified_name: "typing.Generator.gi_code"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "gi_frame"
    fully_qualified_name: "typing.Generator.gi_frame"
    return_annotation {
      pretty_printed_name: "types.FrameType"
      fully_qualified_name: "types.FrameType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "gi_running"
    fully_qualified_name: "typing.Generator.gi_running"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "gi_yieldfrom"
    fully_qualified_name: "typing.Generator.gi_yieldfrom"
    return_annotation {
      pretty_printed_name: "Union[typing.Generator[Any,Any,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Generator[Any,Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Generator"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  overloaded_methods {
    name: "throw"
    fullname: "typing.Generator.throw"
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Generator.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Generator"
        }
      }
      parameters {
        name: "__typ"
        type_annotation {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
      }
      parameters {
        name: "__val"
        type_annotation {
          pretty_printed_name: "Union[builtins.BaseException,builtins.object]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "builtins.object"
            fully_qualified_name: "builtins.object"
          }
        }
        has_default: true
      }
      parameters {
        name: "__tb"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Generator.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Generator"
        }
      }
      parameters {
        name: "__typ"
        type_annotation {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      parameters {
        name: "__val"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "__tb"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
classes {
  name: "UserDict"
  fully_qualified_name: "collections.UserDict"
  super_classes: "typing.MutableMapping"
  methods {
    name: "__len__"
    fully_qualified_name: "collections.UserDict.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "collections.UserDict.__getitem__"
    return_annotation {
      pretty_printed_name: "collections._VT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserDict"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__setitem__"
    fully_qualified_name: "collections.UserDict.__setitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserDict"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "item"
      type_annotation {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "collections.UserDict.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserDict"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "collections.UserDict.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[collections._KT]"
      args {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "collections.UserDict.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserDict"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "copy"
    fully_qualified_name: "collections.UserDict.copy"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__copy__"
    fully_qualified_name: "collections.UserDict.__copy__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__or__"
    fully_qualified_name: "collections.UserDict.__or__"
    return_annotation {
      pretty_printed_name: "collections.UserDict[Union[collections._KT,collections._T1],Union[collections._VT,collections._T2]]"
      args {
        pretty_printed_name: "Union[collections._KT,collections._T1]"
        kind: UNION
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._T1"
          kind: TYPE_VAR
        }
      }
      args {
        pretty_printed_name: "Union[collections._VT,collections._T2]"
        kind: UNION
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._T2"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "collections.UserDict"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserDict"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "Union[collections.UserDict[collections._T1,collections._T2],builtins.dict[collections._T1,collections._T2]]"
        kind: UNION
        args {
          pretty_printed_name: "collections.UserDict[collections._T1,collections._T2]"
          args {
            pretty_printed_name: "collections._T1"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._T2"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserDict"
        }
        args {
          pretty_printed_name: "builtins.dict[collections._T1,collections._T2]"
          args {
            pretty_printed_name: "collections._T1"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._T2"
            kind: TYPE_VAR
          }
          fully_qualified_name: "builtins.dict"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__ror__"
    fully_qualified_name: "collections.UserDict.__ror__"
    return_annotation {
      pretty_printed_name: "collections.UserDict[Union[collections._KT,collections._T1],Union[collections._VT,collections._T2]]"
      args {
        pretty_printed_name: "Union[collections._KT,collections._T1]"
        kind: UNION
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._T1"
          kind: TYPE_VAR
        }
      }
      args {
        pretty_printed_name: "Union[collections._VT,collections._T2]"
        kind: UNION
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._T2"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "collections.UserDict"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserDict"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "Union[collections.UserDict[collections._T1,collections._T2],builtins.dict[collections._T1,collections._T2]]"
        kind: UNION
        args {
          pretty_printed_name: "collections.UserDict[collections._T1,collections._T2]"
          args {
            pretty_printed_name: "collections._T1"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._T2"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserDict"
        }
        args {
          pretty_printed_name: "builtins.dict[collections._T1,collections._T2]"
          args {
            pretty_printed_name: "collections._T1"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._T2"
            kind: TYPE_VAR
          }
          fully_qualified_name: "builtins.dict"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "collections.UserDict.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.UserDict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserDict"
        }
      }
      parameters {
        name: "__dict"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.UserDict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.UserDict[builtins.str,collections._VT]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserDict"
        }
      }
      parameters {
        name: "__dict"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.UserDict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserDict"
        }
      }
      parameters {
        name: "__dict"
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsKeysAndGetItem[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsKeysAndGetItem"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.UserDict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.UserDict[builtins.str,collections._VT]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserDict"
        }
      }
      parameters {
        name: "__dict"
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsKeysAndGetItem[builtins.str,collections._VT]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsKeysAndGetItem"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.UserDict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserDict"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[collections._KT,collections._VT]]"
          args {
            pretty_printed_name: "Tuple[collections._KT,collections._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "collections._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.UserDict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.UserDict[builtins.str,collections._VT]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserDict"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[builtins.str,collections._VT]]"
          args {
            pretty_printed_name: "Tuple[builtins.str,collections._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.UserDict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.UserDict[builtins.str,builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "collections.UserDict"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "typing.Iterable[builtins.list[builtins.str]]"
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.UserDict.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.UserDict[builtins.bytes,builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "collections.UserDict"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "typing.Iterable[builtins.list[builtins.bytes]]"
          args {
            pretty_printed_name: "builtins.list[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "builtins.list"
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "fromkeys"
    fullname: "collections.UserDict.fromkeys"
    definitions {
      name: "fromkeys"
      fully_qualified_name: "collections.UserDict.fromkeys"
      return_annotation {
        pretty_printed_name: "collections.UserDict[collections._T,Union[Any,None]]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        fully_qualified_name: "collections.UserDict"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[collections.UserDict[collections._KT,collections._VT]]"
          kind: TYPE
          args {
            pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
            args {
              pretty_printed_name: "collections._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
            fully_qualified_name: "collections.UserDict"
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "value"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "classmethod"
      resolved_decorator_names: "overload"
      is_overload: true
      is_class_method: true
    }
    definitions {
      name: "fromkeys"
      fully_qualified_name: "collections.UserDict.fromkeys"
      return_annotation {
        pretty_printed_name: "collections.UserDict[collections._T,collections._S]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._S"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserDict"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[collections.UserDict[collections._KT,collections._VT]]"
          kind: TYPE
          args {
            pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
            args {
              pretty_printed_name: "collections._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
            fully_qualified_name: "collections.UserDict"
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "value"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._S"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "classmethod"
      resolved_decorator_names: "overload"
      is_overload: true
      is_class_method: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__ior__"
    fullname: "collections.UserDict.__ior__"
    definitions {
      name: "__ior__"
      fully_qualified_name: "collections.UserDict.__ior__"
      return_annotation {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserDict"
        }
      }
      parameters {
        name: "other"
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsKeysAndGetItem[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsKeysAndGetItem"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__ior__"
      fully_qualified_name: "collections.UserDict.__ior__"
      return_annotation {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "collections.UserDict[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserDict"
        }
      }
      parameters {
        name: "other"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[collections._KT,collections._VT]]"
          args {
            pretty_printed_name: "Tuple[collections._KT,collections._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "collections._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "data"
    fully_qualified_name: "collections.UserDict.data"
    type_annotation {
      pretty_printed_name: "builtins.dict[collections._KT,collections._VT]"
      args {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "UserList"
  fully_qualified_name: "collections.UserList"
  super_classes: "typing.MutableSequence"
  methods {
    name: "__lt__"
    fully_qualified_name: "collections.UserList.__lt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "Union[builtins.list[collections._T],collections.UserList[collections._T]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "collections.UserList[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserList"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__le__"
    fully_qualified_name: "collections.UserList.__le__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "Union[builtins.list[collections._T],collections.UserList[collections._T]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "collections.UserList[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserList"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__gt__"
    fully_qualified_name: "collections.UserList.__gt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "Union[builtins.list[collections._T],collections.UserList[collections._T]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "collections.UserList[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserList"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__ge__"
    fully_qualified_name: "collections.UserList.__ge__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "Union[builtins.list[collections._T],collections.UserList[collections._T]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "collections.UserList[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserList"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "collections.UserList.__eq__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "collections.UserList.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "item"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "collections.UserList.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "collections.UserList.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "i"
      type_annotation {
        pretty_printed_name: "Union[typing_extensions.SupportsIndex,builtins.slice]"
        kind: UNION
        args {
          pretty_printed_name: "typing_extensions.SupportsIndex"
          fully_qualified_name: "typing_extensions.SupportsIndex"
        }
        args {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__add__"
    fully_qualified_name: "collections.UserList.__add__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.Iterable[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__radd__"
    fully_qualified_name: "collections.UserList.__radd__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.Iterable[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iadd__"
    fully_qualified_name: "collections.UserList.__iadd__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.Iterable[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__mul__"
    fully_qualified_name: "collections.UserList.__mul__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "n"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__rmul__"
    fully_qualified_name: "collections.UserList.__rmul__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "n"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__imul__"
    fully_qualified_name: "collections.UserList.__imul__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "n"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "append"
    fully_qualified_name: "collections.UserList.append"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "collections.UserList.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "i"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "pop"
    fully_qualified_name: "collections.UserList.pop"
    return_annotation {
      pretty_printed_name: "collections._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "i"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "remove"
    fully_qualified_name: "collections.UserList.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "copy"
    fully_qualified_name: "collections.UserList.copy"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__copy__"
    fully_qualified_name: "collections.UserList.__copy__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "count"
    fully_qualified_name: "collections.UserList.count"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "index"
    fully_qualified_name: "collections.UserList.index"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__start"
      type_annotation {
        pretty_printed_name: "typing_extensions.SupportsIndex"
        fully_qualified_name: "typing_extensions.SupportsIndex"
      }
      has_default: true
    }
    parameters {
      name: "__stop"
      type_annotation {
        pretty_printed_name: "typing_extensions.SupportsIndex"
        fully_qualified_name: "typing_extensions.SupportsIndex"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "extend"
    fully_qualified_name: "collections.UserList.extend"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserList[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.UserList"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[collections._T]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "collections.UserList.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.UserList.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.UserList[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserList"
        }
      }
      parameters {
        name: "initlist"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "collections.UserList.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.UserList[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserList"
        }
      }
      parameters {
        name: "initlist"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__getitem__"
    fullname: "collections.UserList.__getitem__"
    definitions {
      name: "__getitem__"
      fully_qualified_name: "collections.UserList.__getitem__"
      return_annotation {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "collections.UserList[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserList"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "typing_extensions.SupportsIndex"
          fully_qualified_name: "typing_extensions.SupportsIndex"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__getitem__"
      fully_qualified_name: "collections.UserList.__getitem__"
      return_annotation {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "collections.UserList[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserList"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__setitem__"
    fullname: "collections.UserList.__setitem__"
    definitions {
      name: "__setitem__"
      fully_qualified_name: "collections.UserList.__setitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "collections.UserList[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserList"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "typing_extensions.SupportsIndex"
          fully_qualified_name: "typing_extensions.SupportsIndex"
        }
      }
      parameters {
        name: "item"
        type_annotation {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__setitem__"
      fully_qualified_name: "collections.UserList.__setitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "collections.UserList[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserList"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      parameters {
        name: "item"
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "sort"
    fullname: "collections.UserList.sort"
    definitions {
      name: "sort"
      fully_qualified_name: "collections.UserList.sort"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.UserList[_typeshed.SupportsRichComparisonT]"
          args {
            pretty_printed_name: "_typeshed.SupportsRichComparisonT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserList"
        }
      }
      parameters {
        name: "key"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "reverse"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "sort"
      fully_qualified_name: "collections.UserList.sort"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.UserList[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.UserList"
        }
      }
      parameters {
        name: "key"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      parameters {
        name: "reverse"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "data"
    fully_qualified_name: "collections.UserList.data"
    type_annotation {
      pretty_printed_name: "builtins.list[collections._T]"
      args {
        pretty_printed_name: "collections._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "UserString"
  fully_qualified_name: "collections.UserString"
  super_classes: "typing.Sequence"
  methods {
    name: "__init__"
    fully_qualified_name: "collections.UserString.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "seq"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__int__"
    fully_qualified_name: "collections.UserString.__int__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__float__"
    fully_qualified_name: "collections.UserString.__float__"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__complex__"
    fully_qualified_name: "collections.UserString.__complex__"
    return_annotation {
      pretty_printed_name: "builtins.complex"
      fully_qualified_name: "builtins.complex"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getnewargs__"
    fully_qualified_name: "collections.UserString.__getnewargs__"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__lt__"
    fully_qualified_name: "collections.UserString.__lt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "string"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,collections.UserString]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "collections.UserString"
          fully_qualified_name: "collections.UserString"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__le__"
    fully_qualified_name: "collections.UserString.__le__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "string"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,collections.UserString]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "collections.UserString"
          fully_qualified_name: "collections.UserString"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__gt__"
    fully_qualified_name: "collections.UserString.__gt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "string"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,collections.UserString]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "collections.UserString"
          fully_qualified_name: "collections.UserString"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__ge__"
    fully_qualified_name: "collections.UserString.__ge__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "string"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,collections.UserString]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "collections.UserString"
          fully_qualified_name: "collections.UserString"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "collections.UserString.__eq__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "string"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "collections.UserString.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "char"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "collections.UserString.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "collections.UserString.__getitem__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "index"
      type_annotation {
        pretty_printed_name: "Union[typing_extensions.SupportsIndex,builtins.slice]"
        kind: UNION
        args {
          pretty_printed_name: "typing_extensions.SupportsIndex"
          fully_qualified_name: "typing_extensions.SupportsIndex"
        }
        args {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "collections.UserString.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[UnboundType[Self]]"
      args {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "collections.UserString.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[UnboundType[Self]]"
      args {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__add__"
    fully_qualified_name: "collections.UserString.__add__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__radd__"
    fully_qualified_name: "collections.UserString.__radd__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__mul__"
    fully_qualified_name: "collections.UserString.__mul__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "n"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__rmul__"
    fully_qualified_name: "collections.UserString.__rmul__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "n"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__mod__"
    fully_qualified_name: "collections.UserString.__mod__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "args"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__rmod__"
    fully_qualified_name: "collections.UserString.__rmod__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "format"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "__rmod__"
    fully_qualified_name: "collections.UserString.__rmod__"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "template"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "capitalize"
    fully_qualified_name: "collections.UserString.capitalize"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "casefold"
    fully_qualified_name: "collections.UserString.casefold"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "center"
    fully_qualified_name: "collections.UserString.center"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "width"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "count"
    fully_qualified_name: "collections.UserString.count"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "sub"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,collections.UserString]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "collections.UserString"
          fully_qualified_name: "collections.UserString"
        }
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "encode"
    fully_qualified_name: "collections.UserString.encode"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "encode"
    fully_qualified_name: "collections.UserString.encode"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "endswith"
    fully_qualified_name: "collections.UserString.endswith"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "suffix"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "endswith"
    fully_qualified_name: "collections.UserString.endswith"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "suffix"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "expandtabs"
    fully_qualified_name: "collections.UserString.expandtabs"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "tabsize"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "find"
    fully_qualified_name: "collections.UserString.find"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "sub"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,collections.UserString]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "collections.UserString"
          fully_qualified_name: "collections.UserString"
        }
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "format"
    fully_qualified_name: "collections.UserString.format"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwds"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "format_map"
    fully_qualified_name: "collections.UserString.format_map"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "index"
    fully_qualified_name: "collections.UserString.index"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "sub"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isalpha"
    fully_qualified_name: "collections.UserString.isalpha"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isalnum"
    fully_qualified_name: "collections.UserString.isalnum"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isdecimal"
    fully_qualified_name: "collections.UserString.isdecimal"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isdigit"
    fully_qualified_name: "collections.UserString.isdigit"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isidentifier"
    fully_qualified_name: "collections.UserString.isidentifier"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "islower"
    fully_qualified_name: "collections.UserString.islower"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isnumeric"
    fully_qualified_name: "collections.UserString.isnumeric"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isprintable"
    fully_qualified_name: "collections.UserString.isprintable"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isspace"
    fully_qualified_name: "collections.UserString.isspace"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "istitle"
    fully_qualified_name: "collections.UserString.istitle"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isupper"
    fully_qualified_name: "collections.UserString.isupper"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isascii"
    fully_qualified_name: "collections.UserString.isascii"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "join"
    fully_qualified_name: "collections.UserString.join"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "seq"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "ljust"
    fully_qualified_name: "collections.UserString.ljust"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "width"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "lower"
    fully_qualified_name: "collections.UserString.lower"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "lstrip"
    fully_qualified_name: "collections.UserString.lstrip"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "chars"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "partition"
    fully_qualified_name: "collections.UserString.partition"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "sep"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "replace"
    fully_qualified_name: "collections.UserString.replace"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "old"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,collections.UserString]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "collections.UserString"
          fully_qualified_name: "collections.UserString"
        }
      }
    }
    parameters {
      name: "new"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,collections.UserString]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "collections.UserString"
          fully_qualified_name: "collections.UserString"
        }
      }
    }
    parameters {
      name: "maxsplit"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "rfind"
    fully_qualified_name: "collections.UserString.rfind"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "sub"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,collections.UserString]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "collections.UserString"
          fully_qualified_name: "collections.UserString"
        }
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "rindex"
    fully_qualified_name: "collections.UserString.rindex"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "sub"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,collections.UserString]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "collections.UserString"
          fully_qualified_name: "collections.UserString"
        }
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "rjust"
    fully_qualified_name: "collections.UserString.rjust"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "width"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "rpartition"
    fully_qualified_name: "collections.UserString.rpartition"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "sep"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "rstrip"
    fully_qualified_name: "collections.UserString.rstrip"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "chars"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "split"
    fully_qualified_name: "collections.UserString.split"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "sep"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "maxsplit"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "rsplit"
    fully_qualified_name: "collections.UserString.rsplit"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "sep"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "maxsplit"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "splitlines"
    fully_qualified_name: "collections.UserString.splitlines"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "keepends"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "startswith"
    fully_qualified_name: "collections.UserString.startswith"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "prefix"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "startswith"
    fully_qualified_name: "collections.UserString.startswith"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "prefix"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "strip"
    fully_qualified_name: "collections.UserString.strip"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "chars"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "swapcase"
    fully_qualified_name: "collections.UserString.swapcase"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "title"
    fully_qualified_name: "collections.UserString.title"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "translate"
    fully_qualified_name: "collections.UserString.translate"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "upper"
    fully_qualified_name: "collections.UserString.upper"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "zfill"
    fully_qualified_name: "collections.UserString.zfill"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "width"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "removeprefix"
    fully_qualified_name: "collections.UserString.removeprefix"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "__prefix"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,collections.UserString]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "collections.UserString"
          fully_qualified_name: "collections.UserString"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "removesuffix"
    fully_qualified_name: "collections.UserString.removesuffix"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.UserString"
        fully_qualified_name: "collections.UserString"
      }
    }
    parameters {
      name: "__suffix"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,collections.UserString]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "collections.UserString"
          fully_qualified_name: "collections.UserString"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "data"
    fully_qualified_name: "collections.UserString.data"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "maketrans"
    fully_qualified_name: "collections.UserString.maketrans"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_OrderedDictKeysView"
  fully_qualified_name: "collections._OrderedDictKeysView"
  super_classes: "typing.KeysView"
  super_classes: "typing.Reversible"
  methods {
    name: "__reversed__"
    fully_qualified_name: "collections._OrderedDictKeysView.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[collections._KT_co]"
      args {
        pretty_printed_name: "collections._KT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections._OrderedDictKeysView[collections._KT_co]"
        args {
          pretty_printed_name: "collections._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections._OrderedDictKeysView"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_OrderedDictItemsView"
  fully_qualified_name: "collections._OrderedDictItemsView"
  super_classes: "typing.ItemsView"
  super_classes: "typing.Reversible"
  methods {
    name: "__reversed__"
    fully_qualified_name: "collections._OrderedDictItemsView.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[collections._KT_co,collections._VT_co]]"
      args {
        pretty_printed_name: "Tuple[collections._KT_co,collections._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "collections._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections._OrderedDictItemsView[collections._KT_co,collections._VT_co]"
        args {
          pretty_printed_name: "collections._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections._OrderedDictItemsView"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_OrderedDictValuesView"
  fully_qualified_name: "collections._OrderedDictValuesView"
  super_classes: "typing.ValuesView"
  super_classes: "typing.Reversible"
  methods {
    name: "__reversed__"
    fully_qualified_name: "collections._OrderedDictValuesView.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[collections._VT_co]"
      args {
        pretty_printed_name: "collections._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections._OrderedDictValuesView[collections._VT_co]"
        args {
          pretty_printed_name: "collections._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections._OrderedDictValuesView"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_odict_keys"
  fully_qualified_name: "collections._odict_keys"
  super_classes: "_collections_abc.dict_keys"
  super_classes: "typing.Reversible"
  methods {
    name: "__reversed__"
    fully_qualified_name: "collections._odict_keys.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[collections._KT_co]"
      args {
        pretty_printed_name: "collections._KT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections._odict_keys[collections._KT_co,collections._VT_co]"
        args {
          pretty_printed_name: "collections._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections._odict_keys"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_decorators: true
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_odict_items"
  fully_qualified_name: "collections._odict_items"
  super_classes: "_collections_abc.dict_items"
  super_classes: "typing.Reversible"
  methods {
    name: "__reversed__"
    fully_qualified_name: "collections._odict_items.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[collections._KT_co,collections._VT_co]]"
      args {
        pretty_printed_name: "Tuple[collections._KT_co,collections._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "collections._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections._odict_items[collections._KT_co,collections._VT_co]"
        args {
          pretty_printed_name: "collections._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections._odict_items"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_decorators: true
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_odict_values"
  fully_qualified_name: "collections._odict_values"
  super_classes: "_collections_abc.dict_values"
  super_classes: "typing.Reversible"
  methods {
    name: "__reversed__"
    fully_qualified_name: "collections._odict_values.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[collections._VT_co]"
      args {
        pretty_printed_name: "collections._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections._odict_values[collections._KT_co,collections._VT_co]"
        args {
          pretty_printed_name: "collections._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections._odict_values"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_decorators: true
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "ChainMap"
  fully_qualified_name: "collections.ChainMap"
  super_classes: "typing.MutableMapping"
  methods {
    name: "__init__"
    fully_qualified_name: "collections.ChainMap.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    parameters {
      name: "maps"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "new_child"
    fully_qualified_name: "collections.ChainMap.new_child"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    parameters {
      name: "m"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.MutableMapping[collections._KT,collections._VT],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.MutableMapping[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "parents"
    fully_qualified_name: "collections.ChainMap.parents"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__setitem__"
    fully_qualified_name: "collections.ChainMap.__setitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "value"
      type_annotation {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "collections.ChainMap.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "collections.ChainMap.__getitem__"
    return_annotation {
      pretty_printed_name: "collections._VT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "collections.ChainMap.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[collections._KT]"
      args {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "collections.ChainMap.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "collections.ChainMap.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__missing__"
    fully_qualified_name: "collections.ChainMap.__missing__"
    return_annotation {
      pretty_printed_name: "collections._VT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    parameters {
      name: "key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__bool__"
    fully_qualified_name: "collections.ChainMap.__bool__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "copy"
    fully_qualified_name: "collections.ChainMap.copy"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__or__"
    fully_qualified_name: "collections.ChainMap.__or__"
    return_annotation {
      pretty_printed_name: "collections.ChainMap[Union[collections._KT,collections._T1],Union[collections._VT,collections._T2]]"
      args {
        pretty_printed_name: "Union[collections._KT,collections._T1]"
        kind: UNION
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._T1"
          kind: TYPE_VAR
        }
      }
      args {
        pretty_printed_name: "Union[collections._VT,collections._T2]"
        kind: UNION
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._T2"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "collections.ChainMap"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.Mapping[collections._T1,collections._T2]"
        args {
          pretty_printed_name: "collections._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__ror__"
    fully_qualified_name: "collections.ChainMap.__ror__"
    return_annotation {
      pretty_printed_name: "collections.ChainMap[Union[collections._KT,collections._T1],Union[collections._VT,collections._T2]]"
      args {
        pretty_printed_name: "Union[collections._KT,collections._T1]"
        kind: UNION
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._T1"
          kind: TYPE_VAR
        }
      }
      args {
        pretty_printed_name: "Union[collections._VT,collections._T2]"
        kind: UNION
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._T2"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "collections.ChainMap"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "typing.Mapping[collections._T1,collections._T2]"
        args {
          pretty_printed_name: "collections._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "setdefault"
    fullname: "collections.ChainMap.setdefault"
    definitions {
      name: "setdefault"
      fully_qualified_name: "collections.ChainMap.setdefault"
      return_annotation {
        pretty_printed_name: "Union[collections._T,None]"
        kind: UNION
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.ChainMap[collections._KT,Union[collections._T,None]]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "Union[collections._T,None]"
            kind: UNION
            args {
              pretty_printed_name: "collections._T"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
          fully_qualified_name: "collections.ChainMap"
        }
      }
      parameters {
        name: "key"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "setdefault"
      fully_qualified_name: "collections.ChainMap.setdefault"
      return_annotation {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.ChainMap"
        }
      }
      parameters {
        name: "key"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "pop"
    fullname: "collections.ChainMap.pop"
    definitions {
      name: "pop"
      fully_qualified_name: "collections.ChainMap.pop"
      return_annotation {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.ChainMap"
        }
      }
      parameters {
        name: "key"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "pop"
      fully_qualified_name: "collections.ChainMap.pop"
      return_annotation {
        pretty_printed_name: "Union[collections._VT,collections._T]"
        kind: UNION
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.ChainMap"
        }
      }
      parameters {
        name: "key"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[collections._VT,collections._T]"
          kind: UNION
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "fromkeys"
    fullname: "collections.ChainMap.fromkeys"
    definitions {
      name: "fromkeys"
      fully_qualified_name: "collections.ChainMap.fromkeys"
      return_annotation {
        pretty_printed_name: "collections.ChainMap[collections._T,Union[Any,None]]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        fully_qualified_name: "collections.ChainMap"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[collections.ChainMap[collections._KT,collections._VT]]"
          kind: TYPE
          args {
            pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
            args {
              pretty_printed_name: "collections._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
            fully_qualified_name: "collections.ChainMap"
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__value"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "classmethod"
      resolved_decorator_names: "overload"
      is_overload: true
      is_class_method: true
    }
    definitions {
      name: "fromkeys"
      fully_qualified_name: "collections.ChainMap.fromkeys"
      return_annotation {
        pretty_printed_name: "collections.ChainMap[collections._T,collections._S]"
        args {
          pretty_printed_name: "collections._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._S"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.ChainMap"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[collections.ChainMap[collections._KT,collections._VT]]"
          kind: TYPE
          args {
            pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
            args {
              pretty_printed_name: "collections._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
            fully_qualified_name: "collections.ChainMap"
          }
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "typing.Iterable[collections._T]"
          args {
            pretty_printed_name: "collections._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__value"
        type_annotation {
          pretty_printed_name: "collections._S"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "classmethod"
      resolved_decorator_names: "overload"
      is_overload: true
      is_class_method: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__ior__"
    fullname: "collections.ChainMap.__ior__"
    definitions {
      name: "__ior__"
      fully_qualified_name: "collections.ChainMap.__ior__"
      return_annotation {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.ChainMap"
        }
      }
      parameters {
        name: "other"
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsKeysAndGetItem[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsKeysAndGetItem"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__ior__"
      fully_qualified_name: "collections.ChainMap.__ior__"
      return_annotation {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "collections.ChainMap[collections._KT,collections._VT]"
          args {
            pretty_printed_name: "collections._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "collections._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "collections.ChainMap"
        }
      }
      parameters {
        name: "other"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[collections._KT,collections._VT]]"
          args {
            pretty_printed_name: "Tuple[collections._KT,collections._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "collections._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "collections._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "maps"
    fully_qualified_name: "collections.ChainMap.maps"
    type_annotation {
      pretty_printed_name: "builtins.list[typing.MutableMapping[collections._KT,collections._VT]]"
      args {
        pretty_printed_name: "typing.MutableMapping[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__copy__"
    fully_qualified_name: "collections.ChainMap.__copy__"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "namedtuple"
  fully_qualified_name: "collections.namedtuple"
  return_annotation {
    pretty_printed_name: "Type[builtins.tuple[Any]]"
    kind: TYPE
    args {
      pretty_printed_name: "builtins.tuple[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.tuple"
    }
  }
  parameters {
    name: "typename"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,builtins.unicode]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.unicode"
        fully_qualified_name: "builtins.unicode"
      }
    }
  }
  parameters {
    name: "field_names"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,builtins.unicode,typing.Iterable[Union[builtins.str,builtins.unicode]]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.unicode"
        fully_qualified_name: "builtins.unicode"
      }
      args {
        pretty_printed_name: "typing.Iterable[Union[builtins.str,builtins.unicode]]"
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  parameters {
    name: "verbose"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "rename"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "namedtuple"
  fully_qualified_name: "collections.namedtuple"
  return_annotation {
    pretty_printed_name: "builtins.type"
    fully_qualified_name: "builtins.type"
  }
  parameters {
    name: "typename"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "field_names"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,typing.Iterable[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  parameters {
    name: "rename"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "module"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "defaults"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[typing.Iterable[Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
functions {
  name: "namedtuple"
  fully_qualified_name: "collections.namedtuple"
  return_annotation {
    pretty_printed_name: "Type[builtins.tuple[Any]]"
    kind: TYPE
    args {
      pretty_printed_name: "builtins.tuple[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.tuple"
    }
  }
  parameters {
    name: "typename"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "field_names"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,typing.Iterable[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  parameters {
    name: "rename"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "module"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "defaults"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[typing.Iterable[Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "Callable"
  fully_qualified_name: "typing.Callable"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
  valid_for: "27"
}
vars {
  name: "__all__"
  fully_qualified_name: "collections.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
