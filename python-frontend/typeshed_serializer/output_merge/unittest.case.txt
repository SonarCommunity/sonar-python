fully_qualified_name: "unittest.case"
classes {
  name: "SkipTest"
  fully_qualified_name: "unittest.case.SkipTest"
  super_classes: "builtins.Exception"
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.case.SkipTest.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.SkipTest"
        fully_qualified_name: "unittest.case.SkipTest"
      }
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "TestCase"
  fully_qualified_name: "unittest.case.TestCase"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.case.TestCase.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "methodName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "setUp"
    fully_qualified_name: "unittest.case.TestCase.setUp"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tearDown"
    fully_qualified_name: "unittest.case.TestCase.tearDown"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "setUpClass"
    fully_qualified_name: "unittest.case.TestCase.setUpClass"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case.TestCase]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tearDownClass"
    fully_qualified_name: "unittest.case.TestCase.tearDownClass"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case.TestCase]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "run"
    fully_qualified_name: "unittest.case.TestCase.run"
    return_annotation {
      pretty_printed_name: "Union[unittest.result.TestResult,None]"
      kind: UNION
      args {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "result"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[unittest.result.TestResult,None]"
        kind: UNION
        args {
          pretty_printed_name: "unittest.result.TestResult"
          fully_qualified_name: "unittest.result.TestResult"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__call__"
    fully_qualified_name: "unittest.case.TestCase.__call__"
    return_annotation {
      pretty_printed_name: "Union[unittest.result.TestResult,None]"
      kind: UNION
      args {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "result"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[unittest.result.TestResult,None]"
        kind: UNION
        args {
          pretty_printed_name: "unittest.result.TestResult"
          fully_qualified_name: "unittest.result.TestResult"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "skipTest"
    fully_qualified_name: "unittest.case.TestCase.skipTest"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "subTest"
    fully_qualified_name: "unittest.case.TestCase.subTest"
    return_annotation {
      pretty_printed_name: "typing.ContextManager[None]"
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.ContextManager"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "params"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "debug"
    fully_qualified_name: "unittest.case.TestCase.debug"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_addSkip"
    fully_qualified_name: "unittest.case.TestCase._addSkip"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "result"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "test_case"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertEqual"
    fully_qualified_name: "unittest.case.TestCase.assertEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertNotEqual"
    fully_qualified_name: "unittest.case.TestCase.assertNotEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertTrue"
    fully_qualified_name: "unittest.case.TestCase.assertTrue"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "expr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertFalse"
    fully_qualified_name: "unittest.case.TestCase.assertFalse"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "expr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertIs"
    fully_qualified_name: "unittest.case.TestCase.assertIs"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "expr1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "expr2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertIsNot"
    fully_qualified_name: "unittest.case.TestCase.assertIsNot"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "expr1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "expr2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertIsNone"
    fully_qualified_name: "unittest.case.TestCase.assertIsNone"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertIsNotNone"
    fully_qualified_name: "unittest.case.TestCase.assertIsNotNone"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertIn"
    fully_qualified_name: "unittest.case.TestCase.assertIn"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "member"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "container"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[Any],typing.Container[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "typing.Container[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Container"
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertNotIn"
    fully_qualified_name: "unittest.case.TestCase.assertNotIn"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "member"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "container"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[Any],typing.Container[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "typing.Container[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Container"
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertIsInstance"
    fully_qualified_name: "unittest.case.TestCase.assertIsInstance"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.type,builtins.tuple[builtins.type]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.type]"
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertNotIsInstance"
    fully_qualified_name: "unittest.case.TestCase.assertNotIsInstance"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.type,builtins.tuple[builtins.type]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.type]"
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertGreater"
    fully_qualified_name: "unittest.case.TestCase.assertGreater"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "a"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "b"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertGreaterEqual"
    fully_qualified_name: "unittest.case.TestCase.assertGreaterEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "a"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "b"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertLess"
    fully_qualified_name: "unittest.case.TestCase.assertLess"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "a"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "b"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertLessEqual"
    fully_qualified_name: "unittest.case.TestCase.assertLessEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "a"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "b"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertLogs"
    fully_qualified_name: "unittest.case.TestCase.assertLogs"
    return_annotation {
      pretty_printed_name: "unittest.case._AssertLogsContext"
      fully_qualified_name: "unittest.case._AssertLogsContext"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "logger"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,logging.Logger,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "logging.Logger"
          fully_qualified_name: "logging.Logger"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertRegex"
    fully_qualified_name: "unittest.case.TestCase.assertRegex"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "expected_regex"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]"
        kind: UNION
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Pattern"
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertNotRegex"
    fully_qualified_name: "unittest.case.TestCase.assertNotRegex"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "unexpected_regex"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]"
        kind: UNION
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Pattern"
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertCountEqual"
    fully_qualified_name: "unittest.case.TestCase.assertCountEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addTypeEqualityFunc"
    fully_qualified_name: "unittest.case.TestCase.addTypeEqualityFunc"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "typeobj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[Any]"
        kind: TYPE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
    }
    parameters {
      name: "function"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertMultiLineEqual"
    fully_qualified_name: "unittest.case.TestCase.assertMultiLineEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertSequenceEqual"
    fully_qualified_name: "unittest.case.TestCase.assertSequenceEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "seq1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "seq2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "seq_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[typing.Sequence[Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[typing.Sequence[Any]]"
          kind: TYPE
          args {
            pretty_printed_name: "typing.Sequence[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Sequence"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertListEqual"
    fully_qualified_name: "unittest.case.TestCase.assertListEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "list1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.list"
      }
    }
    parameters {
      name: "list2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.list"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertTupleEqual"
    fully_qualified_name: "unittest.case.TestCase.assertTupleEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "tuple1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.tuple[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
    parameters {
      name: "tuple2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.tuple[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertSetEqual"
    fully_qualified_name: "unittest.case.TestCase.assertSetEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "set1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[builtins.object]"
        args {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "set2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[builtins.object]"
        args {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertDictEqual"
    fully_qualified_name: "unittest.case.TestCase.assertDictEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "d1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,builtins.object]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "d2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,builtins.object]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "fail"
    fully_qualified_name: "unittest.case.TestCase.fail"
    return_annotation {
      pretty_printed_name: "NoReturn"
      kind: UNINHABITED
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "countTestCases"
    fully_qualified_name: "unittest.case.TestCase.countTestCases"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "defaultTestResult"
    fully_qualified_name: "unittest.case.TestCase.defaultTestResult"
    return_annotation {
      pretty_printed_name: "unittest.result.TestResult"
      fully_qualified_name: "unittest.result.TestResult"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "id"
    fully_qualified_name: "unittest.case.TestCase.id"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "shortDescription"
    fully_qualified_name: "unittest.case.TestCase.shortDescription"
    return_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addCleanup"
    fully_qualified_name: "unittest.case.TestCase.addCleanup"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "function"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "addCleanup"
    fully_qualified_name: "unittest.case.TestCase.addCleanup"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "__function"
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "doCleanups"
    fully_qualified_name: "unittest.case.TestCase.doCleanups"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_formatMessage"
    fully_qualified_name: "unittest.case.TestCase._formatMessage"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "standardMsg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_getAssertEqualityFunc"
    fully_qualified_name: "unittest.case.TestCase._getAssertEqualityFunc"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "failUnlessEqual"
    fully_qualified_name: "unittest.case.TestCase.failUnlessEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertEquals"
    fully_qualified_name: "unittest.case.TestCase.assertEquals"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "failIfEqual"
    fully_qualified_name: "unittest.case.TestCase.failIfEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertNotEquals"
    fully_qualified_name: "unittest.case.TestCase.assertNotEquals"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "failUnless"
    fully_qualified_name: "unittest.case.TestCase.failUnless"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "expr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assert_"
    fully_qualified_name: "unittest.case.TestCase.assert_"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "expr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "failIf"
    fully_qualified_name: "unittest.case.TestCase.failIf"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "expr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "failUnlessAlmostEqual"
    fully_qualified_name: "unittest.case.TestCase.failUnlessAlmostEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    parameters {
      name: "places"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertAlmostEquals"
    fully_qualified_name: "unittest.case.TestCase.assertAlmostEquals"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    parameters {
      name: "places"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "delta"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "failIfAlmostEqual"
    fully_qualified_name: "unittest.case.TestCase.failIfAlmostEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    parameters {
      name: "places"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertNotAlmostEquals"
    fully_qualified_name: "unittest.case.TestCase.assertNotAlmostEquals"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    parameters {
      name: "places"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "delta"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertRegexpMatches"
    fully_qualified_name: "unittest.case.TestCase.assertRegexpMatches"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "regex"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]"
        kind: UNION
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Pattern"
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertNotRegexpMatches"
    fully_qualified_name: "unittest.case.TestCase.assertNotRegexpMatches"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "regex"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]"
        kind: UNION
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Pattern"
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertDictContainsSubset"
    fully_qualified_name: "unittest.case.TestCase.assertDictContainsSubset"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "subset"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "dictionary"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addClassCleanup"
    fully_qualified_name: "unittest.case.TestCase.addClassCleanup"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case.TestCase]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    parameters {
      name: "__function"
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "doClassCleanups"
    fully_qualified_name: "unittest.case.TestCase.doClassCleanups"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case.TestCase]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertRaises"
    fullname: "unittest.case.TestCase.assertRaises"
    definitions {
      name: "assertRaises"
      fully_qualified_name: "unittest.case.TestCase.assertRaises"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.BaseException]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.BaseException]]"
            args {
              pretty_printed_name: "Type[builtins.BaseException]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertRaises"
      fully_qualified_name: "unittest.case.TestCase.assertRaises"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertRaisesContext[unittest.case._E]"
        args {
          pretty_printed_name: "unittest.case._E"
          kind: TYPE_VAR
        }
        fully_qualified_name: "unittest.case._AssertRaisesContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[unittest.case._E]"
            kind: TYPE
            args {
              pretty_printed_name: "unittest.case._E"
              kind: TYPE_VAR
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[unittest.case._E]]"
            args {
              pretty_printed_name: "Type[unittest.case._E]"
              kind: TYPE
              args {
                pretty_printed_name: "unittest.case._E"
                kind: TYPE_VAR
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertRaisesRegex"
    fullname: "unittest.case.TestCase.assertRaisesRegex"
    definitions {
      name: "assertRaisesRegex"
      fully_qualified_name: "unittest.case.TestCase.assertRaisesRegex"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.BaseException]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.BaseException]]"
            args {
              pretty_printed_name: "Type[builtins.BaseException]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "typing.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Pattern"
          }
          args {
            pretty_printed_name: "typing.Pattern[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "typing.Pattern"
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertRaisesRegex"
      fully_qualified_name: "unittest.case.TestCase.assertRaisesRegex"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertRaisesContext[unittest.case._E]"
        args {
          pretty_printed_name: "unittest.case._E"
          kind: TYPE_VAR
        }
        fully_qualified_name: "unittest.case._AssertRaisesContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[unittest.case._E]"
            kind: TYPE
            args {
              pretty_printed_name: "unittest.case._E"
              kind: TYPE_VAR
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[unittest.case._E]]"
            args {
              pretty_printed_name: "Type[unittest.case._E]"
              kind: TYPE
              args {
                pretty_printed_name: "unittest.case._E"
                kind: TYPE_VAR
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "typing.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Pattern"
          }
          args {
            pretty_printed_name: "typing.Pattern[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "typing.Pattern"
          }
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertWarns"
    fullname: "unittest.case.TestCase.assertWarns"
    definitions {
      name: "assertWarns"
      fully_qualified_name: "unittest.case.TestCase.assertWarns"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_warning"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.Warning]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.Warning"
              fully_qualified_name: "builtins.Warning"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.Warning]]"
            args {
              pretty_printed_name: "Type[builtins.Warning]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.Warning"
                fully_qualified_name: "builtins.Warning"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertWarns"
      fully_qualified_name: "unittest.case.TestCase.assertWarns"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertWarnsContext"
        fully_qualified_name: "unittest.case._AssertWarnsContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_warning"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.Warning]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.Warning"
              fully_qualified_name: "builtins.Warning"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.Warning]]"
            args {
              pretty_printed_name: "Type[builtins.Warning]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.Warning"
                fully_qualified_name: "builtins.Warning"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertWarnsRegex"
    fullname: "unittest.case.TestCase.assertWarnsRegex"
    definitions {
      name: "assertWarnsRegex"
      fully_qualified_name: "unittest.case.TestCase.assertWarnsRegex"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_warning"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.Warning]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.Warning"
              fully_qualified_name: "builtins.Warning"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.Warning]]"
            args {
              pretty_printed_name: "Type[builtins.Warning]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.Warning"
                fully_qualified_name: "builtins.Warning"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "typing.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Pattern"
          }
          args {
            pretty_printed_name: "typing.Pattern[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "typing.Pattern"
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertWarnsRegex"
      fully_qualified_name: "unittest.case.TestCase.assertWarnsRegex"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertWarnsContext"
        fully_qualified_name: "unittest.case._AssertWarnsContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_warning"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.Warning]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.Warning"
              fully_qualified_name: "builtins.Warning"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.Warning]]"
            args {
              pretty_printed_name: "Type[builtins.Warning]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.Warning"
                fully_qualified_name: "builtins.Warning"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "typing.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Pattern"
          }
          args {
            pretty_printed_name: "typing.Pattern[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "typing.Pattern"
          }
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertAlmostEqual"
    fullname: "unittest.case.TestCase.assertAlmostEqual"
    definitions {
      name: "assertAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "places"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "delta"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.float,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
      }
      parameters {
        name: "places"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "delta"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[datetime.timedelta,None]"
          kind: UNION
          args {
            pretty_printed_name: "datetime.timedelta"
            fully_qualified_name: "datetime.timedelta"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertNotAlmostEqual"
    fullname: "unittest.case.TestCase.assertNotAlmostEqual"
    definitions {
      name: "assertNotAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertNotAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "msg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertNotAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertNotAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "places"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertNotAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertNotAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "msg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "delta"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertNotAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertNotAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
      }
      parameters {
        name: "places"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "delta"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[datetime.timedelta,None]"
          kind: UNION
          args {
            pretty_printed_name: "datetime.timedelta"
            fully_qualified_name: "datetime.timedelta"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "failUnlessRaises"
    fullname: "unittest.case.TestCase.failUnlessRaises"
    definitions {
      name: "failUnlessRaises"
      fully_qualified_name: "unittest.case.TestCase.failUnlessRaises"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.BaseException]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.BaseException]]"
            args {
              pretty_printed_name: "Type[builtins.BaseException]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        has_default: true
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "failUnlessRaises"
      fully_qualified_name: "unittest.case.TestCase.failUnlessRaises"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertRaisesContext[unittest.case._E]"
        args {
          pretty_printed_name: "unittest.case._E"
          kind: TYPE_VAR
        }
        fully_qualified_name: "unittest.case._AssertRaisesContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[unittest.case._E]"
            kind: TYPE
            args {
              pretty_printed_name: "unittest.case._E"
              kind: TYPE_VAR
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[unittest.case._E]]"
            args {
              pretty_printed_name: "Type[unittest.case._E]"
              kind: TYPE
              args {
                pretty_printed_name: "unittest.case._E"
                kind: TYPE_VAR
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertRaisesRegexp"
    fullname: "unittest.case.TestCase.assertRaisesRegexp"
    definitions {
      name: "assertRaisesRegexp"
      fully_qualified_name: "unittest.case.TestCase.assertRaisesRegexp"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.BaseException]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.BaseException]]"
            args {
              pretty_printed_name: "Type[builtins.BaseException]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "typing.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Pattern"
          }
          args {
            pretty_printed_name: "typing.Pattern[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "typing.Pattern"
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertRaisesRegexp"
      fully_qualified_name: "unittest.case.TestCase.assertRaisesRegexp"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertRaisesContext[unittest.case._E]"
        args {
          pretty_printed_name: "unittest.case._E"
          kind: TYPE_VAR
        }
        fully_qualified_name: "unittest.case._AssertRaisesContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[unittest.case._E]"
            kind: TYPE
            args {
              pretty_printed_name: "unittest.case._E"
              kind: TYPE_VAR
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[unittest.case._E]]"
            args {
              pretty_printed_name: "Type[unittest.case._E]"
              kind: TYPE
              args {
                pretty_printed_name: "unittest.case._E"
                kind: TYPE_VAR
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "typing.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Pattern"
          }
          args {
            pretty_printed_name: "typing.Pattern[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "typing.Pattern"
          }
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "failureException"
    fully_qualified_name: "unittest.case.TestCase.failureException"
    type_annotation {
      pretty_printed_name: "Type[builtins.BaseException]"
      kind: TYPE
      args {
        pretty_printed_name: "builtins.BaseException"
        fully_qualified_name: "builtins.BaseException"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "longMessage"
    fully_qualified_name: "unittest.case.TestCase.longMessage"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "maxDiff"
    fully_qualified_name: "unittest.case.TestCase.maxDiff"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_testMethodName"
    fully_qualified_name: "unittest.case.TestCase._testMethodName"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_testMethodDoc"
    fully_qualified_name: "unittest.case.TestCase._testMethodDoc"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "FunctionTestCase"
  fully_qualified_name: "unittest.case.FunctionTestCase"
  super_classes: "unittest.case.TestCase"
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.case.FunctionTestCase.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.FunctionTestCase"
        fully_qualified_name: "unittest.case.FunctionTestCase"
      }
    }
    parameters {
      name: "testFunc"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "setUp"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "tearDown"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "description"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "runTest"
    fully_qualified_name: "unittest.case.FunctionTestCase.runTest"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.FunctionTestCase"
        fully_qualified_name: "unittest.case.FunctionTestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_AssertRaisesContext"
  fully_qualified_name: "unittest.case._AssertRaisesContext"
  super_classes: "builtins.object"
  methods {
    name: "__enter__"
    fully_qualified_name: "unittest.case._AssertRaisesContext.__enter__"
    return_annotation {
      pretty_printed_name: "unittest.case._AssertRaisesContext[unittest.case._E]"
      args {
        pretty_printed_name: "unittest.case._E"
        kind: TYPE_VAR
      }
      fully_qualified_name: "unittest.case._AssertRaisesContext"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "unittest.case._AssertRaisesContext[unittest.case._E]"
        args {
          pretty_printed_name: "unittest.case._E"
          kind: TYPE_VAR
        }
        fully_qualified_name: "unittest.case._AssertRaisesContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "unittest.case._AssertRaisesContext.__exit__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "unittest.case._AssertRaisesContext[unittest.case._E]"
        args {
          pretty_printed_name: "unittest.case._E"
          kind: TYPE_VAR
        }
        fully_qualified_name: "unittest.case._AssertRaisesContext"
      }
    }
    parameters {
      name: "exc_type"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc_val"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc_tb"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__class_getitem__"
    fully_qualified_name: "unittest.case._AssertRaisesContext.__class_getitem__"
    return_annotation {
      pretty_printed_name: "types.GenericAlias"
      fully_qualified_name: "types.GenericAlias"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case._AssertRaisesContext[unittest.case._E]]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case._AssertRaisesContext[unittest.case._E]"
          args {
            pretty_printed_name: "unittest.case._E"
            kind: TYPE_VAR
          }
          fully_qualified_name: "unittest.case._AssertRaisesContext"
        }
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    is_class_method: true
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "exception"
    fully_qualified_name: "unittest.case._AssertRaisesContext.exception"
    type_annotation {
      pretty_printed_name: "unittest.case._E"
      kind: TYPE_VAR
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_AssertWarnsContext"
  fully_qualified_name: "unittest.case._AssertWarnsContext"
  super_classes: "builtins.object"
  methods {
    name: "__enter__"
    fully_qualified_name: "unittest.case._AssertWarnsContext.__enter__"
    return_annotation {
      pretty_printed_name: "unittest.case._AssertWarnsContext"
      fully_qualified_name: "unittest.case._AssertWarnsContext"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "unittest.case._AssertWarnsContext"
        fully_qualified_name: "unittest.case._AssertWarnsContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "unittest.case._AssertWarnsContext.__exit__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "unittest.case._AssertWarnsContext"
        fully_qualified_name: "unittest.case._AssertWarnsContext"
      }
    }
    parameters {
      name: "exc_type"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc_val"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc_tb"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "warning"
    fully_qualified_name: "unittest.case._AssertWarnsContext.warning"
    type_annotation {
      pretty_printed_name: "warnings.WarningMessage"
      fully_qualified_name: "warnings.WarningMessage"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "filename"
    fully_qualified_name: "unittest.case._AssertWarnsContext.filename"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "lineno"
    fully_qualified_name: "unittest.case._AssertWarnsContext.lineno"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "warnings"
    fully_qualified_name: "unittest.case._AssertWarnsContext.warnings"
    type_annotation {
      pretty_printed_name: "builtins.list[warnings.WarningMessage]"
      args {
        pretty_printed_name: "warnings.WarningMessage"
        fully_qualified_name: "warnings.WarningMessage"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_AssertLogsContext"
  fully_qualified_name: "unittest.case._AssertLogsContext"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.case._AssertLogsContext.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case._AssertLogsContext"
        fully_qualified_name: "unittest.case._AssertLogsContext"
      }
    }
    parameters {
      name: "test_case"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "logger_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "unittest.case._AssertLogsContext.__enter__"
    return_annotation {
      pretty_printed_name: "unittest.case._AssertLogsContext"
      fully_qualified_name: "unittest.case._AssertLogsContext"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "unittest.case._AssertLogsContext"
        fully_qualified_name: "unittest.case._AssertLogsContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "unittest.case._AssertLogsContext.__exit__"
    return_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "unittest.case._AssertLogsContext"
        fully_qualified_name: "unittest.case._AssertLogsContext"
      }
    }
    parameters {
      name: "exc_type"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc_val"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc_tb"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "LOGGING_FORMAT"
    fully_qualified_name: "unittest.case._AssertLogsContext.LOGGING_FORMAT"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "records"
    fully_qualified_name: "unittest.case._AssertLogsContext.records"
    type_annotation {
      pretty_printed_name: "builtins.list[logging.LogRecord]"
      args {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "output"
    fully_qualified_name: "unittest.case._AssertLogsContext.output"
    type_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "expectedFailure"
  fully_qualified_name: "unittest.case.expectedFailure"
  return_annotation {
    pretty_printed_name: "unittest.case._FT"
    kind: TYPE_VAR
  }
  parameters {
    name: "test_item"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "unittest.case._FT"
      kind: TYPE_VAR
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "skip"
  fully_qualified_name: "unittest.case.skip"
  return_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  parameters {
    name: "reason"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "skipIf"
  fully_qualified_name: "unittest.case.skipIf"
  return_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  parameters {
    name: "condition"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
  }
  parameters {
    name: "reason"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "skipUnless"
  fully_qualified_name: "unittest.case.skipUnless"
  return_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  parameters {
    name: "condition"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
  }
  parameters {
    name: "reason"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "addModuleCleanup"
  fully_qualified_name: "unittest.case.addModuleCleanup"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "__function"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "doModuleCleanups"
  fully_qualified_name: "unittest.case.doModuleCleanups"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "unittest"
  fully_qualified_name: "unittest"
  is_imported_module: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
