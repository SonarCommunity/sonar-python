fully_qualified_name: "xmlrpc.client"
classes {
  name: "_SupportsTimeTuple"
  fully_qualified_name: "xmlrpc.client._SupportsTimeTuple"
  super_classes: "builtins.object"
  methods {
    name: "timetuple"
    fully_qualified_name: "xmlrpc.client._SupportsTimeTuple.timetuple"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client._SupportsTimeTuple"
        fully_qualified_name: "xmlrpc.client._SupportsTimeTuple"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Error"
  fully_qualified_name: "xmlrpc.client.Error"
  super_classes: "builtins.Exception"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "ProtocolError"
  fully_qualified_name: "xmlrpc.client.ProtocolError"
  super_classes: "xmlrpc.client.Error"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.ProtocolError.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.ProtocolError"
        fully_qualified_name: "xmlrpc.client.ProtocolError"
      }
    }
    parameters {
      name: "url"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "errcode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "errmsg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "headers"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "url"
    fully_qualified_name: "xmlrpc.client.ProtocolError.url"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "errcode"
    fully_qualified_name: "xmlrpc.client.ProtocolError.errcode"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "errmsg"
    fully_qualified_name: "xmlrpc.client.ProtocolError.errmsg"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "headers"
    fully_qualified_name: "xmlrpc.client.ProtocolError.headers"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "ResponseError"
  fully_qualified_name: "xmlrpc.client.ResponseError"
  super_classes: "xmlrpc.client.Error"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Fault"
  fully_qualified_name: "xmlrpc.client.Fault"
  super_classes: "xmlrpc.client.Error"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.Fault.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Fault"
        fully_qualified_name: "xmlrpc.client.Fault"
      }
    }
    parameters {
      name: "faultCode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "faultString"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "extra"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "faultCode"
    fully_qualified_name: "xmlrpc.client.Fault.faultCode"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "faultString"
    fully_qualified_name: "xmlrpc.client.Fault.faultString"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "DateTime"
  fully_qualified_name: "xmlrpc.client.DateTime"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.DateTime.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.DateTime"
        fully_qualified_name: "xmlrpc.client.DateTime"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str,datetime.datetime,Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int],builtins.tuple[builtins.int]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
        args {
          pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.int]"
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__lt__"
    fully_qualified_name: "xmlrpc.client.DateTime.__lt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xmlrpc.client.DateTime"
        fully_qualified_name: "xmlrpc.client.DateTime"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[xmlrpc.client.DateTime,datetime.datetime,builtins.str,xmlrpc.client._SupportsTimeTuple]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[xmlrpc.client.DateTime,datetime.datetime,builtins.str,xmlrpc.client._SupportsTimeTuple]"
          kind: UNION
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "xmlrpc.client._SupportsTimeTuple"
            fully_qualified_name: "xmlrpc.client._SupportsTimeTuple"
          }
        }
        fully_qualified_name: "xmlrpc.client._DateTimeComparable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__le__"
    fully_qualified_name: "xmlrpc.client.DateTime.__le__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xmlrpc.client.DateTime"
        fully_qualified_name: "xmlrpc.client.DateTime"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[xmlrpc.client.DateTime,datetime.datetime,builtins.str,xmlrpc.client._SupportsTimeTuple]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[xmlrpc.client.DateTime,datetime.datetime,builtins.str,xmlrpc.client._SupportsTimeTuple]"
          kind: UNION
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "xmlrpc.client._SupportsTimeTuple"
            fully_qualified_name: "xmlrpc.client._SupportsTimeTuple"
          }
        }
        fully_qualified_name: "xmlrpc.client._DateTimeComparable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__gt__"
    fully_qualified_name: "xmlrpc.client.DateTime.__gt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xmlrpc.client.DateTime"
        fully_qualified_name: "xmlrpc.client.DateTime"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[xmlrpc.client.DateTime,datetime.datetime,builtins.str,xmlrpc.client._SupportsTimeTuple]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[xmlrpc.client.DateTime,datetime.datetime,builtins.str,xmlrpc.client._SupportsTimeTuple]"
          kind: UNION
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "xmlrpc.client._SupportsTimeTuple"
            fully_qualified_name: "xmlrpc.client._SupportsTimeTuple"
          }
        }
        fully_qualified_name: "xmlrpc.client._DateTimeComparable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__ge__"
    fully_qualified_name: "xmlrpc.client.DateTime.__ge__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xmlrpc.client.DateTime"
        fully_qualified_name: "xmlrpc.client.DateTime"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[xmlrpc.client.DateTime,datetime.datetime,builtins.str,xmlrpc.client._SupportsTimeTuple]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[xmlrpc.client.DateTime,datetime.datetime,builtins.str,xmlrpc.client._SupportsTimeTuple]"
          kind: UNION
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "xmlrpc.client._SupportsTimeTuple"
            fully_qualified_name: "xmlrpc.client._SupportsTimeTuple"
          }
        }
        fully_qualified_name: "xmlrpc.client._DateTimeComparable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "xmlrpc.client.DateTime.__eq__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xmlrpc.client.DateTime"
        fully_qualified_name: "xmlrpc.client.DateTime"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[xmlrpc.client.DateTime,datetime.datetime,builtins.str,xmlrpc.client._SupportsTimeTuple]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[xmlrpc.client.DateTime,datetime.datetime,builtins.str,xmlrpc.client._SupportsTimeTuple]"
          kind: UNION
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "xmlrpc.client._SupportsTimeTuple"
            fully_qualified_name: "xmlrpc.client._SupportsTimeTuple"
          }
        }
        fully_qualified_name: "xmlrpc.client._DateTimeComparable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "make_comparable"
    fully_qualified_name: "xmlrpc.client.DateTime.make_comparable"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.DateTime"
        fully_qualified_name: "xmlrpc.client.DateTime"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[xmlrpc.client.DateTime,datetime.datetime,builtins.str,xmlrpc.client._SupportsTimeTuple]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[xmlrpc.client.DateTime,datetime.datetime,builtins.str,xmlrpc.client._SupportsTimeTuple]"
          kind: UNION
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "xmlrpc.client._SupportsTimeTuple"
            fully_qualified_name: "xmlrpc.client._SupportsTimeTuple"
          }
        }
        fully_qualified_name: "xmlrpc.client._DateTimeComparable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "timetuple"
    fully_qualified_name: "xmlrpc.client.DateTime.timetuple"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.DateTime"
        fully_qualified_name: "xmlrpc.client.DateTime"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "decode"
    fully_qualified_name: "xmlrpc.client.DateTime.decode"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.DateTime"
        fully_qualified_name: "xmlrpc.client.DateTime"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "encode"
    fully_qualified_name: "xmlrpc.client.DateTime.encode"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.DateTime"
        fully_qualified_name: "xmlrpc.client.DateTime"
      }
    }
    parameters {
      name: "out"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_typeshed.SupportsWrite[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "_typeshed.SupportsWrite"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "value"
    fully_qualified_name: "xmlrpc.client.DateTime.value"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Binary"
  fully_qualified_name: "xmlrpc.client.Binary"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.Binary.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Binary"
        fully_qualified_name: "xmlrpc.client.Binary"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bytes,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "decode"
    fully_qualified_name: "xmlrpc.client.Binary.decode"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Binary"
        fully_qualified_name: "xmlrpc.client.Binary"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "encode"
    fully_qualified_name: "xmlrpc.client.Binary.encode"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Binary"
        fully_qualified_name: "xmlrpc.client.Binary"
      }
    }
    parameters {
      name: "out"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_typeshed.SupportsWrite[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "_typeshed.SupportsWrite"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "data"
    fully_qualified_name: "xmlrpc.client.Binary.data"
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "ExpatParser"
  fully_qualified_name: "xmlrpc.client.ExpatParser"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.ExpatParser.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.ExpatParser"
        fully_qualified_name: "xmlrpc.client.ExpatParser"
      }
    }
    parameters {
      name: "target"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "feed"
    fully_qualified_name: "xmlrpc.client.ExpatParser.feed"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.ExpatParser"
        fully_qualified_name: "xmlrpc.client.ExpatParser"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "close"
    fully_qualified_name: "xmlrpc.client.ExpatParser.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.ExpatParser"
        fully_qualified_name: "xmlrpc.client.ExpatParser"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Marshaller"
  fully_qualified_name: "xmlrpc.client.Marshaller"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.Marshaller.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "allow_none"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dumps"
    fully_qualified_name: "xmlrpc.client.Marshaller.dumps"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[xmlrpc.client.Fault,typing.Iterable[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]]"
        kind: UNION
        args {
          pretty_printed_name: "xmlrpc.client.Fault"
          fully_qualified_name: "xmlrpc.client.Fault"
        }
        args {
          pretty_printed_name: "typing.Iterable[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
          args {
            pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
              kind: UNION
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "builtins.bool"
                fully_qualified_name: "builtins.bool"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "builtins.tuple[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.tuple"
              }
              args {
                pretty_printed_name: "builtins.list[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.list"
              }
              args {
                pretty_printed_name: "builtins.dict[Any,Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.dict"
              }
              args {
                pretty_printed_name: "datetime.datetime"
                fully_qualified_name: "datetime.datetime"
              }
              args {
                pretty_printed_name: "xmlrpc.client.DateTime"
                fully_qualified_name: "xmlrpc.client.DateTime"
              }
              args {
                pretty_printed_name: "xmlrpc.client.Binary"
                fully_qualified_name: "xmlrpc.client.Binary"
              }
            }
            fully_qualified_name: "xmlrpc.client._Marshallable"
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__dump"
    fully_qualified_name: "xmlrpc.client.Marshaller.__dump"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.Binary"
            fully_qualified_name: "xmlrpc.client.Binary"
          }
        }
        fully_qualified_name: "xmlrpc.client._Marshallable"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dump_nil"
    fully_qualified_name: "xmlrpc.client.Marshaller.dump_nil"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dump_bool"
    fully_qualified_name: "xmlrpc.client.Marshaller.dump_bool"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dump_long"
    fully_qualified_name: "xmlrpc.client.Marshaller.dump_long"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dump_int"
    fully_qualified_name: "xmlrpc.client.Marshaller.dump_int"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dump_double"
    fully_qualified_name: "xmlrpc.client.Marshaller.dump_double"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dump_unicode"
    fully_qualified_name: "xmlrpc.client.Marshaller.dump_unicode"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "escape"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dump_bytes"
    fully_qualified_name: "xmlrpc.client.Marshaller.dump_bytes"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dump_array"
    fully_qualified_name: "xmlrpc.client.Marshaller.dump_array"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
        args {
          pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
            kind: UNION
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "builtins.bool"
              fully_qualified_name: "builtins.bool"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "builtins.tuple[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.tuple"
            }
            args {
              pretty_printed_name: "builtins.list[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.list"
            }
            args {
              pretty_printed_name: "builtins.dict[Any,Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.dict"
            }
            args {
              pretty_printed_name: "datetime.datetime"
              fully_qualified_name: "datetime.datetime"
            }
            args {
              pretty_printed_name: "xmlrpc.client.DateTime"
              fully_qualified_name: "xmlrpc.client.DateTime"
            }
            args {
              pretty_printed_name: "xmlrpc.client.Binary"
              fully_qualified_name: "xmlrpc.client.Binary"
            }
          }
          fully_qualified_name: "xmlrpc.client._Marshallable"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dump_struct"
    fully_qualified_name: "xmlrpc.client.Marshaller.dump_struct"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
            kind: UNION
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "builtins.bool"
              fully_qualified_name: "builtins.bool"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "builtins.tuple[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.tuple"
            }
            args {
              pretty_printed_name: "builtins.list[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.list"
            }
            args {
              pretty_printed_name: "builtins.dict[Any,Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.dict"
            }
            args {
              pretty_printed_name: "datetime.datetime"
              fully_qualified_name: "datetime.datetime"
            }
            args {
              pretty_printed_name: "xmlrpc.client.DateTime"
              fully_qualified_name: "xmlrpc.client.DateTime"
            }
            args {
              pretty_printed_name: "xmlrpc.client.Binary"
              fully_qualified_name: "xmlrpc.client.Binary"
            }
          }
          fully_qualified_name: "xmlrpc.client._Marshallable"
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "escape"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dump_datetime"
    fully_qualified_name: "xmlrpc.client.Marshaller.dump_datetime"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.int,datetime.datetime,builtins.tuple[builtins.int],Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.int,datetime.datetime,builtins.tuple[builtins.int],Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
          }
        }
        fully_qualified_name: "xmlrpc.client._XMLDate"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dump_instance"
    fully_qualified_name: "xmlrpc.client.Marshaller.dump_instance"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Marshaller"
        fully_qualified_name: "xmlrpc.client.Marshaller"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "dispatch"
    fully_qualified_name: "xmlrpc.client.Marshaller.dispatch"
    type_annotation {
      pretty_printed_name: "builtins.dict[Type[Any],CallableType[builtins.function]]"
      args {
        pretty_printed_name: "Type[Any]"
        kind: TYPE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "memo"
    fully_qualified_name: "xmlrpc.client.Marshaller.memo"
    type_annotation {
      pretty_printed_name: "builtins.dict[Any,None]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "data"
    fully_qualified_name: "xmlrpc.client.Marshaller.data"
    type_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "encoding"
    fully_qualified_name: "xmlrpc.client.Marshaller.encoding"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "allow_none"
    fully_qualified_name: "xmlrpc.client.Marshaller.allow_none"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Unmarshaller"
  fully_qualified_name: "xmlrpc.client.Unmarshaller"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "use_datetime"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use_builtin_types"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "close"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.close"
    return_annotation {
      pretty_printed_name: "builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.Binary"
            fully_qualified_name: "xmlrpc.client.Binary"
          }
        }
        fully_qualified_name: "xmlrpc.client._Marshallable"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getmethodname"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.getmethodname"
    return_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "xml"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.xml"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "standalone"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "start"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.start"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "attrs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "data"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.data"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_dispatch"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_dispatch"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_nil"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_nil"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_boolean"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_boolean"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_int"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_int"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_double"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_double"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_bigdecimal"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_bigdecimal"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_string"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_string"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_array"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_array"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_struct"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_struct"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_base64"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_base64"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_dateTime"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_dateTime"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_value"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_value"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_params"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_params"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_fault"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_fault"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end_methodName"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.end_methodName"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "dispatch"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.dispatch"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,CallableType[builtins.function]]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_type"
    fully_qualified_name: "xmlrpc.client.Unmarshaller._type"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_stack"
    fully_qualified_name: "xmlrpc.client.Unmarshaller._stack"
    type_annotation {
      pretty_printed_name: "builtins.list[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.Binary"
            fully_qualified_name: "xmlrpc.client.Binary"
          }
        }
        fully_qualified_name: "xmlrpc.client._Marshallable"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_marks"
    fully_qualified_name: "xmlrpc.client.Unmarshaller._marks"
    type_annotation {
      pretty_printed_name: "builtins.list[builtins.int]"
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_data"
    fully_qualified_name: "xmlrpc.client.Unmarshaller._data"
    type_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_value"
    fully_qualified_name: "xmlrpc.client.Unmarshaller._value"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_methodname"
    fully_qualified_name: "xmlrpc.client.Unmarshaller._methodname"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_encoding"
    fully_qualified_name: "xmlrpc.client.Unmarshaller._encoding"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "append"
    fully_qualified_name: "xmlrpc.client.Unmarshaller.append"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_use_datetime"
    fully_qualified_name: "xmlrpc.client.Unmarshaller._use_datetime"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_use_builtin_types"
    fully_qualified_name: "xmlrpc.client.Unmarshaller._use_builtin_types"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_MultiCallMethod"
  fully_qualified_name: "xmlrpc.client._MultiCallMethod"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client._MultiCallMethod.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client._MultiCallMethod"
        fully_qualified_name: "xmlrpc.client._MultiCallMethod"
      }
    }
    parameters {
      name: "call_list"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[Tuple[builtins.str,TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]]"
        args {
          pretty_printed_name: "Tuple[builtins.str,TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
              kind: UNION
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "builtins.bool"
                fully_qualified_name: "builtins.bool"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "builtins.tuple[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.tuple"
              }
              args {
                pretty_printed_name: "builtins.list[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.list"
              }
              args {
                pretty_printed_name: "builtins.dict[Any,Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.dict"
              }
              args {
                pretty_printed_name: "datetime.datetime"
                fully_qualified_name: "datetime.datetime"
              }
              args {
                pretty_printed_name: "xmlrpc.client.DateTime"
                fully_qualified_name: "xmlrpc.client.DateTime"
              }
              args {
                pretty_printed_name: "xmlrpc.client.Binary"
                fully_qualified_name: "xmlrpc.client.Binary"
              }
            }
            fully_qualified_name: "xmlrpc.client._Marshallable"
          }
        }
        fully_qualified_name: "builtins.list"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getattr__"
    fully_qualified_name: "xmlrpc.client._MultiCallMethod.__getattr__"
    return_annotation {
      pretty_printed_name: "xmlrpc.client._MultiCallMethod"
      fully_qualified_name: "xmlrpc.client._MultiCallMethod"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xmlrpc.client._MultiCallMethod"
        fully_qualified_name: "xmlrpc.client._MultiCallMethod"
      }
    }
    parameters {
      name: "name"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__call__"
    fully_qualified_name: "xmlrpc.client._MultiCallMethod.__call__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client._MultiCallMethod"
        fully_qualified_name: "xmlrpc.client._MultiCallMethod"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.Binary"
            fully_qualified_name: "xmlrpc.client.Binary"
          }
        }
        fully_qualified_name: "xmlrpc.client._Marshallable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "__call_list"
    fully_qualified_name: "xmlrpc.client._MultiCallMethod.__call_list"
    type_annotation {
      pretty_printed_name: "builtins.list[Tuple[builtins.str,builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]]]"
      args {
        pretty_printed_name: "Tuple[builtins.str,builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
          args {
            pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
              kind: UNION
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "builtins.bool"
                fully_qualified_name: "builtins.bool"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "builtins.tuple[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.tuple"
              }
              args {
                pretty_printed_name: "builtins.list[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.list"
              }
              args {
                pretty_printed_name: "builtins.dict[Any,Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.dict"
              }
              args {
                pretty_printed_name: "datetime.datetime"
                fully_qualified_name: "datetime.datetime"
              }
              args {
                pretty_printed_name: "xmlrpc.client.DateTime"
                fully_qualified_name: "xmlrpc.client.DateTime"
              }
              args {
                pretty_printed_name: "xmlrpc.client.Binary"
                fully_qualified_name: "xmlrpc.client.Binary"
              }
            }
            fully_qualified_name: "xmlrpc.client._Marshallable"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__name"
    fully_qualified_name: "xmlrpc.client._MultiCallMethod.__name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "MultiCallIterator"
  fully_qualified_name: "xmlrpc.client.MultiCallIterator"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.MultiCallIterator.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.MultiCallIterator"
        fully_qualified_name: "xmlrpc.client.MultiCallIterator"
      }
    }
    parameters {
      name: "results"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[builtins.list[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]]"
        args {
          pretty_printed_name: "builtins.list[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
          args {
            pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
              kind: UNION
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "builtins.bool"
                fully_qualified_name: "builtins.bool"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "builtins.tuple[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.tuple"
              }
              args {
                pretty_printed_name: "builtins.list[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.list"
              }
              args {
                pretty_printed_name: "builtins.dict[Any,Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.dict"
              }
              args {
                pretty_printed_name: "datetime.datetime"
                fully_qualified_name: "datetime.datetime"
              }
              args {
                pretty_printed_name: "xmlrpc.client.DateTime"
                fully_qualified_name: "xmlrpc.client.DateTime"
              }
              args {
                pretty_printed_name: "xmlrpc.client.Binary"
                fully_qualified_name: "xmlrpc.client.Binary"
              }
            }
            fully_qualified_name: "xmlrpc.client._Marshallable"
          }
          fully_qualified_name: "builtins.list"
        }
        fully_qualified_name: "builtins.list"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "xmlrpc.client.MultiCallIterator.__getitem__"
    return_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.list[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.dict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
        args {
          pretty_printed_name: "xmlrpc.client.DateTime"
          fully_qualified_name: "xmlrpc.client.DateTime"
        }
        args {
          pretty_printed_name: "xmlrpc.client.Binary"
          fully_qualified_name: "xmlrpc.client.Binary"
        }
      }
      fully_qualified_name: "xmlrpc.client._Marshallable"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xmlrpc.client.MultiCallIterator"
        fully_qualified_name: "xmlrpc.client.MultiCallIterator"
      }
    }
    parameters {
      name: "i"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "results"
    fully_qualified_name: "xmlrpc.client.MultiCallIterator.results"
    type_annotation {
      pretty_printed_name: "builtins.list[builtins.list[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]]"
      args {
        pretty_printed_name: "builtins.list[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
        args {
          pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
            kind: UNION
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "builtins.bool"
              fully_qualified_name: "builtins.bool"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "builtins.tuple[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.tuple"
            }
            args {
              pretty_printed_name: "builtins.list[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.list"
            }
            args {
              pretty_printed_name: "builtins.dict[Any,Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.dict"
            }
            args {
              pretty_printed_name: "datetime.datetime"
              fully_qualified_name: "datetime.datetime"
            }
            args {
              pretty_printed_name: "xmlrpc.client.DateTime"
              fully_qualified_name: "xmlrpc.client.DateTime"
            }
            args {
              pretty_printed_name: "xmlrpc.client.Binary"
              fully_qualified_name: "xmlrpc.client.Binary"
            }
          }
          fully_qualified_name: "xmlrpc.client._Marshallable"
        }
        fully_qualified_name: "builtins.list"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "MultiCall"
  fully_qualified_name: "xmlrpc.client.MultiCall"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.MultiCall.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.MultiCall"
        fully_qualified_name: "xmlrpc.client.MultiCall"
      }
    }
    parameters {
      name: "server"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.ServerProxy"
        fully_qualified_name: "xmlrpc.client.ServerProxy"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getattr__"
    fully_qualified_name: "xmlrpc.client.MultiCall.__getattr__"
    return_annotation {
      pretty_printed_name: "xmlrpc.client._MultiCallMethod"
      fully_qualified_name: "xmlrpc.client._MultiCallMethod"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xmlrpc.client.MultiCall"
        fully_qualified_name: "xmlrpc.client.MultiCall"
      }
    }
    parameters {
      name: "item"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__call__"
    fully_qualified_name: "xmlrpc.client.MultiCall.__call__"
    return_annotation {
      pretty_printed_name: "xmlrpc.client.MultiCallIterator"
      fully_qualified_name: "xmlrpc.client.MultiCallIterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.MultiCall"
        fully_qualified_name: "xmlrpc.client.MultiCall"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "__server"
    fully_qualified_name: "xmlrpc.client.MultiCall.__server"
    type_annotation {
      pretty_printed_name: "xmlrpc.client.ServerProxy"
      fully_qualified_name: "xmlrpc.client.ServerProxy"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__call_list"
    fully_qualified_name: "xmlrpc.client.MultiCall.__call_list"
    type_annotation {
      pretty_printed_name: "builtins.list[Tuple[builtins.str,builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]]]"
      args {
        pretty_printed_name: "Tuple[builtins.str,builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
          args {
            pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
              kind: UNION
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "builtins.bool"
                fully_qualified_name: "builtins.bool"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "builtins.tuple[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.tuple"
              }
              args {
                pretty_printed_name: "builtins.list[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.list"
              }
              args {
                pretty_printed_name: "builtins.dict[Any,Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.dict"
              }
              args {
                pretty_printed_name: "datetime.datetime"
                fully_qualified_name: "datetime.datetime"
              }
              args {
                pretty_printed_name: "xmlrpc.client.DateTime"
                fully_qualified_name: "xmlrpc.client.DateTime"
              }
              args {
                pretty_printed_name: "xmlrpc.client.Binary"
                fully_qualified_name: "xmlrpc.client.Binary"
              }
            }
            fully_qualified_name: "xmlrpc.client._Marshallable"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "GzipDecodedResponse"
  fully_qualified_name: "xmlrpc.client.GzipDecodedResponse"
  super_classes: "gzip.GzipFile"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.GzipDecodedResponse.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.GzipDecodedResponse"
        fully_qualified_name: "xmlrpc.client.GzipDecodedResponse"
      }
    }
    parameters {
      name: "response"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_typeshed.SupportsRead[builtins.bytes]"
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        fully_qualified_name: "_typeshed.SupportsRead"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "close"
    fully_qualified_name: "xmlrpc.client.GzipDecodedResponse.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.GzipDecodedResponse"
        fully_qualified_name: "xmlrpc.client.GzipDecodedResponse"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "io"
    fully_qualified_name: "xmlrpc.client.GzipDecodedResponse.io"
    type_annotation {
      pretty_printed_name: "io.BytesIO"
      fully_qualified_name: "io.BytesIO"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_Method"
  fully_qualified_name: "xmlrpc.client._Method"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client._Method.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client._Method"
        fully_qualified_name: "xmlrpc.client._Method"
      }
    }
    parameters {
      name: "send"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getattr__"
    fully_qualified_name: "xmlrpc.client._Method.__getattr__"
    return_annotation {
      pretty_printed_name: "xmlrpc.client._Method"
      fully_qualified_name: "xmlrpc.client._Method"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xmlrpc.client._Method"
        fully_qualified_name: "xmlrpc.client._Method"
      }
    }
    parameters {
      name: "name"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__call__"
    fully_qualified_name: "xmlrpc.client._Method.__call__"
    return_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.list[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.dict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
        args {
          pretty_printed_name: "xmlrpc.client.DateTime"
          fully_qualified_name: "xmlrpc.client.DateTime"
        }
        args {
          pretty_printed_name: "xmlrpc.client.Binary"
          fully_qualified_name: "xmlrpc.client.Binary"
        }
      }
      fully_qualified_name: "xmlrpc.client._Marshallable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client._Method"
        fully_qualified_name: "xmlrpc.client._Method"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.Binary"
            fully_qualified_name: "xmlrpc.client.Binary"
          }
        }
        fully_qualified_name: "xmlrpc.client._Marshallable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "__send"
    fully_qualified_name: "xmlrpc.client._Method.__send"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__name"
    fully_qualified_name: "xmlrpc.client._Method.__name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Transport"
  fully_qualified_name: "xmlrpc.client.Transport"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.Transport.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
    }
    parameters {
      name: "use_datetime"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use_builtin_types"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.Transport.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
    }
    parameters {
      name: "use_datetime"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use_builtin_types"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "headers"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "typing.Iterable[Tuple[builtins.str,builtins.str]]"
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "typing.Iterable"
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "request"
    fully_qualified_name: "xmlrpc.client.Transport.request"
    return_annotation {
      pretty_printed_name: "builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.Binary"
            fully_qualified_name: "xmlrpc.client.Binary"
          }
        }
        fully_qualified_name: "xmlrpc.client._Marshallable"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
    }
    parameters {
      name: "host"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "builtins.dict"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "xmlrpc.client._HostType"
      }
    }
    parameters {
      name: "handler"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "request_body"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "verbose"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "single_request"
    fully_qualified_name: "xmlrpc.client.Transport.single_request"
    return_annotation {
      pretty_printed_name: "builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.Binary"
            fully_qualified_name: "xmlrpc.client.Binary"
          }
        }
        fully_qualified_name: "xmlrpc.client._Marshallable"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
    }
    parameters {
      name: "host"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "builtins.dict"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "xmlrpc.client._HostType"
      }
    }
    parameters {
      name: "handler"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "request_body"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "verbose"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getparser"
    fully_qualified_name: "xmlrpc.client.Transport.getparser"
    return_annotation {
      pretty_printed_name: "Tuple[xmlrpc.client.ExpatParser,xmlrpc.client.Unmarshaller]"
      kind: TUPLE
      args {
        pretty_printed_name: "xmlrpc.client.ExpatParser"
        fully_qualified_name: "xmlrpc.client.ExpatParser"
      }
      args {
        pretty_printed_name: "xmlrpc.client.Unmarshaller"
        fully_qualified_name: "xmlrpc.client.Unmarshaller"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_host_info"
    fully_qualified_name: "xmlrpc.client.Transport.get_host_info"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.list[Tuple[builtins.str,builtins.str]],builtins.dict[builtins.str,builtins.str]]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.list[Tuple[builtins.str,builtins.str]]"
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
    }
    parameters {
      name: "host"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "builtins.dict"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "xmlrpc.client._HostType"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "make_connection"
    fully_qualified_name: "xmlrpc.client.Transport.make_connection"
    return_annotation {
      pretty_printed_name: "http.client.HTTPConnection"
      fully_qualified_name: "http.client.HTTPConnection"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
    }
    parameters {
      name: "host"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "builtins.dict"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "xmlrpc.client._HostType"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "close"
    fully_qualified_name: "xmlrpc.client.Transport.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "send_request"
    fully_qualified_name: "xmlrpc.client.Transport.send_request"
    return_annotation {
      pretty_printed_name: "http.client.HTTPConnection"
      fully_qualified_name: "http.client.HTTPConnection"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
    }
    parameters {
      name: "host"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "builtins.dict"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "xmlrpc.client._HostType"
      }
    }
    parameters {
      name: "handler"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "request_body"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "debug"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "send_headers"
    fully_qualified_name: "xmlrpc.client.Transport.send_headers"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
    }
    parameters {
      name: "connection"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "http.client.HTTPConnection"
        fully_qualified_name: "http.client.HTTPConnection"
      }
    }
    parameters {
      name: "headers"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[Tuple[builtins.str,builtins.str]]"
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "builtins.list"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "send_content"
    fully_qualified_name: "xmlrpc.client.Transport.send_content"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
    }
    parameters {
      name: "connection"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "http.client.HTTPConnection"
        fully_qualified_name: "http.client.HTTPConnection"
      }
    }
    parameters {
      name: "request_body"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "parse_response"
    fully_qualified_name: "xmlrpc.client.Transport.parse_response"
    return_annotation {
      pretty_printed_name: "builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.Binary"
            fully_qualified_name: "xmlrpc.client.Binary"
          }
        }
        fully_qualified_name: "xmlrpc.client._Marshallable"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
    }
    parameters {
      name: "response"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "http.client.HTTPResponse"
        fully_qualified_name: "http.client.HTTPResponse"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "user_agent"
    fully_qualified_name: "xmlrpc.client.Transport.user_agent"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "accept_gzip_encoding"
    fully_qualified_name: "xmlrpc.client.Transport.accept_gzip_encoding"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "encode_threshold"
    fully_qualified_name: "xmlrpc.client.Transport.encode_threshold"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_use_datetime"
    fully_qualified_name: "xmlrpc.client.Transport._use_datetime"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_use_builtin_types"
    fully_qualified_name: "xmlrpc.client.Transport._use_builtin_types"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_connection"
    fully_qualified_name: "xmlrpc.client.Transport._connection"
    type_annotation {
      pretty_printed_name: "Tuple[Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str,None],Union[http.client.HTTPConnection,None]]"
      kind: TUPLE
      args {
        pretty_printed_name: "Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.dict"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      args {
        pretty_printed_name: "Union[http.client.HTTPConnection,None]"
        kind: UNION
        args {
          pretty_printed_name: "http.client.HTTPConnection"
          fully_qualified_name: "http.client.HTTPConnection"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_headers"
    fully_qualified_name: "xmlrpc.client.Transport._headers"
    type_annotation {
      pretty_printed_name: "builtins.list[Tuple[builtins.str,builtins.str]]"
      args {
        pretty_printed_name: "Tuple[builtins.str,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_extra_headers"
    fully_qualified_name: "xmlrpc.client.Transport._extra_headers"
    type_annotation {
      pretty_printed_name: "builtins.list[Tuple[builtins.str,builtins.str]]"
      args {
        pretty_printed_name: "Tuple[builtins.str,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "SafeTransport"
  fully_qualified_name: "xmlrpc.client.SafeTransport"
  super_classes: "xmlrpc.client.Transport"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.SafeTransport.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.SafeTransport"
        fully_qualified_name: "xmlrpc.client.SafeTransport"
      }
    }
    parameters {
      name: "use_datetime"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use_builtin_types"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "context"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.SafeTransport.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.SafeTransport"
        fully_qualified_name: "xmlrpc.client.SafeTransport"
      }
    }
    parameters {
      name: "use_datetime"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use_builtin_types"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "headers"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "typing.Iterable[Tuple[builtins.str,builtins.str]]"
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "typing.Iterable"
      }
      has_default: true
    }
    parameters {
      name: "context"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "make_connection"
    fully_qualified_name: "xmlrpc.client.SafeTransport.make_connection"
    return_annotation {
      pretty_printed_name: "http.client.HTTPSConnection"
      fully_qualified_name: "http.client.HTTPSConnection"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.SafeTransport"
        fully_qualified_name: "xmlrpc.client.SafeTransport"
      }
    }
    parameters {
      name: "host"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.dict[builtins.str,builtins.str]]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "builtins.dict"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "xmlrpc.client._HostType"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "ServerProxy"
  fully_qualified_name: "xmlrpc.client.ServerProxy"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.ServerProxy"
        fully_qualified_name: "xmlrpc.client.ServerProxy"
      }
    }
    parameters {
      name: "uri"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "transport"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[xmlrpc.client.Transport,None]"
        kind: UNION
        args {
          pretty_printed_name: "xmlrpc.client.Transport"
          fully_qualified_name: "xmlrpc.client.Transport"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "verbose"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "allow_none"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use_datetime"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use_builtin_types"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "context"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.ServerProxy"
        fully_qualified_name: "xmlrpc.client.ServerProxy"
      }
    }
    parameters {
      name: "uri"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "transport"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[xmlrpc.client.Transport,None]"
        kind: UNION
        args {
          pretty_printed_name: "xmlrpc.client.Transport"
          fully_qualified_name: "xmlrpc.client.Transport"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "verbose"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "allow_none"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use_datetime"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use_builtin_types"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "headers"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "typing.Iterable[Tuple[builtins.str,builtins.str]]"
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "typing.Iterable"
      }
      has_default: true
    }
    parameters {
      name: "context"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getattr__"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__getattr__"
    return_annotation {
      pretty_printed_name: "xmlrpc.client._Method"
      fully_qualified_name: "xmlrpc.client._Method"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xmlrpc.client.ServerProxy"
        fully_qualified_name: "xmlrpc.client.ServerProxy"
      }
    }
    parameters {
      name: "name"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__enter__"
    return_annotation {
      pretty_printed_name: "xmlrpc.client.ServerProxy"
      fully_qualified_name: "xmlrpc.client.ServerProxy"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xmlrpc.client.ServerProxy"
        fully_qualified_name: "xmlrpc.client.ServerProxy"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__exit__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xmlrpc.client.ServerProxy"
        fully_qualified_name: "xmlrpc.client.ServerProxy"
      }
    }
    parameters {
      name: "exc_type"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc_val"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc_tb"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__close"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.ServerProxy"
        fully_qualified_name: "xmlrpc.client.ServerProxy"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__request"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__request"
    return_annotation {
      pretty_printed_name: "builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.Binary"
            fully_qualified_name: "xmlrpc.client.Binary"
          }
        }
        fully_qualified_name: "xmlrpc.client._Marshallable"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.client.ServerProxy"
        fully_qualified_name: "xmlrpc.client.ServerProxy"
      }
    }
    parameters {
      name: "methodname"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "params"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
        args {
          pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
            kind: UNION
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "builtins.bool"
              fully_qualified_name: "builtins.bool"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "builtins.tuple[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.tuple"
            }
            args {
              pretty_printed_name: "builtins.list[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.list"
            }
            args {
              pretty_printed_name: "builtins.dict[Any,Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.dict"
            }
            args {
              pretty_printed_name: "datetime.datetime"
              fully_qualified_name: "datetime.datetime"
            }
            args {
              pretty_printed_name: "xmlrpc.client.DateTime"
              fully_qualified_name: "xmlrpc.client.DateTime"
            }
            args {
              pretty_printed_name: "xmlrpc.client.Binary"
              fully_qualified_name: "xmlrpc.client.Binary"
            }
          }
          fully_qualified_name: "xmlrpc.client._Marshallable"
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__call__"
    fullname: "xmlrpc.client.ServerProxy.__call__"
    definitions {
      name: "__call__"
      fully_qualified_name: "xmlrpc.client.ServerProxy.__call__"
      return_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xmlrpc.client.ServerProxy"
          fully_qualified_name: "xmlrpc.client.ServerProxy"
        }
      }
      parameters {
        name: "attr"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__call__"
      fully_qualified_name: "xmlrpc.client.ServerProxy.__call__"
      return_annotation {
        pretty_printed_name: "xmlrpc.client.Transport"
        fully_qualified_name: "xmlrpc.client.Transport"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xmlrpc.client.ServerProxy"
          fully_qualified_name: "xmlrpc.client.ServerProxy"
        }
      }
      parameters {
        name: "attr"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__call__"
      fully_qualified_name: "xmlrpc.client.ServerProxy.__call__"
      return_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],xmlrpc.client.Transport]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "xmlrpc.client.Transport"
          fully_qualified_name: "xmlrpc.client.Transport"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xmlrpc.client.ServerProxy"
          fully_qualified_name: "xmlrpc.client.ServerProxy"
        }
      }
      parameters {
        name: "attr"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "__host"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__host"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__handler"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__handler"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__transport"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__transport"
    type_annotation {
      pretty_printed_name: "xmlrpc.client.Transport"
      fully_qualified_name: "xmlrpc.client.Transport"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__encoding"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__encoding"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__verbose"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__verbose"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__allow_none"
    fully_qualified_name: "xmlrpc.client.ServerProxy.__allow_none"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "escape"
  fully_qualified_name: "xmlrpc.client.escape"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "_iso8601_format"
  fully_qualified_name: "xmlrpc.client._iso8601_format"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "value"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "datetime.datetime"
      fully_qualified_name: "datetime.datetime"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "_strftime"
  fully_qualified_name: "xmlrpc.client._strftime"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "value"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.int,datetime.datetime,builtins.tuple[builtins.int],Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.int,datetime.datetime,builtins.tuple[builtins.int],Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.int]"
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      fully_qualified_name: "xmlrpc.client._XMLDate"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "_datetime"
  fully_qualified_name: "xmlrpc.client._datetime"
  return_annotation {
    pretty_printed_name: "xmlrpc.client.DateTime"
    fully_qualified_name: "xmlrpc.client.DateTime"
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "_datetime_type"
  fully_qualified_name: "xmlrpc.client._datetime_type"
  return_annotation {
    pretty_printed_name: "datetime.datetime"
    fully_qualified_name: "datetime.datetime"
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "_binary"
  fully_qualified_name: "xmlrpc.client._binary"
  return_annotation {
    pretty_printed_name: "xmlrpc.client.Binary"
    fully_qualified_name: "xmlrpc.client.Binary"
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "getparser"
  fully_qualified_name: "xmlrpc.client.getparser"
  return_annotation {
    pretty_printed_name: "Tuple[xmlrpc.client.ExpatParser,xmlrpc.client.Unmarshaller]"
    kind: TUPLE
    args {
      pretty_printed_name: "xmlrpc.client.ExpatParser"
      fully_qualified_name: "xmlrpc.client.ExpatParser"
    }
    args {
      pretty_printed_name: "xmlrpc.client.Unmarshaller"
      fully_qualified_name: "xmlrpc.client.Unmarshaller"
    }
  }
  parameters {
    name: "use_datetime"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "use_builtin_types"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "dumps"
  fully_qualified_name: "xmlrpc.client.dumps"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "params"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[xmlrpc.client.Fault,builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]]"
      kind: UNION
      args {
        pretty_printed_name: "xmlrpc.client.Fault"
        fully_qualified_name: "xmlrpc.client.Fault"
      }
      args {
        pretty_printed_name: "builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
        args {
          pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
            kind: UNION
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "builtins.bool"
              fully_qualified_name: "builtins.bool"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "builtins.tuple[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.tuple"
            }
            args {
              pretty_printed_name: "builtins.list[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.list"
            }
            args {
              pretty_printed_name: "builtins.dict[Any,Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.dict"
            }
            args {
              pretty_printed_name: "datetime.datetime"
              fully_qualified_name: "datetime.datetime"
            }
            args {
              pretty_printed_name: "xmlrpc.client.DateTime"
              fully_qualified_name: "xmlrpc.client.DateTime"
            }
            args {
              pretty_printed_name: "xmlrpc.client.Binary"
              fully_qualified_name: "xmlrpc.client.Binary"
            }
          }
          fully_qualified_name: "xmlrpc.client._Marshallable"
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
  }
  parameters {
    name: "methodname"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "methodresponse"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "allow_none"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "loads"
  fully_qualified_name: "xmlrpc.client.loads"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]],Union[builtins.str,None]]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.tuple[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime,xmlrpc.client.DateTime,xmlrpc.client.Binary]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.DateTime"
            fully_qualified_name: "xmlrpc.client.DateTime"
          }
          args {
            pretty_printed_name: "xmlrpc.client.Binary"
            fully_qualified_name: "xmlrpc.client.Binary"
          }
        }
        fully_qualified_name: "xmlrpc.client._Marshallable"
      }
      fully_qualified_name: "builtins.tuple"
    }
    args {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "use_datetime"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "use_builtin_types"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "gzip_encode"
  fully_qualified_name: "xmlrpc.client.gzip_encode"
  return_annotation {
    pretty_printed_name: "builtins.bytes"
    fully_qualified_name: "builtins.bytes"
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "gzip_decode"
  fully_qualified_name: "xmlrpc.client.gzip_decode"
  return_annotation {
    pretty_printed_name: "builtins.bytes"
    fully_qualified_name: "builtins.bytes"
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  parameters {
    name: "max_decode"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "http"
  fully_qualified_name: "http"
  is_imported_module: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "MAXINT"
  fully_qualified_name: "xmlrpc.client.MAXINT"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "MININT"
  fully_qualified_name: "xmlrpc.client.MININT"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "PARSE_ERROR"
  fully_qualified_name: "xmlrpc.client.PARSE_ERROR"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "SERVER_ERROR"
  fully_qualified_name: "xmlrpc.client.SERVER_ERROR"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "APPLICATION_ERROR"
  fully_qualified_name: "xmlrpc.client.APPLICATION_ERROR"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "SYSTEM_ERROR"
  fully_qualified_name: "xmlrpc.client.SYSTEM_ERROR"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "TRANSPORT_ERROR"
  fully_qualified_name: "xmlrpc.client.TRANSPORT_ERROR"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "NOT_WELLFORMED_ERROR"
  fully_qualified_name: "xmlrpc.client.NOT_WELLFORMED_ERROR"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "UNSUPPORTED_ENCODING"
  fully_qualified_name: "xmlrpc.client.UNSUPPORTED_ENCODING"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "INVALID_ENCODING_CHAR"
  fully_qualified_name: "xmlrpc.client.INVALID_ENCODING_CHAR"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "INVALID_XMLRPC"
  fully_qualified_name: "xmlrpc.client.INVALID_XMLRPC"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "METHOD_NOT_FOUND"
  fully_qualified_name: "xmlrpc.client.METHOD_NOT_FOUND"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "INVALID_METHOD_PARAMS"
  fully_qualified_name: "xmlrpc.client.INVALID_METHOD_PARAMS"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "INTERNAL_ERROR"
  fully_qualified_name: "xmlrpc.client.INTERNAL_ERROR"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "WRAPPERS"
  fully_qualified_name: "xmlrpc.client.WRAPPERS"
  type_annotation {
    pretty_printed_name: "Tuple[Type[xmlrpc.client.DateTime],Type[xmlrpc.client.Binary]]"
    kind: TUPLE
    args {
      pretty_printed_name: "Type[xmlrpc.client.DateTime]"
      kind: TYPE
      args {
        pretty_printed_name: "xmlrpc.client.DateTime"
        fully_qualified_name: "xmlrpc.client.DateTime"
      }
    }
    args {
      pretty_printed_name: "Type[xmlrpc.client.Binary]"
      kind: TYPE
      args {
        pretty_printed_name: "xmlrpc.client.Binary"
        fully_qualified_name: "xmlrpc.client.Binary"
      }
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "FastMarshaller"
  fully_qualified_name: "xmlrpc.client.FastMarshaller"
  type_annotation {
    pretty_printed_name: "Union[xmlrpc.client.Marshaller,None]"
    kind: UNION
    args {
      pretty_printed_name: "xmlrpc.client.Marshaller"
      fully_qualified_name: "xmlrpc.client.Marshaller"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "FastParser"
  fully_qualified_name: "xmlrpc.client.FastParser"
  type_annotation {
    pretty_printed_name: "Union[xmlrpc.client.ExpatParser,None]"
    kind: UNION
    args {
      pretty_printed_name: "xmlrpc.client.ExpatParser"
      fully_qualified_name: "xmlrpc.client.ExpatParser"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "FastUnmarshaller"
  fully_qualified_name: "xmlrpc.client.FastUnmarshaller"
  type_annotation {
    pretty_printed_name: "Union[xmlrpc.client.Unmarshaller,None]"
    kind: UNION
    args {
      pretty_printed_name: "xmlrpc.client.Unmarshaller"
      fully_qualified_name: "xmlrpc.client.Unmarshaller"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
