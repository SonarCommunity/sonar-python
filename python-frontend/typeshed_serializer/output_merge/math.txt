fully_qualified_name: "math"
classes {
  name: "_SupportsCeil"
  fully_qualified_name: "math._SupportsCeil"
  super_classes: "builtins.object"
  methods {
    name: "__ceil__"
    fully_qualified_name: "math._SupportsCeil.__ceil__"
    return_annotation {
      pretty_printed_name: "math._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "math._SupportsCeil[math._T_co]"
        args {
          pretty_printed_name: "math._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "math._SupportsCeil"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_SupportsFloor"
  fully_qualified_name: "math._SupportsFloor"
  super_classes: "builtins.object"
  methods {
    name: "__floor__"
    fully_qualified_name: "math._SupportsFloor.__floor__"
    return_annotation {
      pretty_printed_name: "math._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "math._SupportsFloor[math._T_co]"
        args {
          pretty_printed_name: "math._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "math._SupportsFloor"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_SupportsTrunc"
  fully_qualified_name: "math._SupportsTrunc"
  super_classes: "builtins.object"
  methods {
    name: "__trunc__"
    fully_qualified_name: "math._SupportsTrunc.__trunc__"
    return_annotation {
      pretty_printed_name: "math._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "math._SupportsTrunc[math._T_co]"
        args {
          pretty_printed_name: "math._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "math._SupportsTrunc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "acos"
  fully_qualified_name: "math.acos"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "acosh"
  fully_qualified_name: "math.acosh"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "asin"
  fully_qualified_name: "math.asin"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "asinh"
  fully_qualified_name: "math.asinh"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "atan"
  fully_qualified_name: "math.atan"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "atan2"
  fully_qualified_name: "math.atan2"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__y"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "atanh"
  fully_qualified_name: "math.atanh"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "copysign"
  fully_qualified_name: "math.copysign"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  parameters {
    name: "__y"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "cos"
  fully_qualified_name: "math.cos"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "cosh"
  fully_qualified_name: "math.cosh"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "degrees"
  fully_qualified_name: "math.degrees"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "erf"
  fully_qualified_name: "math.erf"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "erfc"
  fully_qualified_name: "math.erfc"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "exp"
  fully_qualified_name: "math.exp"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "expm1"
  fully_qualified_name: "math.expm1"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "fabs"
  fully_qualified_name: "math.fabs"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "factorial"
  fully_qualified_name: "math.factorial"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
functions {
  name: "factorial"
  fully_qualified_name: "math.factorial"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "typing_extensions.SupportsIndex"
      fully_qualified_name: "typing_extensions.SupportsIndex"
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "fmod"
  fully_qualified_name: "math.fmod"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  parameters {
    name: "__y"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "frexp"
  fully_qualified_name: "math.frexp"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.float,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "fsum"
  fully_qualified_name: "math.fsum"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__seq"
    type_annotation {
      pretty_printed_name: "typing.Iterable[UnboundType[_SupportsFloatOrIndex]]"
      args {
        pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
        kind: UNBOUND
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "gamma"
  fully_qualified_name: "math.gamma"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "gcd"
  fully_qualified_name: "math.gcd"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "typing_extensions.SupportsIndex"
      fully_qualified_name: "typing_extensions.SupportsIndex"
    }
  }
  parameters {
    name: "__y"
    type_annotation {
      pretty_printed_name: "typing_extensions.SupportsIndex"
      fully_qualified_name: "typing_extensions.SupportsIndex"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
functions {
  name: "gcd"
  fully_qualified_name: "math.gcd"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "integers"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "typing_extensions.SupportsIndex"
      fully_qualified_name: "typing_extensions.SupportsIndex"
    }
  }
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "hypot"
  fully_qualified_name: "math.hypot"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  parameters {
    name: "__y"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
functions {
  name: "hypot"
  fully_qualified_name: "math.hypot"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "coordinates"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "isclose"
  fully_qualified_name: "math.isclose"
  return_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  parameters {
    name: "a"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  parameters {
    name: "b"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  parameters {
    name: "rel_tol"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
    has_default: true
  }
  parameters {
    name: "abs_tol"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "isinf"
  fully_qualified_name: "math.isinf"
  return_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "isfinite"
  fully_qualified_name: "math.isfinite"
  return_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "isnan"
  fully_qualified_name: "math.isnan"
  return_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "ldexp"
  fully_qualified_name: "math.ldexp"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  parameters {
    name: "__i"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "lgamma"
  fully_qualified_name: "math.lgamma"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "log"
  fully_qualified_name: "math.log"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "x"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  parameters {
    name: "base"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "log10"
  fully_qualified_name: "math.log10"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "log1p"
  fully_qualified_name: "math.log1p"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "log2"
  fully_qualified_name: "math.log2"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "modf"
  fully_qualified_name: "math.modf"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.float,builtins.float]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    args {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "pow"
  fully_qualified_name: "math.pow"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  parameters {
    name: "__y"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "radians"
  fully_qualified_name: "math.radians"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "remainder"
  fully_qualified_name: "math.remainder"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  parameters {
    name: "__y"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "sin"
  fully_qualified_name: "math.sin"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "sinh"
  fully_qualified_name: "math.sinh"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "sqrt"
  fully_qualified_name: "math.sqrt"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "tan"
  fully_qualified_name: "math.tan"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "tanh"
  fully_qualified_name: "math.tanh"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "trunc"
  fully_qualified_name: "math.trunc"
  return_annotation {
    pretty_printed_name: "math._T"
    kind: TYPE_VAR
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "math._SupportsTrunc[math._T]"
      args {
        pretty_printed_name: "math._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "math._SupportsTrunc"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "comb"
  fully_qualified_name: "math.comb"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "__n"
    type_annotation {
      pretty_printed_name: "typing_extensions.SupportsIndex"
      fully_qualified_name: "typing_extensions.SupportsIndex"
    }
  }
  parameters {
    name: "__k"
    type_annotation {
      pretty_printed_name: "typing_extensions.SupportsIndex"
      fully_qualified_name: "typing_extensions.SupportsIndex"
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "dist"
  fully_qualified_name: "math.dist"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__p"
    type_annotation {
      pretty_printed_name: "typing.Iterable[UnboundType[_SupportsFloatOrIndex]]"
      args {
        pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
        kind: UNBOUND
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "__q"
    type_annotation {
      pretty_printed_name: "typing.Iterable[UnboundType[_SupportsFloatOrIndex]]"
      args {
        pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
        kind: UNBOUND
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "isqrt"
  fully_qualified_name: "math.isqrt"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "__n"
    type_annotation {
      pretty_printed_name: "typing_extensions.SupportsIndex"
      fully_qualified_name: "typing_extensions.SupportsIndex"
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "perm"
  fully_qualified_name: "math.perm"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "__n"
    type_annotation {
      pretty_printed_name: "typing_extensions.SupportsIndex"
      fully_qualified_name: "typing_extensions.SupportsIndex"
    }
  }
  parameters {
    name: "__k"
    type_annotation {
      pretty_printed_name: "Union[typing_extensions.SupportsIndex,None]"
      kind: UNION
      args {
        pretty_printed_name: "typing_extensions.SupportsIndex"
        fully_qualified_name: "typing_extensions.SupportsIndex"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "lcm"
  fully_qualified_name: "math.lcm"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "integers"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "typing_extensions.SupportsIndex"
      fully_qualified_name: "typing_extensions.SupportsIndex"
    }
  }
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "nextafter"
  fully_qualified_name: "math.nextafter"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  parameters {
    name: "__y"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "ulp"
  fully_qualified_name: "math.ulp"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
      kind: UNBOUND
    }
  }
  valid_for: "39"
  valid_for: "310"
}
overloaded_functions {
  name: "ceil"
  fullname: "math.ceil"
  definitions {
    name: "ceil"
    fully_qualified_name: "math.ceil"
    return_annotation {
      pretty_printed_name: "math._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "__x"
      type_annotation {
        pretty_printed_name: "math._SupportsCeil[math._T]"
        args {
          pretty_printed_name: "math._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "math._SupportsCeil"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "ceil"
    fully_qualified_name: "math.ceil"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "__x"
      type_annotation {
        pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
        kind: UNBOUND
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
overloaded_functions {
  name: "floor"
  fullname: "math.floor"
  definitions {
    name: "floor"
    fully_qualified_name: "math.floor"
    return_annotation {
      pretty_printed_name: "math._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "__x"
      type_annotation {
        pretty_printed_name: "math._SupportsFloor[math._T]"
        args {
          pretty_printed_name: "math._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "math._SupportsFloor"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "floor"
    fully_qualified_name: "math.floor"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "__x"
      type_annotation {
        pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
        kind: UNBOUND
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
overloaded_functions {
  name: "prod"
  fullname: "math.prod"
  definitions {
    name: "prod"
    fully_qualified_name: "math.prod"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "__iterable"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing_extensions.SupportsIndex]"
        args {
          pretty_printed_name: "typing_extensions.SupportsIndex"
          fully_qualified_name: "typing_extensions.SupportsIndex"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "start"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "typing_extensions.SupportsIndex"
        fully_qualified_name: "typing_extensions.SupportsIndex"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "prod"
    fully_qualified_name: "math.prod"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "__iterable"
      type_annotation {
        pretty_printed_name: "typing.Iterable[UnboundType[_SupportsFloatOrIndex]]"
        args {
          pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
          kind: UNBOUND
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "start"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_SupportsFloatOrIndex]"
        kind: UNBOUND
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_SupportsFloatOrIndex"
  fully_qualified_name: "math._SupportsFloatOrIndex"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "e"
  fully_qualified_name: "math.e"
  type_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "pi"
  fully_qualified_name: "math.pi"
  type_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "inf"
  fully_qualified_name: "math.inf"
  type_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "nan"
  fully_qualified_name: "math.nan"
  type_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "tau"
  fully_qualified_name: "math.tau"
  type_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
