fully_qualified_name: "heapq"
functions {
  name: "cmp_lt"
  fully_qualified_name: "heapq.cmp_lt"
  return_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  parameters {
    name: "x"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "y"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "27"
}
functions {
  name: "heappush"
  fully_qualified_name: "heapq.heappush"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "heap"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.list[heapq._T]"
      args {
        pretty_printed_name: "heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
  }
  parameters {
    name: "item"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "heapq._T"
      kind: TYPE_VAR
    }
  }
  valid_for: "27"
}
functions {
  name: "heappop"
  fully_qualified_name: "heapq.heappop"
  return_annotation {
    pretty_printed_name: "heapq._T"
    kind: TYPE_VAR
  }
  parameters {
    name: "heap"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.list[heapq._T]"
      args {
        pretty_printed_name: "heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
  }
  valid_for: "27"
}
functions {
  name: "heappushpop"
  fully_qualified_name: "heapq.heappushpop"
  return_annotation {
    pretty_printed_name: "heapq._T"
    kind: TYPE_VAR
  }
  parameters {
    name: "heap"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.list[heapq._T]"
      args {
        pretty_printed_name: "heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
  }
  parameters {
    name: "item"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "heapq._T"
      kind: TYPE_VAR
    }
  }
  valid_for: "27"
}
functions {
  name: "heapify"
  fully_qualified_name: "heapq.heapify"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "x"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.list[heapq._T]"
      args {
        pretty_printed_name: "heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
  }
  valid_for: "27"
}
functions {
  name: "heapreplace"
  fully_qualified_name: "heapq.heapreplace"
  return_annotation {
    pretty_printed_name: "heapq._T"
    kind: TYPE_VAR
  }
  parameters {
    name: "heap"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.list[heapq._T]"
      args {
        pretty_printed_name: "heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
  }
  parameters {
    name: "item"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "heapq._T"
      kind: TYPE_VAR
    }
  }
  valid_for: "27"
}
functions {
  name: "merge"
  fully_qualified_name: "heapq.merge"
  return_annotation {
    pretty_printed_name: "typing.Iterable[heapq._T]"
    args {
      pretty_printed_name: "heapq._T"
      kind: TYPE_VAR
    }
    fully_qualified_name: "typing.Iterable"
  }
  parameters {
    name: "iterables"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "typing.Iterable[heapq._T]"
      args {
        pretty_printed_name: "heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "27"
}
functions {
  name: "merge"
  fully_qualified_name: "heapq.merge"
  return_annotation {
    pretty_printed_name: "typing.Iterable[heapq._S]"
    args {
      pretty_printed_name: "heapq._S"
      kind: TYPE_VAR
    }
    fully_qualified_name: "typing.Iterable"
  }
  parameters {
    name: "iterables"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "typing.Iterable[heapq._S]"
      args {
        pretty_printed_name: "heapq._S"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "key"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "reverse"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "nlargest"
  fully_qualified_name: "heapq.nlargest"
  return_annotation {
    pretty_printed_name: "builtins.list[heapq._T]"
    args {
      pretty_printed_name: "heapq._T"
      kind: TYPE_VAR
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "n"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[heapq._T]"
      args {
        pretty_printed_name: "heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "key"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "nlargest"
  fully_qualified_name: "heapq.nlargest"
  return_annotation {
    pretty_printed_name: "builtins.list[heapq._S]"
    args {
      pretty_printed_name: "heapq._S"
      kind: TYPE_VAR
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "n"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[heapq._S]"
      args {
        pretty_printed_name: "heapq._S"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "key"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "nsmallest"
  fully_qualified_name: "heapq.nsmallest"
  return_annotation {
    pretty_printed_name: "builtins.list[heapq._T]"
    args {
      pretty_printed_name: "heapq._T"
      kind: TYPE_VAR
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "n"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[heapq._T]"
      args {
        pretty_printed_name: "heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "key"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "nsmallest"
  fully_qualified_name: "heapq.nsmallest"
  return_annotation {
    pretty_printed_name: "builtins.list[heapq._S]"
    args {
      pretty_printed_name: "heapq._S"
      kind: TYPE_VAR
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "n"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[heapq._S]"
      args {
        pretty_printed_name: "heapq._S"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "key"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "_heapify_max"
  fully_qualified_name: "heapq._heapify_max"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "builtins.list[heapq._T]"
      args {
        pretty_printed_name: "heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
  }
  valid_for: "27"
}
functions {
  name: "_heapify_max"
  fully_qualified_name: "heapq._heapify_max"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "__heap"
    type_annotation {
      pretty_printed_name: "builtins.list[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.list"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "heapify"
  fully_qualified_name: "_heapq.heapify"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "__heap"
    type_annotation {
      pretty_printed_name: "builtins.list[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.list"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "heappop"
  fully_qualified_name: "_heapq.heappop"
  return_annotation {
    pretty_printed_name: "_heapq._T"
    kind: TYPE_VAR
  }
  parameters {
    name: "__heap"
    type_annotation {
      pretty_printed_name: "builtins.list[_heapq._T]"
      args {
        pretty_printed_name: "_heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "heappush"
  fully_qualified_name: "_heapq.heappush"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "__heap"
    type_annotation {
      pretty_printed_name: "builtins.list[_heapq._T]"
      args {
        pretty_printed_name: "_heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
  }
  parameters {
    name: "__item"
    type_annotation {
      pretty_printed_name: "_heapq._T"
      kind: TYPE_VAR
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "heappushpop"
  fully_qualified_name: "_heapq.heappushpop"
  return_annotation {
    pretty_printed_name: "_heapq._T"
    kind: TYPE_VAR
  }
  parameters {
    name: "__heap"
    type_annotation {
      pretty_printed_name: "builtins.list[_heapq._T]"
      args {
        pretty_printed_name: "_heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
  }
  parameters {
    name: "__item"
    type_annotation {
      pretty_printed_name: "_heapq._T"
      kind: TYPE_VAR
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "heapreplace"
  fully_qualified_name: "_heapq.heapreplace"
  return_annotation {
    pretty_printed_name: "_heapq._T"
    kind: TYPE_VAR
  }
  parameters {
    name: "__heap"
    type_annotation {
      pretty_printed_name: "builtins.list[_heapq._T]"
      args {
        pretty_printed_name: "_heapq._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
  }
  parameters {
    name: "__item"
    type_annotation {
      pretty_printed_name: "_heapq._T"
      kind: TYPE_VAR
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "__all__"
  fully_qualified_name: "heapq.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "__about__"
  fully_qualified_name: "heapq.__about__"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
