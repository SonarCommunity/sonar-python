fully_qualified_name: "multiprocessing.context"
classes {
  name: "ProcessError"
  fully_qualified_name: "multiprocessing.context.ProcessError"
  super_classes: "builtins.Exception"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "BufferTooShort"
  fully_qualified_name: "multiprocessing.context.BufferTooShort"
  super_classes: "multiprocessing.context.ProcessError"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "TimeoutError"
  fully_qualified_name: "multiprocessing.context.TimeoutError"
  super_classes: "multiprocessing.context.ProcessError"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "AuthenticationError"
  fully_qualified_name: "multiprocessing.context.AuthenticationError"
  super_classes: "multiprocessing.context.ProcessError"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "BaseContext"
  fully_qualified_name: "multiprocessing.context.BaseContext"
  super_classes: "builtins.object"
  methods {
    name: "current_process"
    fully_qualified_name: "multiprocessing.context.BaseContext.current_process"
    return_annotation {
      pretty_printed_name: "multiprocessing.process.BaseProcess"
      fully_qualified_name: "multiprocessing.process.BaseProcess"
    }
    has_decorators: true
    resolved_decorator_names: "staticmethod"
    is_static: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "active_children"
    fully_qualified_name: "multiprocessing.context.BaseContext.active_children"
    return_annotation {
      pretty_printed_name: "builtins.list[multiprocessing.process.BaseProcess]"
      args {
        pretty_printed_name: "multiprocessing.process.BaseProcess"
        fully_qualified_name: "multiprocessing.process.BaseProcess"
      }
      fully_qualified_name: "builtins.list"
    }
    has_decorators: true
    resolved_decorator_names: "staticmethod"
    is_static: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "cpu_count"
    fully_qualified_name: "multiprocessing.context.BaseContext.cpu_count"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "Manager"
    fully_qualified_name: "multiprocessing.context.BaseContext.Manager"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "Pipe"
    fully_qualified_name: "multiprocessing.context.BaseContext.Pipe"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "duplex"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "Barrier"
    fully_qualified_name: "multiprocessing.context.BaseContext.Barrier"
    return_annotation {
      pretty_printed_name: "multiprocessing.synchronize.Barrier"
      fully_qualified_name: "multiprocessing.synchronize.Barrier"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "parties"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "action"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "timeout"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.float,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "BoundedSemaphore"
    fully_qualified_name: "multiprocessing.context.BaseContext.BoundedSemaphore"
    return_annotation {
      pretty_printed_name: "multiprocessing.synchronize.BoundedSemaphore"
      fully_qualified_name: "multiprocessing.synchronize.BoundedSemaphore"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "Condition"
    fully_qualified_name: "multiprocessing.context.BaseContext.Condition"
    return_annotation {
      pretty_printed_name: "multiprocessing.synchronize.Condition"
      fully_qualified_name: "multiprocessing.synchronize.Condition"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock,None]"
        kind: UNION
        args {
          pretty_printed_name: "multiprocessing.synchronize.Lock"
          fully_qualified_name: "multiprocessing.synchronize.Lock"
        }
        args {
          pretty_printed_name: "multiprocessing.synchronize.RLock"
          fully_qualified_name: "multiprocessing.synchronize.RLock"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "Event"
    fully_qualified_name: "multiprocessing.context.BaseContext.Event"
    return_annotation {
      pretty_printed_name: "multiprocessing.synchronize.Event"
      fully_qualified_name: "multiprocessing.synchronize.Event"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "Lock"
    fully_qualified_name: "multiprocessing.context.BaseContext.Lock"
    return_annotation {
      pretty_printed_name: "multiprocessing.synchronize.Lock"
      fully_qualified_name: "multiprocessing.synchronize.Lock"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "RLock"
    fully_qualified_name: "multiprocessing.context.BaseContext.RLock"
    return_annotation {
      pretty_printed_name: "multiprocessing.synchronize.RLock"
      fully_qualified_name: "multiprocessing.synchronize.RLock"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "Semaphore"
    fully_qualified_name: "multiprocessing.context.BaseContext.Semaphore"
    return_annotation {
      pretty_printed_name: "multiprocessing.synchronize.Semaphore"
      fully_qualified_name: "multiprocessing.synchronize.Semaphore"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "Queue"
    fully_qualified_name: "multiprocessing.context.BaseContext.Queue"
    return_annotation {
      pretty_printed_name: "multiprocessing.queues.Queue[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "multiprocessing.queues.Queue"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "maxsize"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "JoinableQueue"
    fully_qualified_name: "multiprocessing.context.BaseContext.JoinableQueue"
    return_annotation {
      pretty_printed_name: "multiprocessing.queues.JoinableQueue[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "multiprocessing.queues.JoinableQueue"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "maxsize"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "SimpleQueue"
    fully_qualified_name: "multiprocessing.context.BaseContext.SimpleQueue"
    return_annotation {
      pretty_printed_name: "multiprocessing.queues.SimpleQueue[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "multiprocessing.queues.SimpleQueue"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "Pool"
    fully_qualified_name: "multiprocessing.context.BaseContext.Pool"
    return_annotation {
      pretty_printed_name: "multiprocessing.pool.Pool"
      fully_qualified_name: "multiprocessing.pool.Pool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "processes"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "initializer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "initargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
      has_default: true
    }
    parameters {
      name: "maxtasksperchild"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "freeze_support"
    fully_qualified_name: "multiprocessing.context.BaseContext.freeze_support"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_logger"
    fully_qualified_name: "multiprocessing.context.BaseContext.get_logger"
    return_annotation {
      pretty_printed_name: "logging.Logger"
      fully_qualified_name: "logging.Logger"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "log_to_stderr"
    fully_qualified_name: "multiprocessing.context.BaseContext.log_to_stderr"
    return_annotation {
      pretty_printed_name: "logging.Logger"
      fully_qualified_name: "logging.Logger"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "allow_connection_pickling"
    fully_qualified_name: "multiprocessing.context.BaseContext.allow_connection_pickling"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_executable"
    fully_qualified_name: "multiprocessing.context.BaseContext.set_executable"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "executable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_forkserver_preload"
    fully_qualified_name: "multiprocessing.context.BaseContext.set_forkserver_preload"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "module_names"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_start_method"
    fully_qualified_name: "multiprocessing.context.BaseContext.get_start_method"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "allow_none"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_start_method"
    fully_qualified_name: "multiprocessing.context.BaseContext.set_start_method"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "force"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_check_available"
    fully_qualified_name: "multiprocessing.context.BaseContext._check_available"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "parent_process"
    fully_qualified_name: "multiprocessing.context.BaseContext.parent_process"
    return_annotation {
      pretty_printed_name: "Union[multiprocessing.process.BaseProcess,None]"
      kind: UNION
      args {
        pretty_printed_name: "multiprocessing.process.BaseProcess"
        fully_qualified_name: "multiprocessing.process.BaseProcess"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_decorators: true
    resolved_decorator_names: "staticmethod"
    is_static: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "RawValue"
    fullname: "multiprocessing.context.BaseContext.RawValue"
    definitions {
      name: "RawValue"
      fully_qualified_name: "multiprocessing.context.BaseContext.RawValue"
      return_annotation {
        pretty_printed_name: "multiprocessing.context._CT"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "typecode_or_type"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[multiprocessing.context._CT]"
          kind: TYPE
          args {
            pretty_printed_name: "multiprocessing.context._CT"
            kind: TYPE_VAR
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "RawValue"
      fully_qualified_name: "multiprocessing.context.BaseContext.RawValue"
      return_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "typecode_or_type"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "RawArray"
    fullname: "multiprocessing.context.BaseContext.RawArray"
    definitions {
      name: "RawArray"
      fully_qualified_name: "multiprocessing.context.BaseContext.RawArray"
      return_annotation {
        pretty_printed_name: "ctypes.Array[multiprocessing.context._CT]"
        args {
          pretty_printed_name: "multiprocessing.context._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "ctypes.Array"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "typecode_or_type"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[multiprocessing.context._CT]"
          kind: TYPE
          args {
            pretty_printed_name: "multiprocessing.context._CT"
            kind: TYPE_VAR
          }
        }
      }
      parameters {
        name: "size_or_initializer"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,typing.Sequence[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.Sequence[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Sequence"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "RawArray"
      fully_qualified_name: "multiprocessing.context.BaseContext.RawArray"
      return_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "typecode_or_type"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "size_or_initializer"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,typing.Sequence[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.Sequence[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Sequence"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "Value"
    fullname: "multiprocessing.context.BaseContext.Value"
    definitions {
      name: "Value"
      fully_qualified_name: "multiprocessing.context.BaseContext.Value"
      return_annotation {
        pretty_printed_name: "multiprocessing.context._CT"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "typecode_or_type"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[multiprocessing.context._CT]"
          kind: TYPE
          args {
            pretty_printed_name: "multiprocessing.context._CT"
            kind: TYPE_VAR
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "lock"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Literal[builtins.bool]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "Value"
      fully_qualified_name: "multiprocessing.context.BaseContext.Value"
      return_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedBase[multiprocessing.context._CT]"
        args {
          pretty_printed_name: "multiprocessing.context._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "typecode_or_type"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[multiprocessing.context._CT]"
          kind: TYPE
          args {
            pretty_printed_name: "multiprocessing.context._CT"
            kind: TYPE_VAR
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "lock"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.bool],TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.bool]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.bool"
              fully_qualified_name: "builtins.bool"
            }
          }
          args {
            pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
              kind: UNION
              args {
                pretty_printed_name: "multiprocessing.synchronize.Lock"
                fully_qualified_name: "multiprocessing.synchronize.Lock"
              }
              args {
                pretty_printed_name: "multiprocessing.synchronize.RLock"
                fully_qualified_name: "multiprocessing.synchronize.RLock"
              }
            }
            fully_qualified_name: "multiprocessing.context._LockLike"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "Value"
      fully_qualified_name: "multiprocessing.context.BaseContext.Value"
      return_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedBase[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "typecode_or_type"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "lock"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.bool],TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.bool]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.bool"
              fully_qualified_name: "builtins.bool"
            }
          }
          args {
            pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
              kind: UNION
              args {
                pretty_printed_name: "multiprocessing.synchronize.Lock"
                fully_qualified_name: "multiprocessing.synchronize.Lock"
              }
              args {
                pretty_printed_name: "multiprocessing.synchronize.RLock"
                fully_qualified_name: "multiprocessing.synchronize.RLock"
              }
            }
            fully_qualified_name: "multiprocessing.context._LockLike"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "Value"
      fully_qualified_name: "multiprocessing.context.BaseContext.Value"
      return_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "typecode_or_type"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,Type[ctypes._CData]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Type[ctypes._CData]"
            kind: TYPE
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "lock"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.bool,TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
              kind: UNION
              args {
                pretty_printed_name: "multiprocessing.synchronize.Lock"
                fully_qualified_name: "multiprocessing.synchronize.Lock"
              }
              args {
                pretty_printed_name: "multiprocessing.synchronize.RLock"
                fully_qualified_name: "multiprocessing.synchronize.RLock"
              }
            }
            fully_qualified_name: "multiprocessing.context._LockLike"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "Array"
    fullname: "multiprocessing.context.BaseContext.Array"
    definitions {
      name: "Array"
      fully_qualified_name: "multiprocessing.context.BaseContext.Array"
      return_annotation {
        pretty_printed_name: "multiprocessing.context._CT"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "typecode_or_type"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[multiprocessing.context._CT]"
          kind: TYPE
          args {
            pretty_printed_name: "multiprocessing.context._CT"
            kind: TYPE_VAR
          }
        }
      }
      parameters {
        name: "size_or_initializer"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,typing.Sequence[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.Sequence[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Sequence"
          }
        }
      }
      parameters {
        name: "lock"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Literal[builtins.bool]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "Array"
      fully_qualified_name: "multiprocessing.context.BaseContext.Array"
      return_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedArray[multiprocessing.context._CT]"
        args {
          pretty_printed_name: "multiprocessing.context._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "typecode_or_type"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[multiprocessing.context._CT]"
          kind: TYPE
          args {
            pretty_printed_name: "multiprocessing.context._CT"
            kind: TYPE_VAR
          }
        }
      }
      parameters {
        name: "size_or_initializer"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,typing.Sequence[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.Sequence[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Sequence"
          }
        }
      }
      parameters {
        name: "lock"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.bool],TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.bool]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.bool"
              fully_qualified_name: "builtins.bool"
            }
          }
          args {
            pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
              kind: UNION
              args {
                pretty_printed_name: "multiprocessing.synchronize.Lock"
                fully_qualified_name: "multiprocessing.synchronize.Lock"
              }
              args {
                pretty_printed_name: "multiprocessing.synchronize.RLock"
                fully_qualified_name: "multiprocessing.synchronize.RLock"
              }
            }
            fully_qualified_name: "multiprocessing.context._LockLike"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "Array"
      fully_qualified_name: "multiprocessing.context.BaseContext.Array"
      return_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedArray[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "typecode_or_type"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "size_or_initializer"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,typing.Sequence[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.Sequence[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Sequence"
          }
        }
      }
      parameters {
        name: "lock"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.bool],TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.bool]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.bool"
              fully_qualified_name: "builtins.bool"
            }
          }
          args {
            pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
              kind: UNION
              args {
                pretty_printed_name: "multiprocessing.synchronize.Lock"
                fully_qualified_name: "multiprocessing.synchronize.Lock"
              }
              args {
                pretty_printed_name: "multiprocessing.synchronize.RLock"
                fully_qualified_name: "multiprocessing.synchronize.RLock"
              }
            }
            fully_qualified_name: "multiprocessing.context._LockLike"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "Array"
      fully_qualified_name: "multiprocessing.context.BaseContext.Array"
      return_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "typecode_or_type"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,Type[ctypes._CData]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Type[ctypes._CData]"
            kind: TYPE
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
          }
        }
      }
      parameters {
        name: "size_or_initializer"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,typing.Sequence[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.Sequence[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Sequence"
          }
        }
      }
      parameters {
        name: "lock"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.bool,TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
              kind: UNION
              args {
                pretty_printed_name: "multiprocessing.synchronize.Lock"
                fully_qualified_name: "multiprocessing.synchronize.Lock"
              }
              args {
                pretty_printed_name: "multiprocessing.synchronize.RLock"
                fully_qualified_name: "multiprocessing.synchronize.RLock"
              }
            }
            fully_qualified_name: "multiprocessing.context._LockLike"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "get_context"
    fullname: "multiprocessing.context.BaseContext.get_context"
    definitions {
      name: "get_context"
      fully_qualified_name: "multiprocessing.context.BaseContext.get_context"
      return_annotation {
        pretty_printed_name: "multiprocessing.context.DefaultContext"
        fully_qualified_name: "multiprocessing.context.DefaultContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "method"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "get_context"
      fully_qualified_name: "multiprocessing.context.BaseContext.get_context"
      return_annotation {
        pretty_printed_name: "multiprocessing.context.SpawnContext"
        fully_qualified_name: "multiprocessing.context.SpawnContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "method"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "get_context"
      fully_qualified_name: "multiprocessing.context.BaseContext.get_context"
      return_annotation {
        pretty_printed_name: "multiprocessing.context.ForkContext"
        fully_qualified_name: "multiprocessing.context.ForkContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "method"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "get_context"
      fully_qualified_name: "multiprocessing.context.BaseContext.get_context"
      return_annotation {
        pretty_printed_name: "multiprocessing.context.ForkServerContext"
        fully_qualified_name: "multiprocessing.context.ForkServerContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "method"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "get_context"
      fully_qualified_name: "multiprocessing.context.BaseContext.get_context"
      return_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "method"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "reducer"
    fullname: "multiprocessing.context.BaseContext.reducer"
    definitions {
      name: "reducer"
      fully_qualified_name: "multiprocessing.context.BaseContext.reducer"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      has_decorators: true
      resolved_decorator_names: "property"
      is_overload: true
      is_property: true
    }
    definitions {
      name: "reducer"
      fully_qualified_name: "multiprocessing.context.BaseContext.reducer"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
      }
      parameters {
        name: "reduction"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "reducer.setter"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "Process"
    fully_qualified_name: "multiprocessing.context.BaseContext.Process"
    type_annotation {
      pretty_printed_name: "Type[multiprocessing.process.BaseProcess]"
      kind: TYPE
      args {
        pretty_printed_name: "multiprocessing.process.BaseProcess"
        fully_qualified_name: "multiprocessing.process.BaseProcess"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "ProcessError"
    fully_qualified_name: "multiprocessing.context.BaseContext.ProcessError"
    type_annotation {
      pretty_printed_name: "Type[builtins.Exception]"
      kind: TYPE
      args {
        pretty_printed_name: "builtins.Exception"
        fully_qualified_name: "builtins.Exception"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "BufferTooShort"
    fully_qualified_name: "multiprocessing.context.BaseContext.BufferTooShort"
    type_annotation {
      pretty_printed_name: "Type[builtins.Exception]"
      kind: TYPE
      args {
        pretty_printed_name: "builtins.Exception"
        fully_qualified_name: "builtins.Exception"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "TimeoutError"
    fully_qualified_name: "multiprocessing.context.BaseContext.TimeoutError"
    type_annotation {
      pretty_printed_name: "Type[builtins.Exception]"
      kind: TYPE
      args {
        pretty_printed_name: "builtins.Exception"
        fully_qualified_name: "builtins.Exception"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "AuthenticationError"
    fully_qualified_name: "multiprocessing.context.BaseContext.AuthenticationError"
    type_annotation {
      pretty_printed_name: "Type[builtins.Exception]"
      kind: TYPE
      args {
        pretty_printed_name: "builtins.Exception"
        fully_qualified_name: "builtins.Exception"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Process"
  fully_qualified_name: "multiprocessing.context.Process"
  super_classes: "multiprocessing.process.BaseProcess"
  methods {
    name: "_Popen"
    fully_qualified_name: "multiprocessing.context.Process._Popen"
    return_annotation {
      pretty_printed_name: "multiprocessing.context.DefaultContext"
      fully_qualified_name: "multiprocessing.context.DefaultContext"
    }
    parameters {
      name: "process_obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.process.BaseProcess"
        fully_qualified_name: "multiprocessing.process.BaseProcess"
      }
    }
    has_decorators: true
    resolved_decorator_names: "staticmethod"
    is_static: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "_start_method"
    fully_qualified_name: "multiprocessing.context.Process._start_method"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "DefaultContext"
  fully_qualified_name: "multiprocessing.context.DefaultContext"
  super_classes: "multiprocessing.context.BaseContext"
  methods {
    name: "__init__"
    fully_qualified_name: "multiprocessing.context.DefaultContext.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.DefaultContext"
        fully_qualified_name: "multiprocessing.context.DefaultContext"
      }
    }
    parameters {
      name: "context"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.BaseContext"
        fully_qualified_name: "multiprocessing.context.BaseContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_start_method"
    fully_qualified_name: "multiprocessing.context.DefaultContext.set_start_method"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.DefaultContext"
        fully_qualified_name: "multiprocessing.context.DefaultContext"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "force"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_start_method"
    fully_qualified_name: "multiprocessing.context.DefaultContext.get_start_method"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.DefaultContext"
        fully_qualified_name: "multiprocessing.context.DefaultContext"
      }
    }
    parameters {
      name: "allow_none"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_all_start_methods"
    fully_qualified_name: "multiprocessing.context.DefaultContext.get_all_start_methods"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.context.DefaultContext"
        fully_qualified_name: "multiprocessing.context.DefaultContext"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "Process"
    fully_qualified_name: "multiprocessing.context.DefaultContext.Process"
    type_annotation {
      pretty_printed_name: "Type[multiprocessing.context.Process]"
      kind: TYPE
      args {
        pretty_printed_name: "multiprocessing.context.Process"
        fully_qualified_name: "multiprocessing.context.Process"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "ForkProcess"
  fully_qualified_name: "multiprocessing.context.ForkProcess"
  super_classes: "multiprocessing.process.BaseProcess"
  methods {
    name: "_Popen"
    fully_qualified_name: "multiprocessing.context.ForkProcess._Popen"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "process_obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.process.BaseProcess"
        fully_qualified_name: "multiprocessing.process.BaseProcess"
      }
    }
    has_decorators: true
    resolved_decorator_names: "staticmethod"
    is_static: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "_start_method"
    fully_qualified_name: "multiprocessing.context.ForkProcess._start_method"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "SpawnProcess"
  fully_qualified_name: "multiprocessing.context.SpawnProcess"
  super_classes: "multiprocessing.process.BaseProcess"
  methods {
    name: "_Popen"
    fully_qualified_name: "multiprocessing.context.SpawnProcess._Popen"
    return_annotation {
      pretty_printed_name: "multiprocessing.context.SpawnProcess"
      fully_qualified_name: "multiprocessing.context.SpawnProcess"
    }
    parameters {
      name: "process_obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.process.BaseProcess"
        fully_qualified_name: "multiprocessing.process.BaseProcess"
      }
    }
    has_decorators: true
    resolved_decorator_names: "staticmethod"
    is_static: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "_start_method"
    fully_qualified_name: "multiprocessing.context.SpawnProcess._start_method"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "ForkServerProcess"
  fully_qualified_name: "multiprocessing.context.ForkServerProcess"
  super_classes: "multiprocessing.process.BaseProcess"
  methods {
    name: "_Popen"
    fully_qualified_name: "multiprocessing.context.ForkServerProcess._Popen"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "process_obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.process.BaseProcess"
        fully_qualified_name: "multiprocessing.process.BaseProcess"
      }
    }
    has_decorators: true
    resolved_decorator_names: "staticmethod"
    is_static: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "_start_method"
    fully_qualified_name: "multiprocessing.context.ForkServerProcess._start_method"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "ForkContext"
  fully_qualified_name: "multiprocessing.context.ForkContext"
  super_classes: "multiprocessing.context.BaseContext"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "_name"
    fully_qualified_name: "multiprocessing.context.ForkContext._name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Process"
    fully_qualified_name: "multiprocessing.context.ForkContext.Process"
    type_annotation {
      pretty_printed_name: "Type[multiprocessing.context.ForkProcess]"
      kind: TYPE
      args {
        pretty_printed_name: "multiprocessing.context.ForkProcess"
        fully_qualified_name: "multiprocessing.context.ForkProcess"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "SpawnContext"
  fully_qualified_name: "multiprocessing.context.SpawnContext"
  super_classes: "multiprocessing.context.BaseContext"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "_name"
    fully_qualified_name: "multiprocessing.context.SpawnContext._name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Process"
    fully_qualified_name: "multiprocessing.context.SpawnContext.Process"
    type_annotation {
      pretty_printed_name: "Type[multiprocessing.context.SpawnProcess]"
      kind: TYPE
      args {
        pretty_printed_name: "multiprocessing.context.SpawnProcess"
        fully_qualified_name: "multiprocessing.context.SpawnProcess"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "ForkServerContext"
  fully_qualified_name: "multiprocessing.context.ForkServerContext"
  super_classes: "multiprocessing.context.BaseContext"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "_name"
    fully_qualified_name: "multiprocessing.context.ForkServerContext._name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Process"
    fully_qualified_name: "multiprocessing.context.ForkServerContext.Process"
    type_annotation {
      pretty_printed_name: "Type[multiprocessing.context.ForkServerProcess]"
      kind: TYPE
      args {
        pretty_printed_name: "multiprocessing.context.ForkServerProcess"
        fully_qualified_name: "multiprocessing.context.ForkServerProcess"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "_force_start_method"
  fully_qualified_name: "multiprocessing.context._force_start_method"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "method"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "get_spawning_popen"
  fully_qualified_name: "multiprocessing.context.get_spawning_popen"
  return_annotation {
    pretty_printed_name: "Union[Any,None]"
    kind: UNION
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "set_spawning_popen"
  fully_qualified_name: "multiprocessing.context.set_spawning_popen"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "popen"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "assert_spawning"
  fully_qualified_name: "multiprocessing.context.assert_spawning"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "obj"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_default_context"
  fully_qualified_name: "multiprocessing.context._default_context"
  type_annotation {
    pretty_printed_name: "multiprocessing.context.DefaultContext"
    fully_qualified_name: "multiprocessing.context.DefaultContext"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
