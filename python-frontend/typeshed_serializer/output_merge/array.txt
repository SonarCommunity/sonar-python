fully_qualified_name: "array"
classes {
  name: "array"
  fully_qualified_name: "array.array"
  super_classes: "typing.MutableSequence"
  methods {
    name: "append"
    fully_qualified_name: "array.array.append"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__v"
      type_annotation {
        pretty_printed_name: "array._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "buffer_info"
    fully_qualified_name: "array.array.buffer_info"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "byteswap"
    fully_qualified_name: "array.array.byteswap"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "count"
    fully_qualified_name: "array.array.count"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__v"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "extend"
    fully_qualified_name: "array.array.extend"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__bb"
      type_annotation {
        pretty_printed_name: "typing.Iterable[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "fromfile"
    fully_qualified_name: "array.array.fromfile"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__f"
      type_annotation {
        pretty_printed_name: "typing.BinaryIO"
        fully_qualified_name: "typing.BinaryIO"
      }
    }
    parameters {
      name: "__n"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "fromlist"
    fully_qualified_name: "array.array.fromlist"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__list"
      type_annotation {
        pretty_printed_name: "builtins.list[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "builtins.list"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "fromunicode"
    fully_qualified_name: "array.array.fromunicode"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__ustr"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "index"
    fully_qualified_name: "array.array.index"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__v"
      type_annotation {
        pretty_printed_name: "array._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "index"
    fully_qualified_name: "array.array.index"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__v"
      type_annotation {
        pretty_printed_name: "array._T"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__start"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "__stop"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "array.array.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__i"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "__v"
      type_annotation {
        pretty_printed_name: "array._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "pop"
    fully_qualified_name: "array.array.pop"
    return_annotation {
      pretty_printed_name: "array._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__i"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "read"
    fully_qualified_name: "array.array.read"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.BinaryIO"
        fully_qualified_name: "typing.BinaryIO"
      }
    }
    parameters {
      name: "n"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "remove"
    fully_qualified_name: "array.array.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__v"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "reverse"
    fully_qualified_name: "array.array.reverse"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tofile"
    fully_qualified_name: "array.array.tofile"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__f"
      type_annotation {
        pretty_printed_name: "typing.BinaryIO"
        fully_qualified_name: "typing.BinaryIO"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tolist"
    fully_qualified_name: "array.array.tolist"
    return_annotation {
      pretty_printed_name: "builtins.list[array._T]"
      args {
        pretty_printed_name: "array._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tounicode"
    fully_qualified_name: "array.array.tounicode"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "write"
    fully_qualified_name: "array.array.write"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.BinaryIO"
        fully_qualified_name: "typing.BinaryIO"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "fromstring"
    fully_qualified_name: "array.array.fromstring"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__buffer"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "fromstring"
    fully_qualified_name: "array.array.fromstring"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__buffer"
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "tostring"
    fully_qualified_name: "array.array.tostring"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "tostring"
    fully_qualified_name: "array.array.tostring"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "array.array.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "array.array.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "i"
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.slice]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__add__"
    fully_qualified_name: "array.array.__add__"
    return_annotation {
      pretty_printed_name: "array.array[array._T]"
      args {
        pretty_printed_name: "array._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "array.array"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "x"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__ge__"
    fully_qualified_name: "array.array.__ge__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__gt__"
    fully_qualified_name: "array.array.__gt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iadd__"
    fully_qualified_name: "array.array.__iadd__"
    return_annotation {
      pretty_printed_name: "array.array[array._T]"
      args {
        pretty_printed_name: "array._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "array.array"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "x"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__imul__"
    fully_qualified_name: "array.array.__imul__"
    return_annotation {
      pretty_printed_name: "array.array[array._T]"
      args {
        pretty_printed_name: "array._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "array.array"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "n"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__le__"
    fully_qualified_name: "array.array.__le__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__lt__"
    fully_qualified_name: "array.array.__lt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__mul__"
    fully_qualified_name: "array.array.__mul__"
    return_annotation {
      pretty_printed_name: "array.array[array._T]"
      args {
        pretty_printed_name: "array._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "array.array"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "n"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__rmul__"
    fully_qualified_name: "array.array.__rmul__"
    return_annotation {
      pretty_printed_name: "array.array[array._T]"
      args {
        pretty_printed_name: "array._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "array.array"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "n"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__delslice__"
    fully_qualified_name: "array.array.__delslice__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "i"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "j"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__getslice__"
    fully_qualified_name: "array.array.__getslice__"
    return_annotation {
      pretty_printed_name: "array.array[array._T]"
      args {
        pretty_printed_name: "array._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "array.array"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "i"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "j"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__setslice__"
    fully_qualified_name: "array.array.__setslice__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "i"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "j"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "frombytes"
    fully_qualified_name: "array.array.frombytes"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    parameters {
      name: "__buffer"
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tobytes"
    fully_qualified_name: "array.array.tobytes"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "array.array.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "array.array.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "array.array[builtins.int]"
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "array.array"
        }
      }
      parameters {
        name: "typecode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
            kind: UNION
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
          }
          fully_qualified_name: "array._IntTypeCode"
        }
      }
      parameters {
        name: "__initializer"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,typing.Iterable[array._T]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "typing.Iterable[array._T]"
            args {
              pretty_printed_name: "array._T"
              kind: TYPE_VAR
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "array.array.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "array.array[builtins.float]"
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          fully_qualified_name: "array.array"
        }
      }
      parameters {
        name: "typecode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
            kind: UNION
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
          }
          fully_qualified_name: "array._FloatTypeCode"
        }
      }
      parameters {
        name: "__initializer"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,typing.Iterable[array._T]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "typing.Iterable[array._T]"
            args {
              pretty_printed_name: "array._T"
              kind: TYPE_VAR
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "array.array.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "array.array[builtins.unicode]"
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
          fully_qualified_name: "array.array"
        }
      }
      parameters {
        name: "typecode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Literal[builtins.str]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          fully_qualified_name: "array._UnicodeTypeCode"
        }
      }
      parameters {
        name: "__initializer"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,typing.Iterable[array._T]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "typing.Iterable[array._T]"
            args {
              pretty_printed_name: "array._T"
              kind: TYPE_VAR
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "array.array.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "array.array[array._T]"
          args {
            pretty_printed_name: "array._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "array.array"
        }
      }
      parameters {
        name: "typecode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "__initializer"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,typing.Iterable[array._T]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "typing.Iterable[array._T]"
            args {
              pretty_printed_name: "array._T"
              kind: TYPE_VAR
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "array.array.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "array.array.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "array.array[builtins.int]"
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "array.array"
        }
      }
      parameters {
        name: "typecode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
            kind: UNION
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
          }
          fully_qualified_name: "array._IntTypeCode"
        }
      }
      parameters {
        name: "__initializer"
        type_annotation {
          pretty_printed_name: "Union[builtins.bytes,typing.Iterable[array._T]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "typing.Iterable[array._T]"
            args {
              pretty_printed_name: "array._T"
              kind: TYPE_VAR
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "array.array.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "array.array[builtins.float]"
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          fully_qualified_name: "array.array"
        }
      }
      parameters {
        name: "typecode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
            kind: UNION
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
          }
          fully_qualified_name: "array._FloatTypeCode"
        }
      }
      parameters {
        name: "__initializer"
        type_annotation {
          pretty_printed_name: "Union[builtins.bytes,typing.Iterable[array._T]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "typing.Iterable[array._T]"
            args {
              pretty_printed_name: "array._T"
              kind: TYPE_VAR
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "array.array.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "array.array[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "array.array"
        }
      }
      parameters {
        name: "typecode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Literal[builtins.str]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          fully_qualified_name: "array._UnicodeTypeCode"
        }
      }
      parameters {
        name: "__initializer"
        type_annotation {
          pretty_printed_name: "Union[builtins.bytes,typing.Iterable[array._T]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "typing.Iterable[array._T]"
            args {
              pretty_printed_name: "array._T"
              kind: TYPE_VAR
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "array.array.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "array.array[array._T]"
          args {
            pretty_printed_name: "array._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "array.array"
        }
      }
      parameters {
        name: "typecode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "__initializer"
        type_annotation {
          pretty_printed_name: "Union[builtins.bytes,typing.Iterable[array._T]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "typing.Iterable[array._T]"
            args {
              pretty_printed_name: "array._T"
              kind: TYPE_VAR
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__getitem__"
    fullname: "array.array.__getitem__"
    definitions {
      name: "__getitem__"
      fully_qualified_name: "array.array.__getitem__"
      return_annotation {
        pretty_printed_name: "array._T"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "array.array[array._T]"
          args {
            pretty_printed_name: "array._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "array.array"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__getitem__"
      fully_qualified_name: "array.array.__getitem__"
      return_annotation {
        pretty_printed_name: "array.array[array._T]"
        args {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "array.array"
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "array.array[array._T]"
          args {
            pretty_printed_name: "array._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "array.array"
        }
      }
      parameters {
        name: "s"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__setitem__"
    fullname: "array.array.__setitem__"
    definitions {
      name: "__setitem__"
      fully_qualified_name: "array.array.__setitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "array.array[array._T]"
          args {
            pretty_printed_name: "array._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "array.array"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "o"
        type_annotation {
          pretty_printed_name: "array._T"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__setitem__"
      fully_qualified_name: "array.array.__setitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "array.array[array._T]"
          args {
            pretty_printed_name: "array._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "array.array"
        }
      }
      parameters {
        name: "s"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      parameters {
        name: "o"
        type_annotation {
          pretty_printed_name: "array.array[array._T]"
          args {
            pretty_printed_name: "array._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "array.array"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "typecode"
    fully_qualified_name: "array.array.typecode"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[builtins.str]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[builtins.str]]]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
            kind: UNION
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
          }
          fully_qualified_name: "array._IntTypeCode"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
            kind: UNION
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
          }
          fully_qualified_name: "array._FloatTypeCode"
        }
        args {
          pretty_printed_name: "TypeAlias[Literal[builtins.str]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          fully_qualified_name: "array._UnicodeTypeCode"
        }
      }
      fully_qualified_name: "array._TypeCode"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "itemsize"
    fully_qualified_name: "array.array.itemsize"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
vars {
  name: "typecodes"
  fully_qualified_name: "array.typecodes"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
