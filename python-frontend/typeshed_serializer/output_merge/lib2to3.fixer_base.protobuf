fully_qualified_name: "lib2to3.fixer_base"
classes {
  name: "BaseFix"
  fully_qualified_name: "lib2to3.fixer_base.BaseFix"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[builtins.str,UnboundType[Incomplete]]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    parameters {
      name: "log"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "compile_pattern"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.compile_pattern"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_filename"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.set_filename"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[StrPath]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "match"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.match"
    return_annotation {
      pretty_printed_name: "Union[Literal[builtins.bool],builtins.dict[builtins.str,lib2to3.fixer_base._N]]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.bool]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      args {
        pretty_printed_name: "builtins.dict[builtins.str,lib2to3.fixer_base._N]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "lib2to3.fixer_base._N"
          kind: TYPE_VAR
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
    }
    parameters {
      name: "node"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base._N"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "transform"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.transform"
    return_annotation {
      pretty_printed_name: "Union[lib2to3.pytree.Node,lib2to3.pytree.Leaf,None]"
      kind: UNION
      args {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
      args {
        pretty_printed_name: "lib2to3.pytree.Leaf"
        fully_qualified_name: "lib2to3.pytree.Leaf"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
    }
    parameters {
      name: "node"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    parameters {
      name: "results"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,lib2to3.pytree.Base]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "lib2to3.pytree.Base"
          fully_qualified_name: "lib2to3.pytree.Base"
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "new_name"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.new_name"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
    }
    parameters {
      name: "template"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "log_message"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.log_message"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
    }
    parameters {
      name: "message"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "cannot_convert"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.cannot_convert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
    }
    parameters {
      name: "node"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "warning"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.warning"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
    }
    parameters {
      name: "node"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "start_tree"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.start_tree"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
    }
    parameters {
      name: "tree"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[StrPath]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "finish_tree"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.finish_tree"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
    }
    parameters {
      name: "tree"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[StrPath]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "PATTERN"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.PATTERN"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "pattern"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.pattern"
    type_annotation {
      pretty_printed_name: "Union[UnboundType[Incomplete],None]"
      kind: UNION
      args {
        pretty_printed_name: "UnboundType[Incomplete]"
        kind: UNBOUND
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "pattern_tree"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.pattern_tree"
    type_annotation {
      pretty_printed_name: "Union[UnboundType[Incomplete],None]"
      kind: UNION
      args {
        pretty_printed_name: "UnboundType[Incomplete]"
        kind: UNBOUND
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "options"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.options"
    type_annotation {
      pretty_printed_name: "Union[UnboundType[Incomplete],None]"
      kind: UNION
      args {
        pretty_printed_name: "UnboundType[Incomplete]"
        kind: UNBOUND
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "filename"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.filename"
    type_annotation {
      pretty_printed_name: "Union[UnboundType[Incomplete],None]"
      kind: UNION
      args {
        pretty_printed_name: "UnboundType[Incomplete]"
        kind: UNBOUND
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "numbers"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.numbers"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "used_names"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.used_names"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "order"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.order"
    type_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "explicit"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.explicit"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "run_order"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.run_order"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "keep_line_order"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.keep_line_order"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "BM_compatible"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.BM_compatible"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "syms"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.syms"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "log"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.log"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "first_log"
    fully_qualified_name: "lib2to3.fixer_base.BaseFix.first_log"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "ConditionalFix"
  fully_qualified_name: "lib2to3.fixer_base.ConditionalFix"
  super_classes: "lib2to3.fixer_base.BaseFix"
  methods {
    name: "start_tree"
    fully_qualified_name: "lib2to3.fixer_base.ConditionalFix.start_tree"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.ConditionalFix"
        fully_qualified_name: "lib2to3.fixer_base.ConditionalFix"
      }
    }
    parameters {
      name: "__tree"
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    parameters {
      name: "__filename"
      type_annotation {
        pretty_printed_name: "UnboundType[StrPath]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "should_skip"
    fully_qualified_name: "lib2to3.fixer_base.ConditionalFix.should_skip"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixer_base.ConditionalFix"
        fully_qualified_name: "lib2to3.fixer_base.ConditionalFix"
      }
    }
    parameters {
      name: "node"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "skip_on"
    fully_qualified_name: "lib2to3.fixer_base.ConditionalFix.skip_on"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
