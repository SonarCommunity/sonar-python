fully_qualified_name: "sets"
classes {
  name: "BaseSet"
  fully_qualified_name: "sets.BaseSet"
  super_classes: "typing.Iterable"
  methods {
    name: "__init__"
    fully_qualified_name: "sets.BaseSet.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "sets.BaseSet.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__repr__"
    fully_qualified_name: "sets.BaseSet.__repr__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__str__"
    fully_qualified_name: "sets.BaseSet.__str__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "sets.BaseSet.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[sets._T]"
      args {
        pretty_printed_name: "sets._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__cmp__"
    fully_qualified_name: "sets.BaseSet.__cmp__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "sets.BaseSet.__eq__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__ne__"
    fully_qualified_name: "sets.BaseSet.__ne__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "copy"
    fully_qualified_name: "sets.BaseSet.copy"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__copy__"
    fully_qualified_name: "sets.BaseSet.__copy__"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__deepcopy__"
    fully_qualified_name: "sets.BaseSet.__deepcopy__"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "memo"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[builtins.int,sets.BaseSet[sets._T]]"
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "sets.BaseSet[sets._T]"
          args {
            pretty_printed_name: "sets._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "sets.BaseSet"
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__or__"
    fully_qualified_name: "sets.BaseSet.__or__"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "union"
    fully_qualified_name: "sets.BaseSet.union"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]"
          kind: UNION
          args {
            pretty_printed_name: "sets.BaseSet[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "sets.BaseSet"
          }
          args {
            pretty_printed_name: "typing.Iterable[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        fully_qualified_name: "sets._Setlike"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__and__"
    fully_qualified_name: "sets.BaseSet.__and__"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "intersection"
    fully_qualified_name: "sets.BaseSet.intersection"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]"
          kind: UNION
          args {
            pretty_printed_name: "sets.BaseSet[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "sets.BaseSet"
          }
          args {
            pretty_printed_name: "typing.Iterable[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        fully_qualified_name: "sets._Setlike"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__xor__"
    fully_qualified_name: "sets.BaseSet.__xor__"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "symmetric_difference"
    fully_qualified_name: "sets.BaseSet.symmetric_difference"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]"
          kind: UNION
          args {
            pretty_printed_name: "sets.BaseSet[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "sets.BaseSet"
          }
          args {
            pretty_printed_name: "typing.Iterable[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        fully_qualified_name: "sets._Setlike"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__sub__"
    fully_qualified_name: "sets.BaseSet.__sub__"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "difference"
    fully_qualified_name: "sets.BaseSet.difference"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]"
          kind: UNION
          args {
            pretty_printed_name: "sets.BaseSet[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "sets.BaseSet"
          }
          args {
            pretty_printed_name: "typing.Iterable[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        fully_qualified_name: "sets._Setlike"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "sets.BaseSet.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    parameters {
      name: "element"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "issubset"
    fully_qualified_name: "sets.BaseSet.issubset"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "issuperset"
    fully_qualified_name: "sets.BaseSet.issuperset"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__le__"
    fully_qualified_name: "sets.BaseSet.__le__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__ge__"
    fully_qualified_name: "sets.BaseSet.__ge__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__lt__"
    fully_qualified_name: "sets.BaseSet.__lt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__gt__"
    fully_qualified_name: "sets.BaseSet.__gt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
classes {
  name: "ImmutableSet"
  fully_qualified_name: "sets.ImmutableSet"
  super_classes: "sets.BaseSet"
  super_classes: "typing.Hashable"
  methods {
    name: "__init__"
    fully_qualified_name: "sets.ImmutableSet.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.ImmutableSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.ImmutableSet"
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[sets.BaseSet[sets._T],typing.Iterable[sets._T],None]"
        kind: UNION
        args {
          pretty_printed_name: "sets.BaseSet[sets._T]"
          args {
            pretty_printed_name: "sets._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "sets.BaseSet"
        }
        args {
          pretty_printed_name: "typing.Iterable[sets._T]"
          args {
            pretty_printed_name: "sets._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "__hash__"
    fully_qualified_name: "sets.ImmutableSet.__hash__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.ImmutableSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.ImmutableSet"
      }
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
classes {
  name: "Set"
  fully_qualified_name: "sets.Set"
  super_classes: "sets.BaseSet"
  methods {
    name: "__init__"
    fully_qualified_name: "sets.Set.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[sets.BaseSet[sets._T],typing.Iterable[sets._T],None]"
        kind: UNION
        args {
          pretty_printed_name: "sets.BaseSet[sets._T]"
          args {
            pretty_printed_name: "sets._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "sets.BaseSet"
        }
        args {
          pretty_printed_name: "typing.Iterable[sets._T]"
          args {
            pretty_printed_name: "sets._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "__ior__"
    fully_qualified_name: "sets.Set.__ior__"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "union_update"
    fully_qualified_name: "sets.Set.union_update"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]"
          kind: UNION
          args {
            pretty_printed_name: "sets.BaseSet[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "sets.BaseSet"
          }
          args {
            pretty_printed_name: "typing.Iterable[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        fully_qualified_name: "sets._Setlike"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iand__"
    fully_qualified_name: "sets.Set.__iand__"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "intersection_update"
    fully_qualified_name: "sets.Set.intersection_update"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]"
          kind: UNION
          args {
            pretty_printed_name: "sets.BaseSet[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "sets.BaseSet"
          }
          args {
            pretty_printed_name: "typing.Iterable[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        fully_qualified_name: "sets._Setlike"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__ixor__"
    fully_qualified_name: "sets.Set.__ixor__"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "symmetric_difference_update"
    fully_qualified_name: "sets.Set.symmetric_difference_update"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]"
          kind: UNION
          args {
            pretty_printed_name: "sets.BaseSet[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "sets.BaseSet"
          }
          args {
            pretty_printed_name: "typing.Iterable[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        fully_qualified_name: "sets._Setlike"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__isub__"
    fully_qualified_name: "sets.Set.__isub__"
    return_annotation {
      pretty_printed_name: "sets._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "sets._SelfT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "difference_update"
    fully_qualified_name: "sets.Set.difference_update"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]"
          kind: UNION
          args {
            pretty_printed_name: "sets.BaseSet[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "sets.BaseSet"
          }
          args {
            pretty_printed_name: "typing.Iterable[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        fully_qualified_name: "sets._Setlike"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "update"
    fully_qualified_name: "sets.Set.update"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[sets.BaseSet[UnboundType[_T]],typing.Iterable[UnboundType[_T]]]"
          kind: UNION
          args {
            pretty_printed_name: "sets.BaseSet[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "sets.BaseSet"
          }
          args {
            pretty_printed_name: "typing.Iterable[UnboundType[_T]]"
            args {
              pretty_printed_name: "UnboundType[_T]"
              kind: UNBOUND
            }
            fully_qualified_name: "typing.Iterable"
          }
        }
        fully_qualified_name: "sets._Setlike"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "clear"
    fully_qualified_name: "sets.Set.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "add"
    fully_qualified_name: "sets.Set.add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "remove"
    fully_qualified_name: "sets.Set.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "discard"
    fully_qualified_name: "sets.Set.discard"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "pop"
    fully_qualified_name: "sets.Set.pop"
    return_annotation {
      pretty_printed_name: "sets._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__as_immutable__"
    fully_qualified_name: "sets.Set.__as_immutable__"
    return_annotation {
      pretty_printed_name: "sets.ImmutableSet[sets._T]"
      args {
        pretty_printed_name: "sets._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "sets.ImmutableSet"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__as_temporarily_immutable__"
    fully_qualified_name: "sets.Set.__as_temporarily_immutable__"
    return_annotation {
      pretty_printed_name: "sets._TemporarilyImmutableSet[sets._T]"
      args {
        pretty_printed_name: "sets._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "sets._TemporarilyImmutableSet"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.Set[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.Set"
      }
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
classes {
  name: "_TemporarilyImmutableSet"
  fully_qualified_name: "sets._TemporarilyImmutableSet"
  super_classes: "sets.BaseSet"
  methods {
    name: "__init__"
    fully_qualified_name: "sets._TemporarilyImmutableSet.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets._TemporarilyImmutableSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets._TemporarilyImmutableSet"
      }
    }
    parameters {
      name: "set"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets.BaseSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets.BaseSet"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__hash__"
    fully_qualified_name: "sets._TemporarilyImmutableSet.__hash__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sets._TemporarilyImmutableSet[sets._T]"
        args {
          pretty_printed_name: "sets._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "sets._TemporarilyImmutableSet"
      }
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
