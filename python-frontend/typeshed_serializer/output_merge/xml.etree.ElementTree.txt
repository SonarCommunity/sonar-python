fully_qualified_name: "xml.etree.ElementTree"
classes {
  name: "ParseError"
  fully_qualified_name: "xml.etree.ElementTree.ParseError"
  super_classes: "builtins.SyntaxError"
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "code"
    fully_qualified_name: "xml.etree.ElementTree.ParseError.code"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "position"
    fully_qualified_name: "xml.etree.ElementTree.ParseError.position"
    type_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Element"
  fully_qualified_name: "xml.etree.ElementTree.Element"
  super_classes: "typing.MutableSequence"
  methods {
    name: "__init__"
    fully_qualified_name: "xml.etree.ElementTree.Element.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[Union[builtins.str,builtins.unicode]],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
    }
    parameters {
      name: "attrib"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
        }
        fully_qualified_name: "builtins.dict"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "xml.etree.ElementTree.Element.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
    }
    parameters {
      name: "attrib"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.dict"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "append"
    fully_qualified_name: "xml.etree.ElementTree.Element.append"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "__subelement"
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "clear"
    fully_qualified_name: "xml.etree.ElementTree.Element.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "extend"
    fully_qualified_name: "xml.etree.ElementTree.Element.extend"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "__elements"
      type_annotation {
        pretty_printed_name: "typing.Iterable[xml.etree.ElementTree.Element]"
        args {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "find"
    fully_qualified_name: "xml.etree.ElementTree.Element.find"
    return_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.Element,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
    }
    parameters {
      name: "namespaces"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.unicode]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.unicode"
                fully_qualified_name: "builtins.unicode"
              }
            }
            fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.unicode]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.unicode"
                fully_qualified_name: "builtins.unicode"
              }
            }
            fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "find"
    fully_qualified_name: "xml.etree.ElementTree.Element.find"
    return_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.Element,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "namespaces"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "findall"
    fully_qualified_name: "xml.etree.ElementTree.Element.findall"
    return_annotation {
      pretty_printed_name: "builtins.list[xml.etree.ElementTree.Element]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
    }
    parameters {
      name: "namespaces"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.unicode]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.unicode"
                fully_qualified_name: "builtins.unicode"
              }
            }
            fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.unicode]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.unicode"
                fully_qualified_name: "builtins.unicode"
              }
            }
            fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "findall"
    fully_qualified_name: "xml.etree.ElementTree.Element.findall"
    return_annotation {
      pretty_printed_name: "builtins.list[xml.etree.ElementTree.Element]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "namespaces"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "xml.etree.ElementTree.Element.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "__index"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "__element"
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "insert"
    fully_qualified_name: "xml.etree.ElementTree.Element.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "__index"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "__subelement"
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "items"
    fully_qualified_name: "xml.etree.ElementTree.Element.items"
    return_annotation {
      pretty_printed_name: "typing.ItemsView[TypeAlias[Any],TypeAlias[Any]]"
      args {
        pretty_printed_name: "TypeAlias[Any]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "xml.etree.ElementTree._str_result_type"
      }
      args {
        pretty_printed_name: "TypeAlias[Any]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "xml.etree.ElementTree._str_result_type"
      }
      fully_qualified_name: "typing.ItemsView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "items"
    fully_qualified_name: "xml.etree.ElementTree.Element.items"
    return_annotation {
      pretty_printed_name: "typing.ItemsView[builtins.str,builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.ItemsView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "iter"
    fully_qualified_name: "xml.etree.ElementTree.Element.iter"
    return_annotation {
      pretty_printed_name: "typing.Generator[xml.etree.ElementTree.Element,None,None]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.unicode,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "iter"
    fully_qualified_name: "xml.etree.ElementTree.Element.iter"
    return_annotation {
      pretty_printed_name: "typing.Generator[xml.etree.ElementTree.Element,None,None]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "iterfind"
    fully_qualified_name: "xml.etree.ElementTree.Element.iterfind"
    return_annotation {
      pretty_printed_name: "typing.Generator[xml.etree.ElementTree.Element,None,None]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
    }
    parameters {
      name: "namespaces"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.unicode]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.unicode"
                fully_qualified_name: "builtins.unicode"
              }
            }
            fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.unicode]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.unicode"
                fully_qualified_name: "builtins.unicode"
              }
            }
            fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "iterfind"
    fully_qualified_name: "xml.etree.ElementTree.Element.iterfind"
    return_annotation {
      pretty_printed_name: "typing.Generator[xml.etree.ElementTree.Element,None,None]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "namespaces"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "itertext"
    fully_qualified_name: "xml.etree.ElementTree.Element.itertext"
    return_annotation {
      pretty_printed_name: "typing.Generator[TypeAlias[Any],None,None]"
      args {
        pretty_printed_name: "TypeAlias[Any]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "xml.etree.ElementTree._str_result_type"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "itertext"
    fully_qualified_name: "xml.etree.ElementTree.Element.itertext"
    return_annotation {
      pretty_printed_name: "typing.Generator[builtins.str,None,None]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "keys"
    fully_qualified_name: "xml.etree.ElementTree.Element.keys"
    return_annotation {
      pretty_printed_name: "typing.KeysView[TypeAlias[Any]]"
      args {
        pretty_printed_name: "TypeAlias[Any]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "xml.etree.ElementTree._str_result_type"
      }
      fully_qualified_name: "typing.KeysView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "keys"
    fully_qualified_name: "xml.etree.ElementTree.Element.keys"
    return_annotation {
      pretty_printed_name: "typing.KeysView[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.KeysView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "makeelement"
    fully_qualified_name: "xml.etree.ElementTree.Element.makeelement"
    return_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "__tag"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
    }
    parameters {
      name: "__attrib"
      type_annotation {
        pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "makeelement"
    fully_qualified_name: "xml.etree.ElementTree.Element.makeelement"
    return_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "__tag"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "__attrib"
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "remove"
    fully_qualified_name: "xml.etree.ElementTree.Element.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "__subelement"
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set"
    fully_qualified_name: "xml.etree.ElementTree.Element.set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "__key"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "set"
    fully_qualified_name: "xml.etree.ElementTree.Element.set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "__key"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "xml.etree.ElementTree.Element.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "i"
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.slice]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "xml.etree.ElementTree.Element.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getchildren"
    fully_qualified_name: "xml.etree.ElementTree.Element.getchildren"
    return_annotation {
      pretty_printed_name: "builtins.list[xml.etree.ElementTree.Element]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "getiterator"
    fully_qualified_name: "xml.etree.ElementTree.Element.getiterator"
    return_annotation {
      pretty_printed_name: "builtins.list[xml.etree.ElementTree.Element]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.unicode,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "getiterator"
    fully_qualified_name: "xml.etree.ElementTree.Element.getiterator"
    return_annotation {
      pretty_printed_name: "builtins.list[xml.etree.ElementTree.Element]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "findtext"
    fullname: "xml.etree.ElementTree.Element.findtext"
    definitions {
      name: "findtext"
      fully_qualified_name: "xml.etree.ElementTree.Element.findtext"
      return_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      parameters {
        name: "path"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "namespaces"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.str,builtins.unicode]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.str"
                  fully_qualified_name: "builtins.str"
                }
                args {
                  pretty_printed_name: "builtins.unicode"
                  fully_qualified_name: "builtins.unicode"
                }
              }
              fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.str,builtins.unicode]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.str"
                  fully_qualified_name: "builtins.str"
                }
                args {
                  pretty_printed_name: "builtins.unicode"
                  fully_qualified_name: "builtins.unicode"
                }
              }
              fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "findtext"
      fully_qualified_name: "xml.etree.ElementTree.Element.findtext"
      return_annotation {
        pretty_printed_name: "Union[xml.etree.ElementTree._T,TypeAlias[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "xml.etree.ElementTree._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "TypeAlias[Any]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "xml.etree.ElementTree._str_result_type"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      parameters {
        name: "path"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "namespaces"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.str,builtins.unicode]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.str"
                  fully_qualified_name: "builtins.str"
                }
                args {
                  pretty_printed_name: "builtins.unicode"
                  fully_qualified_name: "builtins.unicode"
                }
              }
              fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.str,builtins.unicode]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.str"
                  fully_qualified_name: "builtins.str"
                }
                args {
                  pretty_printed_name: "builtins.unicode"
                  fully_qualified_name: "builtins.unicode"
                }
              }
              fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "findtext"
    fullname: "xml.etree.ElementTree.Element.findtext"
    definitions {
      name: "findtext"
      fully_qualified_name: "xml.etree.ElementTree.Element.findtext"
      return_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      parameters {
        name: "path"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "namespaces"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,builtins.str],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "findtext"
      fully_qualified_name: "xml.etree.ElementTree.Element.findtext"
      return_annotation {
        pretty_printed_name: "Union[xml.etree.ElementTree._T,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "xml.etree.ElementTree._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      parameters {
        name: "path"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "namespaces"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,builtins.str],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "get"
    fullname: "xml.etree.ElementTree.Element.get"
    definitions {
      name: "get"
      fully_qualified_name: "xml.etree.ElementTree.Element.get"
      return_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      parameters {
        name: "key"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "get"
      fully_qualified_name: "xml.etree.ElementTree.Element.get"
      return_annotation {
        pretty_printed_name: "Union[TypeAlias[Any],xml.etree.ElementTree._T]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Any]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "xml.etree.ElementTree._str_result_type"
        }
        args {
          pretty_printed_name: "xml.etree.ElementTree._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      parameters {
        name: "key"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree._T"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "get"
    fullname: "xml.etree.ElementTree.Element.get"
    definitions {
      name: "get"
      fully_qualified_name: "xml.etree.ElementTree.Element.get"
      return_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      parameters {
        name: "key"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "get"
      fully_qualified_name: "xml.etree.ElementTree.Element.get"
      return_annotation {
        pretty_printed_name: "Union[builtins.str,xml.etree.ElementTree._T]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "xml.etree.ElementTree._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      parameters {
        name: "key"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree._T"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__getitem__"
    fullname: "xml.etree.ElementTree.Element.__getitem__"
    definitions {
      name: "__getitem__"
      fully_qualified_name: "xml.etree.ElementTree.Element.__getitem__"
      return_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__getitem__"
      fully_qualified_name: "xml.etree.ElementTree.Element.__getitem__"
      return_annotation {
        pretty_printed_name: "typing.MutableSequence[xml.etree.ElementTree.Element]"
        args {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
        fully_qualified_name: "typing.MutableSequence"
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      parameters {
        name: "s"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__setitem__"
    fullname: "xml.etree.ElementTree.Element.__setitem__"
    definitions {
      name: "__setitem__"
      fully_qualified_name: "xml.etree.ElementTree.Element.__setitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      parameters {
        name: "i"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "o"
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__setitem__"
      fully_qualified_name: "xml.etree.ElementTree.Element.__setitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      parameters {
        name: "s"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      parameters {
        name: "o"
        type_annotation {
          pretty_printed_name: "typing.Iterable[xml.etree.ElementTree.Element]"
          args {
            pretty_printed_name: "xml.etree.ElementTree.Element"
            fully_qualified_name: "xml.etree.ElementTree.Element"
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "tag"
    fully_qualified_name: "xml.etree.ElementTree.Element.tag"
    type_annotation {
      pretty_printed_name: "TypeAlias[Any]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "xml.etree.ElementTree._str_result_type"
    }
    valid_for: "27"
  }
  attributes {
    name: "tag"
    fully_qualified_name: "xml.etree.ElementTree.Element.tag"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "attrib"
    fully_qualified_name: "xml.etree.ElementTree.Element.attrib"
    type_annotation {
      pretty_printed_name: "builtins.dict[TypeAlias[Any],TypeAlias[Any]]"
      args {
        pretty_printed_name: "TypeAlias[Any]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "xml.etree.ElementTree._str_result_type"
      }
      args {
        pretty_printed_name: "TypeAlias[Any]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "xml.etree.ElementTree._str_result_type"
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "27"
  }
  attributes {
    name: "attrib"
    fully_qualified_name: "xml.etree.ElementTree.Element.attrib"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "text"
    fully_qualified_name: "xml.etree.ElementTree.Element.text"
    type_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
  }
  attributes {
    name: "text"
    fully_qualified_name: "xml.etree.ElementTree.Element.text"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "tail"
    fully_qualified_name: "xml.etree.ElementTree.Element.tail"
    type_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
  }
  attributes {
    name: "tail"
    fully_qualified_name: "xml.etree.ElementTree.Element.tail"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "QName"
  fully_qualified_name: "xml.etree.ElementTree.QName"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xml.etree.ElementTree.QName.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.QName"
        fully_qualified_name: "xml.etree.ElementTree.QName"
      }
    }
    parameters {
      name: "text_or_uri"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.unicode,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "xml.etree.ElementTree.QName.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.QName"
        fully_qualified_name: "xml.etree.ElementTree.QName"
      }
    }
    parameters {
      name: "text_or_uri"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "text"
    fully_qualified_name: "xml.etree.ElementTree.QName.text"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "ElementTree"
  fully_qualified_name: "xml.etree.ElementTree.ElementTree"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[xml.etree.ElementTree.Element,None]"
        kind: UNION
        args {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "file"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.unicode,builtins.int,typing.IO[Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.IO[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.IO"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[xml.etree.ElementTree.Element,None]"
        kind: UNION
        args {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "file"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes],builtins.int,typing.IO[Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.IO[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.IO"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getroot"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.getroot"
    return_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "parse"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.parse"
    return_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "source"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.unicode,builtins.int,typing.IO[Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.unicode,builtins.int,typing.IO[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.IO[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.IO"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._file_or_filename"
      }
    }
    parameters {
      name: "parser"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
        kind: UNION
        args {
          pretty_printed_name: "xml.etree.ElementTree.XMLParser"
          fully_qualified_name: "xml.etree.ElementTree.XMLParser"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "parse"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.parse"
    return_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "source"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "os.PathLike[builtins.str]"
                args {
                  pretty_printed_name: "builtins.str"
                  fully_qualified_name: "builtins.str"
                }
                fully_qualified_name: "os.PathLike"
              }
              args {
                pretty_printed_name: "os.PathLike[builtins.bytes]"
                args {
                  pretty_printed_name: "builtins.bytes"
                  fully_qualified_name: "builtins.bytes"
                }
                fully_qualified_name: "os.PathLike"
              }
            }
            fully_qualified_name: "_typeshed.StrOrBytesPath"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.IO[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.IO"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._File"
      }
    }
    parameters {
      name: "parser"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
        kind: UNION
        args {
          pretty_printed_name: "xml.etree.ElementTree.XMLParser"
          fully_qualified_name: "xml.etree.ElementTree.XMLParser"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "iter"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.iter"
    return_annotation {
      pretty_printed_name: "typing.Generator[xml.etree.ElementTree.Element,None,None]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.unicode,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "iter"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.iter"
    return_annotation {
      pretty_printed_name: "typing.Generator[xml.etree.ElementTree.Element,None,None]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getiterator"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.getiterator"
    return_annotation {
      pretty_printed_name: "builtins.list[xml.etree.ElementTree.Element]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.unicode,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "getiterator"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.getiterator"
    return_annotation {
      pretty_printed_name: "builtins.list[xml.etree.ElementTree.Element]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "find"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.find"
    return_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.Element,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
    }
    parameters {
      name: "namespaces"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.unicode]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.unicode"
                fully_qualified_name: "builtins.unicode"
              }
            }
            fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.unicode]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.unicode"
                fully_qualified_name: "builtins.unicode"
              }
            }
            fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "find"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.find"
    return_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.Element,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "namespaces"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "findall"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.findall"
    return_annotation {
      pretty_printed_name: "builtins.list[xml.etree.ElementTree.Element]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
    }
    parameters {
      name: "namespaces"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.unicode]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.unicode"
                fully_qualified_name: "builtins.unicode"
              }
            }
            fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.unicode]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.unicode"
                fully_qualified_name: "builtins.unicode"
              }
            }
            fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "findall"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.findall"
    return_annotation {
      pretty_printed_name: "builtins.list[xml.etree.ElementTree.Element]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "namespaces"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "iterfind"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.iterfind"
    return_annotation {
      pretty_printed_name: "typing.Generator[xml.etree.ElementTree.Element,None,None]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
    }
    parameters {
      name: "namespaces"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.unicode]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.unicode"
                fully_qualified_name: "builtins.unicode"
              }
            }
            fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.unicode]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.unicode"
                fully_qualified_name: "builtins.unicode"
              }
            }
            fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "iterfind"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.iterfind"
    return_annotation {
      pretty_printed_name: "typing.Generator[xml.etree.ElementTree.Element,None,None]"
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "namespaces"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "write"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.write"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "file_or_filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.unicode,builtins.int,typing.IO[Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.unicode,builtins.int,typing.IO[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.IO[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.IO"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._file_or_filename"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "xml_declaration"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "default_namespace"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.unicode,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "write"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.write"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "file_or_filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "os.PathLike[builtins.str]"
                args {
                  pretty_printed_name: "builtins.str"
                  fully_qualified_name: "builtins.str"
                }
                fully_qualified_name: "os.PathLike"
              }
              args {
                pretty_printed_name: "os.PathLike[builtins.bytes]"
                args {
                  pretty_printed_name: "builtins.bytes"
                  fully_qualified_name: "builtins.bytes"
                }
                fully_qualified_name: "os.PathLike"
              }
            }
            fully_qualified_name: "_typeshed.StrOrBytesPath"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.IO[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.IO"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._File"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "xml_declaration"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "default_namespace"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "write_c14n"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.write_c14n"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "file"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.unicode,builtins.int,typing.IO[Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.unicode,builtins.int,typing.IO[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.IO[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.IO"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._file_or_filename"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "write_c14n"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree.write_c14n"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
    parameters {
      name: "file"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "os.PathLike[builtins.str]"
                args {
                  pretty_printed_name: "builtins.str"
                  fully_qualified_name: "builtins.str"
                }
                fully_qualified_name: "os.PathLike"
              }
              args {
                pretty_printed_name: "os.PathLike[builtins.bytes]"
                args {
                  pretty_printed_name: "builtins.bytes"
                  fully_qualified_name: "builtins.bytes"
                }
                fully_qualified_name: "os.PathLike"
              }
            }
            fully_qualified_name: "_typeshed.StrOrBytesPath"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.IO[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.IO"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._File"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "findtext"
    fullname: "xml.etree.ElementTree.ElementTree.findtext"
    definitions {
      name: "findtext"
      fully_qualified_name: "xml.etree.ElementTree.ElementTree.findtext"
      return_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.ElementTree"
          fully_qualified_name: "xml.etree.ElementTree.ElementTree"
        }
      }
      parameters {
        name: "path"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "namespaces"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.str,builtins.unicode]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.str"
                  fully_qualified_name: "builtins.str"
                }
                args {
                  pretty_printed_name: "builtins.unicode"
                  fully_qualified_name: "builtins.unicode"
                }
              }
              fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.str,builtins.unicode]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.str"
                  fully_qualified_name: "builtins.str"
                }
                args {
                  pretty_printed_name: "builtins.unicode"
                  fully_qualified_name: "builtins.unicode"
                }
              }
              fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "findtext"
      fully_qualified_name: "xml.etree.ElementTree.ElementTree.findtext"
      return_annotation {
        pretty_printed_name: "Union[xml.etree.ElementTree._T,TypeAlias[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "xml.etree.ElementTree._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "TypeAlias[Any]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "xml.etree.ElementTree._str_result_type"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.ElementTree"
          fully_qualified_name: "xml.etree.ElementTree.ElementTree"
        }
      }
      parameters {
        name: "path"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "namespaces"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.str,builtins.unicode]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.str"
                  fully_qualified_name: "builtins.str"
                }
                args {
                  pretty_printed_name: "builtins.unicode"
                  fully_qualified_name: "builtins.unicode"
                }
              }
              fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.str,builtins.unicode]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.str"
                  fully_qualified_name: "builtins.str"
                }
                args {
                  pretty_printed_name: "builtins.unicode"
                  fully_qualified_name: "builtins.unicode"
                }
              }
              fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "findtext"
    fullname: "xml.etree.ElementTree.ElementTree.findtext"
    definitions {
      name: "findtext"
      fully_qualified_name: "xml.etree.ElementTree.ElementTree.findtext"
      return_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.ElementTree"
          fully_qualified_name: "xml.etree.ElementTree.ElementTree"
        }
      }
      parameters {
        name: "path"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "namespaces"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,builtins.str],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "findtext"
      fully_qualified_name: "xml.etree.ElementTree.ElementTree.findtext"
      return_annotation {
        pretty_printed_name: "Union[xml.etree.ElementTree._T,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "xml.etree.ElementTree._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree.ElementTree"
          fully_qualified_name: "xml.etree.ElementTree.ElementTree"
        }
      }
      parameters {
        name: "path"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "xml.etree.ElementTree._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "namespaces"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,builtins.str],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "TreeBuilder"
  fully_qualified_name: "xml.etree.ElementTree.TreeBuilder"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xml.etree.ElementTree.TreeBuilder.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.TreeBuilder"
        fully_qualified_name: "xml.etree.ElementTree.TreeBuilder"
      }
    }
    parameters {
      name: "element_factory"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "close"
    fully_qualified_name: "xml.etree.ElementTree.TreeBuilder.close"
    return_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.TreeBuilder"
        fully_qualified_name: "xml.etree.ElementTree.TreeBuilder"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "data"
    fully_qualified_name: "xml.etree.ElementTree.TreeBuilder.data"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.TreeBuilder"
        fully_qualified_name: "xml.etree.ElementTree.TreeBuilder"
      }
    }
    parameters {
      name: "__data"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._parser_input_type"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "data"
    fully_qualified_name: "xml.etree.ElementTree.TreeBuilder.data"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.TreeBuilder"
        fully_qualified_name: "xml.etree.ElementTree.TreeBuilder"
      }
    }
    parameters {
      name: "__data"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "start"
    fully_qualified_name: "xml.etree.ElementTree.TreeBuilder.start"
    return_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.TreeBuilder"
        fully_qualified_name: "xml.etree.ElementTree.TreeBuilder"
      }
    }
    parameters {
      name: "__tag"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._parser_input_type"
      }
    }
    parameters {
      name: "__attrs"
      type_annotation {
        pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._parser_input_type"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.unicode]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
          }
          fully_qualified_name: "xml.etree.ElementTree._parser_input_type"
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "start"
    fully_qualified_name: "xml.etree.ElementTree.TreeBuilder.start"
    return_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.TreeBuilder"
        fully_qualified_name: "xml.etree.ElementTree.TreeBuilder"
      }
    }
    parameters {
      name: "__tag"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
      }
    }
    parameters {
      name: "__attrs"
      type_annotation {
        pretty_printed_name: "builtins.dict[Union[builtins.str,builtins.bytes],Union[builtins.str,builtins.bytes]]"
        args {
          pretty_printed_name: "Union[builtins.str,builtins.bytes]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
        }
        args {
          pretty_printed_name: "Union[builtins.str,builtins.bytes]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "end"
    fully_qualified_name: "xml.etree.ElementTree.TreeBuilder.end"
    return_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.TreeBuilder"
        fully_qualified_name: "xml.etree.ElementTree.TreeBuilder"
      }
    }
    parameters {
      name: "__tag"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._parser_input_type"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "end"
    fully_qualified_name: "xml.etree.ElementTree.TreeBuilder.end"
    return_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.TreeBuilder"
        fully_qualified_name: "xml.etree.ElementTree.TreeBuilder"
      }
    }
    parameters {
      name: "__tag"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "XMLParser"
  fully_qualified_name: "xml.etree.ElementTree.XMLParser"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xml.etree.ElementTree.XMLParser.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
    }
    parameters {
      name: "html"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "target"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "xml.etree.ElementTree.XMLParser.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
    }
    parameters {
      name: "target"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "doctype"
    fully_qualified_name: "xml.etree.ElementTree.XMLParser.doctype"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
    }
    parameters {
      name: "__name"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "__pubid"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "__system"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "close"
    fully_qualified_name: "xml.etree.ElementTree.XMLParser.close"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "feed"
    fully_qualified_name: "xml.etree.ElementTree.XMLParser.feed"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
    }
    parameters {
      name: "__data"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._parser_input_type"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "feed"
    fully_qualified_name: "xml.etree.ElementTree.XMLParser.feed"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
    }
    parameters {
      name: "__data"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "parser"
    fully_qualified_name: "xml.etree.ElementTree.XMLParser.parser"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "target"
    fully_qualified_name: "xml.etree.ElementTree.XMLParser.target"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "entity"
    fully_qualified_name: "xml.etree.ElementTree.XMLParser.entity"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "version"
    fully_qualified_name: "xml.etree.ElementTree.XMLParser.version"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "XMLPullParser"
  fully_qualified_name: "xml.etree.ElementTree.XMLPullParser"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xml.etree.ElementTree.XMLPullParser.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.XMLPullParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLPullParser"
      }
    }
    parameters {
      name: "events"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Sequence[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Sequence[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Sequence"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "_parser"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
        kind: UNION
        args {
          pretty_printed_name: "xml.etree.ElementTree.XMLParser"
          fully_qualified_name: "xml.etree.ElementTree.XMLParser"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "feed"
    fully_qualified_name: "xml.etree.ElementTree.XMLPullParser.feed"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.XMLPullParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLPullParser"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "close"
    fully_qualified_name: "xml.etree.ElementTree.XMLPullParser.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.XMLPullParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLPullParser"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "read_events"
    fully_qualified_name: "xml.etree.ElementTree.XMLPullParser.read_events"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[builtins.str,xml.etree.ElementTree.Element]]"
      args {
        pretty_printed_name: "Tuple[builtins.str,xml.etree.ElementTree.Element]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "xml.etree.ElementTree.Element"
          fully_qualified_name: "xml.etree.ElementTree.Element"
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.XMLPullParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLPullParser"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "C14NWriterTarget"
  fully_qualified_name: "xml.etree.ElementTree.C14NWriterTarget"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xml.etree.ElementTree.C14NWriterTarget.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.C14NWriterTarget"
        fully_qualified_name: "xml.etree.ElementTree.C14NWriterTarget"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "with_comments"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "strip_text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "rewrite_prefixes"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "qname_aware_tags"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "qname_aware_attrs"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "exclude_attrs"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "exclude_tags"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "iselement"
  fully_qualified_name: "xml.etree.ElementTree.iselement"
  return_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  parameters {
    name: "element"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "SubElement"
  fully_qualified_name: "xml.etree.ElementTree.SubElement"
  return_annotation {
    pretty_printed_name: "xml.etree.ElementTree.Element"
    fully_qualified_name: "xml.etree.ElementTree.Element"
  }
  parameters {
    name: "parent"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
  }
  parameters {
    name: "tag"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.unicode]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
      }
      fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
    }
  }
  parameters {
    name: "attrib"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
      }
      fully_qualified_name: "builtins.dict"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.unicode]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
      }
      fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
    }
  }
  valid_for: "27"
}
functions {
  name: "SubElement"
  fully_qualified_name: "xml.etree.ElementTree.SubElement"
  return_annotation {
    pretty_printed_name: "xml.etree.ElementTree.Element"
    fully_qualified_name: "xml.etree.ElementTree.Element"
  }
  parameters {
    name: "parent"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
  }
  parameters {
    name: "tag"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "attrib"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.dict"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "Comment"
  fully_qualified_name: "xml.etree.ElementTree.Comment"
  return_annotation {
    pretty_printed_name: "xml.etree.ElementTree.Element"
    fully_qualified_name: "xml.etree.ElementTree.Element"
  }
  parameters {
    name: "text"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,builtins.unicode,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.unicode"
        fully_qualified_name: "builtins.unicode"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "Comment"
  fully_qualified_name: "xml.etree.ElementTree.Comment"
  return_annotation {
    pretty_printed_name: "xml.etree.ElementTree.Element"
    fully_qualified_name: "xml.etree.ElementTree.Element"
  }
  parameters {
    name: "text"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "ProcessingInstruction"
  fully_qualified_name: "xml.etree.ElementTree.ProcessingInstruction"
  return_annotation {
    pretty_printed_name: "xml.etree.ElementTree.Element"
    fully_qualified_name: "xml.etree.ElementTree.Element"
  }
  parameters {
    name: "target"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.unicode]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
      }
      fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
    }
  }
  parameters {
    name: "text"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,builtins.unicode,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.unicode"
        fully_qualified_name: "builtins.unicode"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "ProcessingInstruction"
  fully_qualified_name: "xml.etree.ElementTree.ProcessingInstruction"
  return_annotation {
    pretty_printed_name: "xml.etree.ElementTree.Element"
    fully_qualified_name: "xml.etree.ElementTree.Element"
  }
  parameters {
    name: "target"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "text"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "register_namespace"
  fully_qualified_name: "xml.etree.ElementTree.register_namespace"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.unicode]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
      }
      fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
    }
  }
  parameters {
    name: "uri"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.unicode]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
      }
      fully_qualified_name: "xml.etree.ElementTree._str_argument_type"
    }
  }
  valid_for: "27"
}
functions {
  name: "register_namespace"
  fully_qualified_name: "xml.etree.ElementTree.register_namespace"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "uri"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "tostring"
  fully_qualified_name: "xml.etree.ElementTree.tostring"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "element"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
  }
  parameters {
    name: "encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "method"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "tostringlist"
  fully_qualified_name: "xml.etree.ElementTree.tostringlist"
  return_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "element"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
  }
  parameters {
    name: "encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "method"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "dump"
  fully_qualified_name: "xml.etree.ElementTree.dump"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "elem"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "parse"
  fully_qualified_name: "xml.etree.ElementTree.parse"
  return_annotation {
    pretty_printed_name: "xml.etree.ElementTree.ElementTree"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree"
  }
  parameters {
    name: "source"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.unicode,builtins.int,typing.IO[Any]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.unicode,builtins.int,typing.IO[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.IO[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.IO"
        }
      }
      fully_qualified_name: "xml.etree.ElementTree._file_or_filename"
    }
  }
  parameters {
    name: "parser"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "parse"
  fully_qualified_name: "xml.etree.ElementTree.parse"
  return_annotation {
    pretty_printed_name: "xml.etree.ElementTree.ElementTree"
    fully_qualified_name: "xml.etree.ElementTree.ElementTree"
  }
  parameters {
    name: "source"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "os.PathLike[builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "os.PathLike"
            }
            args {
              pretty_printed_name: "os.PathLike[builtins.bytes]"
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              fully_qualified_name: "os.PathLike"
            }
          }
          fully_qualified_name: "_typeshed.StrOrBytesPath"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.IO[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.IO"
        }
      }
      fully_qualified_name: "xml.etree.ElementTree._File"
    }
  }
  parameters {
    name: "parser"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "iterparse"
  fully_qualified_name: "xml.etree.ElementTree.iterparse"
  return_annotation {
    pretty_printed_name: "typing.Iterator[Tuple[builtins.str,Any]]"
    args {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "source"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.unicode,builtins.int,typing.IO[Any]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.unicode,builtins.int,typing.IO[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.IO[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.IO"
        }
      }
      fully_qualified_name: "xml.etree.ElementTree._file_or_filename"
    }
  }
  parameters {
    name: "events"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[typing.Sequence[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Sequence[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Sequence"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "parser"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "iterparse"
  fully_qualified_name: "xml.etree.ElementTree.iterparse"
  return_annotation {
    pretty_printed_name: "typing.Iterator[Tuple[builtins.str,Any]]"
    args {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "source"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "os.PathLike[builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "os.PathLike"
            }
            args {
              pretty_printed_name: "os.PathLike[builtins.bytes]"
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              fully_qualified_name: "os.PathLike"
            }
          }
          fully_qualified_name: "_typeshed.StrOrBytesPath"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.IO[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.IO"
        }
      }
      fully_qualified_name: "xml.etree.ElementTree._File"
    }
  }
  parameters {
    name: "events"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[typing.Sequence[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Sequence[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Sequence"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "parser"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "XML"
  fully_qualified_name: "xml.etree.ElementTree.XML"
  return_annotation {
    pretty_printed_name: "xml.etree.ElementTree.Element"
    fully_qualified_name: "xml.etree.ElementTree.Element"
  }
  parameters {
    name: "text"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.unicode]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
      }
      fully_qualified_name: "xml.etree.ElementTree._parser_input_type"
    }
  }
  parameters {
    name: "parser"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "XML"
  fully_qualified_name: "xml.etree.ElementTree.XML"
  return_annotation {
    pretty_printed_name: "xml.etree.ElementTree.Element"
    fully_qualified_name: "xml.etree.ElementTree.Element"
  }
  parameters {
    name: "text"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,builtins.bytes]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
  }
  parameters {
    name: "parser"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "XMLID"
  fully_qualified_name: "xml.etree.ElementTree.XMLID"
  return_annotation {
    pretty_printed_name: "Tuple[xml.etree.ElementTree.Element,builtins.dict[TypeAlias[Any],xml.etree.ElementTree.Element]]"
    kind: TUPLE
    args {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
    args {
      pretty_printed_name: "builtins.dict[TypeAlias[Any],xml.etree.ElementTree.Element]"
      args {
        pretty_printed_name: "TypeAlias[Any]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "xml.etree.ElementTree._str_result_type"
      }
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  parameters {
    name: "text"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.unicode]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
      }
      fully_qualified_name: "xml.etree.ElementTree._parser_input_type"
    }
  }
  parameters {
    name: "parser"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "XMLID"
  fully_qualified_name: "xml.etree.ElementTree.XMLID"
  return_annotation {
    pretty_printed_name: "Tuple[xml.etree.ElementTree.Element,builtins.dict[builtins.str,xml.etree.ElementTree.Element]]"
    kind: TUPLE
    args {
      pretty_printed_name: "xml.etree.ElementTree.Element"
      fully_qualified_name: "xml.etree.ElementTree.Element"
    }
    args {
      pretty_printed_name: "builtins.dict[builtins.str,xml.etree.ElementTree.Element]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  parameters {
    name: "text"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,builtins.bytes]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
  }
  parameters {
    name: "parser"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "fromstringlist"
  fully_qualified_name: "xml.etree.ElementTree.fromstringlist"
  return_annotation {
    pretty_printed_name: "xml.etree.ElementTree.Element"
    fully_qualified_name: "xml.etree.ElementTree.Element"
  }
  parameters {
    name: "sequence"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[TypeAlias[Union[builtins.str,builtins.unicode]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "xml.etree.ElementTree._parser_input_type"
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  parameters {
    name: "parser"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "fromstringlist"
  fully_qualified_name: "xml.etree.ElementTree.fromstringlist"
  return_annotation {
    pretty_printed_name: "xml.etree.ElementTree.Element"
    fully_qualified_name: "xml.etree.ElementTree.Element"
  }
  parameters {
    name: "sequence"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[Union[builtins.str,builtins.bytes]]"
      args {
        pretty_printed_name: "Union[builtins.str,builtins.bytes]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  parameters {
    name: "parser"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.XMLParser,None]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.XMLParser"
        fully_qualified_name: "xml.etree.ElementTree.XMLParser"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "indent"
  fully_qualified_name: "xml.etree.ElementTree.indent"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "tree"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[xml.etree.ElementTree.Element,xml.etree.ElementTree.ElementTree]"
      kind: UNION
      args {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
      args {
        pretty_printed_name: "xml.etree.ElementTree.ElementTree"
        fully_qualified_name: "xml.etree.ElementTree.ElementTree"
      }
    }
  }
  parameters {
    name: "space"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "level"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "39"
  valid_for: "310"
}
overloaded_functions {
  name: "tostring"
  fullname: "xml.etree.ElementTree.tostring"
  definitions {
    name: "tostring"
    fully_qualified_name: "xml.etree.ElementTree.tostring"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      has_default: true
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "tostring"
    fully_qualified_name: "xml.etree.ElementTree.tostring"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "tostring"
    fully_qualified_name: "xml.etree.ElementTree.tostring"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
overloaded_functions {
  name: "tostring"
  fullname: "xml.etree.ElementTree.tostring"
  definitions {
    name: "tostring"
    fully_qualified_name: "xml.etree.ElementTree.tostring"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      has_default: true
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "xml_declaration"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "default_namespace"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "tostring"
    fully_qualified_name: "xml.etree.ElementTree.tostring"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "xml_declaration"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "default_namespace"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "tostring"
    fully_qualified_name: "xml.etree.ElementTree.tostring"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "xml_declaration"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "default_namespace"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
overloaded_functions {
  name: "tostringlist"
  fullname: "xml.etree.ElementTree.tostringlist"
  definitions {
    name: "tostringlist"
    fully_qualified_name: "xml.etree.ElementTree.tostringlist"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.bytes]"
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      has_default: true
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "tostringlist"
    fully_qualified_name: "xml.etree.ElementTree.tostringlist"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "tostringlist"
    fully_qualified_name: "xml.etree.ElementTree.tostringlist"
    return_annotation {
      pretty_printed_name: "builtins.list[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
overloaded_functions {
  name: "tostringlist"
  fullname: "xml.etree.ElementTree.tostringlist"
  definitions {
    name: "tostringlist"
    fully_qualified_name: "xml.etree.ElementTree.tostringlist"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.bytes]"
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      has_default: true
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "xml_declaration"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "default_namespace"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "tostringlist"
    fully_qualified_name: "xml.etree.ElementTree.tostringlist"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "xml_declaration"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "default_namespace"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "tostringlist"
    fully_qualified_name: "xml.etree.ElementTree.tostringlist"
    return_annotation {
      pretty_printed_name: "builtins.list[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xml.etree.ElementTree.Element"
        fully_qualified_name: "xml.etree.ElementTree.Element"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "xml_declaration"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "default_namespace"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "short_empty_elements"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
overloaded_functions {
  name: "canonicalize"
  fullname: "xml.etree.ElementTree.canonicalize"
  definitions {
    name: "canonicalize"
    fully_qualified_name: "xml.etree.ElementTree.canonicalize"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "xml_data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "out"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      has_default: true
    }
    parameters {
      name: "from_file"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes],builtins.int,typing.IO[Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.IO[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.IO"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "with_comments"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "strip_text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "rewrite_prefixes"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "qname_aware_tags"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "qname_aware_attrs"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "exclude_attrs"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "exclude_tags"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "canonicalize"
    fully_qualified_name: "xml.etree.ElementTree.canonicalize"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "xml_data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "out"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "_typeshed.SupportsWrite[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "_typeshed.SupportsWrite"
      }
    }
    parameters {
      name: "from_file"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes],builtins.int,typing.IO[Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.IO[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.IO"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "with_comments"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "strip_text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "rewrite_prefixes"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "qname_aware_tags"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "qname_aware_attrs"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "exclude_attrs"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "exclude_tags"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "VERSION"
  fully_qualified_name: "xml.etree.ElementTree.VERSION"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "PI"
  fully_qualified_name: "xml.etree.ElementTree.PI"
  type_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "fromstring"
  fully_qualified_name: "xml.etree.ElementTree.fromstring"
  type_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
