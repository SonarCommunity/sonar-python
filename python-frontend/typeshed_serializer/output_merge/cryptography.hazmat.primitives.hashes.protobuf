fully_qualified_name: "cryptography.hazmat.primitives.hashes"
classes {
  name: "HashAlgorithm"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  super_classes: "builtins.object"
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "digest_size"
    fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm.digest_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "HashContext"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashContext"
  super_classes: "builtins.object"
  methods {
    name: "copy"
    fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashContext.copy"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.hashes.HashContext"
      fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashContext"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.HashContext"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashContext"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "finalize"
    fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashContext.finalize"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.HashContext"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashContext"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "update"
    fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashContext.update"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.HashContext"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashContext"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "algorithm"
    fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashContext.algorithm"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
      fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "BLAKE2b"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.BLAKE2b"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "BLAKE2s"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.BLAKE2s"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "MD5"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.MD5"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHA1"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHA1"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHA224"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHA224"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHA256"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHA256"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHA384"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHA384"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHA3_224"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHA3_224"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHA3_256"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHA3_256"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHA3_384"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHA3_384"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHA3_512"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHA3_512"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHA512"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHA512"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHA512_224"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHA512_224"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHA512_256"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHA512_256"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHAKE128"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHAKE128"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  methods {
    name: "__init__"
    fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHAKE128.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.SHAKE128"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHAKE128"
      }
    }
    parameters {
      name: "digest_size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SHAKE256"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHAKE256"
  super_classes: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
  methods {
    name: "__init__"
    fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHAKE256.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.SHAKE256"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.SHAKE256"
      }
    }
    parameters {
      name: "digest_size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Hash"
  fully_qualified_name: "cryptography.hazmat.primitives.hashes.Hash"
  super_classes: "cryptography.hazmat.primitives.hashes.HashContext"
  methods {
    name: "__init__"
    fully_qualified_name: "cryptography.hazmat.primitives.hashes.Hash.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.Hash"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.Hash"
      }
    }
    parameters {
      name: "algorithm"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
      }
    }
    parameters {
      name: "backend"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[cryptography.hazmat.backends.interfaces.HashBackend,None]"
        kind: UNION
        args {
          pretty_printed_name: "cryptography.hazmat.backends.interfaces.HashBackend"
          fully_qualified_name: "cryptography.hazmat.backends.interfaces.HashBackend"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "copy"
    fully_qualified_name: "cryptography.hazmat.primitives.hashes.Hash.copy"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.hashes.Hash"
      fully_qualified_name: "cryptography.hazmat.primitives.hashes.Hash"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.Hash"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.Hash"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "finalize"
    fully_qualified_name: "cryptography.hazmat.primitives.hashes.Hash.finalize"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.Hash"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.Hash"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "update"
    fully_qualified_name: "cryptography.hazmat.primitives.hashes.Hash.update"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.Hash"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.Hash"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
