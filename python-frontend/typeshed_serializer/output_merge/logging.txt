fully_qualified_name: "logging"
classes {
  name: "Filterer"
  fully_qualified_name: "logging.Filterer"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.Filterer.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Filterer"
        fully_qualified_name: "logging.Filterer"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addFilter"
    fully_qualified_name: "logging.Filterer.addFilter"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Filterer"
        fully_qualified_name: "logging.Filterer"
      }
    }
    parameters {
      name: "filter"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[logging.Filter,CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[logging.Filter,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "logging.Filter"
            fully_qualified_name: "logging.Filter"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "logging._FilterType"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "removeFilter"
    fully_qualified_name: "logging.Filterer.removeFilter"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Filterer"
        fully_qualified_name: "logging.Filterer"
      }
    }
    parameters {
      name: "filter"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[logging.Filter,CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[logging.Filter,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "logging.Filter"
            fully_qualified_name: "logging.Filter"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "logging._FilterType"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "filter"
    fully_qualified_name: "logging.Filterer.filter"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Filterer"
        fully_qualified_name: "logging.Filterer"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "filters"
    fully_qualified_name: "logging.Filterer.filters"
    type_annotation {
      pretty_printed_name: "builtins.list[logging.Filter]"
      args {
        pretty_printed_name: "logging.Filter"
        fully_qualified_name: "logging.Filter"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Logger"
  fully_qualified_name: "logging.Logger"
  super_classes: "logging.Filterer"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.Logger.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.int,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.int,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "logging._Level"
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "logging.Logger.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.int,builtins.str]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.int,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "logging._Level"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "setLevel"
    fully_qualified_name: "logging.Logger.setLevel"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.int,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.int,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "logging._Level"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "setLevel"
    fully_qualified_name: "logging.Logger.setLevel"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.int,builtins.str]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.int,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "logging._Level"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isEnabledFor"
    fully_qualified_name: "logging.Logger.isEnabledFor"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getEffectiveLevel"
    fully_qualified_name: "logging.Logger.getEffectiveLevel"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getChild"
    fully_qualified_name: "logging.Logger.getChild"
    return_annotation {
      pretty_printed_name: "logging.Logger"
      fully_qualified_name: "logging.Logger"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "suffix"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "debug"
    fully_qualified_name: "logging.Logger.debug"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "debug"
    fully_qualified_name: "logging.Logger.debug"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "debug"
    fully_qualified_name: "logging.Logger.debug"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "info"
    fully_qualified_name: "logging.Logger.info"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "info"
    fully_qualified_name: "logging.Logger.info"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "info"
    fully_qualified_name: "logging.Logger.info"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "warning"
    fully_qualified_name: "logging.Logger.warning"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "warning"
    fully_qualified_name: "logging.Logger.warning"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "warning"
    fully_qualified_name: "logging.Logger.warning"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "error"
    fully_qualified_name: "logging.Logger.error"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "error"
    fully_qualified_name: "logging.Logger.error"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "error"
    fully_qualified_name: "logging.Logger.error"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "critical"
    fully_qualified_name: "logging.Logger.critical"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "critical"
    fully_qualified_name: "logging.Logger.critical"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "critical"
    fully_qualified_name: "logging.Logger.critical"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "log"
    fully_qualified_name: "logging.Logger.log"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "log"
    fully_qualified_name: "logging.Logger.log"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "log"
    fully_qualified_name: "logging.Logger.log"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "exception"
    fully_qualified_name: "logging.Logger.exception"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "exception"
    fully_qualified_name: "logging.Logger.exception"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "exception"
    fully_qualified_name: "logging.Logger.exception"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_log"
    fully_qualified_name: "logging.Logger._log"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Mapping"
          }
        }
        fully_qualified_name: "logging._ArgsType"
      }
    }
    parameters {
      name: "exc_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "Union[types.TracebackType,None]"
            kind: UNION
            args {
              pretty_printed_name: "types.TracebackType"
              fully_qualified_name: "types.TracebackType"
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
        }
        args {
          pretty_printed_name: "Tuple[None,None,None]"
          kind: TUPLE
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "_log"
    fully_qualified_name: "logging.Logger._log"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Mapping"
          }
        }
        fully_qualified_name: "logging._ArgsType"
      }
    }
    parameters {
      name: "exc_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None],builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
          kind: TUPLE
          args {
            pretty_printed_name: "Type[builtins.BaseException]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "Union[types.TracebackType,None]"
            kind: UNION
            args {
              pretty_printed_name: "types.TracebackType"
              fully_qualified_name: "types.TracebackType"
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
        }
        args {
          pretty_printed_name: "Tuple[None,None,None]"
          kind: TUPLE
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "_log"
    fully_qualified_name: "logging.Logger._log"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Mapping"
          }
        }
        fully_qualified_name: "logging._ArgsType"
      }
    }
    parameters {
      name: "exc_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None],builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
          kind: TUPLE
          args {
            pretty_printed_name: "Type[builtins.BaseException]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "Union[types.TracebackType,None]"
            kind: UNION
            args {
              pretty_printed_name: "types.TracebackType"
              fully_qualified_name: "types.TracebackType"
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
        }
        args {
          pretty_printed_name: "Tuple[None,None,None]"
          kind: TUPLE
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "filter"
    fully_qualified_name: "logging.Logger.filter"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addHandler"
    fully_qualified_name: "logging.Logger.addHandler"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "hdlr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "removeHandler"
    fully_qualified_name: "logging.Logger.removeHandler"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "hdlr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "findCaller"
    fully_qualified_name: "logging.Logger.findCaller"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.int,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "findCaller"
    fully_qualified_name: "logging.Logger.findCaller"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.int,builtins.str,Union[builtins.str,None]]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "stack_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "findCaller"
    fully_qualified_name: "logging.Logger.findCaller"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.int,builtins.str,Union[builtins.str,None]]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "stack_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "handle"
    fully_qualified_name: "logging.Logger.handle"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "makeRecord"
    fully_qualified_name: "logging.Logger.makeRecord"
    return_annotation {
      pretty_printed_name: "logging.LogRecord"
      fully_qualified_name: "logging.LogRecord"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "fn"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "lno"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Mapping"
          }
        }
        fully_qualified_name: "logging._ArgsType"
      }
    }
    parameters {
      name: "exc_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None],None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "Union[types.TracebackType,None]"
            kind: UNION
            args {
              pretty_printed_name: "types.TracebackType"
              fully_qualified_name: "types.TracebackType"
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
        }
        args {
          pretty_printed_name: "Tuple[None,None,None]"
          kind: TUPLE
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "makeRecord"
    fully_qualified_name: "logging.Logger.makeRecord"
    return_annotation {
      pretty_printed_name: "logging.LogRecord"
      fully_qualified_name: "logging.LogRecord"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "fn"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "lno"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Mapping"
          }
        }
        fully_qualified_name: "logging._ArgsType"
      }
    }
    parameters {
      name: "exc_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None],None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
          kind: TUPLE
          args {
            pretty_printed_name: "Type[builtins.BaseException]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "Union[types.TracebackType,None]"
            kind: UNION
            args {
              pretty_printed_name: "types.TracebackType"
              fully_qualified_name: "types.TracebackType"
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
        }
        args {
          pretty_printed_name: "Tuple[None,None,None]"
          kind: TUPLE
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "sinfo"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "warn"
    fully_qualified_name: "logging.Logger.warn"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "warn"
    fully_qualified_name: "logging.Logger.warn"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "hasHandlers"
    fully_qualified_name: "logging.Logger.hasHandlers"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "callHandlers"
    fully_qualified_name: "logging.Logger.callHandlers"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "name"
    fully_qualified_name: "logging.Logger.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "level"
    fully_qualified_name: "logging.Logger.level"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "parent"
    fully_qualified_name: "logging.Logger.parent"
    type_annotation {
      pretty_printed_name: "Union[logging.Logger,logging.PlaceHolder]"
      kind: UNION
      args {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
      args {
        pretty_printed_name: "logging.PlaceHolder"
        fully_qualified_name: "logging.PlaceHolder"
      }
    }
    valid_for: "27"
  }
  attributes {
    name: "parent"
    fully_qualified_name: "logging.Logger.parent"
    type_annotation {
      pretty_printed_name: "Union[logging.Logger,None]"
      kind: UNION
      args {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "propagate"
    fully_qualified_name: "logging.Logger.propagate"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "handlers"
    fully_qualified_name: "logging.Logger.handlers"
    type_annotation {
      pretty_printed_name: "builtins.list[logging.Handler]"
      args {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "disabled"
    fully_qualified_name: "logging.Logger.disabled"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
  }
  attributes {
    name: "disabled"
    fully_qualified_name: "logging.Logger.disabled"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "warn"
    fully_qualified_name: "logging.Logger.warn"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "27"
  }
  attributes {
    name: "fatal"
    fully_qualified_name: "logging.Logger.fatal"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "root"
    fully_qualified_name: "logging.Logger.root"
    type_annotation {
      pretty_printed_name: "logging.RootLogger"
      fully_qualified_name: "logging.RootLogger"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "manager"
    fully_qualified_name: "logging.Logger.manager"
    type_annotation {
      pretty_printed_name: "logging.Manager"
      fully_qualified_name: "logging.Manager"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Handler"
  fully_qualified_name: "logging.Handler"
  super_classes: "logging.Filterer"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.Handler.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.int,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.int,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "logging._Level"
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "logging.Handler.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.int,builtins.str]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.int,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "logging._Level"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "createLock"
    fully_qualified_name: "logging.Handler.createLock"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "acquire"
    fully_qualified_name: "logging.Handler.acquire"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "release"
    fully_qualified_name: "logging.Handler.release"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "setLevel"
    fully_qualified_name: "logging.Handler.setLevel"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.int,builtins.unicode]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.int,builtins.unicode]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
        }
        fully_qualified_name: "logging._Level"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "setLevel"
    fully_qualified_name: "logging.Handler.setLevel"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.int,builtins.str]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.int,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "logging._Level"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "setFormatter"
    fully_qualified_name: "logging.Handler.setFormatter"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "fmt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Formatter"
        fully_qualified_name: "logging.Formatter"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "setFormatter"
    fully_qualified_name: "logging.Handler.setFormatter"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "fmt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[logging.Formatter,None]"
        kind: UNION
        args {
          pretty_printed_name: "logging.Formatter"
          fully_qualified_name: "logging.Formatter"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "filter"
    fully_qualified_name: "logging.Handler.filter"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "flush"
    fully_qualified_name: "logging.Handler.flush"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "close"
    fully_qualified_name: "logging.Handler.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "handle"
    fully_qualified_name: "logging.Handler.handle"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "handle"
    fully_qualified_name: "logging.Handler.handle"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "handleError"
    fully_qualified_name: "logging.Handler.handleError"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "format"
    fully_qualified_name: "logging.Handler.format"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "emit"
    fully_qualified_name: "logging.Handler.emit"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_name"
    fully_qualified_name: "logging.Handler.get_name"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_name"
    fully_qualified_name: "logging.Handler.set_name"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Handler"
        fully_qualified_name: "logging.Handler"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "level"
    fully_qualified_name: "logging.Handler.level"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "formatter"
    fully_qualified_name: "logging.Handler.formatter"
    type_annotation {
      pretty_printed_name: "Union[logging.Formatter,None]"
      kind: UNION
      args {
        pretty_printed_name: "logging.Formatter"
        fully_qualified_name: "logging.Formatter"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "lock"
    fully_qualified_name: "logging.Handler.lock"
    type_annotation {
      pretty_printed_name: "Union[threading.Lock,None]"
      kind: UNION
      args {
        pretty_printed_name: "threading.Lock"
        fully_qualified_name: "threading.Lock"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "name"
    fully_qualified_name: "logging.Handler.name"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Formatter"
  fully_qualified_name: "logging.Formatter"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.Formatter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Formatter"
        fully_qualified_name: "logging.Formatter"
      }
    }
    parameters {
      name: "fmt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "datefmt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "logging.Formatter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Formatter"
        fully_qualified_name: "logging.Formatter"
      }
    }
    parameters {
      name: "fmt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "datefmt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "logging.Formatter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Formatter"
        fully_qualified_name: "logging.Formatter"
      }
    }
    parameters {
      name: "fmt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "datefmt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "validate"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "format"
    fully_qualified_name: "logging.Formatter.format"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Formatter"
        fully_qualified_name: "logging.Formatter"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "formatTime"
    fully_qualified_name: "logging.Formatter.formatTime"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Formatter"
        fully_qualified_name: "logging.Formatter"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    parameters {
      name: "datefmt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "formatException"
    fully_qualified_name: "logging.Formatter.formatException"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Formatter"
        fully_qualified_name: "logging.Formatter"
      }
    }
    parameters {
      name: "ei"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.type"
              fully_qualified_name: "builtins.type"
            }
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
            args {
              pretty_printed_name: "Union[types.TracebackType,None]"
              kind: UNION
              args {
                pretty_printed_name: "types.TracebackType"
                fully_qualified_name: "types.TracebackType"
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          args {
            pretty_printed_name: "Tuple[None,None,None]"
            kind: TUPLE
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
        }
        fully_qualified_name: "logging._SysExcInfoType"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "formatException"
    fully_qualified_name: "logging.Formatter.formatException"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Formatter"
        fully_qualified_name: "logging.Formatter"
      }
    }
    parameters {
      name: "ei"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
            kind: TUPLE
            args {
              pretty_printed_name: "Type[builtins.BaseException]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
            }
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
            args {
              pretty_printed_name: "Union[types.TracebackType,None]"
              kind: UNION
              args {
                pretty_printed_name: "types.TracebackType"
                fully_qualified_name: "types.TracebackType"
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          args {
            pretty_printed_name: "Tuple[None,None,None]"
            kind: TUPLE
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
        }
        fully_qualified_name: "logging._SysExcInfoType"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "formatMessage"
    fully_qualified_name: "logging.Formatter.formatMessage"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Formatter"
        fully_qualified_name: "logging.Formatter"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "formatStack"
    fully_qualified_name: "logging.Formatter.formatStack"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Formatter"
        fully_qualified_name: "logging.Formatter"
      }
    }
    parameters {
      name: "stack_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "usesTime"
    fully_qualified_name: "logging.Formatter.usesTime"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Formatter"
        fully_qualified_name: "logging.Formatter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "converter"
    fully_qualified_name: "logging.Formatter.converter"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_fmt"
    fully_qualified_name: "logging.Formatter._fmt"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "datefmt"
    fully_qualified_name: "logging.Formatter.datefmt"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_style"
    fully_qualified_name: "logging.Formatter._style"
    type_annotation {
      pretty_printed_name: "logging.PercentStyle"
      fully_qualified_name: "logging.PercentStyle"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "default_time_format"
    fully_qualified_name: "logging.Formatter.default_time_format"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "default_msec_format"
    fully_qualified_name: "logging.Formatter.default_msec_format"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  attributes {
    name: "default_msec_format"
    fully_qualified_name: "logging.Formatter.default_msec_format"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Filter"
  fully_qualified_name: "logging.Filter"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.Filter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Filter"
        fully_qualified_name: "logging.Filter"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "filter"
    fully_qualified_name: "logging.Filter.filter"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Filter"
        fully_qualified_name: "logging.Filter"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "name"
    fully_qualified_name: "logging.Filter.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "nlen"
    fully_qualified_name: "logging.Filter.nlen"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "LogRecord"
  fully_qualified_name: "logging.LogRecord"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.LogRecord.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "pathname"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "lineno"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Mapping"
          }
        }
        fully_qualified_name: "logging._ArgsType"
      }
    }
    parameters {
      name: "exc_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None],None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "Union[types.TracebackType,None]"
            kind: UNION
            args {
              pretty_printed_name: "types.TracebackType"
              fully_qualified_name: "types.TracebackType"
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
        }
        args {
          pretty_printed_name: "Tuple[None,None,None]"
          kind: TUPLE
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "logging.LogRecord.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "pathname"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "lineno"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]],None]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.tuple[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.tuple"
            }
            args {
              pretty_printed_name: "typing.Mapping[builtins.str,Any]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "typing.Mapping"
            }
          }
          fully_qualified_name: "logging._ArgsType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None],None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
          kind: TUPLE
          args {
            pretty_printed_name: "Type[builtins.BaseException]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "Union[types.TracebackType,None]"
            kind: UNION
            args {
              pretty_printed_name: "types.TracebackType"
              fully_qualified_name: "types.TracebackType"
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
        }
        args {
          pretty_printed_name: "Tuple[None,None,None]"
          kind: TUPLE
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "sinfo"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getMessage"
    fully_qualified_name: "logging.LogRecord.getMessage"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LogRecord"
        fully_qualified_name: "logging.LogRecord"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "args"
    fully_qualified_name: "logging.LogRecord.args"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      fully_qualified_name: "logging._ArgsType"
    }
    valid_for: "27"
  }
  attributes {
    name: "args"
    fully_qualified_name: "logging.LogRecord.args"
    type_annotation {
      pretty_printed_name: "Union[TypeAlias[Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]],None]"
      kind: UNION
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Mapping"
          }
        }
        fully_qualified_name: "logging._ArgsType"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "asctime"
    fully_qualified_name: "logging.LogRecord.asctime"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "created"
    fully_qualified_name: "logging.LogRecord.created"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
  }
  attributes {
    name: "created"
    fully_qualified_name: "logging.LogRecord.created"
    type_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "exc_info"
    fully_qualified_name: "logging.LogRecord.exc_info"
    type_annotation {
      pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None],None]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      args {
        pretty_printed_name: "Tuple[None,None,None]"
        kind: TUPLE
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
  }
  attributes {
    name: "exc_info"
    fully_qualified_name: "logging.LogRecord.exc_info"
    type_annotation {
      pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None],None]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
        kind: TUPLE
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      args {
        pretty_printed_name: "Tuple[None,None,None]"
        kind: TUPLE
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "exc_text"
    fully_qualified_name: "logging.LogRecord.exc_text"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "filename"
    fully_qualified_name: "logging.LogRecord.filename"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "funcName"
    fully_qualified_name: "logging.LogRecord.funcName"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "levelname"
    fully_qualified_name: "logging.LogRecord.levelname"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "levelno"
    fully_qualified_name: "logging.LogRecord.levelno"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "lineno"
    fully_qualified_name: "logging.LogRecord.lineno"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "module"
    fully_qualified_name: "logging.LogRecord.module"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "msecs"
    fully_qualified_name: "logging.LogRecord.msecs"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
  }
  attributes {
    name: "msecs"
    fully_qualified_name: "logging.LogRecord.msecs"
    type_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "message"
    fully_qualified_name: "logging.LogRecord.message"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "msg"
    fully_qualified_name: "logging.LogRecord.msg"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "name"
    fully_qualified_name: "logging.LogRecord.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "pathname"
    fully_qualified_name: "logging.LogRecord.pathname"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "process"
    fully_qualified_name: "logging.LogRecord.process"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
  }
  attributes {
    name: "process"
    fully_qualified_name: "logging.LogRecord.process"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "processName"
    fully_qualified_name: "logging.LogRecord.processName"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
  }
  attributes {
    name: "processName"
    fully_qualified_name: "logging.LogRecord.processName"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "relativeCreated"
    fully_qualified_name: "logging.LogRecord.relativeCreated"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
  }
  attributes {
    name: "relativeCreated"
    fully_qualified_name: "logging.LogRecord.relativeCreated"
    type_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "thread"
    fully_qualified_name: "logging.LogRecord.thread"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
  }
  attributes {
    name: "thread"
    fully_qualified_name: "logging.LogRecord.thread"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "threadName"
    fully_qualified_name: "logging.LogRecord.threadName"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
  }
  attributes {
    name: "threadName"
    fully_qualified_name: "logging.LogRecord.threadName"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "stack_info"
    fully_qualified_name: "logging.LogRecord.stack_info"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "LoggerAdapter"
  fully_qualified_name: "logging.LoggerAdapter"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.LoggerAdapter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "logger"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    parameters {
      name: "extra"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "logging.LoggerAdapter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "logger"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[logging.Logger,logging.LoggerAdapter]"
        kind: UNION
        args {
          pretty_printed_name: "logging.Logger"
          fully_qualified_name: "logging.Logger"
        }
        args {
          pretty_printed_name: "logging.LoggerAdapter"
          fully_qualified_name: "logging.LoggerAdapter"
        }
      }
    }
    parameters {
      name: "extra"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "logging.LoggerAdapter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "logger"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[logging.Logger,logging.LoggerAdapter]"
        kind: UNION
        args {
          pretty_printed_name: "logging.Logger"
          fully_qualified_name: "logging.Logger"
        }
        args {
          pretty_printed_name: "logging.LoggerAdapter"
          fully_qualified_name: "logging.LoggerAdapter"
        }
      }
    }
    parameters {
      name: "extra"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "310"
  }
  methods {
    name: "process"
    fully_qualified_name: "logging.LoggerAdapter.process"
    return_annotation {
      pretty_printed_name: "Tuple[Any,typing.MutableMapping[builtins.str,Any]]"
      kind: TUPLE
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "typing.MutableMapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "debug"
    fully_qualified_name: "logging.LoggerAdapter.debug"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "debug"
    fully_qualified_name: "logging.LoggerAdapter.debug"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "debug"
    fully_qualified_name: "logging.LoggerAdapter.debug"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "info"
    fully_qualified_name: "logging.LoggerAdapter.info"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "info"
    fully_qualified_name: "logging.LoggerAdapter.info"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "info"
    fully_qualified_name: "logging.LoggerAdapter.info"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "warning"
    fully_qualified_name: "logging.LoggerAdapter.warning"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "warning"
    fully_qualified_name: "logging.LoggerAdapter.warning"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "warning"
    fully_qualified_name: "logging.LoggerAdapter.warning"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "error"
    fully_qualified_name: "logging.LoggerAdapter.error"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "error"
    fully_qualified_name: "logging.LoggerAdapter.error"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "error"
    fully_qualified_name: "logging.LoggerAdapter.error"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "exception"
    fully_qualified_name: "logging.LoggerAdapter.exception"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "exception"
    fully_qualified_name: "logging.LoggerAdapter.exception"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "exception"
    fully_qualified_name: "logging.LoggerAdapter.exception"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "critical"
    fully_qualified_name: "logging.LoggerAdapter.critical"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "critical"
    fully_qualified_name: "logging.LoggerAdapter.critical"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "critical"
    fully_qualified_name: "logging.LoggerAdapter.critical"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "log"
    fully_qualified_name: "logging.LoggerAdapter.log"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "builtins.type"
                  fully_qualified_name: "builtins.type"
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "log"
    fully_qualified_name: "logging.LoggerAdapter.log"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "log"
    fully_qualified_name: "logging.LoggerAdapter.log"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isEnabledFor"
    fully_qualified_name: "logging.LoggerAdapter.isEnabledFor"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "warn"
    fully_qualified_name: "logging.LoggerAdapter.warn"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "warn"
    fully_qualified_name: "logging.LoggerAdapter.warn"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "exc_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
              kind: UNION
              args {
                pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
                kind: TUPLE
                args {
                  pretty_printed_name: "Type[builtins.BaseException]"
                  kind: TYPE
                  args {
                    pretty_printed_name: "builtins.BaseException"
                    fully_qualified_name: "builtins.BaseException"
                  }
                }
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
                args {
                  pretty_printed_name: "Union[types.TracebackType,None]"
                  kind: UNION
                  args {
                    pretty_printed_name: "types.TracebackType"
                    fully_qualified_name: "types.TracebackType"
                  }
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                }
              }
              args {
                pretty_printed_name: "Tuple[None,None,None]"
                kind: TUPLE
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            fully_qualified_name: "logging._SysExcInfoType"
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        fully_qualified_name: "logging._ExcInfoType"
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "stacklevel"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getEffectiveLevel"
    fully_qualified_name: "logging.LoggerAdapter.getEffectiveLevel"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "setLevel"
    fully_qualified_name: "logging.LoggerAdapter.setLevel"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.int,builtins.str]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.int,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "logging._Level"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "hasHandlers"
    fully_qualified_name: "logging.LoggerAdapter.hasHandlers"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_log"
    fully_qualified_name: "logging.LoggerAdapter._log"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.tuple[Any],typing.Mapping[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Mapping"
          }
        }
        fully_qualified_name: "logging._ArgsType"
      }
    }
    parameters {
      name: "exc_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None],builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
          kind: TUPLE
          args {
            pretty_printed_name: "Type[builtins.BaseException]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
          }
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "Union[types.TracebackType,None]"
            kind: UNION
            args {
              pretty_printed_name: "types.TracebackType"
              fully_qualified_name: "types.TracebackType"
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
        }
        args {
          pretty_printed_name: "Tuple[None,None,None]"
          kind: TUPLE
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "stack_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "name"
    fully_qualified_name: "logging.LoggerAdapter.name"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "logger"
    fully_qualified_name: "logging.LoggerAdapter.logger"
    type_annotation {
      pretty_printed_name: "logging.Logger"
      fully_qualified_name: "logging.Logger"
    }
    valid_for: "27"
  }
  attributes {
    name: "logger"
    fully_qualified_name: "logging.LoggerAdapter.logger"
    type_annotation {
      pretty_printed_name: "Union[logging.Logger,logging.LoggerAdapter]"
      kind: UNION
      args {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
      args {
        pretty_printed_name: "logging.LoggerAdapter"
        fully_qualified_name: "logging.LoggerAdapter"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "extra"
    fully_qualified_name: "logging.LoggerAdapter.extra"
    type_annotation {
      pretty_printed_name: "typing.Mapping[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Mapping"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  attributes {
    name: "extra"
    fully_qualified_name: "logging.LoggerAdapter.extra"
    type_annotation {
      pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "310"
  }
  attributes {
    name: "manager"
    fully_qualified_name: "logging.LoggerAdapter.manager"
    type_annotation {
      pretty_printed_name: "logging.Manager"
      fully_qualified_name: "logging.Manager"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "StreamHandler"
  fully_qualified_name: "logging.StreamHandler"
  super_classes: "logging.Handler"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.StreamHandler.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.StreamHandler"
        fully_qualified_name: "logging.StreamHandler"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.IO[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.IO[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.IO"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
  }
  valid_for: "27"
  attributes {
    name: "stream"
    fully_qualified_name: "logging.StreamHandler.stream"
    type_annotation {
      pretty_printed_name: "typing.IO[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.IO"
    }
    valid_for: "27"
  }
}
classes {
  name: "StreamHandler"
  fully_qualified_name: "logging.StreamHandler"
  super_classes: "logging.Handler"
  methods {
    name: "setStream"
    fully_qualified_name: "logging.StreamHandler.setStream"
    return_annotation {
      pretty_printed_name: "Union[logging._StreamT,None]"
      kind: UNION
      args {
        pretty_printed_name: "logging._StreamT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.StreamHandler[logging._StreamT]"
        args {
          pretty_printed_name: "logging._StreamT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "logging.StreamHandler"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging._StreamT"
        kind: TYPE_VAR
      }
    }
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "logging.StreamHandler.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "logging.StreamHandler.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "logging.StreamHandler[typing.TextIO]"
          args {
            pretty_printed_name: "typing.TextIO"
            fully_qualified_name: "typing.TextIO"
          }
          fully_qualified_name: "logging.StreamHandler"
        }
      }
      parameters {
        name: "stream"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "logging.StreamHandler.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "logging.StreamHandler[logging._StreamT]"
          args {
            pretty_printed_name: "logging._StreamT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "logging.StreamHandler"
        }
      }
      parameters {
        name: "stream"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "logging._StreamT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "stream"
    fully_qualified_name: "logging.StreamHandler.stream"
    type_annotation {
      pretty_printed_name: "logging._StreamT"
      kind: TYPE_VAR
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "terminator"
    fully_qualified_name: "logging.StreamHandler.terminator"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "FileHandler"
  fully_qualified_name: "logging.FileHandler"
  super_classes: "logging.StreamHandler"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.FileHandler.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.FileHandler"
        fully_qualified_name: "logging.FileHandler"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.unicode"
        fully_qualified_name: "builtins.unicode"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "delay"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "logging.FileHandler.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.FileHandler"
        fully_qualified_name: "logging.FileHandler"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "delay"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "logging.FileHandler.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.FileHandler"
        fully_qualified_name: "logging.FileHandler"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "delay"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_open"
    fully_qualified_name: "logging.FileHandler._open"
    return_annotation {
      pretty_printed_name: "typing.IO[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.IO"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.FileHandler"
        fully_qualified_name: "logging.FileHandler"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "_open"
    fully_qualified_name: "logging.FileHandler._open"
    return_annotation {
      pretty_printed_name: "io.TextIOWrapper"
      fully_qualified_name: "io.TextIOWrapper"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.FileHandler"
        fully_qualified_name: "logging.FileHandler"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "baseFilename"
    fully_qualified_name: "logging.FileHandler.baseFilename"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "mode"
    fully_qualified_name: "logging.FileHandler.mode"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "encoding"
    fully_qualified_name: "logging.FileHandler.encoding"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "delay"
    fully_qualified_name: "logging.FileHandler.delay"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "errors"
    fully_qualified_name: "logging.FileHandler.errors"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "NullHandler"
  fully_qualified_name: "logging.NullHandler"
  super_classes: "logging.Handler"
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "PlaceHolder"
  fully_qualified_name: "logging.PlaceHolder"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.PlaceHolder.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.PlaceHolder"
        fully_qualified_name: "logging.PlaceHolder"
      }
    }
    parameters {
      name: "alogger"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "append"
    fully_qualified_name: "logging.PlaceHolder.append"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.PlaceHolder"
        fully_qualified_name: "logging.PlaceHolder"
      }
    }
    parameters {
      name: "alogger"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "loggerMap"
    fully_qualified_name: "logging.PlaceHolder.loggerMap"
    type_annotation {
      pretty_printed_name: "builtins.dict[logging.Logger,None]"
      args {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "RootLogger"
  fully_qualified_name: "logging.RootLogger"
  super_classes: "logging.Logger"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.RootLogger.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.RootLogger"
        fully_qualified_name: "logging.RootLogger"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Manager"
  fully_qualified_name: "logging.Manager"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.Manager.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Manager"
        fully_qualified_name: "logging.Manager"
      }
    }
    parameters {
      name: "rootnode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.RootLogger"
        fully_qualified_name: "logging.RootLogger"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getLogger"
    fully_qualified_name: "logging.Manager.getLogger"
    return_annotation {
      pretty_printed_name: "logging.Logger"
      fully_qualified_name: "logging.Logger"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Manager"
        fully_qualified_name: "logging.Manager"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "setLoggerClass"
    fully_qualified_name: "logging.Manager.setLoggerClass"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Manager"
        fully_qualified_name: "logging.Manager"
      }
    }
    parameters {
      name: "klass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[logging.Logger]"
        kind: TYPE
        args {
          pretty_printed_name: "logging.Logger"
          fully_qualified_name: "logging.Logger"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "setLogRecordFactory"
    fully_qualified_name: "logging.Manager.setLogRecordFactory"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.Manager"
        fully_qualified_name: "logging.Manager"
      }
    }
    parameters {
      name: "factory"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "root"
    fully_qualified_name: "logging.Manager.root"
    type_annotation {
      pretty_printed_name: "logging.RootLogger"
      fully_qualified_name: "logging.RootLogger"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "disable"
    fully_qualified_name: "logging.Manager.disable"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "emittedNoHandlerWarning"
    fully_qualified_name: "logging.Manager.emittedNoHandlerWarning"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "loggerDict"
    fully_qualified_name: "logging.Manager.loggerDict"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Union[logging.Logger,logging.PlaceHolder]]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Union[logging.Logger,logging.PlaceHolder]"
        kind: UNION
        args {
          pretty_printed_name: "logging.Logger"
          fully_qualified_name: "logging.Logger"
        }
        args {
          pretty_printed_name: "logging.PlaceHolder"
          fully_qualified_name: "logging.PlaceHolder"
        }
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "loggerClass"
    fully_qualified_name: "logging.Manager.loggerClass"
    type_annotation {
      pretty_printed_name: "Union[Type[logging.Logger],None]"
      kind: UNION
      args {
        pretty_printed_name: "Type[logging.Logger]"
        kind: TYPE
        args {
          pretty_printed_name: "logging.Logger"
          fully_qualified_name: "logging.Logger"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "logRecordFactory"
    fully_qualified_name: "logging.Manager.logRecordFactory"
    type_annotation {
      pretty_printed_name: "Union[CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "BufferingFormatter"
  fully_qualified_name: "logging.BufferingFormatter"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.BufferingFormatter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.BufferingFormatter"
        fully_qualified_name: "logging.BufferingFormatter"
      }
    }
    parameters {
      name: "linefmt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[logging.Formatter,None]"
        kind: UNION
        args {
          pretty_printed_name: "logging.Formatter"
          fully_qualified_name: "logging.Formatter"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "formatHeader"
    fully_qualified_name: "logging.BufferingFormatter.formatHeader"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.BufferingFormatter"
        fully_qualified_name: "logging.BufferingFormatter"
      }
    }
    parameters {
      name: "records"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[logging.LogRecord]"
        args {
          pretty_printed_name: "logging.LogRecord"
          fully_qualified_name: "logging.LogRecord"
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "formatFooter"
    fully_qualified_name: "logging.BufferingFormatter.formatFooter"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.BufferingFormatter"
        fully_qualified_name: "logging.BufferingFormatter"
      }
    }
    parameters {
      name: "records"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[logging.LogRecord]"
        args {
          pretty_printed_name: "logging.LogRecord"
          fully_qualified_name: "logging.LogRecord"
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "format"
    fully_qualified_name: "logging.BufferingFormatter.format"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.BufferingFormatter"
        fully_qualified_name: "logging.BufferingFormatter"
      }
    }
    parameters {
      name: "records"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[logging.LogRecord]"
        args {
          pretty_printed_name: "logging.LogRecord"
          fully_qualified_name: "logging.LogRecord"
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "linefmt"
    fully_qualified_name: "logging.BufferingFormatter.linefmt"
    type_annotation {
      pretty_printed_name: "logging.Formatter"
      fully_qualified_name: "logging.Formatter"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "PercentStyle"
  fully_qualified_name: "logging.PercentStyle"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "logging.PercentStyle.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.PercentStyle"
        fully_qualified_name: "logging.PercentStyle"
      }
    }
    parameters {
      name: "fmt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "usesTime"
    fully_qualified_name: "logging.PercentStyle.usesTime"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.PercentStyle"
        fully_qualified_name: "logging.PercentStyle"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "format"
    fully_qualified_name: "logging.PercentStyle.format"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.PercentStyle"
        fully_qualified_name: "logging.PercentStyle"
      }
    }
    parameters {
      name: "record"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "validate"
    fully_qualified_name: "logging.PercentStyle.validate"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "logging.PercentStyle"
        fully_qualified_name: "logging.PercentStyle"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "default_format"
    fully_qualified_name: "logging.PercentStyle.default_format"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "asctime_format"
    fully_qualified_name: "logging.PercentStyle.asctime_format"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "asctime_search"
    fully_qualified_name: "logging.PercentStyle.asctime_search"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_fmt"
    fully_qualified_name: "logging.PercentStyle._fmt"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "validation_pattern"
    fully_qualified_name: "logging.PercentStyle.validation_pattern"
    type_annotation {
      pretty_printed_name: "typing.Pattern[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.Pattern"
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "StrFormatStyle"
  fully_qualified_name: "logging.StrFormatStyle"
  super_classes: "logging.PercentStyle"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "fmt_spec"
    fully_qualified_name: "logging.StrFormatStyle.fmt_spec"
    type_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "field_spec"
    fully_qualified_name: "logging.StrFormatStyle.field_spec"
    type_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "StringTemplateStyle"
  fully_qualified_name: "logging.StringTemplateStyle"
  super_classes: "logging.PercentStyle"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "_tpl"
    fully_qualified_name: "logging.StringTemplateStyle._tpl"
    type_annotation {
      pretty_printed_name: "string.Template"
      fully_qualified_name: "string.Template"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "currentframe"
  fully_qualified_name: "logging.currentframe"
  return_annotation {
    pretty_printed_name: "types.FrameType"
    fully_qualified_name: "types.FrameType"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "getLoggerClass"
  fully_qualified_name: "logging.getLoggerClass"
  return_annotation {
    pretty_printed_name: "builtins.type"
    fully_qualified_name: "builtins.type"
  }
  valid_for: "27"
}
functions {
  name: "getLoggerClass"
  fully_qualified_name: "logging.getLoggerClass"
  return_annotation {
    pretty_printed_name: "Type[logging.Logger]"
    kind: TYPE
    args {
      pretty_printed_name: "logging.Logger"
      fully_qualified_name: "logging.Logger"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "debug"
  fully_qualified_name: "logging.debug"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.type"
                fully_qualified_name: "builtins.type"
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "27"
}
functions {
  name: "debug"
  fully_qualified_name: "logging.debug"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
functions {
  name: "debug"
  fully_qualified_name: "logging.debug"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "stacklevel"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "info"
  fully_qualified_name: "logging.info"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.type"
                fully_qualified_name: "builtins.type"
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "27"
}
functions {
  name: "info"
  fully_qualified_name: "logging.info"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
functions {
  name: "info"
  fully_qualified_name: "logging.info"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "stacklevel"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "warning"
  fully_qualified_name: "logging.warning"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.type"
                fully_qualified_name: "builtins.type"
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "27"
}
functions {
  name: "warning"
  fully_qualified_name: "logging.warning"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
functions {
  name: "warning"
  fully_qualified_name: "logging.warning"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "stacklevel"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "error"
  fully_qualified_name: "logging.error"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.type"
                fully_qualified_name: "builtins.type"
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "27"
}
functions {
  name: "error"
  fully_qualified_name: "logging.error"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
functions {
  name: "error"
  fully_qualified_name: "logging.error"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "stacklevel"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "critical"
  fully_qualified_name: "logging.critical"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.type"
                fully_qualified_name: "builtins.type"
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "27"
}
functions {
  name: "critical"
  fully_qualified_name: "logging.critical"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
functions {
  name: "critical"
  fully_qualified_name: "logging.critical"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "stacklevel"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "exception"
  fully_qualified_name: "logging.exception"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.type"
                fully_qualified_name: "builtins.type"
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "27"
}
functions {
  name: "exception"
  fully_qualified_name: "logging.exception"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
functions {
  name: "exception"
  fully_qualified_name: "logging.exception"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "stacklevel"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "log"
  fully_qualified_name: "logging.log"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "level"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[builtins.type,builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.type"
                fully_qualified_name: "builtins.type"
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "27"
}
functions {
  name: "log"
  fully_qualified_name: "logging.log"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "level"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
functions {
  name: "log"
  fully_qualified_name: "logging.log"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "level"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "stacklevel"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "disable"
  fully_qualified_name: "logging.disable"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "level"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
}
functions {
  name: "disable"
  fully_qualified_name: "logging.disable"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "level"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "addLevelName"
  fully_qualified_name: "logging.addLevelName"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "level"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "levelName"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "getLevelName"
  fully_qualified_name: "logging.getLevelName"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "level"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.int,builtins.str]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  valid_for: "27"
}
functions {
  name: "getLevelName"
  fully_qualified_name: "logging.getLevelName"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "level"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.int,builtins.str]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.int,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      fully_qualified_name: "logging._Level"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "makeLogRecord"
  fully_qualified_name: "logging.makeLogRecord"
  return_annotation {
    pretty_printed_name: "logging.LogRecord"
    fully_qualified_name: "logging.LogRecord"
  }
  parameters {
    name: "dict"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Mapping[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Mapping"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "shutdown"
  fully_qualified_name: "logging.shutdown"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "handlerList"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Sequence"
    }
    has_default: true
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "setLoggerClass"
  fully_qualified_name: "logging.setLoggerClass"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "klass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.type"
      fully_qualified_name: "builtins.type"
    }
  }
  valid_for: "27"
}
functions {
  name: "setLoggerClass"
  fully_qualified_name: "logging.setLoggerClass"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "klass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Type[logging.Logger]"
      kind: TYPE
      args {
        pretty_printed_name: "logging.Logger"
        fully_qualified_name: "logging.Logger"
      }
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "captureWarnings"
  fully_qualified_name: "logging.captureWarnings"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "capture"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "getLogger"
  fully_qualified_name: "logging.getLogger"
  return_annotation {
    pretty_printed_name: "logging.Logger"
    fully_qualified_name: "logging.Logger"
  }
  parameters {
    name: "name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "getLogRecordFactory"
  fully_qualified_name: "logging.getLogRecordFactory"
  return_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "warn"
  fully_qualified_name: "logging.warn"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
functions {
  name: "warn"
  fully_qualified_name: "logging.warn"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "exc_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]"
            kind: UNION
            args {
              pretty_printed_name: "Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]"
              kind: TUPLE
              args {
                pretty_printed_name: "Type[builtins.BaseException]"
                kind: TYPE
                args {
                  pretty_printed_name: "builtins.BaseException"
                  fully_qualified_name: "builtins.BaseException"
                }
              }
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
              args {
                pretty_printed_name: "Union[types.TracebackType,None]"
                kind: UNION
                args {
                  pretty_printed_name: "types.TracebackType"
                  fully_qualified_name: "types.TracebackType"
                }
                args {
                  pretty_printed_name: "None"
                  kind: NONE
                }
              }
            }
            args {
              pretty_printed_name: "Tuple[None,None,None]"
              kind: TUPLE
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
            }
          }
          fully_qualified_name: "logging._SysExcInfoType"
        }
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "logging._ExcInfoType"
    }
    has_default: true
  }
  parameters {
    name: "stack_info"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "stacklevel"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "extra"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "basicConfig"
  fully_qualified_name: "logging.basicConfig"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "filename"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "os.PathLike[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "os.PathLike"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "filemode"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "format"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "datefmt"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "style"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "level"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.int,builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "stream"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[_typeshed.SupportsWrite[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "_typeshed.SupportsWrite[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "_typeshed.SupportsWrite"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "handlers"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[typing.Iterable[logging.Handler],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Iterable[logging.Handler]"
        args {
          pretty_printed_name: "logging.Handler"
          fully_qualified_name: "logging.Handler"
        }
        fully_qualified_name: "typing.Iterable"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
functions {
  name: "basicConfig"
  fully_qualified_name: "logging.basicConfig"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "filename"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "os.PathLike[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "os.PathLike"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "filemode"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "format"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "datefmt"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "style"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "level"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.int,builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "stream"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[_typeshed.SupportsWrite[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "_typeshed.SupportsWrite[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "_typeshed.SupportsWrite"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "handlers"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[typing.Iterable[logging.Handler],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Iterable[logging.Handler]"
        args {
          pretty_printed_name: "logging.Handler"
          fully_qualified_name: "logging.Handler"
        }
        fully_qualified_name: "typing.Iterable"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "force"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "38"
}
functions {
  name: "basicConfig"
  fully_qualified_name: "logging.basicConfig"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "filename"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "os.PathLike[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "os.PathLike"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "filemode"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "format"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "datefmt"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "style"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "level"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.int,builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "stream"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[_typeshed.SupportsWrite[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "_typeshed.SupportsWrite[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "_typeshed.SupportsWrite"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "handlers"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[typing.Iterable[logging.Handler],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Iterable[logging.Handler]"
        args {
          pretty_printed_name: "logging.Handler"
          fully_qualified_name: "logging.Handler"
        }
        fully_qualified_name: "typing.Iterable"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "force"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "encoding"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "errors"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "setLogRecordFactory"
  fully_qualified_name: "logging.setLogRecordFactory"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "factory"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
overloaded_functions {
  name: "getLogger"
  fullname: "logging.getLogger"
  definitions {
    name: "getLogger"
    fully_qualified_name: "logging.getLogger"
    return_annotation {
      pretty_printed_name: "logging.Logger"
      fully_qualified_name: "logging.Logger"
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "getLogger"
    fully_qualified_name: "logging.getLogger"
    return_annotation {
      pretty_printed_name: "logging.Logger"
      fully_qualified_name: "logging.Logger"
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.unicode,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "27"
}
overloaded_functions {
  name: "basicConfig"
  fullname: "logging.basicConfig"
  definitions {
    name: "basicConfig"
    fully_qualified_name: "logging.basicConfig"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "basicConfig"
    fully_qualified_name: "logging.basicConfig"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "filename"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "filemode"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "format"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "datefmt"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "level"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.unicode,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "stream"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "typing.IO[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.IO"
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "27"
}
vars {
  name: "raiseExceptions"
  fully_qualified_name: "logging.raiseExceptions"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "logThreads"
  fully_qualified_name: "logging.logThreads"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "logMultiprocessing"
  fully_qualified_name: "logging.logMultiprocessing"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "logProcesses"
  fully_qualified_name: "logging.logProcesses"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_srcfile"
  fully_qualified_name: "logging._srcfile"
  type_annotation {
    pretty_printed_name: "Union[builtins.str,None]"
    kind: UNION
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_levelNames"
  fully_qualified_name: "logging._levelNames"
  type_annotation {
    pretty_printed_name: "builtins.dict[Union[builtins.int,builtins.str],Union[builtins.str,builtins.int]]"
    args {
      pretty_printed_name: "Union[builtins.int,builtins.str]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Union[builtins.str,builtins.int]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    fully_qualified_name: "builtins.dict"
  }
  valid_for: "27"
}
vars {
  name: "CRITICAL"
  fully_qualified_name: "logging.CRITICAL"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "FATAL"
  fully_qualified_name: "logging.FATAL"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "ERROR"
  fully_qualified_name: "logging.ERROR"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "WARNING"
  fully_qualified_name: "logging.WARNING"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "WARN"
  fully_qualified_name: "logging.WARN"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "INFO"
  fully_qualified_name: "logging.INFO"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "DEBUG"
  fully_qualified_name: "logging.DEBUG"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "NOTSET"
  fully_qualified_name: "logging.NOTSET"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "warn"
  fully_qualified_name: "logging.warn"
  type_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  valid_for: "27"
}
vars {
  name: "fatal"
  fully_qualified_name: "logging.fatal"
  type_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "root"
  fully_qualified_name: "logging.root"
  type_annotation {
    pretty_printed_name: "logging.RootLogger"
    fully_qualified_name: "logging.RootLogger"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "BASIC_FORMAT"
  fully_qualified_name: "logging.BASIC_FORMAT"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_levelToName"
  fully_qualified_name: "logging._levelToName"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.int,builtins.str]"
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.dict"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_nameToLevel"
  fully_qualified_name: "logging._nameToLevel"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,builtins.int]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    fully_qualified_name: "builtins.dict"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "lastResort"
  fully_qualified_name: "logging.lastResort"
  type_annotation {
    pretty_printed_name: "Union[logging.StreamHandler[Any],None]"
    kind: UNION
    args {
      pretty_printed_name: "logging.StreamHandler[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "logging.StreamHandler"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_STYLES"
  fully_qualified_name: "logging._STYLES"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Tuple[logging.PercentStyle,builtins.str]]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Tuple[logging.PercentStyle,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "logging.PercentStyle"
        fully_qualified_name: "logging.PercentStyle"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    fully_qualified_name: "builtins.dict"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
