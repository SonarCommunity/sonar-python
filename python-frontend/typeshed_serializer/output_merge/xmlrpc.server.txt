fully_qualified_name: "xmlrpc.server"
classes {
  name: "_DispatchArity0"
  fully_qualified_name: "xmlrpc.server._DispatchArity0"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "xmlrpc.server._DispatchArity0.__call__"
    return_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.list[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.dict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
      }
      fully_qualified_name: "xmlrpc.server._Marshallable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server._DispatchArity0"
        fully_qualified_name: "xmlrpc.server._DispatchArity0"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_DispatchArity1"
  fully_qualified_name: "xmlrpc.server._DispatchArity1"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "xmlrpc.server._DispatchArity1.__call__"
    return_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.list[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.dict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
      }
      fully_qualified_name: "xmlrpc.server._Marshallable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server._DispatchArity1"
        fully_qualified_name: "xmlrpc.server._DispatchArity1"
      }
    }
    parameters {
      name: "__arg1"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        fully_qualified_name: "xmlrpc.server._Marshallable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_DispatchArity2"
  fully_qualified_name: "xmlrpc.server._DispatchArity2"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "xmlrpc.server._DispatchArity2.__call__"
    return_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.list[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.dict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
      }
      fully_qualified_name: "xmlrpc.server._Marshallable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server._DispatchArity2"
        fully_qualified_name: "xmlrpc.server._DispatchArity2"
      }
    }
    parameters {
      name: "__arg1"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        fully_qualified_name: "xmlrpc.server._Marshallable"
      }
    }
    parameters {
      name: "__arg2"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        fully_qualified_name: "xmlrpc.server._Marshallable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_DispatchArity3"
  fully_qualified_name: "xmlrpc.server._DispatchArity3"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "xmlrpc.server._DispatchArity3.__call__"
    return_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.list[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.dict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
      }
      fully_qualified_name: "xmlrpc.server._Marshallable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server._DispatchArity3"
        fully_qualified_name: "xmlrpc.server._DispatchArity3"
      }
    }
    parameters {
      name: "__arg1"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        fully_qualified_name: "xmlrpc.server._Marshallable"
      }
    }
    parameters {
      name: "__arg2"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        fully_qualified_name: "xmlrpc.server._Marshallable"
      }
    }
    parameters {
      name: "__arg3"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        fully_qualified_name: "xmlrpc.server._Marshallable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_DispatchArity4"
  fully_qualified_name: "xmlrpc.server._DispatchArity4"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "xmlrpc.server._DispatchArity4.__call__"
    return_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.list[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.dict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
      }
      fully_qualified_name: "xmlrpc.server._Marshallable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server._DispatchArity4"
        fully_qualified_name: "xmlrpc.server._DispatchArity4"
      }
    }
    parameters {
      name: "__arg1"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        fully_qualified_name: "xmlrpc.server._Marshallable"
      }
    }
    parameters {
      name: "__arg2"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        fully_qualified_name: "xmlrpc.server._Marshallable"
      }
    }
    parameters {
      name: "__arg3"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        fully_qualified_name: "xmlrpc.server._Marshallable"
      }
    }
    parameters {
      name: "__arg4"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        fully_qualified_name: "xmlrpc.server._Marshallable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_DispatchArityN"
  fully_qualified_name: "xmlrpc.server._DispatchArityN"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "xmlrpc.server._DispatchArityN.__call__"
    return_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.list[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.dict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
      }
      fully_qualified_name: "xmlrpc.server._Marshallable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server._DispatchArityN"
        fully_qualified_name: "xmlrpc.server._DispatchArityN"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        fully_qualified_name: "xmlrpc.server._Marshallable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SimpleXMLRPCDispatcher"
  fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    parameters {
      name: "allow_none"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "use_builtin_types"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "register_instance"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.register_instance"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    parameters {
      name: "instance"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "allow_dotted_names"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "register_function"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.register_function"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    parameters {
      name: "function"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[xmlrpc.server._DispatchArity0,xmlrpc.server._DispatchArity1,xmlrpc.server._DispatchArity2,xmlrpc.server._DispatchArity3,xmlrpc.server._DispatchArity4,xmlrpc.server._DispatchArityN]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[xmlrpc.server._DispatchArity0,xmlrpc.server._DispatchArity1,xmlrpc.server._DispatchArity2,xmlrpc.server._DispatchArity3,xmlrpc.server._DispatchArity4,xmlrpc.server._DispatchArityN]"
          kind: UNION
          args {
            pretty_printed_name: "xmlrpc.server._DispatchArity0"
            fully_qualified_name: "xmlrpc.server._DispatchArity0"
          }
          args {
            pretty_printed_name: "xmlrpc.server._DispatchArity1"
            fully_qualified_name: "xmlrpc.server._DispatchArity1"
          }
          args {
            pretty_printed_name: "xmlrpc.server._DispatchArity2"
            fully_qualified_name: "xmlrpc.server._DispatchArity2"
          }
          args {
            pretty_printed_name: "xmlrpc.server._DispatchArity3"
            fully_qualified_name: "xmlrpc.server._DispatchArity3"
          }
          args {
            pretty_printed_name: "xmlrpc.server._DispatchArity4"
            fully_qualified_name: "xmlrpc.server._DispatchArity4"
          }
          args {
            pretty_printed_name: "xmlrpc.server._DispatchArityN"
            fully_qualified_name: "xmlrpc.server._DispatchArityN"
          }
        }
        fully_qualified_name: "xmlrpc.server._DispatchProtocol"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
  }
  methods {
    name: "register_function"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.register_function"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    parameters {
      name: "function"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[xmlrpc.server._DispatchArity0,xmlrpc.server._DispatchArity1,xmlrpc.server._DispatchArity2,xmlrpc.server._DispatchArity3,xmlrpc.server._DispatchArity4,xmlrpc.server._DispatchArityN,None]"
        kind: UNION
        args {
          pretty_printed_name: "xmlrpc.server._DispatchArity0"
          fully_qualified_name: "xmlrpc.server._DispatchArity0"
        }
        args {
          pretty_printed_name: "xmlrpc.server._DispatchArity1"
          fully_qualified_name: "xmlrpc.server._DispatchArity1"
        }
        args {
          pretty_printed_name: "xmlrpc.server._DispatchArity2"
          fully_qualified_name: "xmlrpc.server._DispatchArity2"
        }
        args {
          pretty_printed_name: "xmlrpc.server._DispatchArity3"
          fully_qualified_name: "xmlrpc.server._DispatchArity3"
        }
        args {
          pretty_printed_name: "xmlrpc.server._DispatchArity4"
          fully_qualified_name: "xmlrpc.server._DispatchArity4"
        }
        args {
          pretty_printed_name: "xmlrpc.server._DispatchArityN"
          fully_qualified_name: "xmlrpc.server._DispatchArityN"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "register_introspection_functions"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.register_introspection_functions"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "register_multicall_functions"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.register_multicall_functions"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_marshaled_dispatch"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher._marshaled_dispatch"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "dispatch_method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "system_listMethods"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.system_listMethods"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "system_methodSignature"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.system_methodSignature"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    parameters {
      name: "method_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "system_methodHelp"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.system_methodHelp"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    parameters {
      name: "method_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "system_multicall"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.system_multicall"
    return_annotation {
      pretty_printed_name: "builtins.list[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.dict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        fully_qualified_name: "xmlrpc.server._Marshallable"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    parameters {
      name: "call_list"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[builtins.dict[builtins.str,TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]]]"
        args {
          pretty_printed_name: "builtins.dict[builtins.str,TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
              kind: UNION
              args {
                pretty_printed_name: "None"
                kind: NONE
              }
              args {
                pretty_printed_name: "builtins.bool"
                fully_qualified_name: "builtins.bool"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "builtins.tuple[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.tuple"
              }
              args {
                pretty_printed_name: "builtins.list[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.list"
              }
              args {
                pretty_printed_name: "builtins.dict[Any,Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "builtins.dict"
              }
              args {
                pretty_printed_name: "datetime.datetime"
                fully_qualified_name: "datetime.datetime"
              }
            }
            fully_qualified_name: "xmlrpc.server._Marshallable"
          }
          fully_qualified_name: "builtins.dict"
        }
        fully_qualified_name: "builtins.list"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_dispatch"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher._dispatch"
    return_annotation {
      pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.list[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.dict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
      }
      fully_qualified_name: "xmlrpc.server._Marshallable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "params"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]]"
        args {
          pretty_printed_name: "TypeAlias[Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[None,builtins.bool,builtins.int,builtins.float,builtins.str,builtins.bytes,builtins.tuple[Any],builtins.list[Any],builtins.dict[Any,Any],datetime.datetime]"
            kind: UNION
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "builtins.bool"
              fully_qualified_name: "builtins.bool"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "builtins.tuple[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.tuple"
            }
            args {
              pretty_printed_name: "builtins.list[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.list"
            }
            args {
              pretty_printed_name: "builtins.dict[Any,Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "builtins.dict"
            }
            args {
              pretty_printed_name: "datetime.datetime"
              fully_qualified_name: "datetime.datetime"
            }
          }
          fully_qualified_name: "xmlrpc.server._Marshallable"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "funcs"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.funcs"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,TypeAlias[Union[xmlrpc.server._DispatchArity0,xmlrpc.server._DispatchArity1,xmlrpc.server._DispatchArity2,xmlrpc.server._DispatchArity3,xmlrpc.server._DispatchArity4,xmlrpc.server._DispatchArityN]]]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "TypeAlias[Union[xmlrpc.server._DispatchArity0,xmlrpc.server._DispatchArity1,xmlrpc.server._DispatchArity2,xmlrpc.server._DispatchArity3,xmlrpc.server._DispatchArity4,xmlrpc.server._DispatchArityN]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[xmlrpc.server._DispatchArity0,xmlrpc.server._DispatchArity1,xmlrpc.server._DispatchArity2,xmlrpc.server._DispatchArity3,xmlrpc.server._DispatchArity4,xmlrpc.server._DispatchArityN]"
          kind: UNION
          args {
            pretty_printed_name: "xmlrpc.server._DispatchArity0"
            fully_qualified_name: "xmlrpc.server._DispatchArity0"
          }
          args {
            pretty_printed_name: "xmlrpc.server._DispatchArity1"
            fully_qualified_name: "xmlrpc.server._DispatchArity1"
          }
          args {
            pretty_printed_name: "xmlrpc.server._DispatchArity2"
            fully_qualified_name: "xmlrpc.server._DispatchArity2"
          }
          args {
            pretty_printed_name: "xmlrpc.server._DispatchArity3"
            fully_qualified_name: "xmlrpc.server._DispatchArity3"
          }
          args {
            pretty_printed_name: "xmlrpc.server._DispatchArity4"
            fully_qualified_name: "xmlrpc.server._DispatchArity4"
          }
          args {
            pretty_printed_name: "xmlrpc.server._DispatchArityN"
            fully_qualified_name: "xmlrpc.server._DispatchArityN"
          }
        }
        fully_qualified_name: "xmlrpc.server._DispatchProtocol"
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "instance"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.instance"
    type_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "allow_none"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.allow_none"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "encoding"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.encoding"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "use_builtin_types"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher.use_builtin_types"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "SimpleXMLRPCRequestHandler"
  fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
  super_classes: "http.server.BaseHTTPRequestHandler"
  methods {
    name: "accept_encodings"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler.accept_encodings"
    return_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,builtins.float]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "is_rpc_path_valid"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler.is_rpc_path_valid"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "do_POST"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler.do_POST"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "decode_request_content"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler.decode_request_content"
    return_annotation {
      pretty_printed_name: "Union[builtins.bytes,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "report_404"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler.report_404"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "log_request"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler.log_request"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
      }
    }
    parameters {
      name: "code"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "rpc_paths"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler.rpc_paths"
    type_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "encode_threshold"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler.encode_threshold"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "aepattern"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler.aepattern"
    type_annotation {
      pretty_printed_name: "typing.Pattern[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.Pattern"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "SimpleXMLRPCServer"
  fully_qualified_name: "xmlrpc.server.SimpleXMLRPCServer"
  super_classes: "socketserver.TCPServer"
  super_classes: "xmlrpc.server.SimpleXMLRPCDispatcher"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCServer.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCServer"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCServer"
      }
    }
    parameters {
      name: "addr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "requestHandler"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[xmlrpc.server.SimpleXMLRPCRequestHandler]"
        kind: TYPE
        args {
          pretty_printed_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
          fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
        }
      }
      has_default: true
    }
    parameters {
      name: "logRequests"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "allow_none"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "bind_and_activate"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use_builtin_types"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "allow_reuse_address"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCServer.allow_reuse_address"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_send_traceback_handler"
    fully_qualified_name: "xmlrpc.server.SimpleXMLRPCServer._send_traceback_handler"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "MultiPathXMLRPCServer"
  fully_qualified_name: "xmlrpc.server.MultiPathXMLRPCServer"
  super_classes: "xmlrpc.server.SimpleXMLRPCServer"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.server.MultiPathXMLRPCServer.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.MultiPathXMLRPCServer"
        fully_qualified_name: "xmlrpc.server.MultiPathXMLRPCServer"
      }
    }
    parameters {
      name: "addr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "requestHandler"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[xmlrpc.server.SimpleXMLRPCRequestHandler]"
        kind: TYPE
        args {
          pretty_printed_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
          fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
        }
      }
      has_default: true
    }
    parameters {
      name: "logRequests"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "allow_none"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "bind_and_activate"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use_builtin_types"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "add_dispatcher"
    fully_qualified_name: "xmlrpc.server.MultiPathXMLRPCServer.add_dispatcher"
    return_annotation {
      pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.MultiPathXMLRPCServer"
        fully_qualified_name: "xmlrpc.server.MultiPathXMLRPCServer"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "dispatcher"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_dispatcher"
    fully_qualified_name: "xmlrpc.server.MultiPathXMLRPCServer.get_dispatcher"
    return_annotation {
      pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.MultiPathXMLRPCServer"
        fully_qualified_name: "xmlrpc.server.MultiPathXMLRPCServer"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_marshaled_dispatch"
    fully_qualified_name: "xmlrpc.server.MultiPathXMLRPCServer._marshaled_dispatch"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.MultiPathXMLRPCServer"
        fully_qualified_name: "xmlrpc.server.MultiPathXMLRPCServer"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "dispatch_method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "dispatchers"
    fully_qualified_name: "xmlrpc.server.MultiPathXMLRPCServer.dispatchers"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,xmlrpc.server.SimpleXMLRPCDispatcher]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
        fully_qualified_name: "xmlrpc.server.SimpleXMLRPCDispatcher"
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "allow_none"
    fully_qualified_name: "xmlrpc.server.MultiPathXMLRPCServer.allow_none"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "encoding"
    fully_qualified_name: "xmlrpc.server.MultiPathXMLRPCServer.encoding"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "CGIXMLRPCRequestHandler"
  fully_qualified_name: "xmlrpc.server.CGIXMLRPCRequestHandler"
  super_classes: "xmlrpc.server.SimpleXMLRPCDispatcher"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.server.CGIXMLRPCRequestHandler.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.CGIXMLRPCRequestHandler"
        fully_qualified_name: "xmlrpc.server.CGIXMLRPCRequestHandler"
      }
    }
    parameters {
      name: "allow_none"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "use_builtin_types"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "handle_xmlrpc"
    fully_qualified_name: "xmlrpc.server.CGIXMLRPCRequestHandler.handle_xmlrpc"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.CGIXMLRPCRequestHandler"
        fully_qualified_name: "xmlrpc.server.CGIXMLRPCRequestHandler"
      }
    }
    parameters {
      name: "request_text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "handle_get"
    fully_qualified_name: "xmlrpc.server.CGIXMLRPCRequestHandler.handle_get"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.CGIXMLRPCRequestHandler"
        fully_qualified_name: "xmlrpc.server.CGIXMLRPCRequestHandler"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "handle_request"
    fully_qualified_name: "xmlrpc.server.CGIXMLRPCRequestHandler.handle_request"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.CGIXMLRPCRequestHandler"
        fully_qualified_name: "xmlrpc.server.CGIXMLRPCRequestHandler"
      }
    }
    parameters {
      name: "request_text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "ServerHTMLDoc"
  fully_qualified_name: "xmlrpc.server.ServerHTMLDoc"
  super_classes: "pydoc.HTMLDoc"
  methods {
    name: "docroutine"
    fully_qualified_name: "xmlrpc.server.ServerHTMLDoc.docroutine"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.ServerHTMLDoc"
        fully_qualified_name: "xmlrpc.server.ServerHTMLDoc"
      }
    }
    parameters {
      name: "object"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "mod"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "funcs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Mapping"
      }
      has_default: true
    }
    parameters {
      name: "classes"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Mapping"
      }
      has_default: true
    }
    parameters {
      name: "methods"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Mapping"
      }
      has_default: true
    }
    parameters {
      name: "cl"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.type,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "docserver"
    fully_qualified_name: "xmlrpc.server.ServerHTMLDoc.docserver"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.ServerHTMLDoc"
        fully_qualified_name: "xmlrpc.server.ServerHTMLDoc"
      }
    }
    parameters {
      name: "server_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "package_documentation"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "methods"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "XMLRPCDocGenerator"
  fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.XMLRPCDocGenerator"
        fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_server_title"
    fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator.set_server_title"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.XMLRPCDocGenerator"
        fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator"
      }
    }
    parameters {
      name: "server_title"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_server_name"
    fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator.set_server_name"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.XMLRPCDocGenerator"
        fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator"
      }
    }
    parameters {
      name: "server_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_server_documentation"
    fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator.set_server_documentation"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.XMLRPCDocGenerator"
        fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator"
      }
    }
    parameters {
      name: "server_documentation"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "generate_html_documentation"
    fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator.generate_html_documentation"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.XMLRPCDocGenerator"
        fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "server_name"
    fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator.server_name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "server_documentation"
    fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator.server_documentation"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "server_title"
    fully_qualified_name: "xmlrpc.server.XMLRPCDocGenerator.server_title"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "DocXMLRPCRequestHandler"
  fully_qualified_name: "xmlrpc.server.DocXMLRPCRequestHandler"
  super_classes: "xmlrpc.server.SimpleXMLRPCRequestHandler"
  methods {
    name: "do_GET"
    fully_qualified_name: "xmlrpc.server.DocXMLRPCRequestHandler.do_GET"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.DocXMLRPCRequestHandler"
        fully_qualified_name: "xmlrpc.server.DocXMLRPCRequestHandler"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "DocXMLRPCServer"
  fully_qualified_name: "xmlrpc.server.DocXMLRPCServer"
  super_classes: "xmlrpc.server.SimpleXMLRPCServer"
  super_classes: "xmlrpc.server.XMLRPCDocGenerator"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.server.DocXMLRPCServer.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.DocXMLRPCServer"
        fully_qualified_name: "xmlrpc.server.DocXMLRPCServer"
      }
    }
    parameters {
      name: "addr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "requestHandler"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[xmlrpc.server.SimpleXMLRPCRequestHandler]"
        kind: TYPE
        args {
          pretty_printed_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
          fully_qualified_name: "xmlrpc.server.SimpleXMLRPCRequestHandler"
        }
      }
      has_default: true
    }
    parameters {
      name: "logRequests"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "allow_none"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "bind_and_activate"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use_builtin_types"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "DocCGIXMLRPCRequestHandler"
  fully_qualified_name: "xmlrpc.server.DocCGIXMLRPCRequestHandler"
  super_classes: "xmlrpc.server.CGIXMLRPCRequestHandler"
  super_classes: "xmlrpc.server.XMLRPCDocGenerator"
  methods {
    name: "__init__"
    fully_qualified_name: "xmlrpc.server.DocCGIXMLRPCRequestHandler.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "xmlrpc.server.DocCGIXMLRPCRequestHandler"
        fully_qualified_name: "xmlrpc.server.DocCGIXMLRPCRequestHandler"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "resolve_dotted_attribute"
  fully_qualified_name: "xmlrpc.server.resolve_dotted_attribute"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "obj"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "attr"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "allow_dotted_names"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "list_public_methods"
  fully_qualified_name: "xmlrpc.server.list_public_methods"
  return_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "obj"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "http"
  fully_qualified_name: "http"
  is_imported_module: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
