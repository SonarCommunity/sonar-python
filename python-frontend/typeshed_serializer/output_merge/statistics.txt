fully_qualified_name: "statistics"
classes {
  name: "StatisticsError"
  fully_qualified_name: "statistics.StatisticsError"
  super_classes: "builtins.ValueError"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "NormalDist"
  fully_qualified_name: "statistics.NormalDist"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "statistics.NormalDist.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "mu"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "sigma"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "mean"
    fully_qualified_name: "statistics.NormalDist.mean"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "median"
    fully_qualified_name: "statistics.NormalDist.median"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "mode"
    fully_qualified_name: "statistics.NormalDist.mode"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "stdev"
    fully_qualified_name: "statistics.NormalDist.stdev"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "variance"
    fully_qualified_name: "statistics.NormalDist.variance"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "from_samples"
    fully_qualified_name: "statistics.NormalDist.from_samples"
    return_annotation {
      pretty_printed_name: "statistics._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[statistics._T]"
        kind: TYPE
        args {
          pretty_printed_name: "statistics._T"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing.SupportsFloat]"
        args {
          pretty_printed_name: "typing.SupportsFloat"
          fully_qualified_name: "typing.SupportsFloat"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "samples"
    fully_qualified_name: "statistics.NormalDist.samples"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.float]"
      args {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "n"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "seed"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "pdf"
    fully_qualified_name: "statistics.NormalDist.pdf"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "cdf"
    fully_qualified_name: "statistics.NormalDist.cdf"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "inv_cdf"
    fully_qualified_name: "statistics.NormalDist.inv_cdf"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "p"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "overlap"
    fully_qualified_name: "statistics.NormalDist.overlap"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "quantiles"
    fully_qualified_name: "statistics.NormalDist.quantiles"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.float]"
      args {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "n"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__add__"
    fully_qualified_name: "statistics.NormalDist.__add__"
    return_annotation {
      pretty_printed_name: "statistics.NormalDist"
      fully_qualified_name: "statistics.NormalDist"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "x2"
      type_annotation {
        pretty_printed_name: "Union[builtins.float,statistics.NormalDist]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "statistics.NormalDist"
          fully_qualified_name: "statistics.NormalDist"
        }
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__sub__"
    fully_qualified_name: "statistics.NormalDist.__sub__"
    return_annotation {
      pretty_printed_name: "statistics.NormalDist"
      fully_qualified_name: "statistics.NormalDist"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "x2"
      type_annotation {
        pretty_printed_name: "Union[builtins.float,statistics.NormalDist]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "statistics.NormalDist"
          fully_qualified_name: "statistics.NormalDist"
        }
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__mul__"
    fully_qualified_name: "statistics.NormalDist.__mul__"
    return_annotation {
      pretty_printed_name: "statistics.NormalDist"
      fully_qualified_name: "statistics.NormalDist"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "x2"
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__truediv__"
    fully_qualified_name: "statistics.NormalDist.__truediv__"
    return_annotation {
      pretty_printed_name: "statistics.NormalDist"
      fully_qualified_name: "statistics.NormalDist"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "x2"
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__pos__"
    fully_qualified_name: "statistics.NormalDist.__pos__"
    return_annotation {
      pretty_printed_name: "statistics.NormalDist"
      fully_qualified_name: "statistics.NormalDist"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__neg__"
    fully_qualified_name: "statistics.NormalDist.__neg__"
    return_annotation {
      pretty_printed_name: "statistics.NormalDist"
      fully_qualified_name: "statistics.NormalDist"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__rsub__"
    fully_qualified_name: "statistics.NormalDist.__rsub__"
    return_annotation {
      pretty_printed_name: "statistics.NormalDist"
      fully_qualified_name: "statistics.NormalDist"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "x2"
      type_annotation {
        pretty_printed_name: "Union[builtins.float,statistics.NormalDist]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "statistics.NormalDist"
          fully_qualified_name: "statistics.NormalDist"
        }
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__hash__"
    fully_qualified_name: "statistics.NormalDist.__hash__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "zscore"
    fully_qualified_name: "statistics.NormalDist.zscore"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.NormalDist"
        fully_qualified_name: "statistics.NormalDist"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "__radd__"
    fully_qualified_name: "statistics.NormalDist.__radd__"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__rmul__"
    fully_qualified_name: "statistics.NormalDist.__rmul__"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "LinearRegression"
  fully_qualified_name: "statistics.LinearRegression"
  super_classes: "builtins.tuple"
  methods {
    name: "_replace"
    fully_qualified_name: "statistics.LinearRegression._replace"
    return_annotation {
      pretty_printed_name: "statistics.LinearRegression._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.LinearRegression._NT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "intercept"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "slope"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    valid_for: "310"
  }
  methods {
    name: "__new__"
    fully_qualified_name: "statistics.LinearRegression.__new__"
    return_annotation {
      pretty_printed_name: "statistics.LinearRegression._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[statistics.LinearRegression._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "statistics.LinearRegression._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "intercept"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    parameters {
      name: "slope"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "310"
  }
  methods {
    name: "_asdict"
    fully_qualified_name: "statistics.LinearRegression._asdict"
    return_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "statistics.LinearRegression._NT"
        kind: TYPE_VAR
      }
    }
    valid_for: "310"
  }
  methods {
    name: "_make"
    fully_qualified_name: "statistics.LinearRegression._make"
    return_annotation {
      pretty_printed_name: "statistics.LinearRegression._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[statistics.LinearRegression._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "statistics.LinearRegression._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "new"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "len"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "310"
  }
  valid_for: "310"
  attributes {
    name: "intercept"
    fully_qualified_name: "statistics.LinearRegression.intercept"
    type_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "slope"
    fully_qualified_name: "statistics.LinearRegression.slope"
    type_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "_fields"
    fully_qualified_name: "statistics.LinearRegression._fields"
    type_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "310"
  }
  attributes {
    name: "_field_types"
    fully_qualified_name: "statistics.LinearRegression._field_types"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "310"
  }
  attributes {
    name: "_field_defaults"
    fully_qualified_name: "statistics.LinearRegression._field_defaults"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "310"
  }
  attributes {
    name: "_source"
    fully_qualified_name: "statistics.LinearRegression._source"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "310"
  }
  attributes {
    name: "__annotations__"
    fully_qualified_name: "statistics.LinearRegression.__annotations__"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "310"
  }
}
functions {
  name: "mean"
  fully_qualified_name: "statistics.mean"
  return_annotation {
    pretty_printed_name: "statistics._NumberT"
    kind: TYPE_VAR
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[statistics._NumberT]"
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "harmonic_mean"
  fully_qualified_name: "statistics.harmonic_mean"
  return_annotation {
    pretty_printed_name: "statistics._NumberT"
    kind: TYPE_VAR
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[statistics._NumberT]"
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
functions {
  name: "harmonic_mean"
  fully_qualified_name: "statistics.harmonic_mean"
  return_annotation {
    pretty_printed_name: "statistics._NumberT"
    kind: TYPE_VAR
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[statistics._NumberT]"
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "weights"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[typing.Iterable[TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Iterable[TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]]"
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.float,decimal.Decimal,fractions.Fraction]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "decimal.Decimal"
              fully_qualified_name: "decimal.Decimal"
            }
            args {
              pretty_printed_name: "fractions.Fraction"
              fully_qualified_name: "fractions.Fraction"
            }
          }
          fully_qualified_name: "statistics._Number"
        }
        fully_qualified_name: "typing.Iterable"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "310"
}
functions {
  name: "median"
  fully_qualified_name: "statistics.median"
  return_annotation {
    pretty_printed_name: "statistics._NumberT"
    kind: TYPE_VAR
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[statistics._NumberT]"
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "median_low"
  fully_qualified_name: "statistics.median_low"
  return_annotation {
    pretty_printed_name: "_typeshed.SupportsLessThanT"
    kind: TYPE_VAR
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[_typeshed.SupportsLessThanT]"
      args {
        pretty_printed_name: "_typeshed.SupportsLessThanT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "median_high"
  fully_qualified_name: "statistics.median_high"
  return_annotation {
    pretty_printed_name: "_typeshed.SupportsLessThanT"
    kind: TYPE_VAR
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[_typeshed.SupportsLessThanT]"
      args {
        pretty_printed_name: "_typeshed.SupportsLessThanT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "median_grouped"
  fully_qualified_name: "statistics.median_grouped"
  return_annotation {
    pretty_printed_name: "statistics._NumberT"
    kind: TYPE_VAR
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[statistics._NumberT]"
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "interval"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "statistics._NumberT"
      kind: TYPE_VAR
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "mode"
  fully_qualified_name: "statistics.mode"
  return_annotation {
    pretty_printed_name: "statistics._HashableT"
    kind: TYPE_VAR
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[statistics._HashableT]"
      args {
        pretty_printed_name: "statistics._HashableT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "pstdev"
  fully_qualified_name: "statistics.pstdev"
  return_annotation {
    pretty_printed_name: "statistics._NumberT"
    kind: TYPE_VAR
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[statistics._NumberT]"
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "mu"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[statistics._NumberT,None]"
      kind: UNION
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "pvariance"
  fully_qualified_name: "statistics.pvariance"
  return_annotation {
    pretty_printed_name: "statistics._NumberT"
    kind: TYPE_VAR
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[statistics._NumberT]"
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "mu"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[statistics._NumberT,None]"
      kind: UNION
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "stdev"
  fully_qualified_name: "statistics.stdev"
  return_annotation {
    pretty_printed_name: "statistics._NumberT"
    kind: TYPE_VAR
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[statistics._NumberT]"
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "xbar"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[statistics._NumberT,None]"
      kind: UNION
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "variance"
  fully_qualified_name: "statistics.variance"
  return_annotation {
    pretty_printed_name: "statistics._NumberT"
    kind: TYPE_VAR
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[statistics._NumberT]"
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "xbar"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[statistics._NumberT,None]"
      kind: UNION
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "fmean"
  fully_qualified_name: "statistics.fmean"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[typing.SupportsFloat]"
      args {
        pretty_printed_name: "typing.SupportsFloat"
        fully_qualified_name: "typing.SupportsFloat"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "geometric_mean"
  fully_qualified_name: "statistics.geometric_mean"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[typing.SupportsFloat]"
      args {
        pretty_printed_name: "typing.SupportsFloat"
        fully_qualified_name: "typing.SupportsFloat"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "multimode"
  fully_qualified_name: "statistics.multimode"
  return_annotation {
    pretty_printed_name: "builtins.list[statistics._HashableT]"
    args {
      pretty_printed_name: "statistics._HashableT"
      kind: TYPE_VAR
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[statistics._HashableT]"
      args {
        pretty_printed_name: "statistics._HashableT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "quantiles"
  fully_qualified_name: "statistics.quantiles"
  return_annotation {
    pretty_printed_name: "builtins.list[statistics._NumberT]"
    args {
      pretty_printed_name: "statistics._NumberT"
      kind: TYPE_VAR
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[statistics._NumberT]"
      args {
        pretty_printed_name: "statistics._NumberT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "n"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "method"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "correlation"
  fully_qualified_name: "statistics.correlation"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "typing.Sequence[TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.float,decimal.Decimal,fractions.Fraction]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "decimal.Decimal"
            fully_qualified_name: "decimal.Decimal"
          }
          args {
            pretty_printed_name: "fractions.Fraction"
            fully_qualified_name: "fractions.Fraction"
          }
        }
        fully_qualified_name: "statistics._Number"
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  parameters {
    name: "__y"
    type_annotation {
      pretty_printed_name: "typing.Sequence[TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.float,decimal.Decimal,fractions.Fraction]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "decimal.Decimal"
            fully_qualified_name: "decimal.Decimal"
          }
          args {
            pretty_printed_name: "fractions.Fraction"
            fully_qualified_name: "fractions.Fraction"
          }
        }
        fully_qualified_name: "statistics._Number"
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  valid_for: "310"
}
functions {
  name: "covariance"
  fully_qualified_name: "statistics.covariance"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "typing.Sequence[TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.float,decimal.Decimal,fractions.Fraction]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "decimal.Decimal"
            fully_qualified_name: "decimal.Decimal"
          }
          args {
            pretty_printed_name: "fractions.Fraction"
            fully_qualified_name: "fractions.Fraction"
          }
        }
        fully_qualified_name: "statistics._Number"
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  parameters {
    name: "__y"
    type_annotation {
      pretty_printed_name: "typing.Sequence[TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.float,decimal.Decimal,fractions.Fraction]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "decimal.Decimal"
            fully_qualified_name: "decimal.Decimal"
          }
          args {
            pretty_printed_name: "fractions.Fraction"
            fully_qualified_name: "fractions.Fraction"
          }
        }
        fully_qualified_name: "statistics._Number"
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  valid_for: "310"
}
functions {
  name: "linear_regression"
  fully_qualified_name: "statistics.linear_regression"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.float,builtins.float]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    args {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
  }
  parameters {
    name: "__regressor"
    type_annotation {
      pretty_printed_name: "typing.Sequence[TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.float,decimal.Decimal,fractions.Fraction]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "decimal.Decimal"
            fully_qualified_name: "decimal.Decimal"
          }
          args {
            pretty_printed_name: "fractions.Fraction"
            fully_qualified_name: "fractions.Fraction"
          }
        }
        fully_qualified_name: "statistics._Number"
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  parameters {
    name: "__dependent_variable"
    type_annotation {
      pretty_printed_name: "typing.Sequence[TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]]"
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.float,decimal.Decimal,fractions.Fraction]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.float,decimal.Decimal,fractions.Fraction]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "decimal.Decimal"
            fully_qualified_name: "decimal.Decimal"
          }
          args {
            pretty_printed_name: "fractions.Fraction"
            fully_qualified_name: "fractions.Fraction"
          }
        }
        fully_qualified_name: "statistics._Number"
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  valid_for: "310"
}
