fully_qualified_name: "_compat_pickle"
vars {
  name: "IMPORT_MAPPING"
  fully_qualified_name: "_compat_pickle.IMPORT_MAPPING"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.dict"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "NAME_MAPPING"
  fully_qualified_name: "_compat_pickle.NAME_MAPPING"
  type_annotation {
    pretty_printed_name: "builtins.dict[Tuple[builtins.str,builtins.str],Tuple[builtins.str,builtins.str]]"
    args {
      pretty_printed_name: "Tuple[builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Tuple[builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    fully_qualified_name: "builtins.dict"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "PYTHON2_EXCEPTIONS"
  fully_qualified_name: "_compat_pickle.PYTHON2_EXCEPTIONS"
  type_annotation {
    pretty_printed_name: "Tuple[builtins.str,Any]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
vars {
  name: "PYTHON2_EXCEPTIONS"
  fully_qualified_name: "_compat_pickle.PYTHON2_EXCEPTIONS"
  type_annotation {
    pretty_printed_name: "builtins.tuple[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.tuple"
  }
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "MULTIPROCESSING_EXCEPTIONS"
  fully_qualified_name: "_compat_pickle.MULTIPROCESSING_EXCEPTIONS"
  type_annotation {
    pretty_printed_name: "Tuple[builtins.str,Any]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
vars {
  name: "MULTIPROCESSING_EXCEPTIONS"
  fully_qualified_name: "_compat_pickle.MULTIPROCESSING_EXCEPTIONS"
  type_annotation {
    pretty_printed_name: "builtins.tuple[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.tuple"
  }
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "REVERSE_IMPORT_MAPPING"
  fully_qualified_name: "_compat_pickle.REVERSE_IMPORT_MAPPING"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.dict"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "REVERSE_NAME_MAPPING"
  fully_qualified_name: "_compat_pickle.REVERSE_NAME_MAPPING"
  type_annotation {
    pretty_printed_name: "builtins.dict[Tuple[builtins.str,builtins.str],Tuple[builtins.str,builtins.str]]"
    args {
      pretty_printed_name: "Tuple[builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Tuple[builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    fully_qualified_name: "builtins.dict"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "PYTHON3_OSERROR_EXCEPTIONS"
  fully_qualified_name: "_compat_pickle.PYTHON3_OSERROR_EXCEPTIONS"
  type_annotation {
    pretty_printed_name: "Tuple[builtins.str,Any]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
vars {
  name: "PYTHON3_OSERROR_EXCEPTIONS"
  fully_qualified_name: "_compat_pickle.PYTHON3_OSERROR_EXCEPTIONS"
  type_annotation {
    pretty_printed_name: "builtins.tuple[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.tuple"
  }
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "PYTHON3_IMPORTERROR_EXCEPTIONS"
  fully_qualified_name: "_compat_pickle.PYTHON3_IMPORTERROR_EXCEPTIONS"
  type_annotation {
    pretty_printed_name: "Tuple[builtins.str,Any]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
vars {
  name: "PYTHON3_IMPORTERROR_EXCEPTIONS"
  fully_qualified_name: "_compat_pickle.PYTHON3_IMPORTERROR_EXCEPTIONS"
  type_annotation {
    pretty_printed_name: "builtins.tuple[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.tuple"
  }
  valid_for: "39"
  valid_for: "310"
}
