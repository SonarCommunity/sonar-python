fully_qualified_name: "csv"
classes {
  name: "Dialect"
  fully_qualified_name: "_csv.Dialect"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "_csv.Dialect.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_csv.Dialect"
        fully_qualified_name: "_csv.Dialect"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "delimiter"
    fully_qualified_name: "_csv.Dialect.delimiter"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "quotechar"
    fully_qualified_name: "_csv.Dialect.quotechar"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "escapechar"
    fully_qualified_name: "_csv.Dialect.escapechar"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "doublequote"
    fully_qualified_name: "_csv.Dialect.doublequote"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "skipinitialspace"
    fully_qualified_name: "_csv.Dialect.skipinitialspace"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "lineterminator"
    fully_qualified_name: "_csv.Dialect.lineterminator"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "quoting"
    fully_qualified_name: "_csv.Dialect.quoting"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "strict"
    fully_qualified_name: "_csv.Dialect.strict"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Error"
  fully_qualified_name: "_csv.Error"
  super_classes: "builtins.Exception"
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "excel"
  fully_qualified_name: "csv.excel"
  super_classes: "_csv.Dialect"
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "delimiter"
    fully_qualified_name: "csv.excel.delimiter"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "quotechar"
    fully_qualified_name: "csv.excel.quotechar"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "doublequote"
    fully_qualified_name: "csv.excel.doublequote"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "skipinitialspace"
    fully_qualified_name: "csv.excel.skipinitialspace"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "lineterminator"
    fully_qualified_name: "csv.excel.lineterminator"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "quoting"
    fully_qualified_name: "csv.excel.quoting"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "excel_tab"
  fully_qualified_name: "csv.excel_tab"
  super_classes: "csv.excel"
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "delimiter"
    fully_qualified_name: "csv.excel_tab.delimiter"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "DictReader"
  fully_qualified_name: "csv.DictReader"
  super_classes: "typing.Iterator"
  methods {
    name: "__iter__"
    fully_qualified_name: "csv.DictReader.__iter__"
    return_annotation {
      pretty_printed_name: "csv.DictReader[csv._T]"
      args {
        pretty_printed_name: "csv._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "csv.DictReader"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "csv.DictReader[csv._T]"
        args {
          pretty_printed_name: "csv._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "csv.DictReader"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "next"
    fully_qualified_name: "csv.DictReader.next"
    return_annotation {
      pretty_printed_name: "builtins.dict[csv._T,builtins.str]"
      args {
        pretty_printed_name: "csv._T"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "csv.DictReader[csv._T]"
        args {
          pretty_printed_name: "csv._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "csv.DictReader"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "csv.DictReader.__next__"
    return_annotation {
      pretty_printed_name: "collections.OrderedDict[csv._T,builtins.str]"
      args {
        pretty_printed_name: "csv._T"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "collections.OrderedDict"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "csv.DictReader[csv._T]"
        args {
          pretty_printed_name: "csv._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "csv.DictReader"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "csv.DictReader.__next__"
    return_annotation {
      pretty_printed_name: "builtins.dict[csv._T,builtins.str]"
      args {
        pretty_printed_name: "csv._T"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "csv.DictReader[csv._T]"
        args {
          pretty_printed_name: "csv._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "csv.DictReader"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "csv.DictReader.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "csv.DictReader.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "csv.DictReader[csv._T]"
          args {
            pretty_printed_name: "csv._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "csv.DictReader"
        }
      }
      parameters {
        name: "f"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[builtins.unicode]"
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "fieldnames"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Sequence[csv._T]"
          args {
            pretty_printed_name: "csv._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
      parameters {
        name: "restkey"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "restval"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "dialect"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "_csv.Dialect"
              fully_qualified_name: "_csv.Dialect"
            }
            args {
              pretty_printed_name: "Type[_csv.Dialect]"
              kind: TYPE
              args {
                pretty_printed_name: "_csv.Dialect"
                fully_qualified_name: "_csv.Dialect"
              }
            }
          }
          fully_qualified_name: "_csv._DialectLike"
        }
        has_default: true
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwds"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "csv.DictReader.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "csv.DictReader[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "csv.DictReader"
        }
      }
      parameters {
        name: "f"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[builtins.unicode]"
          args {
            pretty_printed_name: "builtins.unicode"
            fully_qualified_name: "builtins.unicode"
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "fieldnames"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing.Sequence[builtins.str],None]"
          kind: UNION
          args {
            pretty_printed_name: "typing.Sequence[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Sequence"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "restkey"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "restval"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "dialect"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "_csv.Dialect"
              fully_qualified_name: "_csv.Dialect"
            }
            args {
              pretty_printed_name: "Type[_csv.Dialect]"
              kind: TYPE
              args {
                pretty_printed_name: "_csv.Dialect"
                fully_qualified_name: "_csv.Dialect"
              }
            }
          }
          fully_qualified_name: "_csv._DialectLike"
        }
        has_default: true
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwds"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "csv.DictReader.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "csv.DictReader.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "csv.DictReader[csv._T]"
          args {
            pretty_printed_name: "csv._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "csv.DictReader"
        }
      }
      parameters {
        name: "f"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "fieldnames"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Sequence[csv._T]"
          args {
            pretty_printed_name: "csv._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
      parameters {
        name: "restkey"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "restval"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "dialect"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "_csv.Dialect"
              fully_qualified_name: "_csv.Dialect"
            }
            args {
              pretty_printed_name: "Type[_csv.Dialect]"
              kind: TYPE
              args {
                pretty_printed_name: "_csv.Dialect"
                fully_qualified_name: "_csv.Dialect"
              }
            }
          }
          fully_qualified_name: "_csv._DialectLike"
        }
        has_default: true
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwds"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "csv.DictReader.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "csv.DictReader[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "csv.DictReader"
        }
      }
      parameters {
        name: "f"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "fieldnames"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing.Sequence[builtins.str],None]"
          kind: UNION
          args {
            pretty_printed_name: "typing.Sequence[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Sequence"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "restkey"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "restval"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "dialect"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "_csv.Dialect"
              fully_qualified_name: "_csv.Dialect"
            }
            args {
              pretty_printed_name: "Type[_csv.Dialect]"
              kind: TYPE
              args {
                pretty_printed_name: "_csv.Dialect"
                fully_qualified_name: "_csv.Dialect"
              }
            }
          }
          fully_qualified_name: "_csv._DialectLike"
        }
        has_default: true
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwds"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "fieldnames"
    fully_qualified_name: "csv.DictReader.fieldnames"
    type_annotation {
      pretty_printed_name: "Union[typing.Sequence[csv._T],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Sequence[csv._T]"
        args {
          pretty_printed_name: "csv._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "restkey"
    fully_qualified_name: "csv.DictReader.restkey"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "restval"
    fully_qualified_name: "csv.DictReader.restval"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "reader"
    fully_qualified_name: "csv.DictReader.reader"
    type_annotation {
      pretty_printed_name: "_csv._reader"
      fully_qualified_name: "_csv._reader"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "dialect"
    fully_qualified_name: "csv.DictReader.dialect"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "_csv.Dialect"
          fully_qualified_name: "_csv.Dialect"
        }
        args {
          pretty_printed_name: "Type[_csv.Dialect]"
          kind: TYPE
          args {
            pretty_printed_name: "_csv.Dialect"
            fully_qualified_name: "_csv.Dialect"
          }
        }
      }
      fully_qualified_name: "_csv._DialectLike"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "line_num"
    fully_qualified_name: "csv.DictReader.line_num"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "DictWriter"
  fully_qualified_name: "csv.DictWriter"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "csv.DictWriter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "csv.DictWriter[csv._T]"
        args {
          pretty_printed_name: "csv._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "csv.DictWriter"
      }
    }
    parameters {
      name: "f"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "fieldnames"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[csv._T]"
        args {
          pretty_printed_name: "csv._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "restval"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "extrasaction"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "dialect"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "_csv.Dialect"
            fully_qualified_name: "_csv.Dialect"
          }
          args {
            pretty_printed_name: "Type[_csv.Dialect]"
            kind: TYPE
            args {
              pretty_printed_name: "_csv.Dialect"
              fully_qualified_name: "_csv.Dialect"
            }
          }
        }
        fully_qualified_name: "_csv._DialectLike"
      }
      has_default: true
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwds"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "writeheader"
    fully_qualified_name: "csv.DictWriter.writeheader"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "csv.DictWriter[csv._T]"
        args {
          pretty_printed_name: "csv._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "csv.DictWriter"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "writeheader"
    fully_qualified_name: "csv.DictWriter.writeheader"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "csv.DictWriter[csv._T]"
        args {
          pretty_printed_name: "csv._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "csv.DictWriter"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "writerow"
    fully_qualified_name: "csv.DictWriter.writerow"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "csv.DictWriter[csv._T]"
        args {
          pretty_printed_name: "csv._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "csv.DictWriter"
      }
    }
    parameters {
      name: "rowdict"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[csv._T,Any]"
        args {
          pretty_printed_name: "csv._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "writerows"
    fully_qualified_name: "csv.DictWriter.writerows"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "csv.DictWriter[csv._T]"
        args {
          pretty_printed_name: "csv._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "csv.DictWriter"
      }
    }
    parameters {
      name: "rowdicts"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing.Mapping[csv._T,Any]]"
        args {
          pretty_printed_name: "typing.Mapping[csv._T,Any]"
          args {
            pretty_printed_name: "csv._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "fieldnames"
    fully_qualified_name: "csv.DictWriter.fieldnames"
    type_annotation {
      pretty_printed_name: "typing.Sequence[csv._T]"
      args {
        pretty_printed_name: "csv._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "restval"
    fully_qualified_name: "csv.DictWriter.restval"
    type_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "extrasaction"
    fully_qualified_name: "csv.DictWriter.extrasaction"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "writer"
    fully_qualified_name: "csv.DictWriter.writer"
    type_annotation {
      pretty_printed_name: "_csv._writer"
      fully_qualified_name: "_csv._writer"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Sniffer"
  fully_qualified_name: "csv.Sniffer"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "csv.Sniffer.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "csv.Sniffer"
        fully_qualified_name: "csv.Sniffer"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "sniff"
    fully_qualified_name: "csv.Sniffer.sniff"
    return_annotation {
      pretty_printed_name: "Type[_csv.Dialect]"
      kind: TYPE
      args {
        pretty_printed_name: "_csv.Dialect"
        fully_qualified_name: "_csv.Dialect"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "csv.Sniffer"
        fully_qualified_name: "csv.Sniffer"
      }
    }
    parameters {
      name: "sample"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "delimiters"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "has_header"
    fully_qualified_name: "csv.Sniffer.has_header"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "csv.Sniffer"
        fully_qualified_name: "csv.Sniffer"
      }
    }
    parameters {
      name: "sample"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "preferred"
    fully_qualified_name: "csv.Sniffer.preferred"
    type_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_DictReadMapping"
  fully_qualified_name: "collections.OrderedDict"
  super_classes: "builtins.dict"
  super_classes: "typing.Reversible"
  methods {
    name: "popitem"
    fully_qualified_name: "collections.OrderedDict.popitem"
    return_annotation {
      pretty_printed_name: "Tuple[collections._KT,collections._VT]"
      kind: TUPLE
      args {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    parameters {
      name: "last"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "move_to_end"
    fully_qualified_name: "collections.OrderedDict.move_to_end"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    parameters {
      name: "key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "last"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "copy"
    fully_qualified_name: "collections.OrderedDict.copy"
    return_annotation {
      pretty_printed_name: "collections._S"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections._S"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "collections.OrderedDict.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[collections._KT]"
      args {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "keys"
    fully_qualified_name: "collections.OrderedDict.keys"
    return_annotation {
      pretty_printed_name: "collections._OrderedDictKeysView[collections._KT]"
      args {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections._OrderedDictKeysView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "items"
    fully_qualified_name: "collections.OrderedDict.items"
    return_annotation {
      pretty_printed_name: "collections._OrderedDictItemsView[collections._KT,collections._VT]"
      args {
        pretty_printed_name: "collections._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections._OrderedDictItemsView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "values"
    fully_qualified_name: "collections.OrderedDict.values"
    return_annotation {
      pretty_printed_name: "collections._OrderedDictValuesView[collections._VT]"
      args {
        pretty_printed_name: "collections._VT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "collections._OrderedDictValuesView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "collections.OrderedDict[collections._KT,collections._VT]"
        args {
          pretty_printed_name: "collections._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "collections._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "collections.OrderedDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
classes {
  name: "unix_dialect"
  fully_qualified_name: "csv.unix_dialect"
  super_classes: "_csv.Dialect"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "delimiter"
    fully_qualified_name: "csv.unix_dialect.delimiter"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "quotechar"
    fully_qualified_name: "csv.unix_dialect.quotechar"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "doublequote"
    fully_qualified_name: "csv.unix_dialect.doublequote"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "skipinitialspace"
    fully_qualified_name: "csv.unix_dialect.skipinitialspace"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "lineterminator"
    fully_qualified_name: "csv.unix_dialect.lineterminator"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "quoting"
    fully_qualified_name: "csv.unix_dialect.quoting"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "field_size_limit"
  fully_qualified_name: "_csv.field_size_limit"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "new_limit"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "get_dialect"
  fully_qualified_name: "_csv.get_dialect"
  return_annotation {
    pretty_printed_name: "_csv.Dialect"
    fully_qualified_name: "_csv.Dialect"
  }
  parameters {
    name: "name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "list_dialects"
  fully_qualified_name: "_csv.list_dialects"
  return_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "reader"
  fully_qualified_name: "_csv.reader"
  return_annotation {
    pretty_printed_name: "_csv._reader"
    fully_qualified_name: "_csv._reader"
  }
  parameters {
    name: "csvfile"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[builtins.unicode]"
      args {
        pretty_printed_name: "builtins.unicode"
        fully_qualified_name: "builtins.unicode"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "dialect"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "_csv.Dialect"
          fully_qualified_name: "_csv.Dialect"
        }
        args {
          pretty_printed_name: "Type[_csv.Dialect]"
          kind: TYPE
          args {
            pretty_printed_name: "_csv.Dialect"
            fully_qualified_name: "_csv.Dialect"
          }
        }
      }
      fully_qualified_name: "_csv._DialectLike"
    }
    has_default: true
  }
  parameters {
    name: "fmtparams"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "27"
}
functions {
  name: "reader"
  fully_qualified_name: "_csv.reader"
  return_annotation {
    pretty_printed_name: "_csv._reader"
    fully_qualified_name: "_csv._reader"
  }
  parameters {
    name: "csvfile"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "dialect"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "_csv.Dialect"
          fully_qualified_name: "_csv.Dialect"
        }
        args {
          pretty_printed_name: "Type[_csv.Dialect]"
          kind: TYPE
          args {
            pretty_printed_name: "_csv.Dialect"
            fully_qualified_name: "_csv.Dialect"
          }
        }
      }
      fully_qualified_name: "_csv._DialectLike"
    }
    has_default: true
  }
  parameters {
    name: "fmtparams"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "register_dialect"
  fully_qualified_name: "_csv.register_dialect"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "dialect"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    has_default: true
  }
  parameters {
    name: "fmtparams"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "unregister_dialect"
  fully_qualified_name: "_csv.unregister_dialect"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "writer"
  fully_qualified_name: "_csv.writer"
  return_annotation {
    pretty_printed_name: "_csv._writer"
    fully_qualified_name: "_csv._writer"
  }
  parameters {
    name: "csvfile"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "_csv._Writer"
      fully_qualified_name: "_csv._Writer"
    }
  }
  parameters {
    name: "dialect"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "_csv.Dialect"
          fully_qualified_name: "_csv.Dialect"
        }
        args {
          pretty_printed_name: "Type[_csv.Dialect]"
          kind: TYPE
          args {
            pretty_printed_name: "_csv.Dialect"
            fully_qualified_name: "_csv.Dialect"
          }
        }
      }
      fully_qualified_name: "_csv._DialectLike"
    }
    has_default: true
  }
  parameters {
    name: "fmtparams"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "QUOTE_ALL"
  fully_qualified_name: "_csv.QUOTE_ALL"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "QUOTE_MINIMAL"
  fully_qualified_name: "_csv.QUOTE_MINIMAL"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "QUOTE_NONE"
  fully_qualified_name: "_csv.QUOTE_NONE"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "QUOTE_NONNUMERIC"
  fully_qualified_name: "_csv.QUOTE_NONNUMERIC"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
