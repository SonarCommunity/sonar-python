fully_qualified_name: "flask.views"
classes {
  name: "View"
  fully_qualified_name: "flask.views.View"
  super_classes: "builtins.object"
  methods {
    name: "dispatch_request"
    fully_qualified_name: "flask.views.View.dispatch_request"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.views.View"
        fully_qualified_name: "flask.views.View"
      }
    }
  }
  methods {
    name: "as_view"
    fully_qualified_name: "flask.views.View.as_view"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[flask.views.View]"
        kind: TYPE
        args {
          pretty_printed_name: "flask.views.View"
          fully_qualified_name: "flask.views.View"
        }
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "class_args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "class_kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  attributes {
    name: "methods"
    fully_qualified_name: "flask.views.View.methods"
    type_annotation {
      pretty_printed_name: "Union[typing.Collection[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Collection[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Collection"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "provide_automatic_options"
    fully_qualified_name: "flask.views.View.provide_automatic_options"
    type_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "decorators"
    fully_qualified_name: "flask.views.View.decorators"
    type_annotation {
      pretty_printed_name: "builtins.list[CallableType[builtins.function]]"
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      fully_qualified_name: "builtins.list"
    }
  }
  attributes {
    name: "init_every_request"
    fully_qualified_name: "flask.views.View.init_every_request"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
classes {
  name: "MethodView"
  fully_qualified_name: "flask.views.MethodView"
  super_classes: "flask.views.View"
  methods {
    name: "__init_subclass__"
    fully_qualified_name: "flask.views.MethodView.__init_subclass__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[flask.views.MethodView]"
        kind: TYPE
        args {
          pretty_printed_name: "flask.views.MethodView"
          fully_qualified_name: "flask.views.MethodView"
        }
      }
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    is_class_method: true
  }
  methods {
    name: "dispatch_request"
    fully_qualified_name: "flask.views.MethodView.dispatch_request"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "flask.views.MethodView"
        fully_qualified_name: "flask.views.MethodView"
      }
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
}
vars {
  name: "t"
  fully_qualified_name: "typing"
  is_imported_module: true
}
vars {
  name: "ft"
  fully_qualified_name: "flask.typing"
  is_imported_module: true
}
vars {
  name: "current_app"
  fully_qualified_name: "flask.globals.current_app"
  type_annotation {
    pretty_printed_name: "flask.app.Flask"
    fully_qualified_name: "flask.app.Flask"
  }
}
vars {
  name: "request"
  fully_qualified_name: "flask.globals.request"
  type_annotation {
    pretty_printed_name: "flask.wrappers.Request"
    fully_qualified_name: "flask.wrappers.Request"
  }
}
vars {
  name: "http_method_funcs"
  fully_qualified_name: "flask.views.http_method_funcs"
  type_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
}
