fully_qualified_name: "parser"
classes {
  name: "ParserError"
  fully_qualified_name: "parser.ParserError"
  super_classes: "builtins.Exception"
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "STType"
  fully_qualified_name: "parser.STType"
  super_classes: "builtins.object"
  methods {
    name: "compile"
    fully_qualified_name: "parser.STType.compile"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "parser.STType"
        fully_qualified_name: "parser.STType"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.unicode"
        fully_qualified_name: "builtins.unicode"
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "compile"
    fully_qualified_name: "parser.STType.compile"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "parser.STType"
        fully_qualified_name: "parser.STType"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrOrBytesPath"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "isexpr"
    fully_qualified_name: "parser.STType.isexpr"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "parser.STType"
        fully_qualified_name: "parser.STType"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "issuite"
    fully_qualified_name: "parser.STType.issuite"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "parser.STType"
        fully_qualified_name: "parser.STType"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tolist"
    fully_qualified_name: "parser.STType.tolist"
    return_annotation {
      pretty_printed_name: "builtins.list[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "parser.STType"
        fully_qualified_name: "parser.STType"
      }
    }
    parameters {
      name: "line_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "col_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "totuple"
    fully_qualified_name: "parser.STType.totuple"
    return_annotation {
      pretty_printed_name: "Tuple[Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "parser.STType"
        fully_qualified_name: "parser.STType"
      }
    }
    parameters {
      name: "line_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "col_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "expr"
  fully_qualified_name: "parser.expr"
  return_annotation {
    pretty_printed_name: "parser.STType"
    fully_qualified_name: "parser.STType"
  }
  parameters {
    name: "source"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  valid_for: "27"
}
functions {
  name: "expr"
  fully_qualified_name: "parser.expr"
  return_annotation {
    pretty_printed_name: "parser.STType"
    fully_qualified_name: "parser.STType"
  }
  parameters {
    name: "source"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "suite"
  fully_qualified_name: "parser.suite"
  return_annotation {
    pretty_printed_name: "parser.STType"
    fully_qualified_name: "parser.STType"
  }
  parameters {
    name: "source"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  valid_for: "27"
}
functions {
  name: "suite"
  fully_qualified_name: "parser.suite"
  return_annotation {
    pretty_printed_name: "parser.STType"
    fully_qualified_name: "parser.STType"
  }
  parameters {
    name: "source"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "sequence2st"
  fully_qualified_name: "parser.sequence2st"
  return_annotation {
    pretty_printed_name: "parser.STType"
    fully_qualified_name: "parser.STType"
  }
  parameters {
    name: "sequence"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "tuple2st"
  fully_qualified_name: "parser.tuple2st"
  return_annotation {
    pretty_printed_name: "parser.STType"
    fully_qualified_name: "parser.STType"
  }
  parameters {
    name: "sequence"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "st2list"
  fully_qualified_name: "parser.st2list"
  return_annotation {
    pretty_printed_name: "builtins.list[Any]"
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "st"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "parser.STType"
      fully_qualified_name: "parser.STType"
    }
  }
  parameters {
    name: "line_info"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "col_info"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "st2tuple"
  fully_qualified_name: "parser.st2tuple"
  return_annotation {
    pretty_printed_name: "Tuple[Any]"
    kind: TUPLE
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "st"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "parser.STType"
      fully_qualified_name: "parser.STType"
    }
  }
  parameters {
    name: "line_info"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  parameters {
    name: "col_info"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "compilest"
  fully_qualified_name: "parser.compilest"
  return_annotation {
    pretty_printed_name: "types.CodeType"
    fully_qualified_name: "types.CodeType"
  }
  parameters {
    name: "st"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "parser.STType"
      fully_qualified_name: "parser.STType"
    }
  }
  parameters {
    name: "filename"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "compilest"
  fully_qualified_name: "parser.compilest"
  return_annotation {
    pretty_printed_name: "types.CodeType"
    fully_qualified_name: "types.CodeType"
  }
  parameters {
    name: "st"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "parser.STType"
      fully_qualified_name: "parser.STType"
    }
  }
  parameters {
    name: "filename"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "os.PathLike"
        }
      }
      fully_qualified_name: "_typeshed.StrOrBytesPath"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "isexpr"
  fully_qualified_name: "parser.isexpr"
  return_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  parameters {
    name: "st"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "parser.STType"
      fully_qualified_name: "parser.STType"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "issuite"
  fully_qualified_name: "parser.issuite"
  return_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  parameters {
    name: "st"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "parser.STType"
      fully_qualified_name: "parser.STType"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
