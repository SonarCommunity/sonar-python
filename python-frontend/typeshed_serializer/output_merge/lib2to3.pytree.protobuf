fully_qualified_name: "lib2to3.pytree"
classes {
  name: "Base"
  fully_qualified_name: "lib2to3.pytree.Base"
  super_classes: "builtins.object"
  methods {
    name: "__eq__"
    fully_qualified_name: "lib2to3.pytree.Base.__eq__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_eq"
    fully_qualified_name: "lib2to3.pytree.Base._eq"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "clone"
    fully_qualified_name: "lib2to3.pytree.Base.clone"
    return_annotation {
      pretty_printed_name: "UnboundType[Self]"
      kind: UNBOUND
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "post_order"
    fully_qualified_name: "lib2to3.pytree.Base.post_order"
    return_annotation {
      pretty_printed_name: "typing.Iterator[UnboundType[Self]]"
      args {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "pre_order"
    fully_qualified_name: "lib2to3.pytree.Base.pre_order"
    return_annotation {
      pretty_printed_name: "typing.Iterator[UnboundType[Self]]"
      args {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "replace"
    fully_qualified_name: "lib2to3.pytree.Base.replace"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    parameters {
      name: "new"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_NL],builtins.list[UnboundType[_NL]]]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_NL]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "builtins.list[UnboundType[_NL]]"
          args {
            pretty_printed_name: "UnboundType[_NL]"
            kind: UNBOUND
          }
          fully_qualified_name: "builtins.list"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_lineno"
    fully_qualified_name: "lib2to3.pytree.Base.get_lineno"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "changed"
    fully_qualified_name: "lib2to3.pytree.Base.changed"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "remove"
    fully_qualified_name: "lib2to3.pytree.Base.remove"
    return_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "next_sibling"
    fully_qualified_name: "lib2to3.pytree.Base.next_sibling"
    return_annotation {
      pretty_printed_name: "Union[UnboundType[_NL],None]"
      kind: UNION
      args {
        pretty_printed_name: "UnboundType[_NL]"
        kind: UNBOUND
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "prev_sibling"
    fully_qualified_name: "lib2to3.pytree.Base.prev_sibling"
    return_annotation {
      pretty_printed_name: "Union[UnboundType[_NL],None]"
      kind: UNION
      args {
        pretty_printed_name: "UnboundType[_NL]"
        kind: UNBOUND
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "leaves"
    fully_qualified_name: "lib2to3.pytree.Base.leaves"
    return_annotation {
      pretty_printed_name: "typing.Iterator[lib2to3.pytree.Leaf]"
      args {
        pretty_printed_name: "lib2to3.pytree.Leaf"
        fully_qualified_name: "lib2to3.pytree.Leaf"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "depth"
    fully_qualified_name: "lib2to3.pytree.Base.depth"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_suffix"
    fully_qualified_name: "lib2to3.pytree.Base.get_suffix"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "type"
    fully_qualified_name: "lib2to3.pytree.Base.type"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "parent"
    fully_qualified_name: "lib2to3.pytree.Base.parent"
    type_annotation {
      pretty_printed_name: "Union[lib2to3.pytree.Node,None]"
      kind: UNION
      args {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "prefix"
    fully_qualified_name: "lib2to3.pytree.Base.prefix"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "children"
    fully_qualified_name: "lib2to3.pytree.Base.children"
    type_annotation {
      pretty_printed_name: "builtins.list[UnboundType[_NL]]"
      args {
        pretty_printed_name: "UnboundType[_NL]"
        kind: UNBOUND
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "was_changed"
    fully_qualified_name: "lib2to3.pytree.Base.was_changed"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "was_checked"
    fully_qualified_name: "lib2to3.pytree.Base.was_checked"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Node"
  fully_qualified_name: "lib2to3.pytree.Node"
  super_classes: "lib2to3.pytree.Base"
  methods {
    name: "__init__"
    fully_qualified_name: "lib2to3.pytree.Node.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    parameters {
      name: "type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "children"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[UnboundType[_NL]]"
        args {
          pretty_printed_name: "UnboundType[_NL]"
          kind: UNBOUND
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "context"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Unused],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Unused]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "prefix"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "fixers_applied"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.MutableSequence[lib2to3.fixer_base.BaseFix],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.MutableSequence[lib2to3.fixer_base.BaseFix]"
          args {
            pretty_printed_name: "lib2to3.fixer_base.BaseFix"
            fully_qualified_name: "lib2to3.fixer_base.BaseFix"
          }
          fully_qualified_name: "typing.MutableSequence"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_eq"
    fully_qualified_name: "lib2to3.pytree.Node._eq"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "clone"
    fully_qualified_name: "lib2to3.pytree.Node.clone"
    return_annotation {
      pretty_printed_name: "lib2to3.pytree.Node"
      fully_qualified_name: "lib2to3.pytree.Node"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "post_order"
    fully_qualified_name: "lib2to3.pytree.Node.post_order"
    return_annotation {
      pretty_printed_name: "typing.Iterator[UnboundType[Self]]"
      args {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "pre_order"
    fully_qualified_name: "lib2to3.pytree.Node.pre_order"
    return_annotation {
      pretty_printed_name: "typing.Iterator[UnboundType[Self]]"
      args {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_child"
    fully_qualified_name: "lib2to3.pytree.Node.set_child"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    parameters {
      name: "i"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "child"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_NL]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert_child"
    fully_qualified_name: "lib2to3.pytree.Node.insert_child"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    parameters {
      name: "i"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "child"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_NL]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "append_child"
    fully_qualified_name: "lib2to3.pytree.Node.append_child"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    parameters {
      name: "child"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_NL]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__unicode__"
    fully_qualified_name: "lib2to3.pytree.Node.__unicode__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "fixers_applied"
    fully_qualified_name: "lib2to3.pytree.Node.fixers_applied"
    type_annotation {
      pretty_printed_name: "Union[typing.MutableSequence[lib2to3.fixer_base.BaseFix],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.MutableSequence[lib2to3.fixer_base.BaseFix]"
        args {
          pretty_printed_name: "lib2to3.fixer_base.BaseFix"
          fully_qualified_name: "lib2to3.fixer_base.BaseFix"
        }
        fully_qualified_name: "typing.MutableSequence"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "future_features"
    fully_qualified_name: "lib2to3.pytree.Node.future_features"
    type_annotation {
      pretty_printed_name: "builtins.frozenset[UnboundType[Incomplete]]"
      args {
        pretty_printed_name: "UnboundType[Incomplete]"
        kind: UNBOUND
      }
      fully_qualified_name: "builtins.frozenset"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "used_names"
    fully_qualified_name: "lib2to3.pytree.Node.used_names"
    type_annotation {
      pretty_printed_name: "builtins.set[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.set"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Leaf"
  fully_qualified_name: "lib2to3.pytree.Leaf"
  super_classes: "lib2to3.pytree.Base"
  methods {
    name: "__init__"
    fully_qualified_name: "lib2to3.pytree.Leaf.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Leaf"
        fully_qualified_name: "lib2to3.pytree.Leaf"
      }
    }
    parameters {
      name: "type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "context"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_Context],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_Context]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "prefix"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "fixers_applied"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[lib2to3.fixer_base.BaseFix]"
        args {
          pretty_printed_name: "lib2to3.fixer_base.BaseFix"
          fully_qualified_name: "lib2to3.fixer_base.BaseFix"
        }
        fully_qualified_name: "typing.MutableSequence"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_eq"
    fully_qualified_name: "lib2to3.pytree.Leaf._eq"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Leaf"
        fully_qualified_name: "lib2to3.pytree.Leaf"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "clone"
    fully_qualified_name: "lib2to3.pytree.Leaf.clone"
    return_annotation {
      pretty_printed_name: "lib2to3.pytree.Leaf"
      fully_qualified_name: "lib2to3.pytree.Leaf"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Leaf"
        fully_qualified_name: "lib2to3.pytree.Leaf"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "post_order"
    fully_qualified_name: "lib2to3.pytree.Leaf.post_order"
    return_annotation {
      pretty_printed_name: "typing.Iterator[UnboundType[Self]]"
      args {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Leaf"
        fully_qualified_name: "lib2to3.pytree.Leaf"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "pre_order"
    fully_qualified_name: "lib2to3.pytree.Leaf.pre_order"
    return_annotation {
      pretty_printed_name: "typing.Iterator[UnboundType[Self]]"
      args {
        pretty_printed_name: "UnboundType[Self]"
        kind: UNBOUND
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Leaf"
        fully_qualified_name: "lib2to3.pytree.Leaf"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__unicode__"
    fully_qualified_name: "lib2to3.pytree.Leaf.__unicode__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Leaf"
        fully_qualified_name: "lib2to3.pytree.Leaf"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "lineno"
    fully_qualified_name: "lib2to3.pytree.Leaf.lineno"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "column"
    fully_qualified_name: "lib2to3.pytree.Leaf.column"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "value"
    fully_qualified_name: "lib2to3.pytree.Leaf.value"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "fixers_applied"
    fully_qualified_name: "lib2to3.pytree.Leaf.fixers_applied"
    type_annotation {
      pretty_printed_name: "typing.MutableSequence[lib2to3.fixer_base.BaseFix]"
      args {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
      fully_qualified_name: "typing.MutableSequence"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "BasePattern"
  fully_qualified_name: "lib2to3.pytree.BasePattern"
  super_classes: "builtins.object"
  methods {
    name: "optimize"
    fully_qualified_name: "lib2to3.pytree.BasePattern.optimize"
    return_annotation {
      pretty_printed_name: "lib2to3.pytree.BasePattern"
      fully_qualified_name: "lib2to3.pytree.BasePattern"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.BasePattern"
        fully_qualified_name: "lib2to3.pytree.BasePattern"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "match"
    fully_qualified_name: "lib2to3.pytree.BasePattern.match"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.BasePattern"
        fully_qualified_name: "lib2to3.pytree.BasePattern"
      }
    }
    parameters {
      name: "node"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_NL]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "results"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_Results],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_Results]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "match_seq"
    fully_qualified_name: "lib2to3.pytree.BasePattern.match_seq"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.BasePattern"
        fully_qualified_name: "lib2to3.pytree.BasePattern"
      }
    }
    parameters {
      name: "nodes"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_typeshed.SupportsLenAndGetItem[UnboundType[_NL]]"
        args {
          pretty_printed_name: "UnboundType[_NL]"
          kind: UNBOUND
        }
        fully_qualified_name: "_typeshed.SupportsLenAndGetItem"
      }
    }
    parameters {
      name: "results"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_Results],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_Results]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "generate_matches"
    fully_qualified_name: "lib2to3.pytree.BasePattern.generate_matches"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[builtins.int,UnboundType[_Results]]]"
      args {
        pretty_printed_name: "Tuple[builtins.int,UnboundType[_Results]]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "UnboundType[_Results]"
          kind: UNBOUND
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.BasePattern"
        fully_qualified_name: "lib2to3.pytree.BasePattern"
      }
    }
    parameters {
      name: "nodes"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_typeshed.SupportsGetItem[builtins.int,UnboundType[_NL]]"
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "UnboundType[_NL]"
          kind: UNBOUND
        }
        fully_qualified_name: "_typeshed.SupportsGetItem"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "type"
    fully_qualified_name: "lib2to3.pytree.BasePattern.type"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "content"
    fully_qualified_name: "lib2to3.pytree.BasePattern.content"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "name"
    fully_qualified_name: "lib2to3.pytree.BasePattern.name"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "LeafPattern"
  fully_qualified_name: "lib2to3.pytree.LeafPattern"
  super_classes: "lib2to3.pytree.BasePattern"
  methods {
    name: "__init__"
    fully_qualified_name: "lib2to3.pytree.LeafPattern.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.LeafPattern"
        fully_qualified_name: "lib2to3.pytree.LeafPattern"
      }
    }
    parameters {
      name: "type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "content"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "NodePattern"
  fully_qualified_name: "lib2to3.pytree.NodePattern"
  super_classes: "lib2to3.pytree.BasePattern"
  methods {
    name: "__init__"
    fully_qualified_name: "lib2to3.pytree.NodePattern.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.NodePattern"
        fully_qualified_name: "lib2to3.pytree.NodePattern"
      }
    }
    parameters {
      name: "type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "content"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "wildcards"
    fully_qualified_name: "lib2to3.pytree.NodePattern.wildcards"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "WildcardPattern"
  fully_qualified_name: "lib2to3.pytree.WildcardPattern"
  super_classes: "lib2to3.pytree.BasePattern"
  methods {
    name: "__init__"
    fully_qualified_name: "lib2to3.pytree.WildcardPattern.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.WildcardPattern"
        fully_qualified_name: "lib2to3.pytree.WildcardPattern"
      }
    }
    parameters {
      name: "content"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "min"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "max"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "min"
    fully_qualified_name: "lib2to3.pytree.WildcardPattern.min"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "max"
    fully_qualified_name: "lib2to3.pytree.WildcardPattern.max"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "NegatedPattern"
  fully_qualified_name: "lib2to3.pytree.NegatedPattern"
  super_classes: "lib2to3.pytree.BasePattern"
  methods {
    name: "__init__"
    fully_qualified_name: "lib2to3.pytree.NegatedPattern.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.NegatedPattern"
        fully_qualified_name: "lib2to3.pytree.NegatedPattern"
      }
    }
    parameters {
      name: "content"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "type_repr"
  fully_qualified_name: "lib2to3.pytree.type_repr"
  return_annotation {
    pretty_printed_name: "Union[builtins.str,builtins.int]"
    kind: UNION
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "type_num"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "convert"
  fully_qualified_name: "lib2to3.pytree.convert"
  return_annotation {
    pretty_printed_name: "UnboundType[_NL]"
    kind: UNBOUND
  }
  parameters {
    name: "gr"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "lib2to3.pgen2.grammar.Grammar"
      fully_qualified_name: "lib2to3.pgen2.grammar.Grammar"
    }
  }
  parameters {
    name: "raw_node"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_RawNode]"
      kind: UNBOUND
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "generate_matches"
  fully_qualified_name: "lib2to3.pytree.generate_matches"
  return_annotation {
    pretty_printed_name: "typing.Iterator[Tuple[builtins.int,UnboundType[_Results]]]"
    args {
      pretty_printed_name: "Tuple[builtins.int,UnboundType[_Results]]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "UnboundType[_Results]"
        kind: UNBOUND
      }
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "patterns"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[_typeshed.SupportsGetItem[Union[builtins.int,builtins.slice],lib2to3.pytree.BasePattern],None]"
      kind: UNION
      args {
        pretty_printed_name: "_typeshed.SupportsGetItem[Union[builtins.int,builtins.slice],lib2to3.pytree.BasePattern]"
        args {
          pretty_printed_name: "Union[builtins.int,builtins.slice]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.slice"
            fully_qualified_name: "builtins.slice"
          }
        }
        args {
          pretty_printed_name: "lib2to3.pytree.BasePattern"
          fully_qualified_name: "lib2to3.pytree.BasePattern"
        }
        fully_qualified_name: "_typeshed.SupportsGetItem"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "nodes"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "_typeshed.SupportsGetItem[Union[builtins.int,builtins.slice],UnboundType[_NL]]"
      args {
        pretty_printed_name: "Union[builtins.int,builtins.slice]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      args {
        pretty_printed_name: "UnboundType[_NL]"
        kind: UNBOUND
      }
      fully_qualified_name: "_typeshed.SupportsGetItem"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_NL"
  fully_qualified_name: "lib2to3.pytree._NL"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_Context"
  fully_qualified_name: "lib2to3.pytree._Context"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_Results"
  fully_qualified_name: "lib2to3.pytree._Results"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_RawNode"
  fully_qualified_name: "lib2to3.pytree._RawNode"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "HUGE"
  fully_qualified_name: "lib2to3.pytree.HUGE"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
