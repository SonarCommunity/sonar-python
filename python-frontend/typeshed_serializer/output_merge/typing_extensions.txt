fully_qualified_name: "typing_extensions"
classes {
  name: "ContextManager"
  fully_qualified_name: "typing.ContextManager"
  super_classes: "builtins.object"
  methods {
    name: "__enter__"
    fully_qualified_name: "typing.ContextManager.__enter__"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.ContextManager[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ContextManager"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "typing.ContextManager.__exit__"
    return_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing.ContextManager[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ContextManager"
      }
    }
    parameters {
      name: "__exc_type"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__exc_value"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__traceback"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_SpecialForm"
  fully_qualified_name: "typing_extensions._SpecialForm"
  super_classes: "builtins.object"
  methods {
    name: "__getitem__"
    fully_qualified_name: "typing_extensions._SpecialForm.__getitem__"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing_extensions._SpecialForm"
        fully_qualified_name: "typing_extensions._SpecialForm"
      }
    }
    parameters {
      name: "typeargs"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_TypedDict"
  fully_qualified_name: "typing_extensions._TypedDict"
  super_classes: "typing.Mapping"
  methods {
    name: "copy"
    fully_qualified_name: "typing_extensions._TypedDict.copy"
    return_annotation {
      pretty_printed_name: "typing_extensions._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "setdefault"
    fully_qualified_name: "typing_extensions._TypedDict.setdefault"
    return_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions._TypedDict"
        fully_qualified_name: "typing_extensions._TypedDict"
      }
    }
    parameters {
      name: "k"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "NoReturn"
        kind: UNINHABITED
      }
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "pop"
    fully_qualified_name: "typing_extensions._TypedDict.pop"
    return_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions._TypedDict"
        fully_qualified_name: "typing_extensions._TypedDict"
      }
    }
    parameters {
      name: "k"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "NoReturn"
        kind: UNINHABITED
      }
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions._T"
        kind: TYPE_VAR
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "update"
    fully_qualified_name: "typing_extensions._TypedDict.update"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions._T"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__m"
      type_annotation {
        pretty_printed_name: "typing_extensions._T"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "has_key"
    fully_qualified_name: "typing_extensions._TypedDict.has_key"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions._TypedDict"
        fully_qualified_name: "typing_extensions._TypedDict"
      }
    }
    parameters {
      name: "k"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "viewitems"
    fully_qualified_name: "typing_extensions._TypedDict.viewitems"
    return_annotation {
      pretty_printed_name: "typing.ItemsView[builtins.str,builtins.object]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
      fully_qualified_name: "typing.ItemsView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions._TypedDict"
        fully_qualified_name: "typing_extensions._TypedDict"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "viewkeys"
    fully_qualified_name: "typing_extensions._TypedDict.viewkeys"
    return_annotation {
      pretty_printed_name: "typing.KeysView[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.KeysView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions._TypedDict"
        fully_qualified_name: "typing_extensions._TypedDict"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "viewvalues"
    fully_qualified_name: "typing_extensions._TypedDict.viewvalues"
    return_annotation {
      pretty_printed_name: "typing.ValuesView[builtins.object]"
      args {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
      fully_qualified_name: "typing.ValuesView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions._TypedDict"
        fully_qualified_name: "typing_extensions._TypedDict"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "typing_extensions._TypedDict.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "typing_extensions._TypedDict"
        fully_qualified_name: "typing_extensions._TypedDict"
      }
    }
    parameters {
      name: "k"
      type_annotation {
        pretty_printed_name: "NoReturn"
        kind: UNINHABITED
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "items"
    fully_qualified_name: "typing_extensions._TypedDict.items"
    return_annotation {
      pretty_printed_name: "typing.ItemsView[builtins.str,builtins.object]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
      fully_qualified_name: "typing.ItemsView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions._TypedDict"
        fully_qualified_name: "typing_extensions._TypedDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "keys"
    fully_qualified_name: "typing_extensions._TypedDict.keys"
    return_annotation {
      pretty_printed_name: "typing.KeysView[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.KeysView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions._TypedDict"
        fully_qualified_name: "typing_extensions._TypedDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "values"
    fully_qualified_name: "typing_extensions._TypedDict.values"
    return_annotation {
      pretty_printed_name: "typing.ValuesView[builtins.object]"
      args {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
      fully_qualified_name: "typing.ValuesView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions._TypedDict"
        fully_qualified_name: "typing_extensions._TypedDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_metaclass: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SupportsIndex"
  fully_qualified_name: "typing_extensions.SupportsIndex"
  super_classes: "builtins.object"
  methods {
    name: "__index__"
    fully_qualified_name: "typing_extensions.SupportsIndex.__index__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions.SupportsIndex"
        fully_qualified_name: "typing_extensions.SupportsIndex"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
    is_abstract: true
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_decorators: true
  has_metaclass: true
  is_protocol: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "ParamSpecArgs"
  fully_qualified_name: "typing_extensions.ParamSpecArgs"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "typing_extensions.ParamSpecArgs.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions.ParamSpecArgs"
        fully_qualified_name: "typing_extensions.ParamSpecArgs"
      }
    }
    parameters {
      name: "origin"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions.ParamSpec"
        fully_qualified_name: "typing_extensions.ParamSpec"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  attributes {
    name: "__origin__"
    fully_qualified_name: "typing_extensions.ParamSpecArgs.__origin__"
    type_annotation {
      pretty_printed_name: "typing_extensions.ParamSpec"
      fully_qualified_name: "typing_extensions.ParamSpec"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
}
classes {
  name: "ParamSpecKwargs"
  fully_qualified_name: "typing_extensions.ParamSpecKwargs"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "typing_extensions.ParamSpecKwargs.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions.ParamSpecKwargs"
        fully_qualified_name: "typing_extensions.ParamSpecKwargs"
      }
    }
    parameters {
      name: "origin"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions.ParamSpec"
        fully_qualified_name: "typing_extensions.ParamSpec"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  attributes {
    name: "__origin__"
    fully_qualified_name: "typing_extensions.ParamSpecKwargs.__origin__"
    type_annotation {
      pretty_printed_name: "typing_extensions.ParamSpec"
      fully_qualified_name: "typing_extensions.ParamSpec"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
}
classes {
  name: "ParamSpec"
  fully_qualified_name: "typing_extensions.ParamSpec"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "typing_extensions.ParamSpec.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions.ParamSpec"
        fully_qualified_name: "typing_extensions.ParamSpec"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "bound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[None,Type[Any],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Type[Any]"
          kind: TYPE
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "contravariant"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "covariant"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "args"
    fully_qualified_name: "typing_extensions.ParamSpec.args"
    return_annotation {
      pretty_printed_name: "typing_extensions.ParamSpecArgs"
      fully_qualified_name: "typing_extensions.ParamSpecArgs"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions.ParamSpec"
        fully_qualified_name: "typing_extensions.ParamSpec"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  methods {
    name: "kwargs"
    fully_qualified_name: "typing_extensions.ParamSpec.kwargs"
    return_annotation {
      pretty_printed_name: "typing_extensions.ParamSpecKwargs"
      fully_qualified_name: "typing_extensions.ParamSpecKwargs"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions.ParamSpec"
        fully_qualified_name: "typing_extensions.ParamSpec"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  attributes {
    name: "__bound__"
    fully_qualified_name: "typing_extensions.ParamSpec.__bound__"
    type_annotation {
      pretty_printed_name: "Union[Type[Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "Type[Any]"
        kind: TYPE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  attributes {
    name: "__covariant__"
    fully_qualified_name: "typing_extensions.ParamSpec.__covariant__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
  attributes {
    name: "__contravariant__"
    fully_qualified_name: "typing_extensions.ParamSpec.__contravariant__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
  }
}
classes {
  name: "AsyncContextManager"
  fully_qualified_name: "typing.AsyncContextManager"
  super_classes: "builtins.object"
  methods {
    name: "__aenter__"
    fully_qualified_name: "typing.AsyncContextManager.__aenter__"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncContextManager[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncContextManager"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__aexit__"
    fully_qualified_name: "typing.AsyncContextManager.__aexit__"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[Union[builtins.bool,None]]"
      args {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncContextManager[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncContextManager"
      }
    }
    parameters {
      name: "exc_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc_value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "traceback"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "AsyncGenerator"
  fully_qualified_name: "typing.AsyncGenerator"
  super_classes: "typing.AsyncIterator"
  methods {
    name: "__anext__"
    fully_qualified_name: "typing.AsyncGenerator.__anext__"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "asend"
    fully_qualified_name: "typing.AsyncGenerator.asend"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "aclose"
    fully_qualified_name: "typing.AsyncGenerator.aclose"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[None]"
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__aiter__"
    fully_qualified_name: "typing.AsyncGenerator.__aiter__"
    return_annotation {
      pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AsyncGenerator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "ag_await"
    fully_qualified_name: "typing.AsyncGenerator.ag_await"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "ag_code"
    fully_qualified_name: "typing.AsyncGenerator.ag_code"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "ag_frame"
    fully_qualified_name: "typing.AsyncGenerator.ag_frame"
    return_annotation {
      pretty_printed_name: "types.FrameType"
      fully_qualified_name: "types.FrameType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "ag_running"
    fully_qualified_name: "typing.AsyncGenerator.ag_running"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "athrow"
    fullname: "typing.AsyncGenerator.athrow"
    definitions {
      name: "athrow"
      fully_qualified_name: "typing.AsyncGenerator.athrow"
      return_annotation {
        pretty_printed_name: "typing.Awaitable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Awaitable"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.AsyncGenerator"
        }
      }
      parameters {
        name: "__typ"
        type_annotation {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
      }
      parameters {
        name: "__val"
        type_annotation {
          pretty_printed_name: "Union[builtins.BaseException,builtins.object]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "builtins.object"
            fully_qualified_name: "builtins.object"
          }
        }
        has_default: true
      }
      parameters {
        name: "__tb"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    definitions {
      name: "athrow"
      fully_qualified_name: "typing.AsyncGenerator.athrow"
      return_annotation {
        pretty_printed_name: "typing.Awaitable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Awaitable"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.AsyncGenerator"
        }
      }
      parameters {
        name: "__typ"
        type_annotation {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      parameters {
        name: "__val"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "__tb"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "AsyncIterable"
  fully_qualified_name: "typing.AsyncIterable"
  super_classes: "builtins.object"
  methods {
    name: "__aiter__"
    fully_qualified_name: "typing.AsyncIterable.__aiter__"
    return_annotation {
      pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AsyncIterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncIterable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncIterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "AsyncIterator"
  fully_qualified_name: "typing.AsyncIterator"
  super_classes: "typing.AsyncIterable"
  methods {
    name: "__anext__"
    fully_qualified_name: "typing.AsyncIterator.__anext__"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncIterator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__aiter__"
    fully_qualified_name: "typing.AsyncIterator.__aiter__"
    return_annotation {
      pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AsyncIterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncIterator"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Awaitable"
  fully_qualified_name: "typing.Awaitable"
  super_classes: "builtins.object"
  methods {
    name: "__await__"
    fully_qualified_name: "typing.Awaitable.__await__"
    return_annotation {
      pretty_printed_name: "typing.Generator[Any,None,typing._T_co]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Awaitable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Awaitable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Coroutine"
  fully_qualified_name: "typing.Coroutine"
  super_classes: "typing.Awaitable"
  methods {
    name: "cr_await"
    fully_qualified_name: "typing.Coroutine.cr_await"
    return_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "cr_code"
    fully_qualified_name: "typing.Coroutine.cr_code"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "cr_frame"
    fully_qualified_name: "typing.Coroutine.cr_frame"
    return_annotation {
      pretty_printed_name: "types.FrameType"
      fully_qualified_name: "types.FrameType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "cr_running"
    fully_qualified_name: "typing.Coroutine.cr_running"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "send"
    fully_qualified_name: "typing.Coroutine.send"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    parameters {
      name: "__value"
      type_annotation {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "close"
    fully_qualified_name: "typing.Coroutine.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
    is_abstract: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "throw"
    fullname: "typing.Coroutine.throw"
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Coroutine.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Coroutine"
        }
      }
      parameters {
        name: "__typ"
        type_annotation {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
      }
      parameters {
        name: "__val"
        type_annotation {
          pretty_printed_name: "Union[builtins.BaseException,builtins.object]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "builtins.object"
            fully_qualified_name: "builtins.object"
          }
        }
        has_default: true
      }
      parameters {
        name: "__tb"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Coroutine.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Coroutine"
        }
      }
      parameters {
        name: "__typ"
        type_annotation {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      parameters {
        name: "__val"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "__tb"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_abstract: true
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "__qualname__"
    fully_qualified_name: "typing.Coroutine.__qualname__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "ParamSpec"
  fully_qualified_name: "typing.ParamSpec"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.ParamSpec.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.ParamSpec"
        fully_qualified_name: "typing.ParamSpec"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "bound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[None,Type[Any],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Type[Any]"
          kind: TYPE
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "contravariant"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "covariant"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "310"
  }
  methods {
    name: "args"
    fully_qualified_name: "typing.ParamSpec.args"
    return_annotation {
      pretty_printed_name: "typing.ParamSpecArgs"
      fully_qualified_name: "typing.ParamSpecArgs"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.ParamSpec"
        fully_qualified_name: "typing.ParamSpec"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "310"
  }
  methods {
    name: "kwargs"
    fully_qualified_name: "typing.ParamSpec.kwargs"
    return_annotation {
      pretty_printed_name: "typing.ParamSpecKwargs"
      fully_qualified_name: "typing.ParamSpecKwargs"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.ParamSpec"
        fully_qualified_name: "typing.ParamSpec"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "310"
  }
  valid_for: "310"
  attributes {
    name: "__bound__"
    fully_qualified_name: "typing.ParamSpec.__bound__"
    type_annotation {
      pretty_printed_name: "Union[Type[Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "Type[Any]"
        kind: TYPE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "310"
  }
  attributes {
    name: "__covariant__"
    fully_qualified_name: "typing.ParamSpec.__covariant__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "310"
  }
  attributes {
    name: "__contravariant__"
    fully_qualified_name: "typing.ParamSpec.__contravariant__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "310"
  }
}
functions {
  name: "NewType"
  fully_qualified_name: "typing.NewType"
  return_annotation {
    pretty_printed_name: "Type[typing._T]"
    kind: TYPE
    args {
      pretty_printed_name: "typing._T"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "tp"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Type[typing._T]"
      kind: TYPE
      args {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "overload"
  fully_qualified_name: "typing.overload"
  return_annotation {
    pretty_printed_name: "typing._F"
    kind: TYPE_VAR
  }
  parameters {
    name: "f"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing._F"
      kind: TYPE_VAR
    }
  }
  valid_for: "27"
}
functions {
  name: "overload"
  fully_qualified_name: "typing.overload"
  return_annotation {
    pretty_printed_name: "typing._F"
    kind: TYPE_VAR
  }
  parameters {
    name: "func"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing._F"
      kind: TYPE_VAR
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "runtime_checkable"
  fully_qualified_name: "typing_extensions.runtime_checkable"
  return_annotation {
    pretty_printed_name: "typing_extensions._TC"
    kind: TYPE_VAR
  }
  parameters {
    name: "cls"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing_extensions._TC"
      kind: TYPE_VAR
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "final"
  fully_qualified_name: "typing_extensions.final"
  return_annotation {
    pretty_printed_name: "typing_extensions._F"
    kind: TYPE_VAR
  }
  parameters {
    name: "f"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing_extensions._F"
      kind: TYPE_VAR
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "IntVar"
  fully_qualified_name: "typing_extensions.IntVar"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "get_type_hints"
  fully_qualified_name: "typing_extensions.get_type_hints"
  return_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
  parameters {
    name: "obj"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
  parameters {
    name: "globalns"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "localns"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "include_extras"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "get_args"
  fully_qualified_name: "typing_extensions.get_args"
  return_annotation {
    pretty_printed_name: "builtins.tuple[Any]"
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.tuple"
  }
  parameters {
    name: "tp"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "get_origin"
  fully_qualified_name: "typing_extensions.get_origin"
  return_annotation {
    pretty_printed_name: "Union[Any,None]"
    kind: UNION
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  parameters {
    name: "tp"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "TYPE_CHECKING"
  fully_qualified_name: "typing.TYPE_CHECKING"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "ClassVar"
  fully_qualified_name: "typing.ClassVar"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "Type"
  fully_qualified_name: "typing.Type"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "runtime"
  fully_qualified_name: "typing_extensions.runtime"
  type_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "Protocol"
  fully_qualified_name: "typing_extensions.Protocol"
  type_annotation {
    pretty_printed_name: "typing_extensions._SpecialForm"
    fully_qualified_name: "typing_extensions._SpecialForm"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "Final"
  fully_qualified_name: "typing_extensions.Final"
  type_annotation {
    pretty_printed_name: "typing_extensions._SpecialForm"
    fully_qualified_name: "typing_extensions._SpecialForm"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "Literal"
  fully_qualified_name: "typing_extensions.Literal"
  type_annotation {
    pretty_printed_name: "typing_extensions._SpecialForm"
    fully_qualified_name: "typing_extensions._SpecialForm"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "TypedDict"
  fully_qualified_name: "typing_extensions.TypedDict"
  type_annotation {
    pretty_printed_name: "builtins.object"
    fully_qualified_name: "builtins.object"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "OrderedDict"
  fully_qualified_name: "typing_extensions.OrderedDict"
  type_annotation {
    pretty_printed_name: "typing._Alias"
    fully_qualified_name: "typing._Alias"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "Annotated"
  fully_qualified_name: "typing_extensions.Annotated"
  type_annotation {
    pretty_printed_name: "typing_extensions._SpecialForm"
    fully_qualified_name: "typing_extensions._SpecialForm"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_AnnotatedAlias"
  fully_qualified_name: "typing_extensions._AnnotatedAlias"
  type_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "Concatenate"
  fully_qualified_name: "typing_extensions.Concatenate"
  type_annotation {
    pretty_printed_name: "typing_extensions._SpecialForm"
    fully_qualified_name: "typing_extensions._SpecialForm"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
vars {
  name: "TypeAlias"
  fully_qualified_name: "typing_extensions.TypeAlias"
  type_annotation {
    pretty_printed_name: "typing_extensions._SpecialForm"
    fully_qualified_name: "typing_extensions._SpecialForm"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
vars {
  name: "TypeGuard"
  fully_qualified_name: "typing_extensions.TypeGuard"
  type_annotation {
    pretty_printed_name: "typing_extensions._SpecialForm"
    fully_qualified_name: "typing_extensions._SpecialForm"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
}
vars {
  name: "Concatenate"
  fully_qualified_name: "typing.Concatenate"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
  valid_for: "310"
}
vars {
  name: "TypeAlias"
  fully_qualified_name: "typing.TypeAlias"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
  valid_for: "310"
}
vars {
  name: "TypeGuard"
  fully_qualified_name: "typing.TypeGuard"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
  valid_for: "310"
}
