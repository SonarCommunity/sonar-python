fully_qualified_name: "cryptography.hazmat.primitives.keywrap"
classes {
  name: "InvalidUnwrap"
  fully_qualified_name: "cryptography.hazmat.primitives.keywrap.InvalidUnwrap"
  super_classes: "builtins.Exception"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "aes_key_wrap"
  fully_qualified_name: "cryptography.hazmat.primitives.keywrap.aes_key_wrap"
  return_annotation {
    pretty_printed_name: "builtins.bytes"
    fully_qualified_name: "builtins.bytes"
  }
  parameters {
    name: "wrapping_key"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  parameters {
    name: "key_to_wrap"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  parameters {
    name: "backend"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[cryptography.hazmat.backends.interfaces.CipherBackend,None]"
      kind: UNION
      args {
        pretty_printed_name: "cryptography.hazmat.backends.interfaces.CipherBackend"
        fully_qualified_name: "cryptography.hazmat.backends.interfaces.CipherBackend"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "aes_key_wrap_with_padding"
  fully_qualified_name: "cryptography.hazmat.primitives.keywrap.aes_key_wrap_with_padding"
  return_annotation {
    pretty_printed_name: "builtins.bytes"
    fully_qualified_name: "builtins.bytes"
  }
  parameters {
    name: "wrapping_key"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  parameters {
    name: "key_to_wrap"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  parameters {
    name: "backend"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[cryptography.hazmat.backends.interfaces.CipherBackend,None]"
      kind: UNION
      args {
        pretty_printed_name: "cryptography.hazmat.backends.interfaces.CipherBackend"
        fully_qualified_name: "cryptography.hazmat.backends.interfaces.CipherBackend"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "aes_key_unwrap"
  fully_qualified_name: "cryptography.hazmat.primitives.keywrap.aes_key_unwrap"
  return_annotation {
    pretty_printed_name: "builtins.bytes"
    fully_qualified_name: "builtins.bytes"
  }
  parameters {
    name: "wrapping_key"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  parameters {
    name: "wrapped_key"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  parameters {
    name: "backend"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[cryptography.hazmat.backends.interfaces.CipherBackend,None]"
      kind: UNION
      args {
        pretty_printed_name: "cryptography.hazmat.backends.interfaces.CipherBackend"
        fully_qualified_name: "cryptography.hazmat.backends.interfaces.CipherBackend"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "aes_key_unwrap_with_padding"
  fully_qualified_name: "cryptography.hazmat.primitives.keywrap.aes_key_unwrap_with_padding"
  return_annotation {
    pretty_printed_name: "builtins.bytes"
    fully_qualified_name: "builtins.bytes"
  }
  parameters {
    name: "wrapping_key"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  parameters {
    name: "wrapped_key"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  parameters {
    name: "backend"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[cryptography.hazmat.backends.interfaces.CipherBackend,None]"
      kind: UNION
      args {
        pretty_printed_name: "cryptography.hazmat.backends.interfaces.CipherBackend"
        fully_qualified_name: "cryptography.hazmat.backends.interfaces.CipherBackend"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
