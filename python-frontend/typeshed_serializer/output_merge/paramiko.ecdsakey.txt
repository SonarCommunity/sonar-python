fully_qualified_name: "paramiko.ecdsakey"
classes {
  name: "_ECDSACurve"
  fully_qualified_name: "paramiko.ecdsakey._ECDSACurve"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "paramiko.ecdsakey._ECDSACurve.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey._ECDSACurve"
        fully_qualified_name: "paramiko.ecdsakey._ECDSACurve"
      }
    }
    parameters {
      name: "curve_class"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve]"
        kind: TYPE
        args {
          pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
          fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
        }
      }
    }
    parameters {
      name: "nist_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "nist_name"
    fully_qualified_name: "paramiko.ecdsakey._ECDSACurve.nist_name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "key_length"
    fully_qualified_name: "paramiko.ecdsakey._ECDSACurve.key_length"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "key_format_identifier"
    fully_qualified_name: "paramiko.ecdsakey._ECDSACurve.key_format_identifier"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "hash_object"
    fully_qualified_name: "paramiko.ecdsakey._ECDSACurve.hash_object"
    type_annotation {
      pretty_printed_name: "Type[cryptography.hazmat.primitives.hashes.HashAlgorithm]"
      kind: TYPE
      args {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "curve_class"
    fully_qualified_name: "paramiko.ecdsakey._ECDSACurve.curve_class"
    type_annotation {
      pretty_printed_name: "Type[cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve]"
      kind: TYPE
      args {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_ECDSACurveSet"
  fully_qualified_name: "paramiko.ecdsakey._ECDSACurveSet"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "paramiko.ecdsakey._ECDSACurveSet.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey._ECDSACurveSet"
        fully_qualified_name: "paramiko.ecdsakey._ECDSACurveSet"
      }
    }
    parameters {
      name: "ecdsa_curves"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[paramiko.ecdsakey._ECDSACurve]"
        args {
          pretty_printed_name: "paramiko.ecdsakey._ECDSACurve"
          fully_qualified_name: "paramiko.ecdsakey._ECDSACurve"
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_key_format_identifier_list"
    fully_qualified_name: "paramiko.ecdsakey._ECDSACurveSet.get_key_format_identifier_list"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey._ECDSACurveSet"
        fully_qualified_name: "paramiko.ecdsakey._ECDSACurveSet"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_by_curve_class"
    fully_qualified_name: "paramiko.ecdsakey._ECDSACurveSet.get_by_curve_class"
    return_annotation {
      pretty_printed_name: "Union[paramiko.ecdsakey._ECDSACurve,None]"
      kind: UNION
      args {
        pretty_printed_name: "paramiko.ecdsakey._ECDSACurve"
        fully_qualified_name: "paramiko.ecdsakey._ECDSACurve"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey._ECDSACurveSet"
        fully_qualified_name: "paramiko.ecdsakey._ECDSACurveSet"
      }
    }
    parameters {
      name: "curve_class"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[Any]"
        kind: TYPE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_by_key_format_identifier"
    fully_qualified_name: "paramiko.ecdsakey._ECDSACurveSet.get_by_key_format_identifier"
    return_annotation {
      pretty_printed_name: "Union[paramiko.ecdsakey._ECDSACurve,None]"
      kind: UNION
      args {
        pretty_printed_name: "paramiko.ecdsakey._ECDSACurve"
        fully_qualified_name: "paramiko.ecdsakey._ECDSACurve"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey._ECDSACurveSet"
        fully_qualified_name: "paramiko.ecdsakey._ECDSACurveSet"
      }
    }
    parameters {
      name: "key_format_identifier"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_by_key_length"
    fully_qualified_name: "paramiko.ecdsakey._ECDSACurveSet.get_by_key_length"
    return_annotation {
      pretty_printed_name: "Union[paramiko.ecdsakey._ECDSACurve,None]"
      kind: UNION
      args {
        pretty_printed_name: "paramiko.ecdsakey._ECDSACurve"
        fully_qualified_name: "paramiko.ecdsakey._ECDSACurve"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey._ECDSACurveSet"
        fully_qualified_name: "paramiko.ecdsakey._ECDSACurveSet"
      }
    }
    parameters {
      name: "key_length"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "ecdsa_curves"
    fully_qualified_name: "paramiko.ecdsakey._ECDSACurveSet.ecdsa_curves"
    type_annotation {
      pretty_printed_name: "typing.Sequence[paramiko.ecdsakey._ECDSACurve]"
      args {
        pretty_printed_name: "paramiko.ecdsakey._ECDSACurve"
        fully_qualified_name: "paramiko.ecdsakey._ECDSACurve"
      }
      fully_qualified_name: "typing.Sequence"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "ECDSAKey"
  fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
  super_classes: "paramiko.pkey.PKey"
  methods {
    name: "__init__"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey.ECDSAKey"
        fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[paramiko.message.Message,None]"
        kind: UNION
        args {
          pretty_printed_name: "paramiko.message.Message"
          fully_qualified_name: "paramiko.message.Message"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bytes,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "password"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "vals"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Tuple[cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey,cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey],None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey,cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey]"
          kind: TUPLE
          args {
            pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
            fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
          }
          args {
            pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
            fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "file_obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.IO[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.IO[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.IO"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "validate_point"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "supported_key_format_identifiers"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.supported_key_format_identifiers"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "asbytes"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.asbytes"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey.ECDSAKey"
        fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__hash__"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.__hash__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey.ECDSAKey"
        fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_name"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.get_name"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey.ECDSAKey"
        fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_bits"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.get_bits"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey.ECDSAKey"
        fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "can_sign"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.can_sign"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey.ECDSAKey"
        fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "sign_ssh_data"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.sign_ssh_data"
    return_annotation {
      pretty_printed_name: "paramiko.message.Message"
      fully_qualified_name: "paramiko.message.Message"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey.ECDSAKey"
        fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "verify_ssh_sig"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.verify_ssh_sig"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey.ECDSAKey"
        fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.message.Message"
        fully_qualified_name: "paramiko.message.Message"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "write_private_key_file"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.write_private_key_file"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey.ECDSAKey"
        fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "password"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "write_private_key"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.write_private_key"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "paramiko.ecdsakey.ECDSAKey"
        fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
      }
    }
    parameters {
      name: "file_obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.IO"
      }
    }
    parameters {
      name: "password"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "generate"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.generate"
    return_annotation {
      pretty_printed_name: "paramiko.ecdsakey.ECDSAKey"
      fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[paramiko.ecdsakey.ECDSAKey]"
        kind: TYPE
        args {
          pretty_printed_name: "paramiko.ecdsakey.ECDSAKey"
          fully_qualified_name: "paramiko.ecdsakey.ECDSAKey"
        }
      }
    }
    parameters {
      name: "curve"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      }
      has_default: true
    }
    parameters {
      name: "progress_func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "bits"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "verifying_key"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.verifying_key"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "signing_key"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.signing_key"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "public_blob"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.public_blob"
    type_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "ecdsa_curve"
    fully_qualified_name: "paramiko.ecdsakey.ECDSAKey.ecdsa_curve"
    type_annotation {
      pretty_printed_name: "Union[paramiko.ecdsakey._ECDSACurve,None]"
      kind: UNION
      args {
        pretty_printed_name: "paramiko.ecdsakey._ECDSACurve"
        fully_qualified_name: "paramiko.ecdsakey._ECDSACurve"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
