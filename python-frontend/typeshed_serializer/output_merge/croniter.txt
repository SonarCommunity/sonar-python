fully_qualified_name: "croniter"
classes {
  name: "CroniterError"
  fully_qualified_name: "croniter.CroniterError"
  super_classes: "builtins.ValueError"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "CroniterBadCronError"
  fully_qualified_name: "croniter.CroniterBadCronError"
  super_classes: "croniter.CroniterError"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "CroniterBadDateError"
  fully_qualified_name: "croniter.CroniterBadDateError"
  super_classes: "croniter.CroniterError"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "CroniterNotAlphaError"
  fully_qualified_name: "croniter.CroniterNotAlphaError"
  super_classes: "croniter.CroniterError"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "croniter"
  fully_qualified_name: "croniter.croniter"
  super_classes: "typing.Iterator"
  methods {
    name: "__init__"
    fully_qualified_name: "croniter.croniter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "croniter.croniter"
        fully_qualified_name: "croniter.croniter"
      }
    }
    parameters {
      name: "expr_format"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "start_time"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.float,datetime.datetime,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "datetime.datetime"
          fully_qualified_name: "datetime.datetime"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "ret_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.float],Type[datetime.datetime],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.float]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        args {
          pretty_printed_name: "Type[datetime.datetime]"
          kind: TYPE
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_next"
    fully_qualified_name: "croniter.croniter.get_next"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "croniter.croniter"
        fully_qualified_name: "croniter.croniter"
      }
    }
    parameters {
      name: "ret_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.float],Type[datetime.datetime],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.float]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        args {
          pretty_printed_name: "Type[datetime.datetime]"
          kind: TYPE
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_prev"
    fully_qualified_name: "croniter.croniter.get_prev"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "croniter.croniter"
        fully_qualified_name: "croniter.croniter"
      }
    }
    parameters {
      name: "ret_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.float],Type[datetime.datetime],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.float]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        args {
          pretty_printed_name: "Type[datetime.datetime]"
          kind: TYPE
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_current"
    fully_qualified_name: "croniter.croniter.get_current"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "croniter.croniter"
        fully_qualified_name: "croniter.croniter"
      }
    }
    parameters {
      name: "ret_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.float],Type[datetime.datetime],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.float]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        args {
          pretty_printed_name: "Type[datetime.datetime]"
          kind: TYPE
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "croniter.croniter.__iter__"
    return_annotation {
      pretty_printed_name: "croniter._SelfT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "croniter._SelfT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "croniter.croniter.__next__"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "croniter.croniter"
        fully_qualified_name: "croniter.croniter"
      }
    }
    parameters {
      name: "ret_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.float],Type[datetime.datetime],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.float]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        args {
          pretty_printed_name: "Type[datetime.datetime]"
          kind: TYPE
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "next"
    fully_qualified_name: "croniter.croniter.next"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "croniter.croniter"
        fully_qualified_name: "croniter.croniter"
      }
    }
    parameters {
      name: "ret_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.float],Type[datetime.datetime],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.float]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        args {
          pretty_printed_name: "Type[datetime.datetime]"
          kind: TYPE
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "all_next"
    fully_qualified_name: "croniter.croniter.all_next"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "croniter.croniter"
        fully_qualified_name: "croniter.croniter"
      }
    }
    parameters {
      name: "ret_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.float],Type[datetime.datetime],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.float]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        args {
          pretty_printed_name: "Type[datetime.datetime]"
          kind: TYPE
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "all_prev"
    fully_qualified_name: "croniter.croniter.all_prev"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "croniter.croniter"
        fully_qualified_name: "croniter.croniter"
      }
    }
    parameters {
      name: "ret_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.float],Type[datetime.datetime],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.float]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        args {
          pretty_printed_name: "Type[datetime.datetime]"
          kind: TYPE
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "iter"
    fully_qualified_name: "croniter.croniter.iter"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "croniter.croniter"
        fully_qualified_name: "croniter.croniter"
      }
    }
    parameters {
      name: "ret_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.float],Type[datetime.datetime],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.float]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        args {
          pretty_printed_name: "Type[datetime.datetime]"
          kind: TYPE
          args {
            pretty_printed_name: "datetime.datetime"
            fully_qualified_name: "datetime.datetime"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "is_leap"
    fully_qualified_name: "croniter.croniter.is_leap"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "croniter.croniter"
        fully_qualified_name: "croniter.croniter"
      }
    }
    parameters {
      name: "year"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "expand"
    fully_qualified_name: "croniter.croniter.expand"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.list[builtins.list[builtins.str]],builtins.dict[builtins.str,Any]]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.list[builtins.list[builtins.str]]"
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[croniter.croniter]"
        kind: TYPE
        args {
          pretty_printed_name: "croniter.croniter"
          fully_qualified_name: "croniter.croniter"
        }
      }
    }
    parameters {
      name: "expr_format"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "is_valid"
    fully_qualified_name: "croniter.croniter.is_valid"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[croniter.croniter]"
        kind: TYPE
        args {
          pretty_printed_name: "croniter.croniter"
          fully_qualified_name: "croniter.croniter"
        }
      }
    }
    parameters {
      name: "expression"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "MONTHS_IN_YEAR"
    fully_qualified_name: "croniter.croniter.MONTHS_IN_YEAR"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "RANGES"
    fully_qualified_name: "croniter.croniter.RANGES"
    type_annotation {
      pretty_printed_name: "builtins.tuple[Tuple[builtins.int,builtins.int]]"
      args {
        pretty_printed_name: "Tuple[builtins.int,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      fully_qualified_name: "builtins.tuple"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "DAYS"
    fully_qualified_name: "croniter.croniter.DAYS"
    type_annotation {
      pretty_printed_name: "builtins.tuple[builtins.int]"
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "builtins.tuple"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "ALPHACONV"
    fully_qualified_name: "croniter.croniter.ALPHACONV"
    type_annotation {
      pretty_printed_name: "builtins.tuple[builtins.dict[builtins.str,Any]]"
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      fully_qualified_name: "builtins.tuple"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "LOWMAP"
    fully_qualified_name: "croniter.croniter.LOWMAP"
    type_annotation {
      pretty_printed_name: "builtins.tuple[builtins.dict[builtins.int,Any]]"
      args {
        pretty_printed_name: "builtins.dict[builtins.int,Any]"
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      fully_qualified_name: "builtins.tuple"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "bad_length"
    fully_qualified_name: "croniter.croniter.bad_length"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "tzinfo"
    fully_qualified_name: "croniter.croniter.tzinfo"
    type_annotation {
      pretty_printed_name: "Union[datetime.tzinfo,None]"
      kind: UNION
      args {
        pretty_printed_name: "datetime.tzinfo"
        fully_qualified_name: "datetime.tzinfo"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "cur"
    fully_qualified_name: "croniter.croniter.cur"
    type_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "expanded"
    fully_qualified_name: "croniter.croniter.expanded"
    type_annotation {
      pretty_printed_name: "builtins.list[builtins.list[builtins.str]]"
      args {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "start_time"
    fully_qualified_name: "croniter.croniter.start_time"
    type_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "dst_start_time"
    fully_qualified_name: "croniter.croniter.dst_start_time"
    type_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "nth_weekday_of_month"
    fully_qualified_name: "croniter.croniter.nth_weekday_of_month"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
