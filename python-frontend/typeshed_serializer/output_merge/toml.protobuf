fully_qualified_name: "toml"
classes {
  name: "TomlDecodeError"
  fully_qualified_name: "toml.TomlDecodeError"
  super_classes: "builtins.Exception"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "load"
  fully_qualified_name: "toml.load"
  return_annotation {
    pretty_printed_name: "typing.MutableMapping[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "typing.MutableMapping"
  }
  parameters {
    name: "f"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[TypeAlias[Union[builtins.str,pathlib.PurePath]],builtins.list[builtins.str],typing.IO[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,pathlib.PurePath]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,pathlib.PurePath]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "pathlib.PurePath"
            fully_qualified_name: "pathlib.PurePath"
          }
        }
        fully_qualified_name: "toml._PathLike"
      }
      args {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "typing.IO[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.IO"
      }
    }
  }
  parameters {
    name: "_dict"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Type[typing.MutableMapping[builtins.str,Any]]"
      kind: TYPE
      args {
        pretty_printed_name: "typing.MutableMapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    has_default: true
  }
  valid_for: "35"
}
functions {
  name: "load"
  fully_qualified_name: "toml.load"
  return_annotation {
    pretty_printed_name: "typing.MutableMapping[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "typing.MutableMapping"
  }
  parameters {
    name: "f"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[TypeAlias[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]],builtins.list[builtins.str],typing.IO[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "TypeAlias[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "os.PathLike[builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "os.PathLike"
            }
          }
          fully_qualified_name: "_typeshed.StrPath"
        }
        fully_qualified_name: "toml._PathLike"
      }
      args {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "typing.IO[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.IO"
      }
    }
  }
  parameters {
    name: "_dict"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Type[typing.MutableMapping[builtins.str,Any]]"
      kind: TYPE
      args {
        pretty_printed_name: "typing.MutableMapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    has_default: true
  }
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "loads"
  fully_qualified_name: "toml.loads"
  return_annotation {
    pretty_printed_name: "typing.MutableMapping[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "typing.MutableMapping"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "_dict"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Type[typing.MutableMapping[builtins.str,Any]]"
      kind: TYPE
      args {
        pretty_printed_name: "typing.MutableMapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "dump"
  fully_qualified_name: "toml.dump"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "o"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Mapping[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Mapping"
    }
  }
  parameters {
    name: "f"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "_typeshed.SupportsWrite[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "_typeshed.SupportsWrite"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "dumps"
  fully_qualified_name: "toml.dumps"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "o"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Mapping[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Mapping"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
