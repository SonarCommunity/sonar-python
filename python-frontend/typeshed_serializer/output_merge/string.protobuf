fully_qualified_name: "string"
classes {
  name: "Template"
  fully_qualified_name: "string.Template"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "string.Template.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Template"
        fully_qualified_name: "string.Template"
      }
    }
    parameters {
      name: "template"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.unicode"
        fully_qualified_name: "builtins.unicode"
      }
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "substitute"
    fullname: "string.Template.substitute"
    definitions {
      name: "substitute"
      fully_qualified_name: "string.Template.substitute"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "string.Template"
          fully_qualified_name: "string.Template"
        }
      }
      parameters {
        name: "mapping"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing.Mapping[builtins.str,builtins.str],typing.Mapping[builtins.unicode,builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Mapping"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.unicode,builtins.str]"
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Mapping"
          }
        }
        has_default: true
      }
      parameters {
        name: "kwds"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "substitute"
      fully_qualified_name: "string.Template.substitute"
      return_annotation {
        pretty_printed_name: "builtins.unicode"
        fully_qualified_name: "builtins.unicode"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "string.Template"
          fully_qualified_name: "string.Template"
        }
      }
      parameters {
        name: "mapping"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing.Mapping[builtins.str,builtins.unicode],typing.Mapping[builtins.unicode,builtins.unicode]]"
          kind: UNION
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,builtins.unicode]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
            fully_qualified_name: "typing.Mapping"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.unicode,builtins.unicode]"
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
            fully_qualified_name: "typing.Mapping"
          }
        }
        has_default: true
      }
      parameters {
        name: "kwds"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "safe_substitute"
    fullname: "string.Template.safe_substitute"
    definitions {
      name: "safe_substitute"
      fully_qualified_name: "string.Template.safe_substitute"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "string.Template"
          fully_qualified_name: "string.Template"
        }
      }
      parameters {
        name: "mapping"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing.Mapping[builtins.str,builtins.str],typing.Mapping[builtins.unicode,builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Mapping"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.unicode,builtins.str]"
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Mapping"
          }
        }
        has_default: true
      }
      parameters {
        name: "kwds"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "safe_substitute"
      fully_qualified_name: "string.Template.safe_substitute"
      return_annotation {
        pretty_printed_name: "builtins.unicode"
        fully_qualified_name: "builtins.unicode"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "string.Template"
          fully_qualified_name: "string.Template"
        }
      }
      parameters {
        name: "mapping"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing.Mapping[builtins.str,builtins.unicode],typing.Mapping[builtins.unicode,builtins.unicode]]"
          kind: UNION
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,builtins.unicode]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
            fully_qualified_name: "typing.Mapping"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.unicode,builtins.unicode]"
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
            args {
              pretty_printed_name: "builtins.unicode"
              fully_qualified_name: "builtins.unicode"
            }
            fully_qualified_name: "typing.Mapping"
          }
        }
      }
      parameters {
        name: "kwds"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.unicode"
          fully_qualified_name: "builtins.unicode"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  valid_for: "27"
  attributes {
    name: "template"
    fully_qualified_name: "string.Template.template"
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
    valid_for: "27"
  }
}
classes {
  name: "Template"
  fully_qualified_name: "string.Template"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "string.Template.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Template"
        fully_qualified_name: "string.Template"
      }
    }
    parameters {
      name: "template"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "substitute"
    fully_qualified_name: "string.Template.substitute"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Template"
        fully_qualified_name: "string.Template"
      }
    }
    parameters {
      name: "__mapping"
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,builtins.object]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
        fully_qualified_name: "typing.Mapping"
      }
      has_default: true
    }
    parameters {
      name: "kwds"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "safe_substitute"
    fully_qualified_name: "string.Template.safe_substitute"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Template"
        fully_qualified_name: "string.Template"
      }
    }
    parameters {
      name: "__mapping"
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,builtins.object]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
        fully_qualified_name: "typing.Mapping"
      }
      has_default: true
    }
    parameters {
      name: "kwds"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  has_metaclass: true
  metaclass_name: "string._TemplateMetaclass"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "template"
    fully_qualified_name: "string.Template.template"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "delimiter"
    fully_qualified_name: "string.Template.delimiter"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "idpattern"
    fully_qualified_name: "string.Template.idpattern"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "braceidpattern"
    fully_qualified_name: "string.Template.braceidpattern"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "flags"
    fully_qualified_name: "string.Template.flags"
    type_annotation {
      pretty_printed_name: "re.RegexFlag"
      fully_qualified_name: "re.RegexFlag"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "pattern"
    fully_qualified_name: "string.Template.pattern"
    type_annotation {
      pretty_printed_name: "re.Pattern[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "re.Pattern"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Formatter"
  fully_qualified_name: "string.Formatter"
  super_classes: "builtins.object"
  methods {
    name: "format"
    fully_qualified_name: "string.Formatter.format"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Formatter"
        fully_qualified_name: "string.Formatter"
      }
    }
    parameters {
      name: "format_string"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "vformat"
    fully_qualified_name: "string.Formatter.vformat"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Formatter"
        fully_qualified_name: "string.Formatter"
      }
    }
    parameters {
      name: "format_string"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "parse"
    fully_qualified_name: "string.Formatter.parse"
    return_annotation {
      pretty_printed_name: "typing.Iterable[Tuple[builtins.str,builtins.str,builtins.str,builtins.str]]"
      args {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      fully_qualified_name: "typing.Iterable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Formatter"
        fully_qualified_name: "string.Formatter"
      }
    }
    parameters {
      name: "format_string"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "parse"
    fully_qualified_name: "string.Formatter.parse"
    return_annotation {
      pretty_printed_name: "typing.Iterable[Tuple[_typeshed.StrOrLiteralStr,Union[_typeshed.StrOrLiteralStr,None],Union[_typeshed.StrOrLiteralStr,None],Union[_typeshed.StrOrLiteralStr,None]]]"
      args {
        pretty_printed_name: "Tuple[_typeshed.StrOrLiteralStr,Union[_typeshed.StrOrLiteralStr,None],Union[_typeshed.StrOrLiteralStr,None],Union[_typeshed.StrOrLiteralStr,None]]"
        kind: TUPLE
        args {
          pretty_printed_name: "_typeshed.StrOrLiteralStr"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "Union[_typeshed.StrOrLiteralStr,None]"
          kind: UNION
          args {
            pretty_printed_name: "_typeshed.StrOrLiteralStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        args {
          pretty_printed_name: "Union[_typeshed.StrOrLiteralStr,None]"
          kind: UNION
          args {
            pretty_printed_name: "_typeshed.StrOrLiteralStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        args {
          pretty_printed_name: "Union[_typeshed.StrOrLiteralStr,None]"
          kind: UNION
          args {
            pretty_printed_name: "_typeshed.StrOrLiteralStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      fully_qualified_name: "typing.Iterable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Formatter"
        fully_qualified_name: "string.Formatter"
      }
    }
    parameters {
      name: "format_string"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_typeshed.StrOrLiteralStr"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_field"
    fully_qualified_name: "string.Formatter.get_field"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Formatter"
        fully_qualified_name: "string.Formatter"
      }
    }
    parameters {
      name: "field_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_value"
    fully_qualified_name: "string.Formatter.get_value"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Formatter"
        fully_qualified_name: "string.Formatter"
      }
    }
    parameters {
      name: "key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "check_unused_args"
    fully_qualified_name: "string.Formatter.check_unused_args"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Formatter"
        fully_qualified_name: "string.Formatter"
      }
    }
    parameters {
      name: "used_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Union[builtins.int,builtins.str]]"
        args {
          pretty_printed_name: "Union[builtins.int,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "check_unused_args"
    fully_qualified_name: "string.Formatter.check_unused_args"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Formatter"
        fully_qualified_name: "string.Formatter"
      }
    }
    parameters {
      name: "used_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.set[Union[builtins.int,builtins.str]]"
        args {
          pretty_printed_name: "Union[builtins.int,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "builtins.set"
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "format_field"
    fully_qualified_name: "string.Formatter.format_field"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Formatter"
        fully_qualified_name: "string.Formatter"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "format_spec"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "convert_field"
    fully_qualified_name: "string.Formatter.convert_field"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Formatter"
        fully_qualified_name: "string.Formatter"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "conversion"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_vformat"
    fully_qualified_name: "string.Formatter._vformat"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string.Formatter"
        fully_qualified_name: "string.Formatter"
      }
    }
    parameters {
      name: "format_string"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "used_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.set[Union[builtins.int,builtins.str]]"
        args {
          pretty_printed_name: "Union[builtins.int,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "builtins.set"
      }
    }
    parameters {
      name: "recursion_depth"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "auto_arg_index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "format"
    fullname: "string.Formatter.format"
    definitions {
      name: "format"
      fully_qualified_name: "string.Formatter.format"
      return_annotation {
        pretty_printed_name: "UnboundType[LiteralString]"
        kind: UNBOUND
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "string.Formatter"
          fully_qualified_name: "string.Formatter"
        }
      }
      parameters {
        name: "__format_string"
        type_annotation {
          pretty_printed_name: "UnboundType[LiteralString]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "UnboundType[LiteralString]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[LiteralString]"
          kind: UNBOUND
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "format"
      fully_qualified_name: "string.Formatter.format"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "string.Formatter"
          fully_qualified_name: "string.Formatter"
        }
      }
      parameters {
        name: "__format_string"
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "vformat"
    fullname: "string.Formatter.vformat"
    definitions {
      name: "vformat"
      fully_qualified_name: "string.Formatter.vformat"
      return_annotation {
        pretty_printed_name: "UnboundType[LiteralString]"
        kind: UNBOUND
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "string.Formatter"
          fully_qualified_name: "string.Formatter"
        }
      }
      parameters {
        name: "format_string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[LiteralString]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "args"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Sequence[UnboundType[LiteralString]]"
          args {
            pretty_printed_name: "UnboundType[LiteralString]"
            kind: UNBOUND
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
      parameters {
        name: "kwargs"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Mapping[UnboundType[LiteralString],UnboundType[LiteralString]]"
          args {
            pretty_printed_name: "UnboundType[LiteralString]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "UnboundType[LiteralString]"
            kind: UNBOUND
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "vformat"
      fully_qualified_name: "string.Formatter.vformat"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "string.Formatter"
          fully_qualified_name: "string.Formatter"
        }
      }
      parameters {
        name: "format_string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "args"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Sequence[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
      parameters {
        name: "kwargs"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_TemplateMetaclass"
  fully_qualified_name: "string._TemplateMetaclass"
  super_classes: "builtins.type"
  methods {
    name: "__init__"
    fully_qualified_name: "string._TemplateMetaclass.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "string._TemplateMetaclass"
        fully_qualified_name: "string._TemplateMetaclass"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "bases"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[builtins.type,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
    }
    parameters {
      name: "dct"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  attributes {
    name: "pattern"
    fully_qualified_name: "string._TemplateMetaclass.pattern"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
}
functions {
  name: "capwords"
  fully_qualified_name: "string.capwords"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "sep"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "capwords"
  fully_qualified_name: "string.capwords"
  return_annotation {
    pretty_printed_name: "_typeshed.StrOrLiteralStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "_typeshed.StrOrLiteralStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "sep"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[_typeshed.StrOrLiteralStr,None]"
      kind: UNION
      args {
        pretty_printed_name: "_typeshed.StrOrLiteralStr"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "maketrans"
  fully_qualified_name: "string.maketrans"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "_from"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "to"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "27"
}
functions {
  name: "atof"
  fully_qualified_name: "string.atof"
  return_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  valid_for: "27"
}
functions {
  name: "atoi"
  fully_qualified_name: "string.atoi"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  parameters {
    name: "base"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "atol"
  fully_qualified_name: "string.atol"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  parameters {
    name: "base"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "capitalize"
  fully_qualified_name: "string.capitalize"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "word"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  valid_for: "27"
}
functions {
  name: "find"
  fully_qualified_name: "string.find"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  parameters {
    name: "sub"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  parameters {
    name: "start"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "end"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "rfind"
  fully_qualified_name: "string.rfind"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  parameters {
    name: "sub"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  parameters {
    name: "start"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "end"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "index"
  fully_qualified_name: "string.index"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  parameters {
    name: "sub"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  parameters {
    name: "start"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "end"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "rindex"
  fully_qualified_name: "string.rindex"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  parameters {
    name: "sub"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  parameters {
    name: "start"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "end"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "count"
  fully_qualified_name: "string.count"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  parameters {
    name: "sub"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.unicode"
      fully_qualified_name: "builtins.unicode"
    }
  }
  parameters {
    name: "start"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "end"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "lower"
  fully_qualified_name: "string.lower"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  valid_for: "27"
}
functions {
  name: "split"
  fully_qualified_name: "string.split"
  return_annotation {
    pretty_printed_name: "builtins.list[typing.AnyStr]"
    args {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "sep"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    has_default: true
  }
  parameters {
    name: "maxsplit"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "rsplit"
  fully_qualified_name: "string.rsplit"
  return_annotation {
    pretty_printed_name: "builtins.list[typing.AnyStr]"
    args {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "sep"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    has_default: true
  }
  parameters {
    name: "maxsplit"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "splitfields"
  fully_qualified_name: "string.splitfields"
  return_annotation {
    pretty_printed_name: "builtins.list[typing.AnyStr]"
    args {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "sep"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    has_default: true
  }
  parameters {
    name: "maxsplit"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "join"
  fully_qualified_name: "string.join"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "words"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "sep"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "joinfields"
  fully_qualified_name: "string.joinfields"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "word"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "sep"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "lstrip"
  fully_qualified_name: "string.lstrip"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "chars"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "rstrip"
  fully_qualified_name: "string.rstrip"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "chars"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "strip"
  fully_qualified_name: "string.strip"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "chars"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "swapcase"
  fully_qualified_name: "string.swapcase"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  valid_for: "27"
}
functions {
  name: "translate"
  fully_qualified_name: "string.translate"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "table"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "deletechars"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "upper"
  fully_qualified_name: "string.upper"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  valid_for: "27"
}
functions {
  name: "ljust"
  fully_qualified_name: "string.ljust"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "width"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "fillchar"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "rjust"
  fully_qualified_name: "string.rjust"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "width"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "fillchar"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "center"
  fully_qualified_name: "string.center"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "width"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "fillchar"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "zfill"
  fully_qualified_name: "string.zfill"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "width"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "27"
}
functions {
  name: "replace"
  fully_qualified_name: "string.replace"
  return_annotation {
    pretty_printed_name: "typing.AnyStr"
    kind: TYPE_VAR
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "old"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "new"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "maxreplace"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
vars {
  name: "ascii_letters"
  fully_qualified_name: "string.ascii_letters"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
}
vars {
  name: "ascii_letters"
  fully_qualified_name: "string.ascii_letters"
  type_annotation {
    pretty_printed_name: "UnboundType[LiteralString]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "ascii_lowercase"
  fully_qualified_name: "string.ascii_lowercase"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
}
vars {
  name: "ascii_lowercase"
  fully_qualified_name: "string.ascii_lowercase"
  type_annotation {
    pretty_printed_name: "UnboundType[LiteralString]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "ascii_uppercase"
  fully_qualified_name: "string.ascii_uppercase"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
}
vars {
  name: "ascii_uppercase"
  fully_qualified_name: "string.ascii_uppercase"
  type_annotation {
    pretty_printed_name: "UnboundType[LiteralString]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "digits"
  fully_qualified_name: "string.digits"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
}
vars {
  name: "digits"
  fully_qualified_name: "string.digits"
  type_annotation {
    pretty_printed_name: "UnboundType[LiteralString]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "hexdigits"
  fully_qualified_name: "string.hexdigits"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
}
vars {
  name: "hexdigits"
  fully_qualified_name: "string.hexdigits"
  type_annotation {
    pretty_printed_name: "UnboundType[LiteralString]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "letters"
  fully_qualified_name: "string.letters"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
}
vars {
  name: "lowercase"
  fully_qualified_name: "string.lowercase"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
}
vars {
  name: "octdigits"
  fully_qualified_name: "string.octdigits"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
}
vars {
  name: "octdigits"
  fully_qualified_name: "string.octdigits"
  type_annotation {
    pretty_printed_name: "UnboundType[LiteralString]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "punctuation"
  fully_qualified_name: "string.punctuation"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
}
vars {
  name: "punctuation"
  fully_qualified_name: "string.punctuation"
  type_annotation {
    pretty_printed_name: "UnboundType[LiteralString]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "printable"
  fully_qualified_name: "string.printable"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
}
vars {
  name: "printable"
  fully_qualified_name: "string.printable"
  type_annotation {
    pretty_printed_name: "UnboundType[LiteralString]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "uppercase"
  fully_qualified_name: "string.uppercase"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
}
vars {
  name: "whitespace"
  fully_qualified_name: "string.whitespace"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  valid_for: "27"
}
vars {
  name: "whitespace"
  fully_qualified_name: "string.whitespace"
  type_annotation {
    pretty_printed_name: "UnboundType[LiteralString]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "__all__"
  fully_qualified_name: "string.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_TemplateMetaclass"
  fully_qualified_name: "string._TemplateMetaclass"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "39"
  valid_for: "310"
}
