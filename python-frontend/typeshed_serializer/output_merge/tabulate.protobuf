fully_qualified_name: "tabulate"
classes {
  name: "Line"
  fully_qualified_name: "tabulate.Line"
  super_classes: "builtins.tuple"
  methods {
    name: "_replace"
    fully_qualified_name: "tabulate.Line._replace"
    return_annotation {
      pretty_printed_name: "tabulate.Line._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tabulate.Line._NT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "begin"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "hline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "sep"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "end"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__new__"
    fully_qualified_name: "tabulate.Line.__new__"
    return_annotation {
      pretty_printed_name: "tabulate.Line._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[tabulate.Line._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "tabulate.Line._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "begin"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "hline"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "sep"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_asdict"
    fully_qualified_name: "tabulate.Line._asdict"
    return_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tabulate.Line._NT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_make"
    fully_qualified_name: "tabulate.Line._make"
    return_annotation {
      pretty_printed_name: "tabulate.Line._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[tabulate.Line._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "tabulate.Line._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "new"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "len"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "begin"
    fully_qualified_name: "tabulate.Line.begin"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "hline"
    fully_qualified_name: "tabulate.Line.hline"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "sep"
    fully_qualified_name: "tabulate.Line.sep"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "end"
    fully_qualified_name: "tabulate.Line.end"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "_fields"
    fully_qualified_name: "tabulate.Line._fields"
    type_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_field_types"
    fully_qualified_name: "tabulate.Line._field_types"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_field_defaults"
    fully_qualified_name: "tabulate.Line._field_defaults"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_source"
    fully_qualified_name: "tabulate.Line._source"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__annotations__"
    fully_qualified_name: "tabulate.Line.__annotations__"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "DataRow"
  fully_qualified_name: "tabulate.DataRow"
  super_classes: "builtins.tuple"
  methods {
    name: "_replace"
    fully_qualified_name: "tabulate.DataRow._replace"
    return_annotation {
      pretty_printed_name: "tabulate.DataRow._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tabulate.DataRow._NT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "begin"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "sep"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "end"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__new__"
    fully_qualified_name: "tabulate.DataRow.__new__"
    return_annotation {
      pretty_printed_name: "tabulate.DataRow._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[tabulate.DataRow._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "tabulate.DataRow._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "begin"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "sep"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_asdict"
    fully_qualified_name: "tabulate.DataRow._asdict"
    return_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tabulate.DataRow._NT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_make"
    fully_qualified_name: "tabulate.DataRow._make"
    return_annotation {
      pretty_printed_name: "tabulate.DataRow._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[tabulate.DataRow._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "tabulate.DataRow._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "new"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "len"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "begin"
    fully_qualified_name: "tabulate.DataRow.begin"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "sep"
    fully_qualified_name: "tabulate.DataRow.sep"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "end"
    fully_qualified_name: "tabulate.DataRow.end"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "_fields"
    fully_qualified_name: "tabulate.DataRow._fields"
    type_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_field_types"
    fully_qualified_name: "tabulate.DataRow._field_types"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_field_defaults"
    fully_qualified_name: "tabulate.DataRow._field_defaults"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_source"
    fully_qualified_name: "tabulate.DataRow._source"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__annotations__"
    fully_qualified_name: "tabulate.DataRow.__annotations__"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "TableFormat"
  fully_qualified_name: "tabulate.TableFormat"
  super_classes: "builtins.tuple"
  methods {
    name: "_replace"
    fully_qualified_name: "tabulate.TableFormat._replace"
    return_annotation {
      pretty_printed_name: "tabulate.TableFormat._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tabulate.TableFormat._NT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "lineabove"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "tabulate._TableFormatLine"
      }
      has_default: true
    }
    parameters {
      name: "linebelowheader"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "tabulate._TableFormatLine"
      }
      has_default: true
    }
    parameters {
      name: "linebetweenrows"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "tabulate._TableFormatLine"
      }
      has_default: true
    }
    parameters {
      name: "linebelow"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "tabulate._TableFormatLine"
      }
      has_default: true
    }
    parameters {
      name: "headerrow"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "tabulate._TableFormatRow"
      }
      has_default: true
    }
    parameters {
      name: "datarow"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "tabulate._TableFormatRow"
      }
      has_default: true
    }
    parameters {
      name: "padding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "with_header_hide"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Container[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Container[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Container"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__new__"
    fully_qualified_name: "tabulate.TableFormat.__new__"
    return_annotation {
      pretty_printed_name: "tabulate.TableFormat._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[tabulate.TableFormat._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "tabulate.TableFormat._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "lineabove"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "tabulate._TableFormatLine"
      }
    }
    parameters {
      name: "linebelowheader"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "tabulate._TableFormatLine"
      }
    }
    parameters {
      name: "linebetweenrows"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "tabulate._TableFormatLine"
      }
    }
    parameters {
      name: "linebelow"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "tabulate._TableFormatLine"
      }
    }
    parameters {
      name: "headerrow"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "tabulate._TableFormatRow"
      }
    }
    parameters {
      name: "datarow"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        fully_qualified_name: "tabulate._TableFormatRow"
      }
    }
    parameters {
      name: "padding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "with_header_hide"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Container[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Container[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Container"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_asdict"
    fully_qualified_name: "tabulate.TableFormat._asdict"
    return_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tabulate.TableFormat._NT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_make"
    fully_qualified_name: "tabulate.TableFormat._make"
    return_annotation {
      pretty_printed_name: "tabulate.TableFormat._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[tabulate.TableFormat._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "tabulate.TableFormat._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "new"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "len"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "lineabove"
    fully_qualified_name: "tabulate.TableFormat.lineabove"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "tabulate._TableFormatLine"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "linebelowheader"
    fully_qualified_name: "tabulate.TableFormat.linebelowheader"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "tabulate._TableFormatLine"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "linebetweenrows"
    fully_qualified_name: "tabulate.TableFormat.linebetweenrows"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "tabulate._TableFormatLine"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "linebelow"
    fully_qualified_name: "tabulate.TableFormat.linebelow"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "tabulate._TableFormatLine"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "headerrow"
    fully_qualified_name: "tabulate.TableFormat.headerrow"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "tabulate._TableFormatRow"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "datarow"
    fully_qualified_name: "tabulate.TableFormat.datarow"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "tabulate._TableFormatRow"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "padding"
    fully_qualified_name: "tabulate.TableFormat.padding"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "with_header_hide"
    fully_qualified_name: "tabulate.TableFormat.with_header_hide"
    type_annotation {
      pretty_printed_name: "Union[typing.Container[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Container[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Container"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "_fields"
    fully_qualified_name: "tabulate.TableFormat._fields"
    type_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_field_types"
    fully_qualified_name: "tabulate.TableFormat._field_types"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_field_defaults"
    fully_qualified_name: "tabulate.TableFormat._field_defaults"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_source"
    fully_qualified_name: "tabulate.TableFormat._source"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__annotations__"
    fully_qualified_name: "tabulate.TableFormat.__annotations__"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "simple_separated_format"
  fully_qualified_name: "tabulate.simple_separated_format"
  return_annotation {
    pretty_printed_name: "Tuple[TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],builtins.int,Union[typing.Container[builtins.str],None]]"
    kind: TUPLE
    args {
      pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "tabulate._TableFormatLine"
    }
    args {
      pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "tabulate._TableFormatLine"
    }
    args {
      pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "tabulate._TableFormatLine"
    }
    args {
      pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "tabulate._TableFormatLine"
    }
    args {
      pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "tabulate._TableFormatRow"
    }
    args {
      pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "tabulate._TableFormatRow"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    args {
      pretty_printed_name: "Union[typing.Container[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Container[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Container"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "separator"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "tabulate"
  fully_qualified_name: "tabulate.tabulate"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "tabular_data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[typing.Mapping[builtins.str,typing.Iterable[Any]],typing.Iterable[typing.Iterable[Any]]]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Mapping[builtins.str,typing.Iterable[Any]]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
        fully_qualified_name: "typing.Mapping"
      }
      args {
        pretty_printed_name: "typing.Iterable[typing.Iterable[Any]]"
        args {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  parameters {
    name: "headers"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,builtins.dict[builtins.str,builtins.str],typing.Sequence[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "typing.Sequence[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    has_default: true
  }
  parameters {
    name: "tablefmt"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,Tuple[TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],builtins.int,Union[typing.Container[builtins.str],None]]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Tuple[TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]],builtins.int,Union[typing.Container[builtins.str],None]]"
        kind: TUPLE
        args {
          pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
            kind: UNION
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
          }
          fully_qualified_name: "tabulate._TableFormatLine"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
            kind: UNION
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
          }
          fully_qualified_name: "tabulate._TableFormatLine"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
            kind: UNION
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
          }
          fully_qualified_name: "tabulate._TableFormatLine"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
            kind: UNION
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
          }
          fully_qualified_name: "tabulate._TableFormatLine"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
            kind: UNION
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
          }
          fully_qualified_name: "tabulate._TableFormatRow"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[None,Tuple[builtins.str,builtins.str,builtins.str],CallableType[builtins.function]]"
            kind: UNION
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
            args {
              pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "CallableType[builtins.function]"
              kind: CALLABLE
              args {
                pretty_printed_name: "builtins.function"
                fully_qualified_name: "builtins.function"
              }
            }
          }
          fully_qualified_name: "tabulate._TableFormatRow"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Union[typing.Container[builtins.str],None]"
          kind: UNION
          args {
            pretty_printed_name: "typing.Container[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "typing.Container"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
    }
    has_default: true
  }
  parameters {
    name: "floatfmt"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,typing.Iterable[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_default: true
  }
  parameters {
    name: "numalign"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "stralign"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "missingval"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,typing.Iterable[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_default: true
  }
  parameters {
    name: "showindex"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,builtins.bool,typing.Iterable[Any]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_default: true
  }
  parameters {
    name: "disable_numparse"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.bool,typing.Iterable[builtins.int]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "typing.Iterable[builtins.int]"
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_default: true
  }
  parameters {
    name: "colalign"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[typing.Iterable[Union[builtins.str,None]],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Iterable[Union[builtins.str,None]]"
        args {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        fully_qualified_name: "typing.Iterable"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "PRESERVE_WHITESPACE"
  fully_qualified_name: "tabulate.PRESERVE_WHITESPACE"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "WIDE_CHARS_MODE"
  fully_qualified_name: "tabulate.WIDE_CHARS_MODE"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "tabulate_formats"
  fully_qualified_name: "tabulate.tabulate_formats"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
