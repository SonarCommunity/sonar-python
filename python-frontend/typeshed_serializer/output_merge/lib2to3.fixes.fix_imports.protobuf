fully_qualified_name: "lib2to3.fixes.fix_imports"
classes {
  name: "FixImports"
  fully_qualified_name: "lib2to3.fixes.fix_imports.FixImports"
  super_classes: "lib2to3.fixer_base.BaseFix"
  methods {
    name: "build_pattern"
    fully_qualified_name: "lib2to3.fixes.fix_imports.FixImports.build_pattern"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "compile_pattern"
    fully_qualified_name: "lib2to3.fixes.fix_imports.FixImports.compile_pattern"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixes.fix_imports.FixImports"
        fully_qualified_name: "lib2to3.fixes.fix_imports.FixImports"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "match"
    fully_qualified_name: "lib2to3.fixes.fix_imports.FixImports.match"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "node"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "start_tree"
    fully_qualified_name: "lib2to3.fixes.fix_imports.FixImports.start_tree"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixes.fix_imports.FixImports"
        fully_qualified_name: "lib2to3.fixes.fix_imports.FixImports"
      }
    }
    parameters {
      name: "tree"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[StrPath]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "transform"
    fully_qualified_name: "lib2to3.fixes.fix_imports.FixImports.transform"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixes.fix_imports.FixImports"
        fully_qualified_name: "lib2to3.fixes.fix_imports.FixImports"
      }
    }
    parameters {
      name: "node"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "results"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "BM_compatible"
    fully_qualified_name: "lib2to3.fixes.fix_imports.FixImports.BM_compatible"
    type_annotation {
      pretty_printed_name: "Literal[builtins.bool]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "mapping"
    fully_qualified_name: "lib2to3.fixes.fix_imports.FixImports.mapping"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "replace"
    fully_qualified_name: "lib2to3.fixes.fix_imports.FixImports.replace"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "alternates"
  fully_qualified_name: "lib2to3.fixes.fix_imports.alternates"
  parameters {
    name: "members"
    kind: POSITIONAL_OR_KEYWORD
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "build_pattern"
  fully_qualified_name: "lib2to3.fixes.fix_imports.build_pattern"
  return_annotation {
    pretty_printed_name: "typing.Generator[builtins.str,None,None]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
    fully_qualified_name: "typing.Generator"
  }
  parameters {
    name: "mapping"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "MAPPING"
  fully_qualified_name: "lib2to3.fixes.fix_imports.MAPPING"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.dict"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
