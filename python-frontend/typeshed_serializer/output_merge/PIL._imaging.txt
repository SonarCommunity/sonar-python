fully_qualified_name: "PIL._imaging"
classes {
  name: "_Path"
  fully_qualified_name: "PIL._imaging._Path"
  super_classes: "builtins.object"
  methods {
    name: "__getattr__"
    fully_qualified_name: "PIL._imaging._Path.__getattr__"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "PIL._imaging._Path"
        fully_qualified_name: "PIL._imaging._Path"
      }
    }
    parameters {
      name: "item"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "path"
  fully_qualified_name: "PIL._imaging.path"
  return_annotation {
    pretty_printed_name: "PIL._imaging._Path"
    fully_qualified_name: "PIL._imaging._Path"
  }
  parameters {
    name: "__x"
    type_annotation {
      pretty_printed_name: "Union[typing.Sequence[Tuple[builtins.float,builtins.float]],typing.Sequence[builtins.float]]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Sequence[Tuple[builtins.float,builtins.float]]"
        args {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        fully_qualified_name: "typing.Sequence"
      }
      args {
        pretty_printed_name: "typing.Sequence[builtins.float]"
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "__getattr__"
  fully_qualified_name: "PIL._imaging.__getattr__"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "__name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "DEFAULT_STRATEGY"
  fully_qualified_name: "PIL._imaging.DEFAULT_STRATEGY"
  type_annotation {
    pretty_printed_name: "Literal[builtins.int]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "FILTERED"
  fully_qualified_name: "PIL._imaging.FILTERED"
  type_annotation {
    pretty_printed_name: "Literal[builtins.int]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "HUFFMAN_ONLY"
  fully_qualified_name: "PIL._imaging.HUFFMAN_ONLY"
  type_annotation {
    pretty_printed_name: "Literal[builtins.int]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "RLE"
  fully_qualified_name: "PIL._imaging.RLE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.int]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "FIXED"
  fully_qualified_name: "PIL._imaging.FIXED"
  type_annotation {
    pretty_printed_name: "Literal[builtins.int]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
