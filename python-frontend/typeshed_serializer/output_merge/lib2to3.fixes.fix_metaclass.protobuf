fully_qualified_name: "lib2to3.fixes.fix_metaclass"
classes {
  name: "FixMetaclass"
  fully_qualified_name: "lib2to3.fixes.fix_metaclass.FixMetaclass"
  super_classes: "lib2to3.fixer_base.BaseFix"
  methods {
    name: "transform"
    fully_qualified_name: "lib2to3.fixes.fix_metaclass.FixMetaclass.transform"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.fixes.fix_metaclass.FixMetaclass"
        fully_qualified_name: "lib2to3.fixes.fix_metaclass.FixMetaclass"
      }
    }
    parameters {
      name: "node"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "results"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "BM_compatible"
    fully_qualified_name: "lib2to3.fixes.fix_metaclass.FixMetaclass.BM_compatible"
    type_annotation {
      pretty_printed_name: "Literal[builtins.bool]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "PATTERN"
    fully_qualified_name: "lib2to3.fixes.fix_metaclass.FixMetaclass.PATTERN"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "has_metaclass"
  fully_qualified_name: "lib2to3.fixes.fix_metaclass.has_metaclass"
  parameters {
    name: "parent"
    kind: POSITIONAL_OR_KEYWORD
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "fixup_parse_tree"
  fully_qualified_name: "lib2to3.fixes.fix_metaclass.fixup_parse_tree"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "cls_node"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "fixup_simple_stmt"
  fully_qualified_name: "lib2to3.fixes.fix_metaclass.fixup_simple_stmt"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "parent"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "i"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "stmt_node"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "remove_trailing_newline"
  fully_qualified_name: "lib2to3.fixes.fix_metaclass.remove_trailing_newline"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "node"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "find_metas"
  fully_qualified_name: "lib2to3.fixes.fix_metaclass.find_metas"
  return_annotation {
    pretty_printed_name: "typing.Generator[Tuple[lib2to3.pytree.Base,builtins.int,lib2to3.pytree.Base],None,None]"
    args {
      pretty_printed_name: "Tuple[lib2to3.pytree.Base,builtins.int,lib2to3.pytree.Base]"
      kind: TUPLE
      args {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "lib2to3.pytree.Base"
        fully_qualified_name: "lib2to3.pytree.Base"
      }
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
    fully_qualified_name: "typing.Generator"
  }
  parameters {
    name: "cls_node"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "fixup_indent"
  fully_qualified_name: "lib2to3.fixes.fix_metaclass.fixup_indent"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "suite"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
