fully_qualified_name: "unittest.loader"
classes {
  name: "TestLoader"
  fully_qualified_name: "unittest.loader.TestLoader"
  super_classes: "builtins.object"
  methods {
    name: "loadTestsFromTestCase"
    fully_qualified_name: "unittest.loader.TestLoader.loadTestsFromTestCase"
    return_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "testCaseClass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "loadTestsFromTestCase"
    fully_qualified_name: "unittest.loader.TestLoader.loadTestsFromTestCase"
    return_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "testCaseClass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case.TestCase]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "loadTestsFromModule"
    fully_qualified_name: "unittest.loader.TestLoader.loadTestsFromModule"
    return_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "module"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "types.ModuleType"
        fully_qualified_name: "types.ModuleType"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "pattern"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "loadTestsFromName"
    fully_qualified_name: "unittest.loader.TestLoader.loadTestsFromName"
    return_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "module"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[types.ModuleType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.ModuleType"
          fully_qualified_name: "types.ModuleType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "loadTestsFromNames"
    fully_qualified_name: "unittest.loader.TestLoader.loadTestsFromNames"
    return_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "names"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "module"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[types.ModuleType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.ModuleType"
          fully_qualified_name: "types.ModuleType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getTestCaseNames"
    fully_qualified_name: "unittest.loader.TestLoader.getTestCaseNames"
    return_annotation {
      pretty_printed_name: "typing.Sequence[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.Sequence"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "testCaseClass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "getTestCaseNames"
    fully_qualified_name: "unittest.loader.TestLoader.getTestCaseNames"
    return_annotation {
      pretty_printed_name: "typing.Sequence[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.Sequence"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "testCaseClass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case.TestCase]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "discover"
    fully_qualified_name: "unittest.loader.TestLoader.discover"
    return_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "start_dir"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "pattern"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "top_level_dir"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_match_path"
    fully_qualified_name: "unittest.loader.TestLoader._match_path"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "full_path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "pattern"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "errors"
    fully_qualified_name: "unittest.loader.TestLoader.errors"
    type_annotation {
      pretty_printed_name: "builtins.list[builtins.type]"
      args {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  attributes {
    name: "errors"
    fully_qualified_name: "unittest.loader.TestLoader.errors"
    type_annotation {
      pretty_printed_name: "builtins.list[Type[builtins.BaseException]]"
      args {
        pretty_printed_name: "Type[builtins.BaseException]"
        kind: TYPE
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "testMethodPrefix"
    fully_qualified_name: "unittest.loader.TestLoader.testMethodPrefix"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "sortTestMethodsUsing"
    fully_qualified_name: "unittest.loader.TestLoader.sortTestMethodsUsing"
    type_annotation {
      pretty_printed_name: "UnboundType[_SortComparisonMethod]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "testNamePatterns"
    fully_qualified_name: "unittest.loader.TestLoader.testNamePatterns"
    type_annotation {
      pretty_printed_name: "Union[builtins.list[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "suiteClass"
    fully_qualified_name: "unittest.loader.TestLoader.suiteClass"
    type_annotation {
      pretty_printed_name: "UnboundType[_SuiteClass]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "getTestCaseNames"
  fully_qualified_name: "unittest.loader.getTestCaseNames"
  return_annotation {
    pretty_printed_name: "typing.Sequence[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "typing.Sequence"
  }
  parameters {
    name: "testCaseClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.type"
      fully_qualified_name: "builtins.type"
    }
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "sortUsing"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SortComparisonMethod]"
      kind: UNBOUND
    }
    has_default: true
  }
  parameters {
    name: "testNamePatterns"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.list[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
functions {
  name: "getTestCaseNames"
  fully_qualified_name: "unittest.loader.getTestCaseNames"
  return_annotation {
    pretty_printed_name: "typing.Sequence[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "typing.Sequence"
  }
  parameters {
    name: "testCaseClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Type[unittest.case.TestCase]"
      kind: TYPE
      args {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "sortUsing"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SortComparisonMethod]"
      kind: UNBOUND
    }
    has_default: true
  }
  parameters {
    name: "testNamePatterns"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.list[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "makeSuite"
  fully_qualified_name: "unittest.loader.makeSuite"
  return_annotation {
    pretty_printed_name: "unittest.suite.TestSuite"
    fully_qualified_name: "unittest.suite.TestSuite"
  }
  parameters {
    name: "testCaseClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.type"
      fully_qualified_name: "builtins.type"
    }
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "sortUsing"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SortComparisonMethod]"
      kind: UNBOUND
    }
    has_default: true
  }
  parameters {
    name: "suiteClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SuiteClass]"
      kind: UNBOUND
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
functions {
  name: "makeSuite"
  fully_qualified_name: "unittest.loader.makeSuite"
  return_annotation {
    pretty_printed_name: "unittest.suite.TestSuite"
    fully_qualified_name: "unittest.suite.TestSuite"
  }
  parameters {
    name: "testCaseClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Type[unittest.case.TestCase]"
      kind: TYPE
      args {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "sortUsing"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SortComparisonMethod]"
      kind: UNBOUND
    }
    has_default: true
  }
  parameters {
    name: "suiteClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SuiteClass]"
      kind: UNBOUND
    }
    has_default: true
  }
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "findTestCases"
  fully_qualified_name: "unittest.loader.findTestCases"
  return_annotation {
    pretty_printed_name: "unittest.suite.TestSuite"
    fully_qualified_name: "unittest.suite.TestSuite"
  }
  parameters {
    name: "module"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "types.ModuleType"
      fully_qualified_name: "types.ModuleType"
    }
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "sortUsing"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SortComparisonMethod]"
      kind: UNBOUND
    }
    has_default: true
  }
  parameters {
    name: "suiteClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SuiteClass]"
      kind: UNBOUND
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "unittest"
  fully_qualified_name: "unittest"
  is_imported_module: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_SortComparisonMethod"
  fully_qualified_name: "unittest.loader._SortComparisonMethod"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_SuiteClass"
  fully_qualified_name: "unittest.loader._SuiteClass"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "VALID_MODULE_NAME"
  fully_qualified_name: "unittest.loader.VALID_MODULE_NAME"
  type_annotation {
    pretty_printed_name: "re.Pattern[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "re.Pattern"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "defaultTestLoader"
  fully_qualified_name: "unittest.loader.defaultTestLoader"
  type_annotation {
    pretty_printed_name: "unittest.loader.TestLoader"
    fully_qualified_name: "unittest.loader.TestLoader"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
