fully_qualified_name: "itertools"
classes {
  name: "cycle"
  fully_qualified_name: "itertools.cycle"
  super_classes: "typing.Iterator"
  methods {
    name: "__init__"
    fully_qualified_name: "itertools.cycle.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.cycle[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.cycle"
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "itertools.cycle.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.cycle[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.cycle"
      }
    }
    parameters {
      name: "__iterable"
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "next"
    fully_qualified_name: "itertools.cycle.next"
    return_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.cycle[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.cycle"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.cycle.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.cycle[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.cycle"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.cycle.__next__"
    return_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.cycle[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.cycle"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "chain"
  fully_qualified_name: "itertools.chain"
  super_classes: "typing.Iterator"
  methods {
    name: "__init__"
    fully_qualified_name: "itertools.chain.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.chain[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.chain"
      }
    }
    parameters {
      name: "iterables"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "next"
    fully_qualified_name: "itertools.chain.next"
    return_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.chain[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.chain"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.chain.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.chain[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.chain"
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "from_iterable"
    fully_qualified_name: "itertools.chain.from_iterable"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._S]"
      args {
        pretty_printed_name: "itertools._S"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing.Iterable[itertools._S]]"
        args {
          pretty_printed_name: "typing.Iterable[itertools._S]"
          args {
            pretty_printed_name: "itertools._S"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "staticmethod"
    is_static: true
    valid_for: "27"
  }
  methods {
    name: "from_iterable"
    fully_qualified_name: "itertools.chain.from_iterable"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._S]"
      args {
        pretty_printed_name: "itertools._S"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[Any]"
        kind: TYPE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
    }
    parameters {
      name: "__iterable"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing.Iterable[itertools._S]]"
        args {
          pretty_printed_name: "typing.Iterable[itertools._S]"
          args {
            pretty_printed_name: "itertools._S"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.chain.__next__"
    return_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.chain[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.chain"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "count"
  fully_qualified_name: "itertools.count"
  super_classes: "typing.Iterator"
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.count.__next__"
    return_annotation {
      pretty_printed_name: "itertools._N"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.count[itertools._N]"
        args {
          pretty_printed_name: "itertools._N"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.count"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.count.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._N]"
      args {
        pretty_printed_name: "itertools._N"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.count[itertools._N]"
        args {
          pretty_printed_name: "itertools._N"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.count"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__new__"
    fullname: "itertools.count.__new__"
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.count.__new__"
      return_annotation {
        pretty_printed_name: "itertools.count[builtins.int]"
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        fully_qualified_name: "itertools.count"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.count[itertools._N]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.count[itertools._N]"
            args {
              pretty_printed_name: "itertools._N"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.count"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.count.__new__"
      return_annotation {
        pretty_printed_name: "itertools.count[itertools._N]"
        args {
          pretty_printed_name: "itertools._N"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.count"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.count[itertools._N]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.count[itertools._N]"
            args {
              pretty_printed_name: "itertools._N"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.count"
          }
        }
      }
      parameters {
        name: "start"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "itertools._N"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "step"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.int,builtins.float,typing.SupportsFloat,typing.SupportsInt,typing_extensions.SupportsIndex,typing.SupportsComplex]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.int,builtins.float,typing.SupportsFloat,typing.SupportsInt,typing_extensions.SupportsIndex,typing.SupportsComplex]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "typing.SupportsFloat"
              fully_qualified_name: "typing.SupportsFloat"
            }
            args {
              pretty_printed_name: "typing.SupportsInt"
              fully_qualified_name: "typing.SupportsInt"
            }
            args {
              pretty_printed_name: "typing_extensions.SupportsIndex"
              fully_qualified_name: "typing_extensions.SupportsIndex"
            }
            args {
              pretty_printed_name: "typing.SupportsComplex"
              fully_qualified_name: "typing.SupportsComplex"
            }
          }
          fully_qualified_name: "itertools._Step"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.count.__new__"
      return_annotation {
        pretty_printed_name: "itertools.count[itertools._N]"
        args {
          pretty_printed_name: "itertools._N"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.count"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.count[itertools._N]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.count[itertools._N]"
            args {
              pretty_printed_name: "itertools._N"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.count"
          }
        }
      }
      parameters {
        name: "step"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "itertools._N"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "repeat"
  fully_qualified_name: "itertools.repeat"
  super_classes: "typing.Iterator"
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.repeat.__next__"
    return_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.repeat[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.repeat"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.repeat.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.repeat[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.repeat"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "itertools.repeat.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "itertools.repeat.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "itertools.repeat[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "itertools.repeat"
        }
      }
      parameters {
        name: "object"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "itertools.repeat.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "itertools.repeat[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "itertools.repeat"
        }
      }
      parameters {
        name: "object"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "times"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "accumulate"
  fully_qualified_name: "itertools.accumulate"
  super_classes: "typing.Iterator"
  methods {
    name: "__init__"
    fully_qualified_name: "itertools.accumulate.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.accumulate[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.accumulate"
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.accumulate.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.accumulate[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.accumulate"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.accumulate.__next__"
    return_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.accumulate[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.accumulate"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "itertools.accumulate.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "itertools.accumulate.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "itertools.accumulate[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "itertools.accumulate"
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "initial"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[itertools._T,None]"
          kind: UNION
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "itertools.accumulate.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "itertools.accumulate[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "itertools.accumulate"
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._S]"
          args {
            pretty_printed_name: "itertools._S"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      parameters {
        name: "initial"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[itertools._T,None]"
          kind: UNION
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "compress"
  fully_qualified_name: "itertools.compress"
  super_classes: "typing.Iterator"
  methods {
    name: "__init__"
    fully_qualified_name: "itertools.compress.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.compress[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.compress"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "selectors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.compress.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.compress[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.compress"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.compress.__next__"
    return_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.compress[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.compress"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "dropwhile"
  fully_qualified_name: "itertools.dropwhile"
  super_classes: "typing.Iterator"
  methods {
    name: "__init__"
    fully_qualified_name: "itertools.dropwhile.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.dropwhile[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.dropwhile"
      }
    }
    parameters {
      name: "__predicate"
      type_annotation {
        pretty_printed_name: "TypeAlias[CallableType[builtins.function]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        fully_qualified_name: "itertools.Predicate"
      }
    }
    parameters {
      name: "__iterable"
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.dropwhile.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.dropwhile[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.dropwhile"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.dropwhile.__next__"
    return_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.dropwhile[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.dropwhile"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "filterfalse"
  fully_qualified_name: "itertools.filterfalse"
  super_classes: "typing.Iterator"
  methods {
    name: "__init__"
    fully_qualified_name: "itertools.filterfalse.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.filterfalse[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.filterfalse"
      }
    }
    parameters {
      name: "__predicate"
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__iterable"
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.filterfalse.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.filterfalse[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.filterfalse"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.filterfalse.__next__"
    return_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.filterfalse[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.filterfalse"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "groupby"
  fully_qualified_name: "itertools.groupby"
  super_classes: "typing.Iterator"
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.groupby.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T,typing.Iterator[itertools._S]]]"
      args {
        pretty_printed_name: "Tuple[itertools._T,typing.Iterator[itertools._S]]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing.Iterator[itertools._S]"
          args {
            pretty_printed_name: "itertools._S"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterator"
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.groupby[itertools._T,itertools._S]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._S"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.groupby"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.groupby.__next__"
    return_annotation {
      pretty_printed_name: "Tuple[itertools._T,typing.Iterator[itertools._S]]"
      kind: TUPLE
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing.Iterator[itertools._S]"
        args {
          pretty_printed_name: "itertools._S"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterator"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.groupby[itertools._T,itertools._S]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._S"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.groupby"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__new__"
    fullname: "itertools.groupby.__new__"
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.groupby.__new__"
      return_annotation {
        pretty_printed_name: "itertools.groupby[itertools._T1,itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.groupby"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.groupby[itertools._T,itertools._S]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.groupby[itertools._T,itertools._S]"
            args {
              pretty_printed_name: "itertools._T"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "itertools._S"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.groupby"
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T1]"
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "key"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.groupby.__new__"
      return_annotation {
        pretty_printed_name: "itertools.groupby[itertools._T2,itertools._T1]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.groupby"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.groupby[itertools._T,itertools._S]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.groupby[itertools._T,itertools._S]"
            args {
              pretty_printed_name: "itertools._T"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "itertools._S"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.groupby"
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T1]"
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "key"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "islice"
  fully_qualified_name: "itertools.islice"
  super_classes: "typing.Iterator"
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.islice.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.islice[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.islice"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.islice.__next__"
    return_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.islice[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.islice"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__init__"
    fullname: "itertools.islice.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "itertools.islice.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "itertools.islice[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "itertools.islice"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__stop"
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "itertools.islice.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "itertools.islice[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "itertools.islice"
        }
      }
      parameters {
        name: "__iterable"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__start"
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "__stop"
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "__step"
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "starmap"
  fully_qualified_name: "itertools.starmap"
  super_classes: "typing.Iterator"
  methods {
    name: "__init__"
    fully_qualified_name: "itertools.starmap.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.starmap[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.starmap"
      }
    }
    parameters {
      name: "__function"
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "__iterable"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing.Iterable[Any]]"
        args {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.starmap.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.starmap[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.starmap"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.starmap.__next__"
    return_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.starmap[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.starmap"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "takewhile"
  fully_qualified_name: "itertools.takewhile"
  super_classes: "typing.Iterator"
  methods {
    name: "__init__"
    fully_qualified_name: "itertools.takewhile.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.takewhile[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.takewhile"
      }
    }
    parameters {
      name: "__predicate"
      type_annotation {
        pretty_printed_name: "TypeAlias[CallableType[builtins.function]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        fully_qualified_name: "itertools.Predicate"
      }
    }
    parameters {
      name: "__iterable"
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.takewhile.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.takewhile[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.takewhile"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.takewhile.__next__"
    return_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.takewhile[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.takewhile"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "zip_longest"
  fully_qualified_name: "itertools.zip_longest"
  super_classes: "typing.Iterator"
  methods {
    name: "__init__"
    fully_qualified_name: "itertools.zip_longest.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.zip_longest"
        fully_qualified_name: "itertools.zip_longest"
      }
    }
    parameters {
      name: "p"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "fillvalue"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.zip_longest.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.zip_longest"
        fully_qualified_name: "itertools.zip_longest"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.zip_longest.__next__"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.zip_longest"
        fully_qualified_name: "itertools.zip_longest"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "product"
  fully_qualified_name: "itertools.product"
  super_classes: "typing.Iterator"
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.product.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[_typeshed._T_co]"
      args {
        pretty_printed_name: "_typeshed._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.product[_typeshed._T_co]"
        args {
          pretty_printed_name: "_typeshed._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.product"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.product.__next__"
    return_annotation {
      pretty_printed_name: "_typeshed._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.product[_typeshed._T_co]"
        args {
          pretty_printed_name: "_typeshed._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.product"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__new__"
    fullname: "itertools.product.__new__"
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.product.__new__"
      return_annotation {
        pretty_printed_name: "itertools.product[Tuple[itertools._T1]]"
        args {
          pretty_printed_name: "Tuple[itertools._T1]"
          kind: TUPLE
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
        }
        fully_qualified_name: "itertools.product"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.product[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.product[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.product"
          }
        }
      }
      parameters {
        name: "__iter1"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T1]"
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.product.__new__"
      return_annotation {
        pretty_printed_name: "itertools.product[Tuple[itertools._T1,itertools._T2]]"
        args {
          pretty_printed_name: "Tuple[itertools._T1,itertools._T2]"
          kind: TUPLE
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T2"
            kind: TYPE_VAR
          }
        }
        fully_qualified_name: "itertools.product"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.product[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.product[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.product"
          }
        }
      }
      parameters {
        name: "__iter1"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T1]"
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter2"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T2]"
          args {
            pretty_printed_name: "itertools._T2"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.product.__new__"
      return_annotation {
        pretty_printed_name: "itertools.product[Tuple[itertools._T1,itertools._T2,itertools._T3]]"
        args {
          pretty_printed_name: "Tuple[itertools._T1,itertools._T2,itertools._T3]"
          kind: TUPLE
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T2"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T3"
            kind: TYPE_VAR
          }
        }
        fully_qualified_name: "itertools.product"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.product[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.product[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.product"
          }
        }
      }
      parameters {
        name: "__iter1"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T1]"
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter2"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T2]"
          args {
            pretty_printed_name: "itertools._T2"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter3"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T3]"
          args {
            pretty_printed_name: "itertools._T3"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.product.__new__"
      return_annotation {
        pretty_printed_name: "itertools.product[Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4]]"
        args {
          pretty_printed_name: "Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4]"
          kind: TUPLE
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T2"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T3"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T4"
            kind: TYPE_VAR
          }
        }
        fully_qualified_name: "itertools.product"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.product[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.product[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.product"
          }
        }
      }
      parameters {
        name: "__iter1"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T1]"
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter2"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T2]"
          args {
            pretty_printed_name: "itertools._T2"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter3"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T3]"
          args {
            pretty_printed_name: "itertools._T3"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter4"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T4]"
          args {
            pretty_printed_name: "itertools._T4"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.product.__new__"
      return_annotation {
        pretty_printed_name: "itertools.product[Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5]]"
        args {
          pretty_printed_name: "Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5]"
          kind: TUPLE
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T2"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T3"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T4"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T5"
            kind: TYPE_VAR
          }
        }
        fully_qualified_name: "itertools.product"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.product[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.product[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.product"
          }
        }
      }
      parameters {
        name: "__iter1"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T1]"
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter2"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T2]"
          args {
            pretty_printed_name: "itertools._T2"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter3"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T3]"
          args {
            pretty_printed_name: "itertools._T3"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter4"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T4]"
          args {
            pretty_printed_name: "itertools._T4"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter5"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T5]"
          args {
            pretty_printed_name: "itertools._T5"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.product.__new__"
      return_annotation {
        pretty_printed_name: "itertools.product[Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5,itertools._T6]]"
        args {
          pretty_printed_name: "Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5,itertools._T6]"
          kind: TUPLE
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T2"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T3"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T4"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T5"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T6"
            kind: TYPE_VAR
          }
        }
        fully_qualified_name: "itertools.product"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.product[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.product[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.product"
          }
        }
      }
      parameters {
        name: "__iter1"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T1]"
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter2"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T2]"
          args {
            pretty_printed_name: "itertools._T2"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter3"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T3]"
          args {
            pretty_printed_name: "itertools._T3"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter4"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T4]"
          args {
            pretty_printed_name: "itertools._T4"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter5"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T5]"
          args {
            pretty_printed_name: "itertools._T5"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter6"
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T6]"
          args {
            pretty_printed_name: "itertools._T6"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.product.__new__"
      return_annotation {
        pretty_printed_name: "itertools.product[builtins.tuple[Any]]"
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        fully_qualified_name: "itertools.product"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.product[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.product[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.product"
          }
        }
      }
      parameters {
        name: "__iter1"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter2"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter3"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter4"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter5"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter6"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "__iter7"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "iterables"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.product.__new__"
      return_annotation {
        pretty_printed_name: "itertools.product[builtins.tuple[itertools._T1]]"
        args {
          pretty_printed_name: "builtins.tuple[itertools._T1]"
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          fully_qualified_name: "builtins.tuple"
        }
        fully_qualified_name: "itertools.product"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.product[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.product[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.product"
          }
        }
      }
      parameters {
        name: "iterables"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T1]"
          args {
            pretty_printed_name: "itertools._T1"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "repeat"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.product.__new__"
      return_annotation {
        pretty_printed_name: "itertools.product[builtins.tuple[Any]]"
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        fully_qualified_name: "itertools.product"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.product[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.product[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.product"
          }
        }
      }
      parameters {
        name: "iterables"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "repeat"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "permutations"
  fully_qualified_name: "itertools.permutations"
  super_classes: "typing.Iterator"
  methods {
    name: "__init__"
    fully_qualified_name: "itertools.permutations.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.permutations[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.permutations"
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "r"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.permutations.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[builtins.tuple[itertools._T]]"
      args {
        pretty_printed_name: "builtins.tuple[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "builtins.tuple"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.permutations[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.permutations"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.permutations.__next__"
    return_annotation {
      pretty_printed_name: "builtins.tuple[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.permutations[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.permutations"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "combinations"
  fully_qualified_name: "itertools.combinations"
  super_classes: "typing.Iterator"
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.combinations.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[_typeshed._T_co]"
      args {
        pretty_printed_name: "_typeshed._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.combinations[_typeshed._T_co]"
        args {
          pretty_printed_name: "_typeshed._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.combinations"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.combinations.__next__"
    return_annotation {
      pretty_printed_name: "_typeshed._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.combinations[_typeshed._T_co]"
        args {
          pretty_printed_name: "_typeshed._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.combinations"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "__new__"
    fullname: "itertools.combinations.__new__"
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.combinations.__new__"
      return_annotation {
        pretty_printed_name: "itertools.combinations[Tuple[itertools._T,itertools._T]]"
        args {
          pretty_printed_name: "Tuple[itertools._T,itertools._T]"
          kind: TUPLE
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
        }
        fully_qualified_name: "itertools.combinations"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.combinations[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.combinations[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.combinations"
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "r"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.combinations.__new__"
      return_annotation {
        pretty_printed_name: "itertools.combinations[Tuple[itertools._T,itertools._T,itertools._T]]"
        args {
          pretty_printed_name: "Tuple[itertools._T,itertools._T,itertools._T]"
          kind: TUPLE
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
        }
        fully_qualified_name: "itertools.combinations"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.combinations[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.combinations[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.combinations"
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "r"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.combinations.__new__"
      return_annotation {
        pretty_printed_name: "itertools.combinations[Tuple[itertools._T,itertools._T,itertools._T,itertools._T]]"
        args {
          pretty_printed_name: "Tuple[itertools._T,itertools._T,itertools._T,itertools._T]"
          kind: TUPLE
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
        }
        fully_qualified_name: "itertools.combinations"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.combinations[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.combinations[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.combinations"
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "r"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.combinations.__new__"
      return_annotation {
        pretty_printed_name: "itertools.combinations[Tuple[itertools._T,itertools._T,itertools._T,itertools._T,itertools._T]]"
        args {
          pretty_printed_name: "Tuple[itertools._T,itertools._T,itertools._T,itertools._T,itertools._T]"
          kind: TUPLE
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
        }
        fully_qualified_name: "itertools.combinations"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.combinations[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.combinations[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.combinations"
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "r"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "itertools.combinations.__new__"
      return_annotation {
        pretty_printed_name: "itertools.combinations[builtins.tuple[itertools._T]]"
        args {
          pretty_printed_name: "builtins.tuple[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "builtins.tuple"
        }
        fully_qualified_name: "itertools.combinations"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[itertools.combinations[_typeshed._T_co]]"
          kind: TYPE
          args {
            pretty_printed_name: "itertools.combinations[_typeshed._T_co]"
            args {
              pretty_printed_name: "_typeshed._T_co"
              kind: TYPE_VAR
            }
            fully_qualified_name: "itertools.combinations"
          }
        }
      }
      parameters {
        name: "iterable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "r"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "combinations_with_replacement"
  fully_qualified_name: "itertools.combinations_with_replacement"
  super_classes: "typing.Iterator"
  methods {
    name: "__init__"
    fully_qualified_name: "itertools.combinations_with_replacement.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.combinations_with_replacement[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.combinations_with_replacement"
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "r"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.combinations_with_replacement.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[builtins.tuple[itertools._T]]"
      args {
        pretty_printed_name: "builtins.tuple[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "builtins.tuple"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.combinations_with_replacement[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.combinations_with_replacement"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.combinations_with_replacement.__next__"
    return_annotation {
      pretty_printed_name: "builtins.tuple[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.combinations_with_replacement[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.combinations_with_replacement"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "pairwise"
  fully_qualified_name: "itertools.pairwise"
  super_classes: "typing.Iterator"
  methods {
    name: "__new__"
    fully_qualified_name: "itertools.pairwise.__new__"
    return_annotation {
      pretty_printed_name: "itertools.pairwise[Tuple[itertools._T,itertools._T]]"
      args {
        pretty_printed_name: "Tuple[itertools._T,itertools._T]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "itertools.pairwise"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[itertools.pairwise[_typeshed._T_co]]"
        kind: TYPE
        args {
          pretty_printed_name: "itertools.pairwise[_typeshed._T_co]"
          args {
            pretty_printed_name: "_typeshed._T_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "itertools.pairwise"
        }
      }
    }
    parameters {
      name: "__iterable"
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "itertools.pairwise.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[_typeshed._T_co]"
      args {
        pretty_printed_name: "_typeshed._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "itertools.pairwise[_typeshed._T_co]"
        args {
          pretty_printed_name: "_typeshed._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.pairwise"
      }
    }
    valid_for: "310"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "itertools.pairwise.__next__"
    return_annotation {
      pretty_printed_name: "_typeshed._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "itertools.pairwise[_typeshed._T_co]"
        args {
          pretty_printed_name: "_typeshed._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "itertools.pairwise"
      }
    }
    valid_for: "310"
  }
  is_generic: true
  valid_for: "310"
}
functions {
  name: "count"
  fully_qualified_name: "itertools.count"
  return_annotation {
    pretty_printed_name: "typing.Iterator[builtins.int]"
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "start"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "step"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "repeat"
  fully_qualified_name: "itertools.repeat"
  return_annotation {
    pretty_printed_name: "typing.Iterator[itertools._T]"
    args {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "object"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "times"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "compress"
  fully_qualified_name: "itertools.compress"
  return_annotation {
    pretty_printed_name: "typing.Iterator[itertools._T]"
    args {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "data"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "selectors"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "27"
}
functions {
  name: "dropwhile"
  fully_qualified_name: "itertools.dropwhile"
  return_annotation {
    pretty_printed_name: "typing.Iterator[itertools._T]"
    args {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "predicate"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "27"
}
functions {
  name: "ifilter"
  fully_qualified_name: "itertools.ifilter"
  return_annotation {
    pretty_printed_name: "typing.Iterator[itertools._T]"
    args {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "predicate"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "27"
}
functions {
  name: "ifilterfalse"
  fully_qualified_name: "itertools.ifilterfalse"
  return_annotation {
    pretty_printed_name: "typing.Iterator[itertools._T]"
    args {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "predicate"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "27"
}
functions {
  name: "starmap"
  fully_qualified_name: "itertools.starmap"
  return_annotation {
    pretty_printed_name: "typing.Iterator[Any]"
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "func"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "27"
}
functions {
  name: "takewhile"
  fully_qualified_name: "itertools.takewhile"
  return_annotation {
    pretty_printed_name: "typing.Iterator[itertools._T]"
    args {
      pretty_printed_name: "itertools._T"
      kind: TYPE_VAR
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "predicate"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  valid_for: "27"
}
functions {
  name: "tee"
  fully_qualified_name: "itertools.tee"
  return_annotation {
    pretty_printed_name: "builtins.tuple[typing.Iterator[itertools._T]]"
    args {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    fully_qualified_name: "builtins.tuple"
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "n"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "tee"
  fully_qualified_name: "itertools.tee"
  return_annotation {
    pretty_printed_name: "builtins.tuple[typing.Iterator[itertools._T]]"
    args {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    fully_qualified_name: "builtins.tuple"
  }
  parameters {
    name: "__iterable"
    type_annotation {
      pretty_printed_name: "typing.Iterable[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "__n"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "izip_longest"
  fully_qualified_name: "itertools.izip_longest"
  return_annotation {
    pretty_printed_name: "typing.Iterator[Any]"
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "p"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "typing.Iterable[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "fillvalue"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "permutations"
  fully_qualified_name: "itertools.permutations"
  return_annotation {
    pretty_printed_name: "typing.Iterator[typing.Sequence[itertools._T]]"
    args {
      pretty_printed_name: "typing.Sequence[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "r"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "combinations"
  fully_qualified_name: "itertools.combinations"
  return_annotation {
    pretty_printed_name: "typing.Iterator[typing.Sequence[itertools._T]]"
    args {
      pretty_printed_name: "typing.Sequence[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "r"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "27"
}
functions {
  name: "combinations_with_replacement"
  fully_qualified_name: "itertools.combinations_with_replacement"
  return_annotation {
    pretty_printed_name: "typing.Iterator[typing.Sequence[itertools._T]]"
    args {
      pretty_printed_name: "typing.Sequence[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "iterable"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "r"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "27"
}
overloaded_functions {
  name: "groupby"
  fullname: "itertools.groupby"
  definitions {
    name: "groupby"
    fully_qualified_name: "itertools.groupby"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T,typing.Iterator[itertools._T]]]"
      args {
        pretty_printed_name: "Tuple[itertools._T,typing.Iterator[itertools._T]]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing.Iterator[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterator"
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "groupby"
    fully_qualified_name: "itertools.groupby"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._S,typing.Iterator[itertools._T]]]"
      args {
        pretty_printed_name: "Tuple[itertools._S,typing.Iterator[itertools._T]]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._S"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing.Iterator[itertools._T]"
          args {
            pretty_printed_name: "itertools._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterator"
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "27"
}
overloaded_functions {
  name: "islice"
  fullname: "itertools.islice"
  definitions {
    name: "islice"
    fully_qualified_name: "itertools.islice"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "stop"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "islice"
    fully_qualified_name: "itertools.islice"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._T]"
      args {
        pretty_printed_name: "itertools._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T]"
        args {
          pretty_printed_name: "itertools._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "stop"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "step"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "27"
}
overloaded_functions {
  name: "imap"
  fullname: "itertools.imap"
  definitions {
    name: "imap"
    fully_qualified_name: "itertools.imap"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._S]"
      args {
        pretty_printed_name: "itertools._S"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "imap"
    fully_qualified_name: "itertools.imap"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._S]"
      args {
        pretty_printed_name: "itertools._S"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "imap"
    fully_qualified_name: "itertools.imap"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._S]"
      args {
        pretty_printed_name: "itertools._S"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T3]"
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "imap"
    fully_qualified_name: "itertools.imap"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._S]"
      args {
        pretty_printed_name: "itertools._S"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T3]"
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter4"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T4]"
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "imap"
    fully_qualified_name: "itertools.imap"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._S]"
      args {
        pretty_printed_name: "itertools._S"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T3]"
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter4"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T4]"
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter5"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T5]"
        args {
          pretty_printed_name: "itertools._T5"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "imap"
    fully_qualified_name: "itertools.imap"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._S]"
      args {
        pretty_printed_name: "itertools._S"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T3]"
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter4"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T4]"
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter5"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T5]"
        args {
          pretty_printed_name: "itertools._T5"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter6"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T6]"
        args {
          pretty_printed_name: "itertools._T6"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "imap"
    fully_qualified_name: "itertools.imap"
    return_annotation {
      pretty_printed_name: "typing.Iterator[itertools._S]"
      args {
        pretty_printed_name: "itertools._S"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter4"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter5"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter6"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter7"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iterables"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "27"
}
overloaded_functions {
  name: "izip"
  fullname: "itertools.izip"
  definitions {
    name: "izip"
    fully_qualified_name: "itertools.izip"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T1]]"
      args {
        pretty_printed_name: "Tuple[itertools._T1]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "izip"
    fully_qualified_name: "itertools.izip"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T1,itertools._T2]]"
      args {
        pretty_printed_name: "Tuple[itertools._T1,itertools._T2]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "izip"
    fully_qualified_name: "itertools.izip"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T1,itertools._T2,itertools._T3]]"
      args {
        pretty_printed_name: "Tuple[itertools._T1,itertools._T2,itertools._T3]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T3]"
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "izip"
    fully_qualified_name: "itertools.izip"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4]]"
      args {
        pretty_printed_name: "Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T3]"
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter4"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T4]"
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "izip"
    fully_qualified_name: "itertools.izip"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5]]"
      args {
        pretty_printed_name: "Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T5"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T3]"
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter4"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T4]"
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter5"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T5]"
        args {
          pretty_printed_name: "itertools._T5"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "izip"
    fully_qualified_name: "itertools.izip"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5,itertools._T6]]"
      args {
        pretty_printed_name: "Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5,itertools._T6]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T5"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T6"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T3]"
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter4"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T4]"
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter5"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T5]"
        args {
          pretty_printed_name: "itertools._T5"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter6"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T6]"
        args {
          pretty_printed_name: "itertools._T6"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "izip"
    fully_qualified_name: "itertools.izip"
    return_annotation {
      pretty_printed_name: "typing.Iterator[builtins.tuple[Any]]"
      args {
        pretty_printed_name: "builtins.tuple[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.tuple"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter4"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter5"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter6"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter7"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iterables"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "27"
}
overloaded_functions {
  name: "product"
  fullname: "itertools.product"
  definitions {
    name: "product"
    fully_qualified_name: "itertools.product"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T1]]"
      args {
        pretty_printed_name: "Tuple[itertools._T1]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "product"
    fully_qualified_name: "itertools.product"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T1,itertools._T2]]"
      args {
        pretty_printed_name: "Tuple[itertools._T1,itertools._T2]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "product"
    fully_qualified_name: "itertools.product"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T1,itertools._T2,itertools._T3]]"
      args {
        pretty_printed_name: "Tuple[itertools._T1,itertools._T2,itertools._T3]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T3]"
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "product"
    fully_qualified_name: "itertools.product"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4]]"
      args {
        pretty_printed_name: "Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T3]"
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter4"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T4]"
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "product"
    fully_qualified_name: "itertools.product"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5]]"
      args {
        pretty_printed_name: "Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T5"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T3]"
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter4"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T4]"
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter5"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T5]"
        args {
          pretty_printed_name: "itertools._T5"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "product"
    fully_qualified_name: "itertools.product"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5,itertools._T6]]"
      args {
        pretty_printed_name: "Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5,itertools._T6]"
        kind: TUPLE
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T5"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "itertools._T6"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T1]"
        args {
          pretty_printed_name: "itertools._T1"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T2]"
        args {
          pretty_printed_name: "itertools._T2"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T3]"
        args {
          pretty_printed_name: "itertools._T3"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter4"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T4]"
        args {
          pretty_printed_name: "itertools._T4"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter5"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T5]"
        args {
          pretty_printed_name: "itertools._T5"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter6"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[itertools._T6]"
        args {
          pretty_printed_name: "itertools._T6"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "product"
    fully_qualified_name: "itertools.product"
    return_annotation {
      pretty_printed_name: "typing.Iterator[builtins.tuple[Any]]"
      args {
        pretty_printed_name: "builtins.tuple[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.tuple"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iter1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter3"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter4"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter5"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter6"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iter7"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "iterables"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "product"
    fully_qualified_name: "itertools.product"
    return_annotation {
      pretty_printed_name: "typing.Iterator[builtins.tuple[Any]]"
      args {
        pretty_printed_name: "builtins.tuple[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.tuple"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "iterables"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "repeat"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "27"
}
