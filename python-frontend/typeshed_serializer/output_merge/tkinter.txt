fully_qualified_name: "tkinter"
classes {
  name: "EventType"
  fully_qualified_name: "tkinter.EventType"
  super_classes: "builtins.str"
  super_classes: "enum.Enum"
  is_enum: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "Activate"
    fully_qualified_name: "tkinter.EventType.Activate"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "ButtonPress"
    fully_qualified_name: "tkinter.EventType.ButtonPress"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Button"
    fully_qualified_name: "tkinter.EventType.Button"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "ButtonRelease"
    fully_qualified_name: "tkinter.EventType.ButtonRelease"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Circulate"
    fully_qualified_name: "tkinter.EventType.Circulate"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "CirculateRequest"
    fully_qualified_name: "tkinter.EventType.CirculateRequest"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "ClientMessage"
    fully_qualified_name: "tkinter.EventType.ClientMessage"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Colormap"
    fully_qualified_name: "tkinter.EventType.Colormap"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Configure"
    fully_qualified_name: "tkinter.EventType.Configure"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "ConfigureRequest"
    fully_qualified_name: "tkinter.EventType.ConfigureRequest"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Create"
    fully_qualified_name: "tkinter.EventType.Create"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Deactivate"
    fully_qualified_name: "tkinter.EventType.Deactivate"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Destroy"
    fully_qualified_name: "tkinter.EventType.Destroy"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Enter"
    fully_qualified_name: "tkinter.EventType.Enter"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Expose"
    fully_qualified_name: "tkinter.EventType.Expose"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "FocusIn"
    fully_qualified_name: "tkinter.EventType.FocusIn"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "FocusOut"
    fully_qualified_name: "tkinter.EventType.FocusOut"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "GraphicsExpose"
    fully_qualified_name: "tkinter.EventType.GraphicsExpose"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Gravity"
    fully_qualified_name: "tkinter.EventType.Gravity"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "KeyPress"
    fully_qualified_name: "tkinter.EventType.KeyPress"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Key"
    fully_qualified_name: "tkinter.EventType.Key"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "KeyRelease"
    fully_qualified_name: "tkinter.EventType.KeyRelease"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Keymap"
    fully_qualified_name: "tkinter.EventType.Keymap"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Leave"
    fully_qualified_name: "tkinter.EventType.Leave"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Map"
    fully_qualified_name: "tkinter.EventType.Map"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "MapRequest"
    fully_qualified_name: "tkinter.EventType.MapRequest"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Mapping"
    fully_qualified_name: "tkinter.EventType.Mapping"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Motion"
    fully_qualified_name: "tkinter.EventType.Motion"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "MouseWheel"
    fully_qualified_name: "tkinter.EventType.MouseWheel"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "NoExpose"
    fully_qualified_name: "tkinter.EventType.NoExpose"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Property"
    fully_qualified_name: "tkinter.EventType.Property"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Reparent"
    fully_qualified_name: "tkinter.EventType.Reparent"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "ResizeRequest"
    fully_qualified_name: "tkinter.EventType.ResizeRequest"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Selection"
    fully_qualified_name: "tkinter.EventType.Selection"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "SelectionClear"
    fully_qualified_name: "tkinter.EventType.SelectionClear"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "SelectionRequest"
    fully_qualified_name: "tkinter.EventType.SelectionRequest"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Unmap"
    fully_qualified_name: "tkinter.EventType.Unmap"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "VirtualEvent"
    fully_qualified_name: "tkinter.EventType.VirtualEvent"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "Visibility"
    fully_qualified_name: "tkinter.EventType.Visibility"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Event"
  fully_qualified_name: "tkinter.Event"
  super_classes: "builtins.object"
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "serial"
    fully_qualified_name: "tkinter.Event.serial"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "num"
    fully_qualified_name: "tkinter.Event.num"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "focus"
    fully_qualified_name: "tkinter.Event.focus"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "height"
    fully_qualified_name: "tkinter.Event.height"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "width"
    fully_qualified_name: "tkinter.Event.width"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "keycode"
    fully_qualified_name: "tkinter.Event.keycode"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "state"
    fully_qualified_name: "tkinter.Event.state"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,builtins.str]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "time"
    fully_qualified_name: "tkinter.Event.time"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "x"
    fully_qualified_name: "tkinter.Event.x"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "y"
    fully_qualified_name: "tkinter.Event.y"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "x_root"
    fully_qualified_name: "tkinter.Event.x_root"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "y_root"
    fully_qualified_name: "tkinter.Event.y_root"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "char"
    fully_qualified_name: "tkinter.Event.char"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "send_event"
    fully_qualified_name: "tkinter.Event.send_event"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "keysym"
    fully_qualified_name: "tkinter.Event.keysym"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "keysym_num"
    fully_qualified_name: "tkinter.Event.keysym_num"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "type"
    fully_qualified_name: "tkinter.Event.type"
    type_annotation {
      pretty_printed_name: "tkinter.EventType"
      fully_qualified_name: "tkinter.EventType"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "widget"
    fully_qualified_name: "tkinter.Event.widget"
    type_annotation {
      pretty_printed_name: "tkinter._W_co"
      kind: TYPE_VAR
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "delta"
    fully_qualified_name: "tkinter.Event.delta"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Variable"
  fully_qualified_name: "tkinter.Variable"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Variable.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set"
    fully_qualified_name: "tkinter.Variable.set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.Variable.get"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "trace_add"
    fully_qualified_name: "tkinter.Variable.trace_add"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TraceMode]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "callback"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "trace_remove"
    fully_qualified_name: "tkinter.Variable.trace_remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TraceMode]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "cbname"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "trace_info"
    fully_qualified_name: "tkinter.Variable.trace_info"
    return_annotation {
      pretty_printed_name: "builtins.list[Tuple[Tuple[UnboundType[_TraceMode],Any],builtins.str]]"
      args {
        pretty_printed_name: "Tuple[Tuple[UnboundType[_TraceMode],Any],builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "Tuple[UnboundType[_TraceMode],Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "UnboundType[_TraceMode]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "trace_info"
    fully_qualified_name: "tkinter.Variable.trace_info"
    return_annotation {
      pretty_printed_name: "builtins.list[Tuple[builtins.tuple[UnboundType[_TraceMode]],builtins.str]]"
      args {
        pretty_printed_name: "Tuple[builtins.tuple[UnboundType[_TraceMode]],builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.tuple[UnboundType[_TraceMode]]"
          args {
            pretty_printed_name: "UnboundType[_TraceMode]"
            kind: UNBOUND
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "trace_variable"
    fully_qualified_name: "tkinter.Variable.trace_variable"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "callback"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "trace_vdelete"
    fully_qualified_name: "tkinter.Variable.trace_vdelete"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "cbname"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "trace_vinfo"
    fully_qualified_name: "tkinter.Variable.trace_vinfo"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "tkinter.Variable.__eq__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "initialize"
    fully_qualified_name: "tkinter.Variable.initialize"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "trace"
    fully_qualified_name: "tkinter.Variable.trace"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "StringVar"
  fully_qualified_name: "tkinter.StringVar"
  super_classes: "tkinter.Variable"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.StringVar.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.StringVar"
        fully_qualified_name: "tkinter.StringVar"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set"
    fully_qualified_name: "tkinter.StringVar.set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.StringVar"
        fully_qualified_name: "tkinter.StringVar"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.StringVar.get"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.StringVar"
        fully_qualified_name: "tkinter.StringVar"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "initialize"
    fully_qualified_name: "tkinter.StringVar.initialize"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "IntVar"
  fully_qualified_name: "tkinter.IntVar"
  super_classes: "tkinter.Variable"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.IntVar.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.IntVar"
        fully_qualified_name: "tkinter.IntVar"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set"
    fully_qualified_name: "tkinter.IntVar.set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.IntVar"
        fully_qualified_name: "tkinter.IntVar"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.IntVar.get"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.IntVar"
        fully_qualified_name: "tkinter.IntVar"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "initialize"
    fully_qualified_name: "tkinter.IntVar.initialize"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "DoubleVar"
  fully_qualified_name: "tkinter.DoubleVar"
  super_classes: "tkinter.Variable"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.DoubleVar.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.DoubleVar"
        fully_qualified_name: "tkinter.DoubleVar"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.float,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set"
    fully_qualified_name: "tkinter.DoubleVar.set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.DoubleVar"
        fully_qualified_name: "tkinter.DoubleVar"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.DoubleVar.get"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.DoubleVar"
        fully_qualified_name: "tkinter.DoubleVar"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "initialize"
    fully_qualified_name: "tkinter.DoubleVar.initialize"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "BooleanVar"
  fully_qualified_name: "tkinter.BooleanVar"
  super_classes: "tkinter.Variable"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.BooleanVar.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.BooleanVar"
        fully_qualified_name: "tkinter.BooleanVar"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set"
    fully_qualified_name: "tkinter.BooleanVar.set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.BooleanVar"
        fully_qualified_name: "tkinter.BooleanVar"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.BooleanVar.get"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.BooleanVar"
        fully_qualified_name: "tkinter.BooleanVar"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "initialize"
    fully_qualified_name: "tkinter.BooleanVar.initialize"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_GridIndexInfo"
  fully_qualified_name: "tkinter._GridIndexInfo"
  super_classes: "typing._TypedDict"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Misc"
  fully_qualified_name: "tkinter.Misc"
  super_classes: "builtins.object"
  methods {
    name: "destroy"
    fully_qualified_name: "tkinter.Misc.destroy"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "deletecommand"
    fully_qualified_name: "tkinter.Misc.deletecommand"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tk_strictMotif"
    fully_qualified_name: "tkinter.Misc.tk_strictMotif"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "boolean"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tk_bisque"
    fully_qualified_name: "tkinter.Misc.tk_bisque"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tk_setPalette"
    fully_qualified_name: "tkinter.Misc.tk_setPalette"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wait_variable"
    fully_qualified_name: "tkinter.Misc.wait_variable"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,tkinter.Variable]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wait_window"
    fully_qualified_name: "tkinter.Misc.wait_window"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "window"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wait_visibility"
    fully_qualified_name: "tkinter.Misc.wait_visibility"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "window"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "setvar"
    fully_qualified_name: "tkinter.Misc.setvar"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getvar"
    fully_qualified_name: "tkinter.Misc.getvar"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getint"
    fully_qualified_name: "tkinter.Misc.getint"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "s"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getdouble"
    fully_qualified_name: "tkinter.Misc.getdouble"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "s"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getboolean"
    fully_qualified_name: "tkinter.Misc.getboolean"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "s"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "focus_set"
    fully_qualified_name: "tkinter.Misc.focus_set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "focus_force"
    fully_qualified_name: "tkinter.Misc.focus_force"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "focus_get"
    fully_qualified_name: "tkinter.Misc.focus_get"
    return_annotation {
      pretty_printed_name: "Union[tkinter.Misc,None]"
      kind: UNION
      args {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "focus_displayof"
    fully_qualified_name: "tkinter.Misc.focus_displayof"
    return_annotation {
      pretty_printed_name: "Union[tkinter.Misc,None]"
      kind: UNION
      args {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "focus_lastfor"
    fully_qualified_name: "tkinter.Misc.focus_lastfor"
    return_annotation {
      pretty_printed_name: "Union[tkinter.Misc,None]"
      kind: UNION
      args {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tk_focusFollowsMouse"
    fully_qualified_name: "tkinter.Misc.tk_focusFollowsMouse"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tk_focusNext"
    fully_qualified_name: "tkinter.Misc.tk_focusNext"
    return_annotation {
      pretty_printed_name: "Union[tkinter.Misc,None]"
      kind: UNION
      args {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tk_focusPrev"
    fully_qualified_name: "tkinter.Misc.tk_focusPrev"
    return_annotation {
      pretty_printed_name: "Union[tkinter.Misc,None]"
      kind: UNION
      args {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "after_idle"
    fully_qualified_name: "tkinter.Misc.after_idle"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "after_cancel"
    fully_qualified_name: "tkinter.Misc.after_cancel"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "id"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "bell"
    fully_qualified_name: "tkinter.Misc.bell"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "displayof"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.int],tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "clipboard_get"
    fully_qualified_name: "tkinter.Misc.clipboard_get"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "displayof"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      has_default: true
    }
    parameters {
      name: "type"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "clipboard_clear"
    fully_qualified_name: "tkinter.Misc.clipboard_clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "displayof"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "clipboard_append"
    fully_qualified_name: "tkinter.Misc.clipboard_append"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "string"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "displayof"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      has_default: true
    }
    parameters {
      name: "format"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "type"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grab_current"
    fully_qualified_name: "tkinter.Misc.grab_current"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grab_release"
    fully_qualified_name: "tkinter.Misc.grab_release"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grab_set"
    fully_qualified_name: "tkinter.Misc.grab_set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grab_set_global"
    fully_qualified_name: "tkinter.Misc.grab_set_global"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grab_status"
    fully_qualified_name: "tkinter.Misc.grab_status"
    return_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "option_add"
    fully_qualified_name: "tkinter.Misc.option_add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "pattern"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "priority"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "option_clear"
    fully_qualified_name: "tkinter.Misc.option_clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "option_get"
    fully_qualified_name: "tkinter.Misc.option_get"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "className"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "option_readfile"
    fully_qualified_name: "tkinter.Misc.option_readfile"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "fileName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "priority"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_clear"
    fully_qualified_name: "tkinter.Misc.selection_clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_get"
    fully_qualified_name: "tkinter.Misc.selection_get"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_handle"
    fully_qualified_name: "tkinter.Misc.selection_handle"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "command"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_own"
    fully_qualified_name: "tkinter.Misc.selection_own"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_own_get"
    fully_qualified_name: "tkinter.Misc.selection_own_get"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "send"
    fully_qualified_name: "tkinter.Misc.send"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "interp"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "cmd"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "lower"
    fully_qualified_name: "tkinter.Misc.lower"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "belowThis"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tkraise"
    fully_qualified_name: "tkinter.Misc.tkraise"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "aboveThis"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_atom"
    fully_qualified_name: "tkinter.Misc.winfo_atom"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "displayof"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.int],tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_atomname"
    fully_qualified_name: "tkinter.Misc.winfo_atomname"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "id"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "displayof"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.int],tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_cells"
    fully_qualified_name: "tkinter.Misc.winfo_cells"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_children"
    fully_qualified_name: "tkinter.Misc.winfo_children"
    return_annotation {
      pretty_printed_name: "builtins.list[tkinter.Widget]"
      args {
        pretty_printed_name: "tkinter.Widget"
        fully_qualified_name: "tkinter.Widget"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_class"
    fully_qualified_name: "tkinter.Misc.winfo_class"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_colormapfull"
    fully_qualified_name: "tkinter.Misc.winfo_colormapfull"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_containing"
    fully_qualified_name: "tkinter.Misc.winfo_containing"
    return_annotation {
      pretty_printed_name: "Union[tkinter.Misc,None]"
      kind: UNION
      args {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "rootX"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "rootY"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "displayof"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.int],tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_depth"
    fully_qualified_name: "tkinter.Misc.winfo_depth"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_exists"
    fully_qualified_name: "tkinter.Misc.winfo_exists"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_fpixels"
    fully_qualified_name: "tkinter.Misc.winfo_fpixels"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "number"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_geometry"
    fully_qualified_name: "tkinter.Misc.winfo_geometry"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_height"
    fully_qualified_name: "tkinter.Misc.winfo_height"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_id"
    fully_qualified_name: "tkinter.Misc.winfo_id"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_interps"
    fully_qualified_name: "tkinter.Misc.winfo_interps"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "displayof"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.int],tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "winfo_interps"
    fully_qualified_name: "tkinter.Misc.winfo_interps"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "displayof"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.int],tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_ismapped"
    fully_qualified_name: "tkinter.Misc.winfo_ismapped"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_manager"
    fully_qualified_name: "tkinter.Misc.winfo_manager"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_name"
    fully_qualified_name: "tkinter.Misc.winfo_name"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_parent"
    fully_qualified_name: "tkinter.Misc.winfo_parent"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_pathname"
    fully_qualified_name: "tkinter.Misc.winfo_pathname"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "id"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "displayof"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.int],tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_pixels"
    fully_qualified_name: "tkinter.Misc.winfo_pixels"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "number"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_pointerx"
    fully_qualified_name: "tkinter.Misc.winfo_pointerx"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_pointerxy"
    fully_qualified_name: "tkinter.Misc.winfo_pointerxy"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_pointery"
    fully_qualified_name: "tkinter.Misc.winfo_pointery"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_reqheight"
    fully_qualified_name: "tkinter.Misc.winfo_reqheight"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_reqwidth"
    fully_qualified_name: "tkinter.Misc.winfo_reqwidth"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_rgb"
    fully_qualified_name: "tkinter.Misc.winfo_rgb"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "color"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_rootx"
    fully_qualified_name: "tkinter.Misc.winfo_rootx"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_rooty"
    fully_qualified_name: "tkinter.Misc.winfo_rooty"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_screen"
    fully_qualified_name: "tkinter.Misc.winfo_screen"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_screencells"
    fully_qualified_name: "tkinter.Misc.winfo_screencells"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_screendepth"
    fully_qualified_name: "tkinter.Misc.winfo_screendepth"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_screenheight"
    fully_qualified_name: "tkinter.Misc.winfo_screenheight"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_screenmmheight"
    fully_qualified_name: "tkinter.Misc.winfo_screenmmheight"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_screenmmwidth"
    fully_qualified_name: "tkinter.Misc.winfo_screenmmwidth"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_screenvisual"
    fully_qualified_name: "tkinter.Misc.winfo_screenvisual"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_screenwidth"
    fully_qualified_name: "tkinter.Misc.winfo_screenwidth"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_server"
    fully_qualified_name: "tkinter.Misc.winfo_server"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_toplevel"
    fully_qualified_name: "tkinter.Misc.winfo_toplevel"
    return_annotation {
      pretty_printed_name: "Union[tkinter.Tk,tkinter.Toplevel]"
      kind: UNION
      args {
        pretty_printed_name: "tkinter.Tk"
        fully_qualified_name: "tkinter.Tk"
      }
      args {
        pretty_printed_name: "tkinter.Toplevel"
        fully_qualified_name: "tkinter.Toplevel"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_viewable"
    fully_qualified_name: "tkinter.Misc.winfo_viewable"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_visual"
    fully_qualified_name: "tkinter.Misc.winfo_visual"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_visualid"
    fully_qualified_name: "tkinter.Misc.winfo_visualid"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_visualsavailable"
    fully_qualified_name: "tkinter.Misc.winfo_visualsavailable"
    return_annotation {
      pretty_printed_name: "builtins.list[Tuple[builtins.str,builtins.int]]"
      args {
        pretty_printed_name: "Tuple[builtins.str,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "includeids"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_vrootheight"
    fully_qualified_name: "tkinter.Misc.winfo_vrootheight"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_vrootwidth"
    fully_qualified_name: "tkinter.Misc.winfo_vrootwidth"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_vrootx"
    fully_qualified_name: "tkinter.Misc.winfo_vrootx"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_vrooty"
    fully_qualified_name: "tkinter.Misc.winfo_vrooty"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_width"
    fully_qualified_name: "tkinter.Misc.winfo_width"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_x"
    fully_qualified_name: "tkinter.Misc.winfo_x"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "winfo_y"
    fully_qualified_name: "tkinter.Misc.winfo_y"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "update"
    fully_qualified_name: "tkinter.Misc.update"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "update_idletasks"
    fully_qualified_name: "tkinter.Misc.update_idletasks"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "unbind"
    fully_qualified_name: "tkinter.Misc.unbind"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "sequence"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "funcid"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "unbind_all"
    fully_qualified_name: "tkinter.Misc.unbind_all"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "sequence"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "unbind_class"
    fully_qualified_name: "tkinter.Misc.unbind_class"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "className"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "sequence"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "mainloop"
    fully_qualified_name: "tkinter.Misc.mainloop"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "n"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "quit"
    fully_qualified_name: "tkinter.Misc.quit"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_windowingsystem"
    fully_qualified_name: "tkinter.Misc._windowingsystem"
    return_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "nametowidget"
    fully_qualified_name: "tkinter.Misc.nametowidget"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,tkinter.Misc,_tkinter.Tcl_Obj]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "_tkinter.Tcl_Obj"
          fully_qualified_name: "_tkinter.Tcl_Obj"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "register"
    fully_qualified_name: "tkinter.Misc.register"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "subst"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "needcleanup"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "keys"
    fully_qualified_name: "tkinter.Misc.keys"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grid_anchor"
    fully_qualified_name: "tkinter.Misc.grid_anchor"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "anchor"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_Anchor],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grid_columnconfigure"
    fully_qualified_name: "tkinter.Misc.grid_columnconfigure"
    return_annotation {
      pretty_printed_name: "Union[TypedDict,Any]"
      kind: UNION
      args {
        pretty_printed_name: "TypedDict"
        kind: TYPED_DICT
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_GridIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypedDict"
        kind: TYPED_DICT
      }
      has_default: true
    }
    parameters {
      name: "minsize"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pad"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "uniform"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "weight"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grid_rowconfigure"
    fully_qualified_name: "tkinter.Misc.grid_rowconfigure"
    return_annotation {
      pretty_printed_name: "Union[TypedDict,Any]"
      kind: UNION
      args {
        pretty_printed_name: "TypedDict"
        kind: TYPED_DICT
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_GridIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypedDict"
        kind: TYPED_DICT
      }
      has_default: true
    }
    parameters {
      name: "minsize"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pad"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "uniform"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "weight"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grid_location"
    fully_qualified_name: "tkinter.Misc.grid_location"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grid_size"
    fully_qualified_name: "tkinter.Misc.grid_size"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "pack_slaves"
    fully_qualified_name: "tkinter.Misc.pack_slaves"
    return_annotation {
      pretty_printed_name: "builtins.list[tkinter.Widget]"
      args {
        pretty_printed_name: "tkinter.Widget"
        fully_qualified_name: "tkinter.Widget"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grid_slaves"
    fully_qualified_name: "tkinter.Misc.grid_slaves"
    return_annotation {
      pretty_printed_name: "builtins.list[tkinter.Widget]"
      args {
        pretty_printed_name: "tkinter.Widget"
        fully_qualified_name: "tkinter.Widget"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "row"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "column"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "place_slaves"
    fully_qualified_name: "tkinter.Misc.place_slaves"
    return_annotation {
      pretty_printed_name: "builtins.list[tkinter.Widget]"
      args {
        pretty_printed_name: "tkinter.Widget"
        fully_qualified_name: "tkinter.Widget"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "event_add"
    fully_qualified_name: "tkinter.Misc.event_add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "virtual"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "sequences"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "event_delete"
    fully_qualified_name: "tkinter.Misc.event_delete"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "virtual"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "sequences"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "event_generate"
    fully_qualified_name: "tkinter.Misc.event_generate"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "sequence"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "above"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "button"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "count"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "data"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "delta"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "detail"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "focus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "keycode"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "keysym"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "mode"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "override"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "place"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "root"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_default: true
    }
    parameters {
      name: "rootx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "rooty"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "sendevent"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "serial"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "subwindow"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_default: true
    }
    parameters {
      name: "time"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "warp"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "when"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "x"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "y"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "event_info"
    fully_qualified_name: "tkinter.Misc.event_info"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "virtual"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "event_info"
    fully_qualified_name: "tkinter.Misc.event_info"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "virtual"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "image_names"
    fully_qualified_name: "tkinter.Misc.image_names"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "image_names"
    fully_qualified_name: "tkinter.Misc.image_names"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "image_types"
    fully_qualified_name: "tkinter.Misc.image_types"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "image_types"
    fully_qualified_name: "tkinter.Misc.image_types"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__setitem__"
    fully_qualified_name: "tkinter.Misc.__setitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "value"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "tkinter.Misc.__getitem__"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "cget"
    fully_qualified_name: "tkinter.Misc.cget"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "configure"
    fully_qualified_name: "tkinter.Misc.configure"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "after"
    fullname: "tkinter.Misc.after"
    definitions {
      name: "after"
      fully_qualified_name: "tkinter.Misc.after"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "ms"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "after"
      fully_qualified_name: "tkinter.Misc.after"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "ms"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "bindtags"
    fullname: "tkinter.Misc.bindtags"
    definitions {
      name: "bindtags"
      fully_qualified_name: "tkinter.Misc.bindtags"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "tagList"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "bindtags"
      fully_qualified_name: "tkinter.Misc.bindtags"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "tagList"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "bindtags"
    fullname: "tkinter.Misc.bindtags"
    definitions {
      name: "bindtags"
      fully_qualified_name: "tkinter.Misc.bindtags"
      return_annotation {
        pretty_printed_name: "builtins.tuple[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.tuple"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "tagList"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "bindtags"
      fully_qualified_name: "tkinter.Misc.bindtags"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "tagList"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "bind"
    fullname: "tkinter.Misc.bind"
    definitions {
      name: "bind"
      fully_qualified_name: "tkinter.Misc.bind"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "add"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "bind"
      fully_qualified_name: "tkinter.Misc.bind"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "add"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "bind"
      fully_qualified_name: "tkinter.Misc.bind"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "func"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "add"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "bind_all"
    fullname: "tkinter.Misc.bind_all"
    definitions {
      name: "bind_all"
      fully_qualified_name: "tkinter.Misc.bind_all"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "add"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "bind_all"
      fully_qualified_name: "tkinter.Misc.bind_all"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "add"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "bind_all"
      fully_qualified_name: "tkinter.Misc.bind_all"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "func"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "add"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "bind_class"
    fullname: "tkinter.Misc.bind_class"
    definitions {
      name: "bind_class"
      fully_qualified_name: "tkinter.Misc.bind_class"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "className"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "add"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "bind_class"
      fully_qualified_name: "tkinter.Misc.bind_class"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "className"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "add"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "bind_class"
      fully_qualified_name: "tkinter.Misc.bind_class"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "className"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "func"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "add"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "pack_propagate"
    fullname: "tkinter.Misc.pack_propagate"
    definitions {
      name: "pack_propagate"
      fully_qualified_name: "tkinter.Misc.pack_propagate"
      return_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "flag"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "pack_propagate"
      fully_qualified_name: "tkinter.Misc.pack_propagate"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "grid_bbox"
    fullname: "tkinter.Misc.grid_bbox"
    definitions {
      name: "grid_bbox"
      fully_qualified_name: "tkinter.Misc.grid_bbox"
      return_annotation {
        pretty_printed_name: "Union[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "row"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "col2"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "row2"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "grid_bbox"
      fully_qualified_name: "tkinter.Misc.grid_bbox"
      return_annotation {
        pretty_printed_name: "Union[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "row"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "col2"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "row2"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "grid_bbox"
      fully_qualified_name: "tkinter.Misc.grid_bbox"
      return_annotation {
        pretty_printed_name: "Union[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "row"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "col2"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "row2"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "grid_propagate"
    fullname: "tkinter.Misc.grid_propagate"
    definitions {
      name: "grid_propagate"
      fully_qualified_name: "tkinter.Misc.grid_propagate"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "flag"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "grid_propagate"
      fully_qualified_name: "tkinter.Misc.grid_propagate"
      return_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "master"
    fully_qualified_name: "tkinter.Misc.master"
    type_annotation {
      pretty_printed_name: "Union[tkinter.Misc,None]"
      kind: UNION
      args {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "tk"
    fully_qualified_name: "tkinter.Misc.tk"
    type_annotation {
      pretty_printed_name: "_tkinter.TkappType"
      fully_qualified_name: "_tkinter.TkappType"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "children"
    fully_qualified_name: "tkinter.Misc.children"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,tkinter.Widget]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "tkinter.Widget"
        fully_qualified_name: "tkinter.Widget"
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "waitvar"
    fully_qualified_name: "tkinter.Misc.waitvar"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "focus"
    fully_qualified_name: "tkinter.Misc.focus"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "lift"
    fully_qualified_name: "tkinter.Misc.lift"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "propagate"
    fully_qualified_name: "tkinter.Misc.propagate"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "anchor"
    fully_qualified_name: "tkinter.Misc.anchor"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "bbox"
    fully_qualified_name: "tkinter.Misc.bbox"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "columnconfigure"
    fully_qualified_name: "tkinter.Misc.columnconfigure"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "rowconfigure"
    fully_qualified_name: "tkinter.Misc.rowconfigure"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "size"
    fully_qualified_name: "tkinter.Misc.size"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "slaves"
    fully_qualified_name: "tkinter.Misc.slaves"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "CallWrapper"
  fully_qualified_name: "tkinter.CallWrapper"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.CallWrapper.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.CallWrapper"
        fully_qualified_name: "tkinter.CallWrapper"
      }
    }
    parameters {
      name: "func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "subst"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "widget"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__call__"
    fully_qualified_name: "tkinter.CallWrapper.__call__"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "func"
    fully_qualified_name: "tkinter.CallWrapper.func"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "subst"
    fully_qualified_name: "tkinter.CallWrapper.subst"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "widget"
    fully_qualified_name: "tkinter.CallWrapper.widget"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "XView"
  fully_qualified_name: "tkinter.XView"
  super_classes: "builtins.object"
  methods {
    name: "xview_moveto"
    fully_qualified_name: "tkinter.XView.xview_moveto"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.XView"
        fully_qualified_name: "tkinter.XView"
      }
    }
    parameters {
      name: "fraction"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "xview"
    fullname: "tkinter.XView.xview"
    definitions {
      name: "xview"
      fully_qualified_name: "tkinter.XView.xview"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.float,builtins.float]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.XView"
          fully_qualified_name: "tkinter.XView"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "xview"
      fully_qualified_name: "tkinter.XView.xview"
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "xview_scroll"
    fullname: "tkinter.XView.xview_scroll"
    definitions {
      name: "xview_scroll"
      fully_qualified_name: "tkinter.XView.xview_scroll"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.XView"
          fully_qualified_name: "tkinter.XView"
        }
      }
      parameters {
        name: "number"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "what"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "xview_scroll"
      fully_qualified_name: "tkinter.XView.xview_scroll"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.XView"
          fully_qualified_name: "tkinter.XView"
        }
      }
      parameters {
        name: "number"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "what"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "YView"
  fully_qualified_name: "tkinter.YView"
  super_classes: "builtins.object"
  methods {
    name: "yview_moveto"
    fully_qualified_name: "tkinter.YView.yview_moveto"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.YView"
        fully_qualified_name: "tkinter.YView"
      }
    }
    parameters {
      name: "fraction"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "yview"
    fullname: "tkinter.YView.yview"
    definitions {
      name: "yview"
      fully_qualified_name: "tkinter.YView.yview"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.float,builtins.float]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.YView"
          fully_qualified_name: "tkinter.YView"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "yview"
      fully_qualified_name: "tkinter.YView.yview"
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "yview_scroll"
    fullname: "tkinter.YView.yview_scroll"
    definitions {
      name: "yview_scroll"
      fully_qualified_name: "tkinter.YView.yview_scroll"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.YView"
          fully_qualified_name: "tkinter.YView"
        }
      }
      parameters {
        name: "number"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "what"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "yview_scroll"
      fully_qualified_name: "tkinter.YView.yview_scroll"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.YView"
          fully_qualified_name: "tkinter.YView"
        }
      }
      parameters {
        name: "number"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "what"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Wm"
  fully_qualified_name: "tkinter.Wm"
  super_classes: "builtins.object"
  methods {
    name: "wm_client"
    fully_qualified_name: "tkinter.Wm.wm_client"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_command"
    fully_qualified_name: "tkinter.Wm.wm_command"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_deiconify"
    fully_qualified_name: "tkinter.Wm.wm_deiconify"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_focusmodel"
    fully_qualified_name: "tkinter.Wm.wm_focusmodel"
    return_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "model"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_forget"
    fully_qualified_name: "tkinter.Wm.wm_forget"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "window"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_frame"
    fully_qualified_name: "tkinter.Wm.wm_frame"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_grid"
    fully_qualified_name: "tkinter.Wm.wm_grid"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "baseWidth"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "baseHeight"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "widthInc"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "heightInc"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_group"
    fully_qualified_name: "tkinter.Wm.wm_group"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "pathName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_iconbitmap"
    fully_qualified_name: "tkinter.Wm.wm_iconbitmap"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "bitmap"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_iconify"
    fully_qualified_name: "tkinter.Wm.wm_iconify"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_iconmask"
    fully_qualified_name: "tkinter.Wm.wm_iconmask"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "bitmap"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_iconname"
    fully_qualified_name: "tkinter.Wm.wm_iconname"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "newName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_iconphoto"
    fully_qualified_name: "tkinter.Wm.wm_iconphoto"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "__image1"
      type_annotation {
        pretty_printed_name: "Union[tkinter._PhotoImageLike,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter._PhotoImageLike"
          fully_qualified_name: "tkinter._PhotoImageLike"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Union[tkinter._PhotoImageLike,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter._PhotoImageLike"
          fully_qualified_name: "tkinter._PhotoImageLike"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_iconposition"
    fully_qualified_name: "tkinter.Wm.wm_iconposition"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.int,builtins.int],None]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.int,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_iconwindow"
    fully_qualified_name: "tkinter.Wm.wm_iconwindow"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "pathName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_manage"
    fully_qualified_name: "tkinter.Wm.wm_manage"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "widget"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_positionfrom"
    fully_qualified_name: "tkinter.Wm.wm_positionfrom"
    return_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "who"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_sizefrom"
    fully_qualified_name: "tkinter.Wm.wm_sizefrom"
    return_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    parameters {
      name: "who"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wm_withdraw"
    fully_qualified_name: "tkinter.Wm.wm_withdraw"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Wm"
        fully_qualified_name: "tkinter.Wm"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "wm_aspect"
    fullname: "tkinter.Wm.wm_aspect"
    definitions {
      name: "wm_aspect"
      fully_qualified_name: "tkinter.Wm.wm_aspect"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "minNumer"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "minDenom"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "maxNumer"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "maxDenom"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_aspect"
      fully_qualified_name: "tkinter.Wm.wm_aspect"
      return_annotation {
        pretty_printed_name: "Union[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "minNumer"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "minDenom"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "maxNumer"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "maxDenom"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "wm_attributes"
    fullname: "tkinter.Wm.wm_attributes"
    definitions {
      name: "wm_attributes"
      fully_qualified_name: "tkinter.Wm.wm_attributes"
      return_annotation {
        pretty_printed_name: "Tuple[Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_attributes"
      fully_qualified_name: "tkinter.Wm.wm_attributes"
      return_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "__option"
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_attributes"
      fully_qualified_name: "tkinter.Wm.wm_attributes"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "__option"
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "__value"
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "__other_option_value_pairs"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "wm_attributes"
    fullname: "tkinter.Wm.wm_attributes"
    definitions {
      name: "wm_attributes"
      fully_qualified_name: "tkinter.Wm.wm_attributes"
      return_annotation {
        pretty_printed_name: "builtins.tuple[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.tuple"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_attributes"
      fully_qualified_name: "tkinter.Wm.wm_attributes"
      return_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "__option"
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_attributes"
      fully_qualified_name: "tkinter.Wm.wm_attributes"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "__option"
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "__value"
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "__other_option_value_pairs"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "wm_colormapwindows"
    fullname: "tkinter.Wm.wm_colormapwindows"
    definitions {
      name: "wm_colormapwindows"
      fully_qualified_name: "tkinter.Wm.wm_colormapwindows"
      return_annotation {
        pretty_printed_name: "builtins.list[tkinter.Misc]"
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_colormapwindows"
      fully_qualified_name: "tkinter.Wm.wm_colormapwindows"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "__wlist"
        type_annotation {
          pretty_printed_name: "Union[builtins.list[tkinter.Misc],Tuple[tkinter.Misc,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[tkinter.Misc]"
            args {
              pretty_printed_name: "tkinter.Misc"
              fully_qualified_name: "tkinter.Misc"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[tkinter.Misc,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "tkinter.Misc"
              fully_qualified_name: "tkinter.Misc"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_colormapwindows"
      fully_qualified_name: "tkinter.Wm.wm_colormapwindows"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "__first_wlist_item"
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "other_wlist_items"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "wm_colormapwindows"
    fullname: "tkinter.Wm.wm_colormapwindows"
    definitions {
      name: "wm_colormapwindows"
      fully_qualified_name: "tkinter.Wm.wm_colormapwindows"
      return_annotation {
        pretty_printed_name: "builtins.list[tkinter.Misc]"
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_colormapwindows"
      fully_qualified_name: "tkinter.Wm.wm_colormapwindows"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "__wlist"
        type_annotation {
          pretty_printed_name: "Union[builtins.list[tkinter.Misc],builtins.tuple[tkinter.Misc]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[tkinter.Misc]"
            args {
              pretty_printed_name: "tkinter.Misc"
              fully_qualified_name: "tkinter.Misc"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[tkinter.Misc]"
            args {
              pretty_printed_name: "tkinter.Misc"
              fully_qualified_name: "tkinter.Misc"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_colormapwindows"
      fully_qualified_name: "tkinter.Wm.wm_colormapwindows"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "__first_wlist_item"
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      parameters {
        name: "other_wlist_items"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "wm_geometry"
    fullname: "tkinter.Wm.wm_geometry"
    definitions {
      name: "wm_geometry"
      fully_qualified_name: "tkinter.Wm.wm_geometry"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "newGeometry"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_geometry"
      fully_qualified_name: "tkinter.Wm.wm_geometry"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "newGeometry"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "wm_maxsize"
    fullname: "tkinter.Wm.wm_maxsize"
    definitions {
      name: "wm_maxsize"
      fully_qualified_name: "tkinter.Wm.wm_maxsize"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.int,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "width"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_maxsize"
      fully_qualified_name: "tkinter.Wm.wm_maxsize"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "width"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "height"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "wm_minsize"
    fullname: "tkinter.Wm.wm_minsize"
    definitions {
      name: "wm_minsize"
      fully_qualified_name: "tkinter.Wm.wm_minsize"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.int,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "width"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_minsize"
      fully_qualified_name: "tkinter.Wm.wm_minsize"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "width"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "height"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "wm_overrideredirect"
    fullname: "tkinter.Wm.wm_overrideredirect"
    definitions {
      name: "wm_overrideredirect"
      fully_qualified_name: "tkinter.Wm.wm_overrideredirect"
      return_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "boolean"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_overrideredirect"
      fully_qualified_name: "tkinter.Wm.wm_overrideredirect"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "boolean"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "wm_protocol"
    fullname: "tkinter.Wm.wm_protocol"
    definitions {
      name: "wm_protocol"
      fully_qualified_name: "tkinter.Wm.wm_protocol"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "name"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_protocol"
      fully_qualified_name: "tkinter.Wm.wm_protocol"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "name"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_protocol"
      fully_qualified_name: "tkinter.Wm.wm_protocol"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "name"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "wm_protocol"
    fullname: "tkinter.Wm.wm_protocol"
    definitions {
      name: "wm_protocol"
      fully_qualified_name: "tkinter.Wm.wm_protocol"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "name"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_protocol"
      fully_qualified_name: "tkinter.Wm.wm_protocol"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "name"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_protocol"
      fully_qualified_name: "tkinter.Wm.wm_protocol"
      return_annotation {
        pretty_printed_name: "builtins.tuple[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.tuple"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "name"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "wm_resizable"
    fullname: "tkinter.Wm.wm_resizable"
    definitions {
      name: "wm_resizable"
      fully_qualified_name: "tkinter.Wm.wm_resizable"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.bool,builtins.bool]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "width"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_resizable"
      fully_qualified_name: "tkinter.Wm.wm_resizable"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "width"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      parameters {
        name: "height"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "wm_state"
    fullname: "tkinter.Wm.wm_state"
    definitions {
      name: "wm_state"
      fully_qualified_name: "tkinter.Wm.wm_state"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "newstate"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_state"
      fully_qualified_name: "tkinter.Wm.wm_state"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "newstate"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "wm_title"
    fullname: "tkinter.Wm.wm_title"
    definitions {
      name: "wm_title"
      fully_qualified_name: "tkinter.Wm.wm_title"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_title"
      fully_qualified_name: "tkinter.Wm.wm_title"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "wm_transient"
    fullname: "tkinter.Wm.wm_transient"
    definitions {
      name: "wm_transient"
      fully_qualified_name: "tkinter.Wm.wm_transient"
      return_annotation {
        pretty_printed_name: "_tkinter.Tcl_Obj"
        fully_qualified_name: "_tkinter.Tcl_Obj"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "master"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "wm_transient"
      fully_qualified_name: "tkinter.Wm.wm_transient"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Wm"
          fully_qualified_name: "tkinter.Wm"
        }
      }
      parameters {
        name: "master"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[tkinter.Wm,_tkinter.Tcl_Obj]"
          kind: UNION
          args {
            pretty_printed_name: "tkinter.Wm"
            fully_qualified_name: "tkinter.Wm"
          }
          args {
            pretty_printed_name: "_tkinter.Tcl_Obj"
            fully_qualified_name: "_tkinter.Tcl_Obj"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "aspect"
    fully_qualified_name: "tkinter.Wm.aspect"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "attributes"
    fully_qualified_name: "tkinter.Wm.attributes"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "client"
    fully_qualified_name: "tkinter.Wm.client"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "colormapwindows"
    fully_qualified_name: "tkinter.Wm.colormapwindows"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "command"
    fully_qualified_name: "tkinter.Wm.command"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "deiconify"
    fully_qualified_name: "tkinter.Wm.deiconify"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "focusmodel"
    fully_qualified_name: "tkinter.Wm.focusmodel"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "forget"
    fully_qualified_name: "tkinter.Wm.forget"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "frame"
    fully_qualified_name: "tkinter.Wm.frame"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "geometry"
    fully_qualified_name: "tkinter.Wm.geometry"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "grid"
    fully_qualified_name: "tkinter.Wm.grid"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "group"
    fully_qualified_name: "tkinter.Wm.group"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "iconbitmap"
    fully_qualified_name: "tkinter.Wm.iconbitmap"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "iconify"
    fully_qualified_name: "tkinter.Wm.iconify"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "iconmask"
    fully_qualified_name: "tkinter.Wm.iconmask"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "iconname"
    fully_qualified_name: "tkinter.Wm.iconname"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "iconphoto"
    fully_qualified_name: "tkinter.Wm.iconphoto"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "iconposition"
    fully_qualified_name: "tkinter.Wm.iconposition"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "iconwindow"
    fully_qualified_name: "tkinter.Wm.iconwindow"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "manage"
    fully_qualified_name: "tkinter.Wm.manage"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "maxsize"
    fully_qualified_name: "tkinter.Wm.maxsize"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "minsize"
    fully_qualified_name: "tkinter.Wm.minsize"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "overrideredirect"
    fully_qualified_name: "tkinter.Wm.overrideredirect"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "positionfrom"
    fully_qualified_name: "tkinter.Wm.positionfrom"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "protocol"
    fully_qualified_name: "tkinter.Wm.protocol"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "resizable"
    fully_qualified_name: "tkinter.Wm.resizable"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "sizefrom"
    fully_qualified_name: "tkinter.Wm.sizefrom"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "state"
    fully_qualified_name: "tkinter.Wm.state"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "title"
    fully_qualified_name: "tkinter.Wm.title"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "transient"
    fully_qualified_name: "tkinter.Wm.transient"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "withdraw"
    fully_qualified_name: "tkinter.Wm.withdraw"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_ExceptionReportingCallback"
  fully_qualified_name: "tkinter._ExceptionReportingCallback"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "tkinter._ExceptionReportingCallback.__call__"
    return_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter._ExceptionReportingCallback"
        fully_qualified_name: "tkinter._ExceptionReportingCallback"
      }
    }
    parameters {
      name: "__exc"
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    parameters {
      name: "__val"
      type_annotation {
        pretty_printed_name: "builtins.BaseException"
        fully_qualified_name: "builtins.BaseException"
      }
    }
    parameters {
      name: "__tb"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__call__"
    fully_qualified_name: "tkinter._ExceptionReportingCallback.__call__"
    return_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter._ExceptionReportingCallback"
        fully_qualified_name: "tkinter._ExceptionReportingCallback"
      }
    }
    parameters {
      name: "__exc"
      type_annotation {
        pretty_printed_name: "Type[builtins.BaseException]"
        kind: TYPE
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
    }
    parameters {
      name: "__val"
      type_annotation {
        pretty_printed_name: "builtins.BaseException"
        fully_qualified_name: "builtins.BaseException"
      }
    }
    parameters {
      name: "__tb"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  is_protocol: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Tk"
  fully_qualified_name: "tkinter.Tk"
  super_classes: "tkinter.Misc"
  super_classes: "tkinter.Wm"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Tk.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Tk"
        fully_qualified_name: "tkinter.Tk"
      }
    }
    parameters {
      name: "screenName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "baseName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "className"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "useTk"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "sync"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "use"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "destroy"
    fully_qualified_name: "tkinter.Tk.destroy"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Tk"
        fully_qualified_name: "tkinter.Tk"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "readprofile"
    fully_qualified_name: "tkinter.Tk.readprofile"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Tk"
        fully_qualified_name: "tkinter.Tk"
      }
    }
    parameters {
      name: "baseName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "className"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "adderrorinfo"
    fully_qualified_name: "tkinter.Tk.adderrorinfo"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__msg"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "call"
    fully_qualified_name: "tkinter.Tk.call"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Tk"
        fully_qualified_name: "tkinter.Tk"
      }
    }
    parameters {
      name: "__command"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "createcommand"
    fully_qualified_name: "tkinter.Tk.createcommand"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__name"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__func"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "createfilehandler"
    fully_qualified_name: "tkinter.Tk.createfilehandler"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__file"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__mask"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__func"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "deletefilehandler"
    fully_qualified_name: "tkinter.Tk.deletefilehandler"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__file"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "createtimerhandler"
    fully_qualified_name: "tkinter.Tk.createtimerhandler"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__milliseconds"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__func"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dooneevent"
    fully_qualified_name: "tkinter.Tk.dooneevent"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Tk"
        fully_qualified_name: "tkinter.Tk"
      }
    }
    parameters {
      name: "__flags"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "eval"
    fully_qualified_name: "tkinter.Tk.eval"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Tk"
        fully_qualified_name: "tkinter.Tk"
      }
    }
    parameters {
      name: "__script"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "evalfile"
    fully_qualified_name: "tkinter.Tk.evalfile"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__fileName"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "exprboolean"
    fully_qualified_name: "tkinter.Tk.exprboolean"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__s"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "exprdouble"
    fully_qualified_name: "tkinter.Tk.exprdouble"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__s"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "exprlong"
    fully_qualified_name: "tkinter.Tk.exprlong"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__s"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "exprstring"
    fully_qualified_name: "tkinter.Tk.exprstring"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__s"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "globalgetvar"
    fully_qualified_name: "tkinter.Tk.globalgetvar"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "globalsetvar"
    fully_qualified_name: "tkinter.Tk.globalsetvar"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "globalunsetvar"
    fully_qualified_name: "tkinter.Tk.globalunsetvar"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "interpaddr"
    fully_qualified_name: "tkinter.Tk.interpaddr"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "loadtk"
    fully_qualified_name: "tkinter.Tk.loadtk"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Tk"
        fully_qualified_name: "tkinter.Tk"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "record"
    fully_qualified_name: "tkinter.Tk.record"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__script"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "split"
    fully_qualified_name: "tkinter.Tk.split"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__arg"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "splitlist"
    fully_qualified_name: "tkinter.Tk.splitlist"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "__arg"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "unsetvar"
    fully_qualified_name: "tkinter.Tk.unsetvar"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wantobjects"
    fully_qualified_name: "tkinter.Tk.wantobjects"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "willdispatch"
    fully_qualified_name: "tkinter.Tk.willdispatch"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Tk.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Tk.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Tk"
          fully_qualified_name: "tkinter.Tk"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "menu"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Menu"
          fully_qualified_name: "tkinter.Menu"
        }
        has_default: true
      }
      parameters {
        name: "padx"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "pady"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Tk.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Tk"
          fully_qualified_name: "tkinter.Tk"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "master"
    fully_qualified_name: "tkinter.Tk.master"
    type_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Tk.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "report_callback_exception"
    fully_qualified_name: "tkinter.Tk.report_callback_exception"
    type_annotation {
      pretty_printed_name: "tkinter._ExceptionReportingCallback"
      fully_qualified_name: "tkinter._ExceptionReportingCallback"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_InMiscTotal"
  fully_qualified_name: "tkinter._InMiscTotal"
  super_classes: "typing._TypedDict"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_InMiscNonTotal"
  fully_qualified_name: "tkinter._InMiscNonTotal"
  super_classes: "typing._TypedDict"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_PackInfo"
  fully_qualified_name: "tkinter._PackInfo"
  super_classes: "typing._TypedDict"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Pack"
  fully_qualified_name: "tkinter.Pack"
  super_classes: "builtins.object"
  methods {
    name: "pack_configure"
    fully_qualified_name: "tkinter.Pack.pack_configure"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Pack"
        fully_qualified_name: "tkinter.Pack"
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "after"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      has_default: true
    }
    parameters {
      name: "anchor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Anchor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "before"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      has_default: true
    }
    parameters {
      name: "expand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "fill"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "side"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "ipadx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "ipady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_ScreenUnits],Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]]]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]]"
          kind: TUPLE
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_ScreenUnits],Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]]]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]]"
          kind: TUPLE
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "in_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "pack_forget"
    fully_qualified_name: "tkinter.Pack.pack_forget"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Pack"
        fully_qualified_name: "tkinter.Pack"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "pack_info"
    fully_qualified_name: "tkinter.Pack.pack_info"
    return_annotation {
      pretty_printed_name: "TypedDict"
      kind: TYPED_DICT
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Pack"
        fully_qualified_name: "tkinter.Pack"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "pack"
    fully_qualified_name: "tkinter.Pack.pack"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "forget"
    fully_qualified_name: "tkinter.Pack.forget"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "propagate"
    fully_qualified_name: "tkinter.Pack.propagate"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_PlaceInfo"
  fully_qualified_name: "tkinter._PlaceInfo"
  super_classes: "typing._TypedDict"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Place"
  fully_qualified_name: "tkinter.Place"
  super_classes: "builtins.object"
  methods {
    name: "place_configure"
    fully_qualified_name: "tkinter.Place.place_configure"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Place"
        fully_qualified_name: "tkinter.Place"
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "anchor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Anchor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bordermode"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "x"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "y"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relheight"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.float]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      has_default: true
    }
    parameters {
      name: "relwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.float]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      has_default: true
    }
    parameters {
      name: "relx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.float]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      has_default: true
    }
    parameters {
      name: "rely"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.float]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      has_default: true
    }
    parameters {
      name: "in_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "place_forget"
    fully_qualified_name: "tkinter.Place.place_forget"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Place"
        fully_qualified_name: "tkinter.Place"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "place_info"
    fully_qualified_name: "tkinter.Place.place_info"
    return_annotation {
      pretty_printed_name: "TypedDict"
      kind: TYPED_DICT
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Place"
        fully_qualified_name: "tkinter.Place"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "place"
    fully_qualified_name: "tkinter.Place.place"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "info"
    fully_qualified_name: "tkinter.Place.info"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_GridInfo"
  fully_qualified_name: "tkinter._GridInfo"
  super_classes: "typing._TypedDict"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Grid"
  fully_qualified_name: "tkinter.Grid"
  super_classes: "builtins.object"
  methods {
    name: "grid_configure"
    fully_qualified_name: "tkinter.Grid.grid_configure"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Grid"
        fully_qualified_name: "tkinter.Grid"
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "column"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "columnspan"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "row"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "rowspan"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "ipadx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "ipady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_ScreenUnits],Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]]]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]]"
          kind: TUPLE
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_ScreenUnits],Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]]]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]]"
          kind: TUPLE
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "sticky"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "in_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grid_forget"
    fully_qualified_name: "tkinter.Grid.grid_forget"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Grid"
        fully_qualified_name: "tkinter.Grid"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grid_remove"
    fully_qualified_name: "tkinter.Grid.grid_remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Grid"
        fully_qualified_name: "tkinter.Grid"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "grid_info"
    fully_qualified_name: "tkinter.Grid.grid_info"
    return_annotation {
      pretty_printed_name: "TypedDict"
      kind: TYPED_DICT
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Grid"
        fully_qualified_name: "tkinter.Grid"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "grid"
    fully_qualified_name: "tkinter.Grid.grid"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "location"
    fully_qualified_name: "tkinter.Grid.location"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "size"
    fully_qualified_name: "tkinter.Grid.size"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "BaseWidget"
  fully_qualified_name: "tkinter.BaseWidget"
  super_classes: "tkinter.Misc"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.BaseWidget.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.BaseWidget"
        fully_qualified_name: "tkinter.BaseWidget"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "widgetName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "extra"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "destroy"
    fully_qualified_name: "tkinter.BaseWidget.destroy"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.BaseWidget"
        fully_qualified_name: "tkinter.BaseWidget"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "master"
    fully_qualified_name: "tkinter.BaseWidget.master"
    type_annotation {
      pretty_printed_name: "tkinter.Misc"
      fully_qualified_name: "tkinter.Misc"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "widgetName"
    fully_qualified_name: "tkinter.BaseWidget.widgetName"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Widget"
  fully_qualified_name: "tkinter.Widget"
  super_classes: "tkinter.BaseWidget"
  super_classes: "tkinter.Pack"
  super_classes: "tkinter.Place"
  super_classes: "tkinter.Grid"
  overloaded_methods {
    name: "bind"
    fullname: "tkinter.Widget.bind"
    definitions {
      name: "bind"
      fully_qualified_name: "tkinter.Widget.bind"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter._W"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "add"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "bind"
      fully_qualified_name: "tkinter.Widget.bind"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Widget"
          fully_qualified_name: "tkinter.Widget"
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "add"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "bind"
      fully_qualified_name: "tkinter.Widget.bind"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Widget"
          fully_qualified_name: "tkinter.Widget"
        }
      }
      parameters {
        name: "func"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "add"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Toplevel"
  fully_qualified_name: "tkinter.Toplevel"
  super_classes: "tkinter.BaseWidget"
  super_classes: "tkinter.Wm"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Toplevel.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Toplevel"
        fully_qualified_name: "tkinter.Toplevel"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "colormap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],tkinter.Misc]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      has_default: true
    }
    parameters {
      name: "container"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "menu"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "screen"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "use"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "visual"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,Tuple[builtins.str,builtins.int]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Toplevel.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Toplevel.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Toplevel"
          fully_qualified_name: "tkinter.Toplevel"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "menu"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Menu"
          fully_qualified_name: "tkinter.Menu"
        }
        has_default: true
      }
      parameters {
        name: "padx"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "pady"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Toplevel.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Toplevel"
          fully_qualified_name: "tkinter.Toplevel"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Toplevel.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Button"
  fully_qualified_name: "tkinter.Button"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Button.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Button"
        fully_qualified_name: "tkinter.Button"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "anchor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Anchor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ButtonCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "default"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "disabledforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "overrelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "repeatdelay"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "repeatinterval"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "wraplength"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "flash"
    fully_qualified_name: "tkinter.Button.flash"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Button"
        fully_qualified_name: "tkinter.Button"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "invoke"
    fully_qualified_name: "tkinter.Button.invoke"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Button"
        fully_qualified_name: "tkinter.Button"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Button.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Button.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Button"
          fully_qualified_name: "tkinter.Button"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "activebackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bitmap"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ButtonCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "compound"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Compound]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "default"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "overrelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "padx"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "pady"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "repeatdelay"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "repeatinterval"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "underline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "wraplength"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Button.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Button"
          fully_qualified_name: "tkinter.Button"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Button.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Canvas"
  fully_qualified_name: "tkinter.Canvas"
  super_classes: "tkinter.Widget"
  super_classes: "tkinter.XView"
  super_classes: "tkinter.YView"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Canvas.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "closeenough"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "confine"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "insertbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "insertborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "insertofftime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertontime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "offset"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "scrollregion"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]],builtins.tuple[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]]"
          kind: TUPLE
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
        }
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    parameters {
      name: "selectbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "xscrollincrement"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "yscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "yscrollincrement"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Canvas.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "closeenough"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "confine"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "insertbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "insertborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "insertofftime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertontime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "offset"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "scrollregion"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]],Tuple[]]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]]"
          kind: TUPLE
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
        }
        args {
          pretty_printed_name: "Tuple[]"
          kind: TUPLE
        }
      }
      has_default: true
    }
    parameters {
      name: "selectbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "xscrollincrement"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "yscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "yscrollincrement"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addtag"
    fully_qualified_name: "tkinter.Canvas.addtag"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addtag_above"
    fully_qualified_name: "tkinter.Canvas.addtag_above"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "newtag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addtag_all"
    fully_qualified_name: "tkinter.Canvas.addtag_all"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "newtag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addtag_below"
    fully_qualified_name: "tkinter.Canvas.addtag_below"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "newtag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addtag_closest"
    fully_qualified_name: "tkinter.Canvas.addtag_closest"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "newtag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "halo"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_ScreenUnits],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addtag_enclosed"
    fully_qualified_name: "tkinter.Canvas.addtag_enclosed"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "newtag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "x1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "x2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addtag_overlapping"
    fully_qualified_name: "tkinter.Canvas.addtag_overlapping"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "newtag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "x1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "x2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addtag_withtag"
    fully_qualified_name: "tkinter.Canvas.addtag_withtag"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "newtag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "find"
    fully_qualified_name: "tkinter.Canvas.find"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "find_above"
    fully_qualified_name: "tkinter.Canvas.find_above"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "find_above"
    fully_qualified_name: "tkinter.Canvas.find_above"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.int]"
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "find_all"
    fully_qualified_name: "tkinter.Canvas.find_all"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "find_all"
    fully_qualified_name: "tkinter.Canvas.find_all"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.int]"
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "find_below"
    fully_qualified_name: "tkinter.Canvas.find_below"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "find_below"
    fully_qualified_name: "tkinter.Canvas.find_below"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.int]"
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "find_closest"
    fully_qualified_name: "tkinter.Canvas.find_closest"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "halo"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_ScreenUnits],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "find_closest"
    fully_qualified_name: "tkinter.Canvas.find_closest"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.int]"
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "halo"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_ScreenUnits],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "find_enclosed"
    fully_qualified_name: "tkinter.Canvas.find_enclosed"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "x1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "x2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "find_enclosed"
    fully_qualified_name: "tkinter.Canvas.find_enclosed"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.int]"
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "x1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "x2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "find_overlapping"
    fully_qualified_name: "tkinter.Canvas.find_overlapping"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "x1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "x2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "find_overlapping"
    fully_qualified_name: "tkinter.Canvas.find_overlapping"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.int]"
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "x1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "x2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "y2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "find_withtag"
    fully_qualified_name: "tkinter.Canvas.find_withtag"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "find_withtag"
    fully_qualified_name: "tkinter.Canvas.find_withtag"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.int]"
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "bbox"
    fully_qualified_name: "tkinter.Canvas.bbox"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_unbind"
    fully_qualified_name: "tkinter.Canvas.tag_unbind"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "sequence"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "funcid"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "canvasx"
    fully_qualified_name: "tkinter.Canvas.canvasx"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "screenx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "gridspacing"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "canvasy"
    fully_qualified_name: "tkinter.Canvas.canvasy"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "screeny"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "gridspacing"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "create_arc"
    fully_qualified_name: "tkinter.Canvas.create_arc"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "create_bitmap"
    fully_qualified_name: "tkinter.Canvas.create_bitmap"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "create_image"
    fully_qualified_name: "tkinter.Canvas.create_image"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dchars"
    fully_qualified_name: "tkinter.Canvas.dchars"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "delete"
    fully_qualified_name: "tkinter.Canvas.delete"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagsOrCanvasIds"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "focus"
    fully_qualified_name: "tkinter.Canvas.focus"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "gettags"
    fully_qualified_name: "tkinter.Canvas.gettags"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "__tagOrId"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "gettags"
    fully_qualified_name: "tkinter.Canvas.gettags"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "__tagOrId"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "icursor"
    fully_qualified_name: "tkinter.Canvas.icursor"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "index"
    fully_qualified_name: "tkinter.Canvas.index"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "tkinter.Canvas.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "itemcget"
    fully_qualified_name: "tkinter.Canvas.itemcget"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "option"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "itemconfigure"
    fully_qualified_name: "tkinter.Canvas.itemconfigure"
    return_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "move"
    fully_qualified_name: "tkinter.Canvas.move"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "postscript"
    fully_qualified_name: "tkinter.Canvas.postscript"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_lower"
    fully_qualified_name: "tkinter.Canvas.tag_lower"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "__first"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "__second"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "lower"
    fully_qualified_name: "tkinter.Canvas.lower"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "__first"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "__second"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_raise"
    fully_qualified_name: "tkinter.Canvas.tag_raise"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "__first"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "__second"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tkraise"
    fully_qualified_name: "tkinter.Canvas.tkraise"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "__first"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "__second"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "lift"
    fully_qualified_name: "tkinter.Canvas.lift"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "__first"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "__second"
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "scale"
    fully_qualified_name: "tkinter.Canvas.scale"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "scan_mark"
    fully_qualified_name: "tkinter.Canvas.scan_mark"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "scan_dragto"
    fully_qualified_name: "tkinter.Canvas.scan_dragto"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "gain"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "select_adjust"
    fully_qualified_name: "tkinter.Canvas.select_adjust"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "select_clear"
    fully_qualified_name: "tkinter.Canvas.select_clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "select_from"
    fully_qualified_name: "tkinter.Canvas.select_from"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "select_item"
    fully_qualified_name: "tkinter.Canvas.select_item"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "select_to"
    fully_qualified_name: "tkinter.Canvas.select_to"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "type"
    fully_qualified_name: "tkinter.Canvas.type"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "moveto"
    fully_qualified_name: "tkinter.Canvas.moveto"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Canvas"
        fully_qualified_name: "tkinter.Canvas"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],builtins.float]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      has_default: true
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],builtins.float]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      has_default: true
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Canvas.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Canvas.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "closeenough"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "confine"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "insertbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "insertborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "insertofftime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertontime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "scrollregion"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]],builtins.tuple[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]]"
            kind: TUPLE
            args {
              pretty_printed_name: "UnboundType[_ScreenUnits]"
              kind: UNBOUND
            }
            args {
              pretty_printed_name: "UnboundType[_ScreenUnits]"
              kind: UNBOUND
            }
            args {
              pretty_printed_name: "UnboundType[_ScreenUnits]"
              kind: UNBOUND
            }
            args {
              pretty_printed_name: "UnboundType[_ScreenUnits]"
              kind: UNBOUND
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "selectbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "xscrollincrement"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "yscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "yscrollincrement"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Canvas.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Canvas.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Canvas.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "closeenough"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "confine"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "insertbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "insertborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "insertofftime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertontime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "scrollregion"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]],Tuple[]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits],UnboundType[_ScreenUnits]]"
            kind: TUPLE
            args {
              pretty_printed_name: "UnboundType[_ScreenUnits]"
              kind: UNBOUND
            }
            args {
              pretty_printed_name: "UnboundType[_ScreenUnits]"
              kind: UNBOUND
            }
            args {
              pretty_printed_name: "UnboundType[_ScreenUnits]"
              kind: UNBOUND
            }
            args {
              pretty_printed_name: "UnboundType[_ScreenUnits]"
              kind: UNBOUND
            }
          }
          args {
            pretty_printed_name: "Tuple[]"
            kind: TUPLE
          }
        }
        has_default: true
      }
      parameters {
        name: "selectbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "xscrollincrement"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "yscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "yscrollincrement"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Canvas.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "tag_bind"
    fullname: "tkinter.Canvas.tag_bind"
    definitions {
      name: "tag_bind"
      fully_qualified_name: "tkinter.Canvas.tag_bind"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "tagOrId"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "add"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "tag_bind"
      fully_qualified_name: "tkinter.Canvas.tag_bind"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "tagOrId"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "add"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "tag_bind"
      fully_qualified_name: "tkinter.Canvas.tag_bind"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "tagOrId"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      parameters {
        name: "func"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "add"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "coords"
    fullname: "tkinter.Canvas.coords"
    definitions {
      name: "coords"
      fully_qualified_name: "tkinter.Canvas.coords"
      return_annotation {
        pretty_printed_name: "builtins.list[builtins.float]"
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__tagOrId"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "coords"
      fully_qualified_name: "tkinter.Canvas.coords"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__tagOrId"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      parameters {
        name: "__args"
        type_annotation {
          pretty_printed_name: "Union[builtins.list[builtins.int],builtins.list[builtins.float],Tuple[builtins.float,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.float,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "coords"
      fully_qualified_name: "tkinter.Canvas.coords"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__tagOrId"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      parameters {
        name: "__x1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "coords"
    fullname: "tkinter.Canvas.coords"
    definitions {
      name: "coords"
      fully_qualified_name: "tkinter.Canvas.coords"
      return_annotation {
        pretty_printed_name: "builtins.list[builtins.float]"
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__tagOrId"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "coords"
      fully_qualified_name: "tkinter.Canvas.coords"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__tagOrId"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      parameters {
        name: "__args"
        type_annotation {
          pretty_printed_name: "Union[builtins.list[builtins.int],builtins.list[builtins.float],builtins.tuple[builtins.float]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "coords"
      fully_qualified_name: "tkinter.Canvas.coords"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__tagOrId"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      parameters {
        name: "__x1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "create_line"
    fullname: "tkinter.Canvas.create_line"
    definitions {
      name: "create_line"
      fully_qualified_name: "tkinter.Canvas.create_line"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__x0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__x1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "arrow"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "arrowshape"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        has_default: true
      }
      parameters {
        name: "capstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "joinstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "smooth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "splinesteps"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_line"
      fully_qualified_name: "tkinter.Canvas.create_line"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__xy_pair_0"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "__xy_pair_1"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "arrow"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "arrowshape"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        has_default: true
      }
      parameters {
        name: "capstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "joinstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "smooth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "splinesteps"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_line"
      fully_qualified_name: "tkinter.Canvas.create_line"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__coords"
        type_annotation {
          pretty_printed_name: "Union[Tuple[builtins.float,builtins.float,builtins.float,builtins.float],Tuple[Tuple[builtins.float,builtins.float],Tuple[builtins.float,builtins.float]],builtins.list[builtins.int],builtins.list[builtins.float],builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Tuple[builtins.float,builtins.float]]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float,builtins.float]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
          }
          args {
            pretty_printed_name: "Tuple[Tuple[builtins.float,builtins.float],Tuple[builtins.float,builtins.float]]"
            kind: TUPLE
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.int,builtins.int]]"
            args {
              pretty_printed_name: "Tuple[builtins.int,builtins.int]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.float,builtins.float]]"
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            fully_qualified_name: "builtins.list"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "arrow"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "arrowshape"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        has_default: true
      }
      parameters {
        name: "capstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "joinstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "smooth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "splinesteps"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "create_line"
    fullname: "tkinter.Canvas.create_line"
    definitions {
      name: "create_line"
      fully_qualified_name: "tkinter.Canvas.create_line"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__x0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__x1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "arrow"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "arrowshape"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        has_default: true
      }
      parameters {
        name: "capstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "joinstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "smooth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "splinesteps"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_line"
      fully_qualified_name: "tkinter.Canvas.create_line"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__xy_pair_0"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "__xy_pair_1"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "arrow"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "arrowshape"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        has_default: true
      }
      parameters {
        name: "capstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "joinstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "smooth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "splinesteps"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_line"
      fully_qualified_name: "tkinter.Canvas.create_line"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__coords"
        type_annotation {
          pretty_printed_name: "Union[Tuple[builtins.float,builtins.float,builtins.float,builtins.float],Tuple[Tuple[builtins.float,builtins.float],Tuple[builtins.float,builtins.float]],builtins.list[builtins.int],builtins.list[builtins.float],builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Tuple[builtins.float,builtins.float]]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float,builtins.float]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
          }
          args {
            pretty_printed_name: "Tuple[Tuple[builtins.float,builtins.float],Tuple[builtins.float,builtins.float]]"
            kind: TUPLE
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.int,builtins.int]]"
            args {
              pretty_printed_name: "Tuple[builtins.int,builtins.int]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.float,builtins.float]]"
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            fully_qualified_name: "builtins.list"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "arrow"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "arrowshape"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
        has_default: true
      }
      parameters {
        name: "capstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "joinstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "smooth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "splinesteps"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "create_oval"
    fullname: "tkinter.Canvas.create_oval"
    definitions {
      name: "create_oval"
      fully_qualified_name: "tkinter.Canvas.create_oval"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__x0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__x1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_oval"
      fully_qualified_name: "tkinter.Canvas.create_oval"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__xy_pair_0"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "__xy_pair_1"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_oval"
      fully_qualified_name: "tkinter.Canvas.create_oval"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__coords"
        type_annotation {
          pretty_printed_name: "Union[Tuple[builtins.float,builtins.float,builtins.float,builtins.float],Tuple[Tuple[builtins.float,builtins.float],Tuple[builtins.float,builtins.float]],builtins.list[builtins.int],builtins.list[builtins.float],builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Tuple[builtins.float,builtins.float]]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float,builtins.float]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
          }
          args {
            pretty_printed_name: "Tuple[Tuple[builtins.float,builtins.float],Tuple[builtins.float,builtins.float]]"
            kind: TUPLE
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.int,builtins.int]]"
            args {
              pretty_printed_name: "Tuple[builtins.int,builtins.int]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.float,builtins.float]]"
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            fully_qualified_name: "builtins.list"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "create_oval"
    fullname: "tkinter.Canvas.create_oval"
    definitions {
      name: "create_oval"
      fully_qualified_name: "tkinter.Canvas.create_oval"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__x0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__x1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_oval"
      fully_qualified_name: "tkinter.Canvas.create_oval"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__xy_pair_0"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "__xy_pair_1"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_oval"
      fully_qualified_name: "tkinter.Canvas.create_oval"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__coords"
        type_annotation {
          pretty_printed_name: "Union[Tuple[builtins.float,builtins.float,builtins.float,builtins.float],Tuple[Tuple[builtins.float,builtins.float],Tuple[builtins.float,builtins.float]],builtins.list[builtins.int],builtins.list[builtins.float],builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Tuple[builtins.float,builtins.float]]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float,builtins.float]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
          }
          args {
            pretty_printed_name: "Tuple[Tuple[builtins.float,builtins.float],Tuple[builtins.float,builtins.float]]"
            kind: TUPLE
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.int,builtins.int]]"
            args {
              pretty_printed_name: "Tuple[builtins.int,builtins.int]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.float,builtins.float]]"
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            fully_qualified_name: "builtins.list"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "create_polygon"
    fullname: "tkinter.Canvas.create_polygon"
    definitions {
      name: "create_polygon"
      fully_qualified_name: "tkinter.Canvas.create_polygon"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__x0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__x1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "xy_pairs"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "joinstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "smooth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "splinesteps"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_polygon"
      fully_qualified_name: "tkinter.Canvas.create_polygon"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__xy_pair_0"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "__xy_pair_1"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "xy_pairs"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "joinstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "smooth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "splinesteps"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_polygon"
      fully_qualified_name: "tkinter.Canvas.create_polygon"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__coords"
        type_annotation {
          pretty_printed_name: "Union[Tuple[builtins.float,Any],Tuple[Tuple[builtins.float,builtins.float],Any],builtins.list[builtins.int],builtins.list[builtins.float],builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Tuple[builtins.float,builtins.float]]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.float,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          args {
            pretty_printed_name: "Tuple[Tuple[builtins.float,builtins.float],Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.int,builtins.int]]"
            args {
              pretty_printed_name: "Tuple[builtins.int,builtins.int]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.float,builtins.float]]"
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            fully_qualified_name: "builtins.list"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "joinstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "smooth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "splinesteps"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "create_polygon"
    fullname: "tkinter.Canvas.create_polygon"
    definitions {
      name: "create_polygon"
      fully_qualified_name: "tkinter.Canvas.create_polygon"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__x0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__x1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "xy_pairs"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "joinstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "smooth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "splinesteps"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_polygon"
      fully_qualified_name: "tkinter.Canvas.create_polygon"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__xy_pair_0"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "__xy_pair_1"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "xy_pairs"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "joinstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "smooth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "splinesteps"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_polygon"
      fully_qualified_name: "tkinter.Canvas.create_polygon"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__coords"
        type_annotation {
          pretty_printed_name: "Union[builtins.tuple[builtins.float],builtins.tuple[Tuple[builtins.float,builtins.float]],builtins.list[builtins.int],builtins.list[builtins.float],builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Tuple[builtins.float,builtins.float]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.tuple[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.tuple[Tuple[builtins.float,builtins.float]]"
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.int,builtins.int]]"
            args {
              pretty_printed_name: "Tuple[builtins.int,builtins.int]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.float,builtins.float]]"
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            fully_qualified_name: "builtins.list"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "joinstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "smooth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "splinesteps"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "create_rectangle"
    fullname: "tkinter.Canvas.create_rectangle"
    definitions {
      name: "create_rectangle"
      fully_qualified_name: "tkinter.Canvas.create_rectangle"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__x0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__x1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_rectangle"
      fully_qualified_name: "tkinter.Canvas.create_rectangle"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__xy_pair_0"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "__xy_pair_1"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_rectangle"
      fully_qualified_name: "tkinter.Canvas.create_rectangle"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__coords"
        type_annotation {
          pretty_printed_name: "Union[Tuple[builtins.float,builtins.float,builtins.float,builtins.float],Tuple[Tuple[builtins.float,builtins.float],Tuple[builtins.float,builtins.float]],builtins.list[builtins.int],builtins.list[builtins.float],builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Tuple[builtins.float,builtins.float]]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float,builtins.float]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
          }
          args {
            pretty_printed_name: "Tuple[Tuple[builtins.float,builtins.float],Tuple[builtins.float,builtins.float]]"
            kind: TUPLE
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.int,builtins.int]]"
            args {
              pretty_printed_name: "Tuple[builtins.int,builtins.int]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.float,builtins.float]]"
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            fully_qualified_name: "builtins.list"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "create_rectangle"
    fullname: "tkinter.Canvas.create_rectangle"
    definitions {
      name: "create_rectangle"
      fully_qualified_name: "tkinter.Canvas.create_rectangle"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__x0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y0"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__x1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y1"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_rectangle"
      fully_qualified_name: "tkinter.Canvas.create_rectangle"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__xy_pair_0"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "__xy_pair_1"
        type_annotation {
          pretty_printed_name: "Tuple[builtins.float,builtins.float]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_rectangle"
      fully_qualified_name: "tkinter.Canvas.create_rectangle"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__coords"
        type_annotation {
          pretty_printed_name: "Union[Tuple[builtins.float,builtins.float,builtins.float,builtins.float],Tuple[Tuple[builtins.float,builtins.float],Tuple[builtins.float,builtins.float]],builtins.list[builtins.int],builtins.list[builtins.float],builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Tuple[builtins.float,builtins.float]]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float,builtins.float]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
          }
          args {
            pretty_printed_name: "Tuple[Tuple[builtins.float,builtins.float],Tuple[builtins.float,builtins.float]]"
            kind: TUPLE
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.int,builtins.int]]"
            args {
              pretty_printed_name: "Tuple[builtins.int,builtins.int]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[Tuple[builtins.float,builtins.float]]"
            args {
              pretty_printed_name: "Tuple[builtins.float,builtins.float]"
              kind: TUPLE
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
              args {
                pretty_printed_name: "builtins.float"
                fully_qualified_name: "builtins.float"
              }
            }
            fully_qualified_name: "builtins.list"
          }
        }
      }
      parameters {
        name: "activedash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activewidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "dash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "dashoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disableddash"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledoutlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "outlineoffset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "outlinestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "create_text"
    fullname: "tkinter.Canvas.create_text"
    definitions {
      name: "create_text"
      fully_qualified_name: "tkinter.Canvas.create_text"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__x"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_text"
      fully_qualified_name: "tkinter.Canvas.create_text"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__coords"
        type_annotation {
          pretty_printed_name: "Union[Tuple[builtins.float,builtins.float],builtins.list[builtins.int],builtins.list[builtins.float]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.float,builtins.float]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
        }
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "create_text"
    fullname: "tkinter.Canvas.create_text"
    definitions {
      name: "create_text"
      fully_qualified_name: "tkinter.Canvas.create_text"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__x"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_text"
      fully_qualified_name: "tkinter.Canvas.create_text"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__coords"
        type_annotation {
          pretty_printed_name: "Union[Tuple[builtins.float,builtins.float],builtins.list[builtins.int],builtins.list[builtins.float]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.float,builtins.float]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
        }
      }
      parameters {
        name: "activefill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activestipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disabledfill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "fill"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "stipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "create_window"
    fullname: "tkinter.Canvas.create_window"
    definitions {
      name: "create_window"
      fully_qualified_name: "tkinter.Canvas.create_window"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__x"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "window"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Widget"
          fully_qualified_name: "tkinter.Widget"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_window"
      fully_qualified_name: "tkinter.Canvas.create_window"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__coords"
        type_annotation {
          pretty_printed_name: "Union[Tuple[builtins.float,builtins.float],builtins.list[builtins.int],builtins.list[builtins.float]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.float,builtins.float]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
        }
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "window"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Widget"
          fully_qualified_name: "tkinter.Widget"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "create_window"
    fullname: "tkinter.Canvas.create_window"
    definitions {
      name: "create_window"
      fully_qualified_name: "tkinter.Canvas.create_window"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__x"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "__y"
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "window"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Widget"
          fully_qualified_name: "tkinter.Widget"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "create_window"
      fully_qualified_name: "tkinter.Canvas.create_window"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__coords"
        type_annotation {
          pretty_printed_name: "Union[Tuple[builtins.float,builtins.float],builtins.list[builtins.int],builtins.list[builtins.float]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.float,builtins.float]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.float]"
            args {
              pretty_printed_name: "builtins.float"
              fully_qualified_name: "builtins.float"
            }
            fully_qualified_name: "builtins.list"
          }
        }
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "window"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Widget"
          fully_qualified_name: "tkinter.Widget"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "dtag"
    fullname: "tkinter.Canvas.dtag"
    definitions {
      name: "dtag"
      fully_qualified_name: "tkinter.Canvas.dtag"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__tag"
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "__tag_to_delete"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "dtag"
      fully_qualified_name: "tkinter.Canvas.dtag"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Canvas"
          fully_qualified_name: "tkinter.Canvas"
        }
      }
      parameters {
        name: "__id"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "__tag_to_delete"
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Canvas.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "itemconfig"
    fully_qualified_name: "tkinter.Canvas.itemconfig"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Checkbutton"
  fully_qualified_name: "tkinter.Checkbutton"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Checkbutton.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Checkbutton"
        fully_qualified_name: "tkinter.Checkbutton"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "anchor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Anchor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ButtonCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "disabledforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "indicatoron"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "offrelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "offvalue"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "onvalue"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "overrelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectimage"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "tristateimage"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "tristatevalue"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "variable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[tkinter.Variable,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "wraplength"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "deselect"
    fully_qualified_name: "tkinter.Checkbutton.deselect"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Checkbutton"
        fully_qualified_name: "tkinter.Checkbutton"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "flash"
    fully_qualified_name: "tkinter.Checkbutton.flash"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Checkbutton"
        fully_qualified_name: "tkinter.Checkbutton"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "invoke"
    fully_qualified_name: "tkinter.Checkbutton.invoke"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Checkbutton"
        fully_qualified_name: "tkinter.Checkbutton"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "select"
    fully_qualified_name: "tkinter.Checkbutton.select"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Checkbutton"
        fully_qualified_name: "tkinter.Checkbutton"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "toggle"
    fully_qualified_name: "tkinter.Checkbutton.toggle"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Checkbutton"
        fully_qualified_name: "tkinter.Checkbutton"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Checkbutton.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Checkbutton.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Checkbutton"
          fully_qualified_name: "tkinter.Checkbutton"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "activebackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bitmap"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ButtonCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "compound"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Compound]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disabledforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "indicatoron"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offrelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "offvalue"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "onvalue"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "overrelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "padx"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "pady"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectimage"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "tristateimage"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "tristatevalue"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "underline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "variable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[tkinter.Variable,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "tkinter.Variable"
            fully_qualified_name: "tkinter.Variable"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "wraplength"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Checkbutton.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Checkbutton"
          fully_qualified_name: "tkinter.Checkbutton"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Checkbutton.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Entry"
  fully_qualified_name: "tkinter.Entry"
  super_classes: "tkinter.Widget"
  super_classes: "tkinter.XView"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Entry.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "disabledbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "disabledforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "exportselection"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "insertbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "insertborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "insertofftime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertontime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "invalidcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "invcmd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "readonlybackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "show"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "validate"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "validatecommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "vcmd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "delete"
    fully_qualified_name: "tkinter.Entry.delete"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "last"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_EntryIndex],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_EntryIndex]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.Entry.get"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "icursor"
    fully_qualified_name: "tkinter.Entry.icursor"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "index"
    fully_qualified_name: "tkinter.Entry.index"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "tkinter.Entry.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "string"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "scan_mark"
    fully_qualified_name: "tkinter.Entry.scan_mark"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "scan_dragto"
    fully_qualified_name: "tkinter.Entry.scan_dragto"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_adjust"
    fully_qualified_name: "tkinter.Entry.selection_adjust"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_clear"
    fully_qualified_name: "tkinter.Entry.selection_clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_from"
    fully_qualified_name: "tkinter.Entry.selection_from"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_present"
    fully_qualified_name: "tkinter.Entry.selection_present"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_range"
    fully_qualified_name: "tkinter.Entry.selection_range"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_to"
    fully_qualified_name: "tkinter.Entry.selection_to"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Entry"
        fully_qualified_name: "tkinter.Entry"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Entry.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Entry.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Entry"
          fully_qualified_name: "tkinter.Entry"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disabledbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "insertbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "insertborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "insertofftime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertontime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "invalidcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "invcmd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "readonlybackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "show"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "validate"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "validatecommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "vcmd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Entry.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Entry"
          fully_qualified_name: "tkinter.Entry"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Entry.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "select_adjust"
    fully_qualified_name: "tkinter.Entry.select_adjust"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "select_clear"
    fully_qualified_name: "tkinter.Entry.select_clear"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "select_from"
    fully_qualified_name: "tkinter.Entry.select_from"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "select_present"
    fully_qualified_name: "tkinter.Entry.select_present"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "select_range"
    fully_qualified_name: "tkinter.Entry.select_range"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "select_to"
    fully_qualified_name: "tkinter.Entry.select_to"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Frame"
  fully_qualified_name: "tkinter.Frame"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Frame.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Frame"
        fully_qualified_name: "tkinter.Frame"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "colormap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],tkinter.Misc]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      has_default: true
    }
    parameters {
      name: "container"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "visual"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,Tuple[builtins.str,builtins.int]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Frame.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Frame.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Frame"
          fully_qualified_name: "tkinter.Frame"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "padx"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "pady"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Frame.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Frame"
          fully_qualified_name: "tkinter.Frame"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Frame.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Label"
  fully_qualified_name: "tkinter.Label"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Label.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Label"
        fully_qualified_name: "tkinter.Label"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "anchor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Anchor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "disabledforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "wraplength"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Label.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Label.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Label"
          fully_qualified_name: "tkinter.Label"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "activebackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bitmap"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "compound"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Compound]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disabledforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "padx"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "pady"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "underline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "wraplength"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Label.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Label"
          fully_qualified_name: "tkinter.Label"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Label.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Listbox"
  fully_qualified_name: "tkinter.Listbox"
  super_classes: "tkinter.Widget"
  super_classes: "tkinter.XView"
  super_classes: "tkinter.YView"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Listbox.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "activestyle"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "disabledforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "exportselection"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "listvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectmode"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "setgrid"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "yscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "activate"
    fully_qualified_name: "tkinter.Listbox.activate"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "bbox"
    fully_qualified_name: "tkinter.Listbox.bbox"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "curselection"
    fully_qualified_name: "tkinter.Listbox.curselection"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "delete"
    fully_qualified_name: "tkinter.Listbox.delete"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "last"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.Listbox.get"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "last"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "index"
    fully_qualified_name: "tkinter.Listbox.index"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "tkinter.Listbox.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "elements"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.float]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "nearest"
    fully_qualified_name: "tkinter.Listbox.nearest"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "scan_mark"
    fully_qualified_name: "tkinter.Listbox.scan_mark"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "scan_dragto"
    fully_qualified_name: "tkinter.Listbox.scan_dragto"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "see"
    fully_qualified_name: "tkinter.Listbox.see"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_anchor"
    fully_qualified_name: "tkinter.Listbox.selection_anchor"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_clear"
    fully_qualified_name: "tkinter.Listbox.selection_clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "last"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_includes"
    fully_qualified_name: "tkinter.Listbox.selection_includes"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_set"
    fully_qualified_name: "tkinter.Listbox.selection_set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "last"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "size"
    fully_qualified_name: "tkinter.Listbox.size"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "itemcget"
    fully_qualified_name: "tkinter.Listbox.itemcget"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "option"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "itemconfigure"
    fully_qualified_name: "tkinter.Listbox.itemconfigure"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Listbox"
        fully_qualified_name: "tkinter.Listbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Listbox.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Listbox.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Listbox"
          fully_qualified_name: "tkinter.Listbox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "activestyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disabledforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "listvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectmode"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "setgrid"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "yscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Listbox.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Listbox"
          fully_qualified_name: "tkinter.Listbox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Listbox.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "select_anchor"
    fully_qualified_name: "tkinter.Listbox.select_anchor"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "select_clear"
    fully_qualified_name: "tkinter.Listbox.select_clear"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "select_includes"
    fully_qualified_name: "tkinter.Listbox.select_includes"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "select_set"
    fully_qualified_name: "tkinter.Listbox.select_set"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "itemconfig"
    fully_qualified_name: "tkinter.Listbox.itemconfig"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Menu"
  fully_qualified_name: "tkinter.Menu"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Menu.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "disabledforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "postcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "tearoff"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "tearoffcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "title"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "type"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tk_popup"
    fully_qualified_name: "tkinter.Menu.tk_popup"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "entry"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "activate"
    fully_qualified_name: "tkinter.Menu.activate"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "add"
    fully_qualified_name: "tkinter.Menu.add"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "itemType"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "tkinter.Menu.insert"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "itemType"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "add_cascade"
    fully_qualified_name: "tkinter.Menu.add_cascade"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "accelerator"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "columnbreak"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "hidemargin"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "label"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "menu"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "add_checkbutton"
    fully_qualified_name: "tkinter.Menu.add_checkbutton"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "accelerator"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "columnbreak"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "hidemargin"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "indicatoron"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "label"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "offvalue"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "onvalue"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "selectcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectimage"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "variable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "add_command"
    fully_qualified_name: "tkinter.Menu.add_command"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "accelerator"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "columnbreak"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "hidemargin"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "label"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "add_radiobutton"
    fully_qualified_name: "tkinter.Menu.add_radiobutton"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "accelerator"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "columnbreak"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "hidemargin"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "indicatoron"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "label"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectimage"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "value"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "variable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "add_separator"
    fully_qualified_name: "tkinter.Menu.add_separator"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert_cascade"
    fully_qualified_name: "tkinter.Menu.insert_cascade"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "accelerator"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "columnbreak"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "hidemargin"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "label"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "menu"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert_checkbutton"
    fully_qualified_name: "tkinter.Menu.insert_checkbutton"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "accelerator"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "columnbreak"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "hidemargin"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "indicatoron"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "label"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "offvalue"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "onvalue"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "selectcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectimage"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "variable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert_command"
    fully_qualified_name: "tkinter.Menu.insert_command"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "accelerator"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "columnbreak"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "hidemargin"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "label"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert_radiobutton"
    fully_qualified_name: "tkinter.Menu.insert_radiobutton"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "accelerator"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "columnbreak"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "hidemargin"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "indicatoron"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "label"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectimage"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "value"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "variable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert_separator"
    fully_qualified_name: "tkinter.Menu.insert_separator"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "delete"
    fully_qualified_name: "tkinter.Menu.delete"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "index2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "entrycget"
    fully_qualified_name: "tkinter.Menu.entrycget"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "option"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "entryconfigure"
    fully_qualified_name: "tkinter.Menu.entryconfigure"
    return_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "index"
    fully_qualified_name: "tkinter.Menu.index"
    return_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "invoke"
    fully_qualified_name: "tkinter.Menu.invoke"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "post"
    fully_qualified_name: "tkinter.Menu.post"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "type"
    fully_qualified_name: "tkinter.Menu.type"
    return_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "unpost"
    fully_qualified_name: "tkinter.Menu.unpost"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "xposition"
    fully_qualified_name: "tkinter.Menu.xposition"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "yposition"
    fully_qualified_name: "tkinter.Menu.yposition"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Menu.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Menu.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Menu"
          fully_qualified_name: "tkinter.Menu"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "activebackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "activeforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disabledforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "postcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "tearoff"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "tearoffcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "title"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "type"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Menu.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Menu"
          fully_qualified_name: "tkinter.Menu"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Menu.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "entryconfig"
    fully_qualified_name: "tkinter.Menu.entryconfig"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Menubutton"
  fully_qualified_name: "tkinter.Menubutton"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Menubutton.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Menubutton"
        fully_qualified_name: "tkinter.Menubutton"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "anchor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Anchor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "direction"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "disabledforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "indicatoron"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "menu"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "wraplength"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Menubutton.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Menubutton.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Menubutton"
          fully_qualified_name: "tkinter.Menubutton"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "activebackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bitmap"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "compound"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Compound]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "direction"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "disabledforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "indicatoron"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "menu"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Menu"
          fully_qualified_name: "tkinter.Menu"
        }
        has_default: true
      }
      parameters {
        name: "padx"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "pady"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "underline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "wraplength"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Menubutton.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Menubutton"
          fully_qualified_name: "tkinter.Menubutton"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Menubutton.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Message"
  fully_qualified_name: "tkinter.Message"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Message.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Message"
        fully_qualified_name: "tkinter.Message"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "anchor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Anchor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "aspect"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Message.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Message.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Message"
          fully_qualified_name: "tkinter.Message"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "aspect"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "padx"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "pady"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Message.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Message"
          fully_qualified_name: "tkinter.Message"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Message.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Radiobutton"
  fully_qualified_name: "tkinter.Radiobutton"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Radiobutton.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Radiobutton"
        fully_qualified_name: "tkinter.Radiobutton"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activeforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "anchor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Anchor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bitmap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ButtonCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "disabledforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "indicatoron"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "offrelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "overrelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectimage"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "tristateimage"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "tristatevalue"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "value"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "variable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[tkinter.Variable,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "wraplength"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "deselect"
    fully_qualified_name: "tkinter.Radiobutton.deselect"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Radiobutton"
        fully_qualified_name: "tkinter.Radiobutton"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "flash"
    fully_qualified_name: "tkinter.Radiobutton.flash"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Radiobutton"
        fully_qualified_name: "tkinter.Radiobutton"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "invoke"
    fully_qualified_name: "tkinter.Radiobutton.invoke"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Radiobutton"
        fully_qualified_name: "tkinter.Radiobutton"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "select"
    fully_qualified_name: "tkinter.Radiobutton.select"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Radiobutton"
        fully_qualified_name: "tkinter.Radiobutton"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Radiobutton.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Radiobutton.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Radiobutton"
          fully_qualified_name: "tkinter.Radiobutton"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "activebackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activeforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bitmap"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ButtonCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "compound"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Compound]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disabledforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "indicatoron"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "offrelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "overrelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "padx"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "pady"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectimage"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "tristateimage"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "tristatevalue"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "underline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "value"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "variable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[tkinter.Variable,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "tkinter.Variable"
            fully_qualified_name: "tkinter.Variable"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "wraplength"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Radiobutton.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Radiobutton"
          fully_qualified_name: "tkinter.Radiobutton"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Radiobutton.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Scale"
  fully_qualified_name: "tkinter.Scale"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Scale.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Scale"
        fully_qualified_name: "tkinter.Scale"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bigincrement"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "digits"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "from_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "label"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "length"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "orient"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "repeatdelay"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "repeatinterval"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "resolution"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "showvalue"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "sliderlength"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "sliderrelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "tickinterval"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "to"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "troughcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "variable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[tkinter.IntVar,tkinter.DoubleVar]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.IntVar"
          fully_qualified_name: "tkinter.IntVar"
        }
        args {
          pretty_printed_name: "tkinter.DoubleVar"
          fully_qualified_name: "tkinter.DoubleVar"
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.Scale.get"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Scale"
        fully_qualified_name: "tkinter.Scale"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set"
    fully_qualified_name: "tkinter.Scale.set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Scale"
        fully_qualified_name: "tkinter.Scale"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "coords"
    fully_qualified_name: "tkinter.Scale.coords"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Scale"
        fully_qualified_name: "tkinter.Scale"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.float,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "identify"
    fully_qualified_name: "tkinter.Scale.identify"
    return_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Scale"
        fully_qualified_name: "tkinter.Scale"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Scale.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Scale.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Scale"
          fully_qualified_name: "tkinter.Scale"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "activebackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bigincrement"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "digits"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "from_"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "label"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "length"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "orient"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "repeatdelay"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "repeatinterval"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "resolution"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "showvalue"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "sliderlength"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "sliderrelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "tickinterval"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "to"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "troughcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "variable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[tkinter.IntVar,tkinter.DoubleVar]"
          kind: UNION
          args {
            pretty_printed_name: "tkinter.IntVar"
            fully_qualified_name: "tkinter.IntVar"
          }
          args {
            pretty_printed_name: "tkinter.DoubleVar"
            fully_qualified_name: "tkinter.DoubleVar"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Scale.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Scale"
          fully_qualified_name: "tkinter.Scale"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Scale.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Scrollbar"
  fully_qualified_name: "tkinter.Scrollbar"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Scrollbar.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Scrollbar"
        fully_qualified_name: "tkinter.Scrollbar"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "activerelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "elementborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "jump"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "orient"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "repeatdelay"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "repeatinterval"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "troughcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "activate"
    fully_qualified_name: "tkinter.Scrollbar.activate"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Scrollbar"
        fully_qualified_name: "tkinter.Scrollbar"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "delta"
    fully_qualified_name: "tkinter.Scrollbar.delta"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Scrollbar"
        fully_qualified_name: "tkinter.Scrollbar"
      }
    }
    parameters {
      name: "deltax"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "deltay"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "fraction"
    fully_qualified_name: "tkinter.Scrollbar.fraction"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Scrollbar"
        fully_qualified_name: "tkinter.Scrollbar"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "identify"
    fully_qualified_name: "tkinter.Scrollbar.identify"
    return_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Scrollbar"
        fully_qualified_name: "tkinter.Scrollbar"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.Scrollbar.get"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.float,builtins.float,builtins.float,builtins.float],Tuple[builtins.float,builtins.float]]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.float,builtins.float,builtins.float,builtins.float]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      args {
        pretty_printed_name: "Tuple[builtins.float,builtins.float]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Scrollbar"
        fully_qualified_name: "tkinter.Scrollbar"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set"
    fully_qualified_name: "tkinter.Scrollbar.set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Scrollbar"
        fully_qualified_name: "tkinter.Scrollbar"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    parameters {
      name: "last"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Scrollbar.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Scrollbar.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Scrollbar"
          fully_qualified_name: "tkinter.Scrollbar"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "activebackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "activerelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "elementborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "jump"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "orient"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "repeatdelay"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "repeatinterval"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "troughcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Scrollbar.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Scrollbar"
          fully_qualified_name: "tkinter.Scrollbar"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Scrollbar.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Text"
  fully_qualified_name: "tkinter.Text"
  super_classes: "tkinter.Widget"
  super_classes: "tkinter.XView"
  super_classes: "tkinter.YView"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Text.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "autoseparators"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "blockcursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "endline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "exportselection"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "inactiveselectbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "insertbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "insertborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "insertofftime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertontime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertunfocussed"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "insertwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "maxundo"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "setgrid"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "spacing1"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "spacing2"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "spacing3"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "startline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "tabs"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_ScreenUnits],builtins.str,Tuple[Union[UnboundType[_ScreenUnits],builtins.str],Any]]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Tuple[Union[UnboundType[_ScreenUnits],builtins.str],Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "Union[UnboundType[_ScreenUnits],builtins.str]"
            kind: UNION
            args {
              pretty_printed_name: "UnboundType[_ScreenUnits]"
              kind: UNBOUND
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "tabstyle"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "undo"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "wrap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "yscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Text.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "autoseparators"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "blockcursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "endline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "exportselection"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "inactiveselectbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "insertbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "insertborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "insertofftime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertontime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertunfocussed"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "insertwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "maxundo"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "setgrid"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "spacing1"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "spacing2"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "spacing3"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "startline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "tabs"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_ScreenUnits],builtins.str,builtins.tuple[Union[UnboundType[_ScreenUnits],builtins.str]]]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.tuple[Union[UnboundType[_ScreenUnits],builtins.str]]"
          args {
            pretty_printed_name: "Union[UnboundType[_ScreenUnits],builtins.str]"
            kind: UNION
            args {
              pretty_printed_name: "UnboundType[_ScreenUnits]"
              kind: UNBOUND
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    parameters {
      name: "tabstyle"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "undo"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "wrap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "yscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "bbox"
    fully_qualified_name: "tkinter.Text.bbox"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "compare"
    fully_qualified_name: "tkinter.Text.compare"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "op"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
    }
    parameters {
      name: "index2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "count"
    fully_qualified_name: "tkinter.Text.count"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "index2"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "delete"
    fully_qualified_name: "tkinter.Text.delete"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "index2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "dlineinfo"
    fully_qualified_name: "tkinter.Text.dlineinfo"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int],None]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "edit"
    fully_qualified_name: "tkinter.Text.edit"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "edit_redo"
    fully_qualified_name: "tkinter.Text.edit_redo"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "edit_reset"
    fully_qualified_name: "tkinter.Text.edit_reset"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "edit_separator"
    fully_qualified_name: "tkinter.Text.edit_separator"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "edit_undo"
    fully_qualified_name: "tkinter.Text.edit_undo"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.Text.get"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "index2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "image_cget"
    fully_qualified_name: "tkinter.Text.image_cget"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "option"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "image_configure"
    fully_qualified_name: "tkinter.Text.image_configure"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "image_create"
    fully_qualified_name: "tkinter.Text.image_create"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "image_names"
    fully_qualified_name: "tkinter.Text.image_names"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "index"
    fully_qualified_name: "tkinter.Text.index"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "tkinter.Text.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "chars"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "insert"
    fully_qualified_name: "tkinter.Text.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "chars"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "mark_names"
    fully_qualified_name: "tkinter.Text.mark_names"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "mark_names"
    fully_qualified_name: "tkinter.Text.mark_names"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "mark_set"
    fully_qualified_name: "tkinter.Text.mark_set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "markName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "mark_unset"
    fully_qualified_name: "tkinter.Text.mark_unset"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "markNames"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "mark_next"
    fully_qualified_name: "tkinter.Text.mark_next"
    return_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "mark_previous"
    fully_qualified_name: "tkinter.Text.mark_previous"
    return_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "peer_create"
    fully_qualified_name: "tkinter.Text.peer_create"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "newPathName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,tkinter.Text]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "peer_names"
    fully_qualified_name: "tkinter.Text.peer_names"
    return_annotation {
      pretty_printed_name: "Tuple[_tkinter.Tcl_Obj,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "_tkinter.Tcl_Obj"
        fully_qualified_name: "_tkinter.Tcl_Obj"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "peer_names"
    fully_qualified_name: "tkinter.Text.peer_names"
    return_annotation {
      pretty_printed_name: "builtins.tuple[_tkinter.Tcl_Obj]"
      args {
        pretty_printed_name: "_tkinter.Tcl_Obj"
        fully_qualified_name: "_tkinter.Tcl_Obj"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "replace"
    fully_qualified_name: "tkinter.Text.replace"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "index2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "chars"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "replace"
    fully_qualified_name: "tkinter.Text.replace"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "index2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "chars"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "scan_mark"
    fully_qualified_name: "tkinter.Text.scan_mark"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "scan_dragto"
    fully_qualified_name: "tkinter.Text.scan_dragto"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "search"
    fully_qualified_name: "tkinter.Text.search"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "pattern"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "stopindex"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "forwards"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "backwards"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "exact"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "regexp"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "nocase"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "count"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Variable,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "elide"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "see"
    fully_qualified_name: "tkinter.Text.see"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_add"
    fully_qualified_name: "tkinter.Text.tag_add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "tagName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_unbind"
    fully_qualified_name: "tkinter.Text.tag_unbind"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "tagName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "sequence"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "funcid"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_cget"
    fully_qualified_name: "tkinter.Text.tag_cget"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "tagName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "option"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_delete"
    fully_qualified_name: "tkinter.Text.tag_delete"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "__first_tag_name"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "tagNames"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_lower"
    fully_qualified_name: "tkinter.Text.tag_lower"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "tagName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "belowThis"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_names"
    fully_qualified_name: "tkinter.Text.tag_names"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "tag_names"
    fully_qualified_name: "tkinter.Text.tag_names"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_nextrange"
    fully_qualified_name: "tkinter.Text.tag_nextrange"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.str,builtins.str],builtins.tuple[Any]]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.str,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "builtins.tuple[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "tagName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "index2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "tag_nextrange"
    fully_qualified_name: "tkinter.Text.tag_nextrange"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.str,builtins.str],Tuple[]]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.str,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Tuple[]"
        kind: TUPLE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "tagName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "index2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_prevrange"
    fully_qualified_name: "tkinter.Text.tag_prevrange"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.str,builtins.str],builtins.tuple[Any]]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.str,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "builtins.tuple[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "tagName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "index2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "tag_prevrange"
    fully_qualified_name: "tkinter.Text.tag_prevrange"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.str,builtins.str],Tuple[]]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.str,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Tuple[]"
        kind: TUPLE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "tagName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "index2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_raise"
    fully_qualified_name: "tkinter.Text.tag_raise"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "tagName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "aboveThis"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_ranges"
    fully_qualified_name: "tkinter.Text.tag_ranges"
    return_annotation {
      pretty_printed_name: "Tuple[_tkinter.Tcl_Obj,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "_tkinter.Tcl_Obj"
        fully_qualified_name: "_tkinter.Tcl_Obj"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "tagName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "tag_ranges"
    fully_qualified_name: "tkinter.Text.tag_ranges"
    return_annotation {
      pretty_printed_name: "builtins.tuple[_tkinter.Tcl_Obj]"
      args {
        pretty_printed_name: "_tkinter.Tcl_Obj"
        fully_qualified_name: "_tkinter.Tcl_Obj"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "tagName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tag_remove"
    fully_qualified_name: "tkinter.Text.tag_remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "tagName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "index1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TextIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "index2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "window_cget"
    fully_qualified_name: "tkinter.Text.window_cget"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "option"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "window_configure"
    fully_qualified_name: "tkinter.Text.window_configure"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "window_create"
    fully_qualified_name: "tkinter.Text.window_create"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Text"
        fully_qualified_name: "tkinter.Text"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "window_names"
    fully_qualified_name: "tkinter.Text.window_names"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "yview_pickplace"
    fully_qualified_name: "tkinter.Text.yview_pickplace"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "what"
      kind: VAR_POSITIONAL
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Text.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Text.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "autoseparators"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "blockcursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "endline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "inactiveselectbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "insertbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "insertborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "insertofftime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertontime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertunfocussed"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "insertwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "maxundo"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "padx"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "pady"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "setgrid"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "spacing1"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "spacing2"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "spacing3"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "startline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "tabs"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[UnboundType[_ScreenUnits],builtins.str,Tuple[Union[UnboundType[_ScreenUnits],builtins.str],Any]]"
          kind: UNION
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[Union[UnboundType[_ScreenUnits],builtins.str],Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "Union[UnboundType[_ScreenUnits],builtins.str]"
              kind: UNION
              args {
                pretty_printed_name: "UnboundType[_ScreenUnits]"
                kind: UNBOUND
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "tabstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "undo"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "wrap"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "yscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Text.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Text.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Text.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "autoseparators"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "blockcursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "endline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "inactiveselectbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "insertbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "insertborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "insertofftime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertontime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertunfocussed"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "insertwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "maxundo"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "padx"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "pady"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "setgrid"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "spacing1"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "spacing2"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "spacing3"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "startline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "tabs"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[UnboundType[_ScreenUnits],builtins.str,builtins.tuple[Union[UnboundType[_ScreenUnits],builtins.str]]]"
          kind: UNION
          args {
            pretty_printed_name: "UnboundType[_ScreenUnits]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.tuple[Union[UnboundType[_ScreenUnits],builtins.str]]"
            args {
              pretty_printed_name: "Union[UnboundType[_ScreenUnits],builtins.str]"
              kind: UNION
              args {
                pretty_printed_name: "UnboundType[_ScreenUnits]"
                kind: UNBOUND
              }
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "tabstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "undo"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "wrap"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "yscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Text.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "debug"
    fullname: "tkinter.Text.debug"
    definitions {
      name: "debug"
      fully_qualified_name: "tkinter.Text.debug"
      return_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "boolean"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "debug"
      fully_qualified_name: "tkinter.Text.debug"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "boolean"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "dump"
    fullname: "tkinter.Text.dump"
    definitions {
      name: "dump"
      fully_qualified_name: "tkinter.Text.dump"
      return_annotation {
        pretty_printed_name: "builtins.list[Tuple[builtins.str,builtins.str,builtins.str]]"
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "index1"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "index2"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
          kind: UNION
          args {
            pretty_printed_name: "UnboundType[_TextIndex]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "all"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "mark"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "tag"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "window"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "dump"
      fully_qualified_name: "tkinter.Text.dump"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "index1"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "index2"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
          kind: UNION
          args {
            pretty_printed_name: "UnboundType[_TextIndex]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "command"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      parameters {
        name: "all"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "mark"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "tag"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "window"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "dump"
      fully_qualified_name: "tkinter.Text.dump"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "index1"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TextIndex]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "index2"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[UnboundType[_TextIndex],None]"
          kind: UNION
          args {
            pretty_printed_name: "UnboundType[_TextIndex]"
            kind: UNBOUND
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      parameters {
        name: "all"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "mark"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "tag"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "window"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "edit_modified"
    fullname: "tkinter.Text.edit_modified"
    definitions {
      name: "edit_modified"
      fully_qualified_name: "tkinter.Text.edit_modified"
      return_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "arg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "edit_modified"
      fully_qualified_name: "tkinter.Text.edit_modified"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "arg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "mark_gravity"
    fullname: "tkinter.Text.mark_gravity"
    definitions {
      name: "mark_gravity"
      fully_qualified_name: "tkinter.Text.mark_gravity"
      return_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "markName"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "direction"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "mark_gravity"
      fully_qualified_name: "tkinter.Text.mark_gravity"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "markName"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "direction"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "tag_bind"
    fullname: "tkinter.Text.tag_bind"
    definitions {
      name: "tag_bind"
      fully_qualified_name: "tkinter.Text.tag_bind"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "tagName"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "add"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "tag_bind"
      fully_qualified_name: "tkinter.Text.tag_bind"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "tagName"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "func"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "add"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "tag_configure"
    fullname: "tkinter.Text.tag_configure"
    definitions {
      name: "tag_configure"
      fully_qualified_name: "tkinter.Text.tag_configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "tagName"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bgstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "elide"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "fgstipple"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "lmargin1"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "lmargin2"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "lmargincolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "offset"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "overstrike"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "overstrikefg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "rmargin"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "rmargincolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "spacing1"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "spacing2"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "spacing3"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "tabs"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "tabstyle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "underline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "underlinefg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "wrap"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "tag_configure"
      fully_qualified_name: "tkinter.Text.tag_configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Text"
          fully_qualified_name: "tkinter.Text"
        }
      }
      parameters {
        name: "tagName"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Text.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "tag_config"
    fully_qualified_name: "tkinter.Text.tag_config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "window_config"
    fully_qualified_name: "tkinter.Text.window_config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_setit"
  fully_qualified_name: "tkinter._setit"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter._setit.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter._setit"
        fully_qualified_name: "tkinter._setit"
      }
    }
    parameters {
      name: "var"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "callback"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__call__"
    fully_qualified_name: "tkinter._setit.__call__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter._setit"
        fully_qualified_name: "tkinter._setit"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "OptionMenu"
  fully_qualified_name: "tkinter.OptionMenu"
  super_classes: "tkinter.Menubutton"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.OptionMenu.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.OptionMenu"
        fully_qualified_name: "tkinter.OptionMenu"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "variable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.StringVar"
        fully_qualified_name: "tkinter.StringVar"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "values"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "widgetName"
    fully_qualified_name: "tkinter.OptionMenu.widgetName"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "menuname"
    fully_qualified_name: "tkinter.OptionMenu.menuname"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_Image"
  fully_qualified_name: "tkinter._Image"
  super_classes: "builtins.object"
  has_decorators: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_BitmapImageLike"
  fully_qualified_name: "tkinter._BitmapImageLike"
  super_classes: "tkinter._Image"
  has_decorators: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_PhotoImageLike"
  fully_qualified_name: "tkinter._PhotoImageLike"
  super_classes: "tkinter._Image"
  has_decorators: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Image"
  fully_qualified_name: "tkinter.Image"
  super_classes: "tkinter._Image"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Image.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Image"
        fully_qualified_name: "tkinter.Image"
      }
    }
    parameters {
      name: "imgtype"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,_tkinter.TkappType,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "_tkinter.TkappType"
          fully_qualified_name: "_tkinter.TkappType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__del__"
    fully_qualified_name: "tkinter.Image.__del__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "tkinter.Image"
        fully_qualified_name: "tkinter.Image"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__setitem__"
    fully_qualified_name: "tkinter.Image.__setitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "tkinter.Image"
        fully_qualified_name: "tkinter.Image"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "value"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "tkinter.Image.__getitem__"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "key"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "height"
    fully_qualified_name: "tkinter.Image.height"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Image"
        fully_qualified_name: "tkinter.Image"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "type"
    fully_qualified_name: "tkinter.Image.type"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "width"
    fully_qualified_name: "tkinter.Image.width"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Image"
        fully_qualified_name: "tkinter.Image"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "name"
    fully_qualified_name: "tkinter.Image.name"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "tk"
    fully_qualified_name: "tkinter.Image.tk"
    type_annotation {
      pretty_printed_name: "_tkinter.TkappType"
      fully_qualified_name: "_tkinter.TkappType"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "configure"
    fully_qualified_name: "tkinter.Image.configure"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Image.config"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "PhotoImage"
  fully_qualified_name: "tkinter.PhotoImage"
  super_classes: "tkinter.Image"
  super_classes: "tkinter._PhotoImageLike"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.PhotoImage.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      has_default: true
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,_tkinter.TkappType,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "_tkinter.TkappType"
          fully_qualified_name: "_tkinter.TkappType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "data"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
      }
      has_default: true
    }
    parameters {
      name: "format"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "file"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[StrOrBytesPath]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "gamma"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "palette"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "configure"
    fully_qualified_name: "tkinter.PhotoImage.configure"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    parameters {
      name: "data"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
      }
      has_default: true
    }
    parameters {
      name: "format"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "file"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[StrOrBytesPath]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "gamma"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "palette"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "blank"
    fully_qualified_name: "tkinter.PhotoImage.blank"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "cget"
    fully_qualified_name: "tkinter.PhotoImage.cget"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    parameters {
      name: "option"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "tkinter.PhotoImage.__getitem__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "copy"
    fully_qualified_name: "tkinter.PhotoImage.copy"
    return_annotation {
      pretty_printed_name: "tkinter.PhotoImage"
      fully_qualified_name: "tkinter.PhotoImage"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "zoom"
    fully_qualified_name: "tkinter.PhotoImage.zoom"
    return_annotation {
      pretty_printed_name: "tkinter.PhotoImage"
      fully_qualified_name: "tkinter.PhotoImage"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "subsample"
    fully_qualified_name: "tkinter.PhotoImage.subsample"
    return_annotation {
      pretty_printed_name: "tkinter.PhotoImage"
      fully_qualified_name: "tkinter.PhotoImage"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.PhotoImage.get"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "put"
    fully_qualified_name: "tkinter.PhotoImage.put"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.list[builtins.list[builtins.str]],builtins.list[Tuple[builtins.str,Any]],Tuple[builtins.str,Any],Tuple[builtins.list[builtins.str],Any],Tuple[Tuple[builtins.str,Any],Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.list[builtins.str]]"
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.list[Tuple[builtins.str,Any]]"
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        args {
          pretty_printed_name: "Tuple[builtins.list[builtins.str],Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        args {
          pretty_printed_name: "Tuple[Tuple[builtins.str,Any],Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
    }
    parameters {
      name: "to"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Tuple[builtins.int,builtins.int],None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.int,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "put"
    fully_qualified_name: "tkinter.PhotoImage.put"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.list[builtins.list[builtins.str]],builtins.list[builtins.tuple[builtins.str]],builtins.tuple[builtins.str],builtins.tuple[builtins.list[builtins.str]],builtins.tuple[builtins.tuple[builtins.str]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.list[builtins.str]]"
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.tuple[builtins.str]]"
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.list[builtins.str]]"
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.tuple[builtins.str]]"
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
    }
    parameters {
      name: "to"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Tuple[builtins.int,builtins.int],None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.int,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "write"
    fully_qualified_name: "tkinter.PhotoImage.write"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[StrOrBytesPath]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "format"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "from_coords"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Tuple[builtins.int,builtins.int],None]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.int,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "transparency_get"
    fully_qualified_name: "tkinter.PhotoImage.transparency_get"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "transparency_set"
    fully_qualified_name: "tkinter.PhotoImage.transparency_set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PhotoImage"
        fully_qualified_name: "tkinter.PhotoImage"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "boolean"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.PhotoImage.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "BitmapImage"
  fully_qualified_name: "tkinter.BitmapImage"
  super_classes: "tkinter.Image"
  super_classes: "tkinter._BitmapImageLike"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.BitmapImage.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.BitmapImage"
        fully_qualified_name: "tkinter.BitmapImage"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      has_default: true
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,_tkinter.TkappType,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "_tkinter.TkappType"
          fully_qualified_name: "_tkinter.TkappType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "data"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
      }
      has_default: true
    }
    parameters {
      name: "file"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[StrOrBytesPath]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "maskdata"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "maskfile"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[StrOrBytesPath]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Spinbox"
  fully_qualified_name: "tkinter.Spinbox"
  super_classes: "tkinter.Widget"
  super_classes: "tkinter.XView"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Spinbox.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "buttonbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "buttoncursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "buttondownrelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "buttonuprelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "disabledbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "disabledforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "exportselection"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "format"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "from_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "increment"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "insertbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "insertborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "insertofftime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertontime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "invalidcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "invcmd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "readonlybackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "repeatdelay"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "repeatinterval"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "selectbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "to"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "validate"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "validatecommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "vcmd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "values"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "wrap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.Spinbox.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "activebackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "buttonbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "buttoncursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "buttondownrelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "buttonuprelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "disabledbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "disabledforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "exportselection"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "format"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "from_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "increment"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "insertbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "insertborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "insertofftime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertontime"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "insertwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "invalidcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "invcmd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "readonlybackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "repeatdelay"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "repeatinterval"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "selectbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "selectborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectforeground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "to"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "validate"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "validatecommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "vcmd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "values"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "wrap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "bbox"
    fully_qualified_name: "tkinter.Spinbox.bbox"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "delete"
    fully_qualified_name: "tkinter.Spinbox.delete"
    return_annotation {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "last"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.Spinbox.get"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "icursor"
    fully_qualified_name: "tkinter.Spinbox.icursor"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "identify"
    fully_qualified_name: "tkinter.Spinbox.identify"
    return_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "index"
    fully_qualified_name: "tkinter.Spinbox.index"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryIndex]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "tkinter.Spinbox.insert"
    return_annotation {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_EntryIndex]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "s"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "invoke"
    fully_qualified_name: "tkinter.Spinbox.invoke"
    return_annotation {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "scan"
    fully_qualified_name: "tkinter.Spinbox.scan"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "scan_mark"
    fully_qualified_name: "tkinter.Spinbox.scan_mark"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "scan_dragto"
    fully_qualified_name: "tkinter.Spinbox.scan_dragto"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection"
    fully_qualified_name: "tkinter.Spinbox.selection"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "selection"
    fully_qualified_name: "tkinter.Spinbox.selection"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.int]"
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_adjust"
    fully_qualified_name: "tkinter.Spinbox.selection_adjust"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_clear"
    fully_qualified_name: "tkinter.Spinbox.selection_clear"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_element"
    fully_qualified_name: "tkinter.Spinbox.selection_element"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "element"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_from"
    fully_qualified_name: "tkinter.Spinbox.selection_from"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_present"
    fully_qualified_name: "tkinter.Spinbox.selection_present"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_range"
    fully_qualified_name: "tkinter.Spinbox.selection_range"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "end"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_to"
    fully_qualified_name: "tkinter.Spinbox.selection_to"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Spinbox"
        fully_qualified_name: "tkinter.Spinbox"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Spinbox.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Spinbox.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Spinbox"
          fully_qualified_name: "tkinter.Spinbox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "activebackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "buttonbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "buttoncursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "buttondownrelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "buttonuprelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disabledbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "format"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "from_"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "increment"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "insertbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "insertborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "insertofftime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertontime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "invalidcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "invcmd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "readonlybackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "repeatdelay"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "repeatinterval"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "selectbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "to"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "validate"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "validatecommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "vcmd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "values"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "wrap"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Spinbox.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Spinbox"
          fully_qualified_name: "tkinter.Spinbox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.Spinbox.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Spinbox.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Spinbox"
          fully_qualified_name: "tkinter.Spinbox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "activebackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "buttonbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "buttoncursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "buttondownrelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "buttonuprelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "disabledbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "disabledforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "format"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "from_"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "increment"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "insertbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "insertborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "insertofftime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertontime"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "insertwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "invalidcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "invcmd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "readonlybackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "repeatdelay"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "repeatinterval"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "selectbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "selectborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectforeground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "to"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "validate"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "validatecommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "vcmd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "values"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "wrap"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.Spinbox.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.Spinbox"
          fully_qualified_name: "tkinter.Spinbox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.Spinbox.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "LabelFrame"
  fully_qualified_name: "tkinter.LabelFrame"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.LabelFrame.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.LabelFrame"
        fully_qualified_name: "tkinter.LabelFrame"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "colormap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],tkinter.Misc]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
      }
      has_default: true
    }
    parameters {
      name: "container"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "fg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "highlightbackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightcolor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "highlightthickness"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "labelanchor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "labelwidget"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padx"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "pady"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "visual"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,Tuple[builtins.str,builtins.int]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.LabelFrame.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.LabelFrame.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.LabelFrame"
          fully_qualified_name: "tkinter.LabelFrame"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "fg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "highlightbackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightcolor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "highlightthickness"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "labelanchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "labelwidget"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        has_default: true
      }
      parameters {
        name: "padx"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "pady"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.LabelFrame.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.LabelFrame"
          fully_qualified_name: "tkinter.LabelFrame"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.LabelFrame.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "PanedWindow"
  fully_qualified_name: "tkinter.PanedWindow"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.PanedWindow.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PanedWindow"
        fully_qualified_name: "tkinter.PanedWindow"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "bd"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "bg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "handlepad"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "handlesize"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "opaqueresize"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "orient"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "proxybackground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "proxyborderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "proxyrelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "sashcursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "sashpad"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "sashrelief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "sashwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "showhandle"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "add"
    fully_qualified_name: "tkinter.PanedWindow.add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PanedWindow"
        fully_qualified_name: "tkinter.PanedWindow"
      }
    }
    parameters {
      name: "child"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Widget"
        fully_qualified_name: "tkinter.Widget"
      }
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "remove"
    fully_qualified_name: "tkinter.PanedWindow.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PanedWindow"
        fully_qualified_name: "tkinter.PanedWindow"
      }
    }
    parameters {
      name: "child"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "identify"
    fully_qualified_name: "tkinter.PanedWindow.identify"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PanedWindow"
        fully_qualified_name: "tkinter.PanedWindow"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "proxy"
    fully_qualified_name: "tkinter.PanedWindow.proxy"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "proxy_coord"
    fully_qualified_name: "tkinter.PanedWindow.proxy_coord"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "proxy_forget"
    fully_qualified_name: "tkinter.PanedWindow.proxy_forget"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "proxy_place"
    fully_qualified_name: "tkinter.PanedWindow.proxy_place"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "sash"
    fully_qualified_name: "tkinter.PanedWindow.sash"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "sash_coord"
    fully_qualified_name: "tkinter.PanedWindow.sash_coord"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "sash_mark"
    fully_qualified_name: "tkinter.PanedWindow.sash_mark"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "sash_place"
    fully_qualified_name: "tkinter.PanedWindow.sash_place"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "panecget"
    fully_qualified_name: "tkinter.PanedWindow.panecget"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "child"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "option"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "paneconfigure"
    fully_qualified_name: "tkinter.PanedWindow.paneconfigure"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.PanedWindow"
        fully_qualified_name: "tkinter.PanedWindow"
      }
    }
    parameters {
      name: "tagOrId"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "cnf"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "panes"
    fully_qualified_name: "tkinter.PanedWindow.panes"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.PanedWindow.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.PanedWindow.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.PanedWindow"
          fully_qualified_name: "tkinter.PanedWindow"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "bd"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "bg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "handlepad"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "handlesize"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "opaqueresize"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "orient"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "proxybackground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "proxyborderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "proxyrelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "sashcursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "sashpad"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "sashrelief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "sashwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "showhandle"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.PanedWindow.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.PanedWindow"
          fully_qualified_name: "tkinter.PanedWindow"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.PanedWindow.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "forget"
    fully_qualified_name: "tkinter.PanedWindow.forget"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "paneconfig"
    fully_qualified_name: "tkinter.PanedWindow.paneconfig"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "NoDefaultRoot"
  fully_qualified_name: "tkinter.NoDefaultRoot"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "mainloop"
  fully_qualified_name: "tkinter.mainloop"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "n"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "getboolean"
  fully_qualified_name: "tkinter.getboolean"
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "Tcl"
  fully_qualified_name: "tkinter.Tcl"
  return_annotation {
    pretty_printed_name: "tkinter.Tk"
    fully_qualified_name: "tkinter.Tk"
  }
  parameters {
    name: "screenName"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "baseName"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "className"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "useTk"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "image_names"
  fully_qualified_name: "tkinter.image_names"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,Any]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
functions {
  name: "image_names"
  fully_qualified_name: "tkinter.image_names"
  return_annotation {
    pretty_printed_name: "builtins.tuple[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.tuple"
  }
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "image_types"
  fully_qualified_name: "tkinter.image_types"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,Any]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
functions {
  name: "image_types"
  fully_qualified_name: "tkinter.image_types"
  return_annotation {
    pretty_printed_name: "builtins.tuple[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.tuple"
  }
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "_test"
  fully_qualified_name: "tkinter._test"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "NO"
  fully_qualified_name: "tkinter.constants.NO"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "YES"
  fully_qualified_name: "tkinter.constants.YES"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "TRUE"
  fully_qualified_name: "tkinter.constants.TRUE"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "FALSE"
  fully_qualified_name: "tkinter.constants.FALSE"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "ON"
  fully_qualified_name: "tkinter.constants.ON"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "OFF"
  fully_qualified_name: "tkinter.constants.OFF"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "N"
  fully_qualified_name: "tkinter.constants.N"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "S"
  fully_qualified_name: "tkinter.constants.S"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "W"
  fully_qualified_name: "tkinter.constants.W"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "E"
  fully_qualified_name: "tkinter.constants.E"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "NW"
  fully_qualified_name: "tkinter.constants.NW"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "SW"
  fully_qualified_name: "tkinter.constants.SW"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "NE"
  fully_qualified_name: "tkinter.constants.NE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "SE"
  fully_qualified_name: "tkinter.constants.SE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "NS"
  fully_qualified_name: "tkinter.constants.NS"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "EW"
  fully_qualified_name: "tkinter.constants.EW"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "NSEW"
  fully_qualified_name: "tkinter.constants.NSEW"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "CENTER"
  fully_qualified_name: "tkinter.constants.CENTER"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "NONE"
  fully_qualified_name: "tkinter.constants.NONE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "X"
  fully_qualified_name: "tkinter.constants.X"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "Y"
  fully_qualified_name: "tkinter.constants.Y"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "BOTH"
  fully_qualified_name: "tkinter.constants.BOTH"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "LEFT"
  fully_qualified_name: "tkinter.constants.LEFT"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "TOP"
  fully_qualified_name: "tkinter.constants.TOP"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "RIGHT"
  fully_qualified_name: "tkinter.constants.RIGHT"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "BOTTOM"
  fully_qualified_name: "tkinter.constants.BOTTOM"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "RAISED"
  fully_qualified_name: "tkinter.constants.RAISED"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "SUNKEN"
  fully_qualified_name: "tkinter.constants.SUNKEN"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "FLAT"
  fully_qualified_name: "tkinter.constants.FLAT"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "RIDGE"
  fully_qualified_name: "tkinter.constants.RIDGE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "GROOVE"
  fully_qualified_name: "tkinter.constants.GROOVE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "SOLID"
  fully_qualified_name: "tkinter.constants.SOLID"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "HORIZONTAL"
  fully_qualified_name: "tkinter.constants.HORIZONTAL"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "VERTICAL"
  fully_qualified_name: "tkinter.constants.VERTICAL"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "NUMERIC"
  fully_qualified_name: "tkinter.constants.NUMERIC"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "CHAR"
  fully_qualified_name: "tkinter.constants.CHAR"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "WORD"
  fully_qualified_name: "tkinter.constants.WORD"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "BASELINE"
  fully_qualified_name: "tkinter.constants.BASELINE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "INSIDE"
  fully_qualified_name: "tkinter.constants.INSIDE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "OUTSIDE"
  fully_qualified_name: "tkinter.constants.OUTSIDE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "SEL"
  fully_qualified_name: "tkinter.constants.SEL"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "SEL_FIRST"
  fully_qualified_name: "tkinter.constants.SEL_FIRST"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "SEL_LAST"
  fully_qualified_name: "tkinter.constants.SEL_LAST"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "END"
  fully_qualified_name: "tkinter.constants.END"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "INSERT"
  fully_qualified_name: "tkinter.constants.INSERT"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "CURRENT"
  fully_qualified_name: "tkinter.constants.CURRENT"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "ANCHOR"
  fully_qualified_name: "tkinter.constants.ANCHOR"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "ALL"
  fully_qualified_name: "tkinter.constants.ALL"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "NORMAL"
  fully_qualified_name: "tkinter.constants.NORMAL"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "DISABLED"
  fully_qualified_name: "tkinter.constants.DISABLED"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "ACTIVE"
  fully_qualified_name: "tkinter.constants.ACTIVE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "HIDDEN"
  fully_qualified_name: "tkinter.constants.HIDDEN"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "CASCADE"
  fully_qualified_name: "tkinter.constants.CASCADE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "CHECKBUTTON"
  fully_qualified_name: "tkinter.constants.CHECKBUTTON"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "COMMAND"
  fully_qualified_name: "tkinter.constants.COMMAND"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "RADIOBUTTON"
  fully_qualified_name: "tkinter.constants.RADIOBUTTON"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "SEPARATOR"
  fully_qualified_name: "tkinter.constants.SEPARATOR"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "SINGLE"
  fully_qualified_name: "tkinter.constants.SINGLE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "BROWSE"
  fully_qualified_name: "tkinter.constants.BROWSE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "MULTIPLE"
  fully_qualified_name: "tkinter.constants.MULTIPLE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "EXTENDED"
  fully_qualified_name: "tkinter.constants.EXTENDED"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "DOTBOX"
  fully_qualified_name: "tkinter.constants.DOTBOX"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "UNDERLINE"
  fully_qualified_name: "tkinter.constants.UNDERLINE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "PIESLICE"
  fully_qualified_name: "tkinter.constants.PIESLICE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "CHORD"
  fully_qualified_name: "tkinter.constants.CHORD"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "ARC"
  fully_qualified_name: "tkinter.constants.ARC"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "FIRST"
  fully_qualified_name: "tkinter.constants.FIRST"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "LAST"
  fully_qualified_name: "tkinter.constants.LAST"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "BUTT"
  fully_qualified_name: "tkinter.constants.BUTT"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "PROJECTING"
  fully_qualified_name: "tkinter.constants.PROJECTING"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "ROUND"
  fully_qualified_name: "tkinter.constants.ROUND"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "BEVEL"
  fully_qualified_name: "tkinter.constants.BEVEL"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "MITER"
  fully_qualified_name: "tkinter.constants.MITER"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "MOVETO"
  fully_qualified_name: "tkinter.constants.MOVETO"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "SCROLL"
  fully_qualified_name: "tkinter.constants.SCROLL"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "UNITS"
  fully_qualified_name: "tkinter.constants.UNITS"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "PAGES"
  fully_qualified_name: "tkinter.constants.PAGES"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_FontDescription"
  fully_qualified_name: "tkinter.font._FontDescription"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "wantobjects"
  fully_qualified_name: "tkinter.wantobjects"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "TkVersion"
  fully_qualified_name: "tkinter.TkVersion"
  type_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "TclVersion"
  fully_qualified_name: "tkinter.TclVersion"
  type_annotation {
    pretty_printed_name: "builtins.float"
    fully_qualified_name: "builtins.float"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "READABLE"
  fully_qualified_name: "tkinter.READABLE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.int]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "WRITABLE"
  fully_qualified_name: "tkinter.WRITABLE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.int]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "EXCEPTION"
  fully_qualified_name: "tkinter.EXCEPTION"
  type_annotation {
    pretty_printed_name: "Literal[builtins.int]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_Anchor"
  fully_qualified_name: "tkinter._Anchor"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_ButtonCommand"
  fully_qualified_name: "tkinter._ButtonCommand"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_Compound"
  fully_qualified_name: "tkinter._Compound"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_Cursor"
  fully_qualified_name: "tkinter._Cursor"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_EntryValidateCommand"
  fully_qualified_name: "tkinter._EntryValidateCommand"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_GridIndex"
  fully_qualified_name: "tkinter._GridIndex"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_ImageSpec"
  fully_qualified_name: "tkinter._ImageSpec"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_Relief"
  fully_qualified_name: "tkinter._Relief"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_ScreenUnits"
  fully_qualified_name: "tkinter._ScreenUnits"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_XYScrollCommand"
  fully_qualified_name: "tkinter._XYScrollCommand"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_TakeFocusValue"
  fully_qualified_name: "tkinter._TakeFocusValue"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_TraceMode"
  fully_qualified_name: "tkinter._TraceMode"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "getint"
  fully_qualified_name: "tkinter.getint"
  type_annotation {
    pretty_printed_name: "UnboundType[Incomplete]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "getdouble"
  fully_qualified_name: "tkinter.getdouble"
  type_annotation {
    pretty_printed_name: "UnboundType[Incomplete]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_EntryIndex"
  fully_qualified_name: "tkinter._EntryIndex"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_TextIndex"
  fully_qualified_name: "tkinter._TextIndex"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "__all__"
  fully_qualified_name: "tkinter.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "39"
  valid_for: "310"
}
