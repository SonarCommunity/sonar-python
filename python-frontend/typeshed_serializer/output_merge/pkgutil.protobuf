fully_qualified_name: "pkgutil"
classes {
  name: "ImpImporter"
  fully_qualified_name: "pkgutil.ImpImporter"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "pkgutil.ImpImporter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pkgutil.ImpImporter"
        fully_qualified_name: "pkgutil.ImpImporter"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "ImpLoader"
  fully_qualified_name: "pkgutil.ImpLoader"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "pkgutil.ImpLoader.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pkgutil.ImpLoader"
        fully_qualified_name: "pkgutil.ImpLoader"
      }
    }
    parameters {
      name: "fullname"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "file"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.IO"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "etc"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    valid_for: "27"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "ModuleInfo"
  fully_qualified_name: "pkgutil.ModuleInfo"
  super_classes: "builtins.tuple"
  methods {
    name: "_replace"
    fully_qualified_name: "pkgutil.ModuleInfo._replace"
    return_annotation {
      pretty_printed_name: "pkgutil.ModuleInfo._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pkgutil.ModuleInfo._NT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "module_finder"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]"
        kind: UNION
        args {
          pretty_printed_name: "importlib.abc.MetaPathFinder"
          fully_qualified_name: "importlib.abc.MetaPathFinder"
        }
        args {
          pretty_printed_name: "importlib.abc.PathEntryFinder"
          fully_qualified_name: "importlib.abc.PathEntryFinder"
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "ispkg"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__new__"
    fully_qualified_name: "pkgutil.ModuleInfo.__new__"
    return_annotation {
      pretty_printed_name: "pkgutil.ModuleInfo._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[pkgutil.ModuleInfo._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "pkgutil.ModuleInfo._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "module_finder"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]"
        kind: UNION
        args {
          pretty_printed_name: "importlib.abc.MetaPathFinder"
          fully_qualified_name: "importlib.abc.MetaPathFinder"
        }
        args {
          pretty_printed_name: "importlib.abc.PathEntryFinder"
          fully_qualified_name: "importlib.abc.PathEntryFinder"
        }
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "ispkg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_asdict"
    fully_qualified_name: "pkgutil.ModuleInfo._asdict"
    return_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pkgutil.ModuleInfo._NT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_make"
    fully_qualified_name: "pkgutil.ModuleInfo._make"
    return_annotation {
      pretty_printed_name: "pkgutil.ModuleInfo._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[pkgutil.ModuleInfo._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "pkgutil.ModuleInfo._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "new"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "len"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "module_finder"
    fully_qualified_name: "pkgutil.ModuleInfo.module_finder"
    type_annotation {
      pretty_printed_name: "Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]"
      kind: UNION
      args {
        pretty_printed_name: "importlib.abc.MetaPathFinder"
        fully_qualified_name: "importlib.abc.MetaPathFinder"
      }
      args {
        pretty_printed_name: "importlib.abc.PathEntryFinder"
        fully_qualified_name: "importlib.abc.PathEntryFinder"
      }
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "name"
    fully_qualified_name: "pkgutil.ModuleInfo.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "ispkg"
    fully_qualified_name: "pkgutil.ModuleInfo.ispkg"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "35"
    valid_for: "36"
    valid_for: "36"
    valid_for: "37"
    valid_for: "37"
    valid_for: "38"
    valid_for: "38"
    valid_for: "39"
    valid_for: "39"
    valid_for: "310"
    valid_for: "310"
  }
  attributes {
    name: "_fields"
    fully_qualified_name: "pkgutil.ModuleInfo._fields"
    type_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_field_types"
    fully_qualified_name: "pkgutil.ModuleInfo._field_types"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_field_defaults"
    fully_qualified_name: "pkgutil.ModuleInfo._field_defaults"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_source"
    fully_qualified_name: "pkgutil.ModuleInfo._source"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "__annotations__"
    fully_qualified_name: "pkgutil.ModuleInfo.__annotations__"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "extend_path"
  fully_qualified_name: "pkgutil.extend_path"
  return_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "path"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
  }
  parameters {
    name: "name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "27"
}
functions {
  name: "extend_path"
  fully_qualified_name: "pkgutil.extend_path"
  return_annotation {
    pretty_printed_name: "pkgutil._PathT"
    kind: TYPE_VAR
  }
  parameters {
    name: "path"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "pkgutil._PathT"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "find_loader"
  fully_qualified_name: "pkgutil.find_loader"
  return_annotation {
    pretty_printed_name: "Union[Any,None]"
    kind: UNION
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  parameters {
    name: "fullname"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "27"
}
functions {
  name: "find_loader"
  fully_qualified_name: "pkgutil.find_loader"
  return_annotation {
    pretty_printed_name: "Union[importlib.abc.Loader,None]"
    kind: UNION
    args {
      pretty_printed_name: "importlib.abc.Loader"
      fully_qualified_name: "importlib.abc.Loader"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  parameters {
    name: "fullname"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "get_importer"
  fully_qualified_name: "pkgutil.get_importer"
  return_annotation {
    pretty_printed_name: "Union[Any,None]"
    kind: UNION
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  parameters {
    name: "path_item"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "27"
}
functions {
  name: "get_importer"
  fully_qualified_name: "pkgutil.get_importer"
  return_annotation {
    pretty_printed_name: "Union[importlib.abc.PathEntryFinder,None]"
    kind: UNION
    args {
      pretty_printed_name: "importlib.abc.PathEntryFinder"
      fully_qualified_name: "importlib.abc.PathEntryFinder"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  parameters {
    name: "path_item"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "get_loader"
  fully_qualified_name: "pkgutil.get_loader"
  return_annotation {
    pretty_printed_name: "TypeAlias[Any]"
    kind: TYPE_ALIAS
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "pkgutil.Loader"
  }
  parameters {
    name: "module_or_name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "27"
}
functions {
  name: "get_loader"
  fully_qualified_name: "pkgutil.get_loader"
  return_annotation {
    pretty_printed_name: "Union[importlib.abc.Loader,None]"
    kind: UNION
    args {
      pretty_printed_name: "importlib.abc.Loader"
      fully_qualified_name: "importlib.abc.Loader"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  parameters {
    name: "module_or_name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "iter_importers"
  fully_qualified_name: "pkgutil.iter_importers"
  return_annotation {
    pretty_printed_name: "typing.Iterator[Union[TypeAlias[Any],TypeAlias[Any]]]"
    args {
      pretty_printed_name: "Union[TypeAlias[Any],TypeAlias[Any]]"
      kind: UNION
      args {
        pretty_printed_name: "TypeAlias[Any]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "pkgutil.MetaPathFinder"
      }
      args {
        pretty_printed_name: "TypeAlias[Any]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "pkgutil.PathEntryFinder"
      }
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "fullname"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "iter_importers"
  fully_qualified_name: "pkgutil.iter_importers"
  return_annotation {
    pretty_printed_name: "typing.Iterator[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]]"
    args {
      pretty_printed_name: "Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]"
      kind: UNION
      args {
        pretty_printed_name: "importlib.abc.MetaPathFinder"
        fully_qualified_name: "importlib.abc.MetaPathFinder"
      }
      args {
        pretty_printed_name: "importlib.abc.PathEntryFinder"
        fully_qualified_name: "importlib.abc.PathEntryFinder"
      }
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "fullname"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "iter_modules"
  fully_qualified_name: "pkgutil.iter_modules"
  return_annotation {
    pretty_printed_name: "typing.Iterator[TypeAlias[Tuple[Union[TypeAlias[Any],TypeAlias[Any]],builtins.str,builtins.bool]]]"
    args {
      pretty_printed_name: "TypeAlias[Tuple[Union[TypeAlias[Any],TypeAlias[Any]],builtins.str,builtins.bool]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[Union[TypeAlias[Any],TypeAlias[Any]],builtins.str,builtins.bool]"
        kind: TUPLE
        args {
          pretty_printed_name: "Union[TypeAlias[Any],TypeAlias[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "TypeAlias[Any]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "pkgutil.MetaPathFinder"
          }
          args {
            pretty_printed_name: "TypeAlias[Any]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "pkgutil.PathEntryFinder"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      fully_qualified_name: "pkgutil._ModuleInfoLike"
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "path"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "iter_modules"
  fully_qualified_name: "pkgutil.iter_modules"
  return_annotation {
    pretty_printed_name: "typing.Iterator[Tuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]]"
    args {
      pretty_printed_name: "Tuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]"
      kind: TUPLE
      args {
        pretty_printed_name: "Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]"
        kind: UNION
        args {
          pretty_printed_name: "importlib.abc.MetaPathFinder"
          fully_qualified_name: "importlib.abc.MetaPathFinder"
        }
        args {
          pretty_printed_name: "importlib.abc.PathEntryFinder"
          fully_qualified_name: "importlib.abc.PathEntryFinder"
        }
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "path"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "read_code"
  fully_qualified_name: "pkgutil.read_code"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "stream"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "_typeshed.SupportsRead[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "_typeshed.SupportsRead"
    }
  }
  valid_for: "27"
}
functions {
  name: "read_code"
  fully_qualified_name: "pkgutil.read_code"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "stream"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "_typeshed.SupportsRead[builtins.bytes]"
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      fully_qualified_name: "_typeshed.SupportsRead"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "walk_packages"
  fully_qualified_name: "pkgutil.walk_packages"
  return_annotation {
    pretty_printed_name: "typing.Iterator[TypeAlias[Tuple[Union[TypeAlias[Any],TypeAlias[Any]],builtins.str,builtins.bool]]]"
    args {
      pretty_printed_name: "TypeAlias[Tuple[Union[TypeAlias[Any],TypeAlias[Any]],builtins.str,builtins.bool]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[Union[TypeAlias[Any],TypeAlias[Any]],builtins.str,builtins.bool]"
        kind: TUPLE
        args {
          pretty_printed_name: "Union[TypeAlias[Any],TypeAlias[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "TypeAlias[Any]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "pkgutil.MetaPathFinder"
          }
          args {
            pretty_printed_name: "TypeAlias[Any]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "pkgutil.PathEntryFinder"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      fully_qualified_name: "pkgutil._ModuleInfoLike"
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "path"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "onerror"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "walk_packages"
  fully_qualified_name: "pkgutil.walk_packages"
  return_annotation {
    pretty_printed_name: "typing.Iterator[Tuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]]"
    args {
      pretty_printed_name: "Tuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]"
      kind: TUPLE
      args {
        pretty_printed_name: "Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]"
        kind: UNION
        args {
          pretty_printed_name: "importlib.abc.MetaPathFinder"
          fully_qualified_name: "importlib.abc.MetaPathFinder"
        }
        args {
          pretty_printed_name: "importlib.abc.PathEntryFinder"
          fully_qualified_name: "importlib.abc.PathEntryFinder"
        }
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "path"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "onerror"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "get_data"
  fully_qualified_name: "pkgutil.get_data"
  return_annotation {
    pretty_printed_name: "Union[builtins.str,None]"
    kind: UNION
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  parameters {
    name: "package"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "resource"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "27"
}
functions {
  name: "get_data"
  fully_qualified_name: "pkgutil.get_data"
  return_annotation {
    pretty_printed_name: "Union[builtins.bytes,None]"
    kind: UNION
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  parameters {
    name: "package"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "resource"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "resolve_name"
  fully_qualified_name: "pkgutil.resolve_name"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "__all__"
  fully_qualified_name: "pkgutil.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
