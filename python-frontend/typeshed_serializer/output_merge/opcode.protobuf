fully_qualified_name: "opcode"
functions {
  name: "stack_effect"
  fully_qualified_name: "opcode.stack_effect"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "__opcode"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__oparg"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
}
functions {
  name: "stack_effect"
  fully_qualified_name: "opcode.stack_effect"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "__opcode"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__oparg"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "jump"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "cmp_op"
  fully_qualified_name: "opcode.cmp_op"
  type_annotation {
    pretty_printed_name: "typing.Sequence[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "typing.Sequence"
  }
  valid_for: "27"
}
vars {
  name: "cmp_op"
  fully_qualified_name: "opcode.cmp_op"
  type_annotation {
    pretty_printed_name: "Tuple[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
    kind: TUPLE
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
vars {
  name: "cmp_op"
  fully_qualified_name: "opcode.cmp_op"
  type_annotation {
    pretty_printed_name: "Tuple[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
    kind: TUPLE
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.str]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "hasconst"
  fully_qualified_name: "opcode.hasconst"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.int]"
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "hasname"
  fully_qualified_name: "opcode.hasname"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.int]"
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "hasjrel"
  fully_qualified_name: "opcode.hasjrel"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.int]"
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "hasjabs"
  fully_qualified_name: "opcode.hasjabs"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.int]"
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "haslocal"
  fully_qualified_name: "opcode.haslocal"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.int]"
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "hascompare"
  fully_qualified_name: "opcode.hascompare"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.int]"
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "hasfree"
  fully_qualified_name: "opcode.hasfree"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.int]"
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "opname"
  fully_qualified_name: "opcode.opname"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "opmap"
  fully_qualified_name: "opcode.opmap"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,builtins.int]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    fully_qualified_name: "builtins.dict"
  }
  valid_for: "27"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "HAVE_ARGUMENT"
  fully_qualified_name: "opcode.HAVE_ARGUMENT"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
}
vars {
  name: "HAVE_ARGUMENT"
  fully_qualified_name: "opcode.HAVE_ARGUMENT"
  type_annotation {
    pretty_printed_name: "Literal[builtins.int]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "EXTENDED_ARG"
  fully_qualified_name: "opcode.EXTENDED_ARG"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "27"
}
vars {
  name: "EXTENDED_ARG"
  fully_qualified_name: "opcode.EXTENDED_ARG"
  type_annotation {
    pretty_printed_name: "Literal[builtins.int]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "__all__"
  fully_qualified_name: "opcode.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "hasnargs"
  fully_qualified_name: "opcode.hasnargs"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.int]"
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
