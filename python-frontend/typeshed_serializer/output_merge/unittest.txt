fully_qualified_name: "unittest"
classes {
  name: "FunctionTestCase"
  fully_qualified_name: "unittest.case.FunctionTestCase"
  super_classes: "unittest.case.TestCase"
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.case.FunctionTestCase.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.FunctionTestCase"
        fully_qualified_name: "unittest.case.FunctionTestCase"
      }
    }
    parameters {
      name: "testFunc"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "setUp"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "tearDown"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "description"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "runTest"
    fully_qualified_name: "unittest.case.FunctionTestCase.runTest"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.FunctionTestCase"
        fully_qualified_name: "unittest.case.FunctionTestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "SkipTest"
  fully_qualified_name: "unittest.case.SkipTest"
  super_classes: "builtins.Exception"
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.case.SkipTest.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.SkipTest"
        fully_qualified_name: "unittest.case.SkipTest"
      }
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "TestCase"
  fully_qualified_name: "unittest.case.TestCase"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.case.TestCase.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "methodName"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "unittest.case.TestCase.__eq__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "setUp"
    fully_qualified_name: "unittest.case.TestCase.setUp"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tearDown"
    fully_qualified_name: "unittest.case.TestCase.tearDown"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "setUpClass"
    fully_qualified_name: "unittest.case.TestCase.setUpClass"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case.TestCase]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tearDownClass"
    fully_qualified_name: "unittest.case.TestCase.tearDownClass"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case.TestCase]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "run"
    fully_qualified_name: "unittest.case.TestCase.run"
    return_annotation {
      pretty_printed_name: "Union[unittest.result.TestResult,None]"
      kind: UNION
      args {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "result"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[unittest.result.TestResult,None]"
        kind: UNION
        args {
          pretty_printed_name: "unittest.result.TestResult"
          fully_qualified_name: "unittest.result.TestResult"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__call__"
    fully_qualified_name: "unittest.case.TestCase.__call__"
    return_annotation {
      pretty_printed_name: "Union[unittest.result.TestResult,None]"
      kind: UNION
      args {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "result"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[unittest.result.TestResult,None]"
        kind: UNION
        args {
          pretty_printed_name: "unittest.result.TestResult"
          fully_qualified_name: "unittest.result.TestResult"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "skipTest"
    fully_qualified_name: "unittest.case.TestCase.skipTest"
    return_annotation {
      pretty_printed_name: "NoReturn"
      kind: UNINHABITED
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "subTest"
    fully_qualified_name: "unittest.case.TestCase.subTest"
    return_annotation {
      pretty_printed_name: "contextlib.AbstractContextManager[None]"
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "contextlib.AbstractContextManager"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "params"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "debug"
    fully_qualified_name: "unittest.case.TestCase.debug"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_addSkip"
    fully_qualified_name: "unittest.case.TestCase._addSkip"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "result"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "test_case"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertEqual"
    fully_qualified_name: "unittest.case.TestCase.assertEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertNotEqual"
    fully_qualified_name: "unittest.case.TestCase.assertNotEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertTrue"
    fully_qualified_name: "unittest.case.TestCase.assertTrue"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "expr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertFalse"
    fully_qualified_name: "unittest.case.TestCase.assertFalse"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "expr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertIs"
    fully_qualified_name: "unittest.case.TestCase.assertIs"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "expr1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    parameters {
      name: "expr2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertIsNot"
    fully_qualified_name: "unittest.case.TestCase.assertIsNot"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "expr1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    parameters {
      name: "expr2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertIsNone"
    fully_qualified_name: "unittest.case.TestCase.assertIsNone"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertIsNotNone"
    fully_qualified_name: "unittest.case.TestCase.assertIsNotNone"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertIn"
    fully_qualified_name: "unittest.case.TestCase.assertIn"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "member"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "container"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[Any],typing.Container[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "typing.Container[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Container"
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertNotIn"
    fully_qualified_name: "unittest.case.TestCase.assertNotIn"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "member"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "container"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[Any],typing.Container[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "typing.Container[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Container"
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertIsInstance"
    fully_qualified_name: "unittest.case.TestCase.assertIsInstance"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ClassInfo]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertNotIsInstance"
    fully_qualified_name: "unittest.case.TestCase.assertNotIsInstance"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ClassInfo]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertLogs"
    fully_qualified_name: "unittest.case.TestCase.assertLogs"
    return_annotation {
      pretty_printed_name: "unittest.case._AssertLogsContext[Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]]"
      args {
        pretty_printed_name: "Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.list[logging.LogRecord]"
          args {
            pretty_printed_name: "logging.LogRecord"
            fully_qualified_name: "logging.LogRecord"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
      }
      fully_qualified_name: "unittest.case._AssertLogsContext"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "logger"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,logging.Logger,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "logging.Logger"
          fully_qualified_name: "logging.Logger"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "assertLogs"
    fully_qualified_name: "unittest.case.TestCase.assertLogs"
    return_annotation {
      pretty_printed_name: "unittest._log._AssertLogsContext[Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]]"
      args {
        pretty_printed_name: "Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.list[logging.LogRecord]"
          args {
            pretty_printed_name: "logging.LogRecord"
            fully_qualified_name: "logging.LogRecord"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
      }
      fully_qualified_name: "unittest._log._AssertLogsContext"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "logger"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,logging.Logger,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "logging.Logger"
          fully_qualified_name: "logging.Logger"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertRegex"
    fully_qualified_name: "unittest.case.TestCase.assertRegex"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "expected_regex"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.AnyStr,re.Pattern[typing.AnyStr]]"
        kind: UNION
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertNotRegex"
    fully_qualified_name: "unittest.case.TestCase.assertNotRegex"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "unexpected_regex"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.AnyStr,re.Pattern[typing.AnyStr]]"
        kind: UNION
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertCountEqual"
    fully_qualified_name: "unittest.case.TestCase.assertCountEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addTypeEqualityFunc"
    fully_qualified_name: "unittest.case.TestCase.addTypeEqualityFunc"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "typeobj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    parameters {
      name: "function"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "addTypeEqualityFunc"
    fully_qualified_name: "unittest.case.TestCase.addTypeEqualityFunc"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "typeobj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[Any]"
        kind: TYPE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
    }
    parameters {
      name: "function"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertMultiLineEqual"
    fully_qualified_name: "unittest.case.TestCase.assertMultiLineEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertSequenceEqual"
    fully_qualified_name: "unittest.case.TestCase.assertSequenceEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "seq1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "seq2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "seq_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.type,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "assertSequenceEqual"
    fully_qualified_name: "unittest.case.TestCase.assertSequenceEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "seq1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "seq2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "seq_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[typing.Sequence[Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[typing.Sequence[Any]]"
          kind: TYPE
          args {
            pretty_printed_name: "typing.Sequence[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Sequence"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertListEqual"
    fully_qualified_name: "unittest.case.TestCase.assertListEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "list1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.list"
      }
    }
    parameters {
      name: "list2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.list"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertTupleEqual"
    fully_qualified_name: "unittest.case.TestCase.assertTupleEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "tuple1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
    }
    parameters {
      name: "tuple2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "assertTupleEqual"
    fully_qualified_name: "unittest.case.TestCase.assertTupleEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "tuple1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.tuple[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
    parameters {
      name: "tuple2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.tuple[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertSetEqual"
    fully_qualified_name: "unittest.case.TestCase.assertSetEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "set1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[builtins.object]"
        args {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "set2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[builtins.object]"
        args {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertDictEqual"
    fully_qualified_name: "unittest.case.TestCase.assertDictEqual"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "d1"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,builtins.object]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "d2"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,builtins.object]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "fail"
    fully_qualified_name: "unittest.case.TestCase.fail"
    return_annotation {
      pretty_printed_name: "NoReturn"
      kind: UNINHABITED
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "countTestCases"
    fully_qualified_name: "unittest.case.TestCase.countTestCases"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "defaultTestResult"
    fully_qualified_name: "unittest.case.TestCase.defaultTestResult"
    return_annotation {
      pretty_printed_name: "unittest.result.TestResult"
      fully_qualified_name: "unittest.result.TestResult"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "id"
    fully_qualified_name: "unittest.case.TestCase.id"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "shortDescription"
    fully_qualified_name: "unittest.case.TestCase.shortDescription"
    return_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addCleanup"
    fully_qualified_name: "unittest.case.TestCase.addCleanup"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "function"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "addCleanup"
    fully_qualified_name: "unittest.case.TestCase.addCleanup"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "__function"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "doCleanups"
    fully_qualified_name: "unittest.case.TestCase.doCleanups"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_formatMessage"
    fully_qualified_name: "unittest.case.TestCase._formatMessage"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "standardMsg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_getAssertEqualityFunc"
    fully_qualified_name: "unittest.case.TestCase._getAssertEqualityFunc"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "first"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "second"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertDictContainsSubset"
    fully_qualified_name: "unittest.case.TestCase.assertDictContainsSubset"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "subset"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "dictionary"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.object,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addClassCleanup"
    fully_qualified_name: "unittest.case.TestCase.addClassCleanup"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case.TestCase]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    parameters {
      name: "__function"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "doClassCleanups"
    fully_qualified_name: "unittest.case.TestCase.doClassCleanups"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case.TestCase]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "assertNoLogs"
    fully_qualified_name: "unittest.case.TestCase.assertNoLogs"
    return_annotation {
      pretty_printed_name: "unittest._log._AssertLogsContext[None]"
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "unittest._log._AssertLogsContext"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "logger"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,logging.Logger,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "logging.Logger"
          fully_qualified_name: "logging.Logger"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertGreater"
    fullname: "unittest.case.TestCase.assertGreater"
    definitions {
      name: "assertGreater"
      fully_qualified_name: "unittest.case.TestCase.assertGreater"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "a"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsDunderGT[unittest.case._T]"
          args {
            pretty_printed_name: "unittest.case._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsDunderGT"
        }
      }
      parameters {
        name: "b"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertGreater"
      fully_qualified_name: "unittest.case.TestCase.assertGreater"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "a"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "b"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsDunderLT[unittest.case._T]"
          args {
            pretty_printed_name: "unittest.case._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsDunderLT"
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertGreaterEqual"
    fullname: "unittest.case.TestCase.assertGreaterEqual"
    definitions {
      name: "assertGreaterEqual"
      fully_qualified_name: "unittest.case.TestCase.assertGreaterEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "a"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsDunderGE[unittest.case._T]"
          args {
            pretty_printed_name: "unittest.case._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsDunderGE"
        }
      }
      parameters {
        name: "b"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertGreaterEqual"
      fully_qualified_name: "unittest.case.TestCase.assertGreaterEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "a"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "b"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsDunderLE[unittest.case._T]"
          args {
            pretty_printed_name: "unittest.case._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsDunderLE"
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertLess"
    fullname: "unittest.case.TestCase.assertLess"
    definitions {
      name: "assertLess"
      fully_qualified_name: "unittest.case.TestCase.assertLess"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "a"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsDunderLT[unittest.case._T]"
          args {
            pretty_printed_name: "unittest.case._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsDunderLT"
        }
      }
      parameters {
        name: "b"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertLess"
      fully_qualified_name: "unittest.case.TestCase.assertLess"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "a"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "b"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsDunderGT[unittest.case._T]"
          args {
            pretty_printed_name: "unittest.case._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsDunderGT"
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertLessEqual"
    fullname: "unittest.case.TestCase.assertLessEqual"
    definitions {
      name: "assertLessEqual"
      fully_qualified_name: "unittest.case.TestCase.assertLessEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "a"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsDunderLT[unittest.case._T]"
          args {
            pretty_printed_name: "unittest.case._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsDunderLT"
        }
      }
      parameters {
        name: "b"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertLessEqual"
      fully_qualified_name: "unittest.case.TestCase.assertLessEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "a"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "b"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsDunderGT[unittest.case._T]"
          args {
            pretty_printed_name: "unittest.case._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsDunderGT"
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertRaises"
    fullname: "unittest.case.TestCase.assertRaises"
    definitions {
      name: "assertRaises"
      fully_qualified_name: "unittest.case.TestCase.assertRaises"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.type,Tuple[builtins.type,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          args {
            pretty_printed_name: "Tuple[builtins.type,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.type"
              fully_qualified_name: "builtins.type"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertRaises"
      fully_qualified_name: "unittest.case.TestCase.assertRaises"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertRaisesContext[unittest.case._E]"
        args {
          pretty_printed_name: "unittest.case._E"
          kind: TYPE_VAR
        }
        fully_qualified_name: "unittest.case._AssertRaisesContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.type,Tuple[builtins.type,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          args {
            pretty_printed_name: "Tuple[builtins.type,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.type"
              fully_qualified_name: "builtins.type"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
      }
      parameters {
        name: "msg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "assertRaises"
    fullname: "unittest.case.TestCase.assertRaises"
    definitions {
      name: "assertRaises"
      fully_qualified_name: "unittest.case.TestCase.assertRaises"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.BaseException]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.BaseException]]"
            args {
              pretty_printed_name: "Type[builtins.BaseException]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertRaises"
      fully_qualified_name: "unittest.case.TestCase.assertRaises"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertRaisesContext[unittest.case._E]"
        args {
          pretty_printed_name: "unittest.case._E"
          kind: TYPE_VAR
        }
        fully_qualified_name: "unittest.case._AssertRaisesContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[unittest.case._E]"
            kind: TYPE
            args {
              pretty_printed_name: "unittest.case._E"
              kind: TYPE_VAR
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[unittest.case._E]]"
            args {
              pretty_printed_name: "Type[unittest.case._E]"
              kind: TYPE
              args {
                pretty_printed_name: "unittest.case._E"
                kind: TYPE_VAR
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "msg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertRaisesRegex"
    fullname: "unittest.case.TestCase.assertRaisesRegex"
    definitions {
      name: "assertRaisesRegex"
      fully_qualified_name: "unittest.case.TestCase.assertRaisesRegex"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.type,Tuple[builtins.type,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          args {
            pretty_printed_name: "Tuple[builtins.type,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.type"
              fully_qualified_name: "builtins.type"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,re.Pattern[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "re.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "re.Pattern"
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertRaisesRegex"
      fully_qualified_name: "unittest.case.TestCase.assertRaisesRegex"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertRaisesContext[unittest.case._E]"
        args {
          pretty_printed_name: "unittest.case._E"
          kind: TYPE_VAR
        }
        fully_qualified_name: "unittest.case._AssertRaisesContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.type,Tuple[builtins.type,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          args {
            pretty_printed_name: "Tuple[builtins.type,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.type"
              fully_qualified_name: "builtins.type"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,re.Pattern[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "re.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "re.Pattern"
          }
        }
      }
      parameters {
        name: "msg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "assertRaisesRegex"
    fullname: "unittest.case.TestCase.assertRaisesRegex"
    definitions {
      name: "assertRaisesRegex"
      fully_qualified_name: "unittest.case.TestCase.assertRaisesRegex"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.BaseException]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.BaseException"
              fully_qualified_name: "builtins.BaseException"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.BaseException]]"
            args {
              pretty_printed_name: "Type[builtins.BaseException]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.BaseException"
                fully_qualified_name: "builtins.BaseException"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,re.Pattern[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "re.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "re.Pattern"
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertRaisesRegex"
      fully_qualified_name: "unittest.case.TestCase.assertRaisesRegex"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertRaisesContext[unittest.case._E]"
        args {
          pretty_printed_name: "unittest.case._E"
          kind: TYPE_VAR
        }
        fully_qualified_name: "unittest.case._AssertRaisesContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_exception"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[unittest.case._E]"
            kind: TYPE
            args {
              pretty_printed_name: "unittest.case._E"
              kind: TYPE_VAR
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[unittest.case._E]]"
            args {
              pretty_printed_name: "Type[unittest.case._E]"
              kind: TYPE
              args {
                pretty_printed_name: "unittest.case._E"
                kind: TYPE_VAR
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,re.Pattern[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "re.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "re.Pattern"
          }
        }
      }
      parameters {
        name: "msg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertWarns"
    fullname: "unittest.case.TestCase.assertWarns"
    definitions {
      name: "assertWarns"
      fully_qualified_name: "unittest.case.TestCase.assertWarns"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_warning"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.type,Tuple[builtins.type,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          args {
            pretty_printed_name: "Tuple[builtins.type,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.type"
              fully_qualified_name: "builtins.type"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertWarns"
      fully_qualified_name: "unittest.case.TestCase.assertWarns"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertWarnsContext"
        fully_qualified_name: "unittest.case._AssertWarnsContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_warning"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.type,Tuple[builtins.type,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          args {
            pretty_printed_name: "Tuple[builtins.type,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.type"
              fully_qualified_name: "builtins.type"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
      }
      parameters {
        name: "msg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "assertWarns"
    fullname: "unittest.case.TestCase.assertWarns"
    definitions {
      name: "assertWarns"
      fully_qualified_name: "unittest.case.TestCase.assertWarns"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_warning"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.Warning]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.Warning"
              fully_qualified_name: "builtins.Warning"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.Warning]]"
            args {
              pretty_printed_name: "Type[builtins.Warning]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.Warning"
                fully_qualified_name: "builtins.Warning"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertWarns"
      fully_qualified_name: "unittest.case.TestCase.assertWarns"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertWarnsContext"
        fully_qualified_name: "unittest.case._AssertWarnsContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_warning"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.Warning]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.Warning"
              fully_qualified_name: "builtins.Warning"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.Warning]]"
            args {
              pretty_printed_name: "Type[builtins.Warning]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.Warning"
                fully_qualified_name: "builtins.Warning"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "msg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertWarnsRegex"
    fullname: "unittest.case.TestCase.assertWarnsRegex"
    definitions {
      name: "assertWarnsRegex"
      fully_qualified_name: "unittest.case.TestCase.assertWarnsRegex"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_warning"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.type,Tuple[builtins.type,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          args {
            pretty_printed_name: "Tuple[builtins.type,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.type"
              fully_qualified_name: "builtins.type"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,re.Pattern[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "re.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "re.Pattern"
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertWarnsRegex"
      fully_qualified_name: "unittest.case.TestCase.assertWarnsRegex"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertWarnsContext"
        fully_qualified_name: "unittest.case._AssertWarnsContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_warning"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.type,Tuple[builtins.type,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          args {
            pretty_printed_name: "Tuple[builtins.type,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.type"
              fully_qualified_name: "builtins.type"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,re.Pattern[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "re.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "re.Pattern"
          }
        }
      }
      parameters {
        name: "msg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "assertWarnsRegex"
    fullname: "unittest.case.TestCase.assertWarnsRegex"
    definitions {
      name: "assertWarnsRegex"
      fully_qualified_name: "unittest.case.TestCase.assertWarnsRegex"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_warning"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.Warning]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.Warning"
              fully_qualified_name: "builtins.Warning"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.Warning]]"
            args {
              pretty_printed_name: "Type[builtins.Warning]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.Warning"
                fully_qualified_name: "builtins.Warning"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,re.Pattern[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "re.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "re.Pattern"
          }
        }
      }
      parameters {
        name: "callable"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertWarnsRegex"
      fully_qualified_name: "unittest.case.TestCase.assertWarnsRegex"
      return_annotation {
        pretty_printed_name: "unittest.case._AssertWarnsContext"
        fully_qualified_name: "unittest.case._AssertWarnsContext"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "expected_warning"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]"
          kind: UNION
          args {
            pretty_printed_name: "Type[builtins.Warning]"
            kind: TYPE
            args {
              pretty_printed_name: "builtins.Warning"
              fully_qualified_name: "builtins.Warning"
            }
          }
          args {
            pretty_printed_name: "builtins.tuple[Type[builtins.Warning]]"
            args {
              pretty_printed_name: "Type[builtins.Warning]"
              kind: TYPE
              args {
                pretty_printed_name: "builtins.Warning"
                fully_qualified_name: "builtins.Warning"
              }
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
      }
      parameters {
        name: "expected_regex"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,re.Pattern[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "re.Pattern[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "re.Pattern"
          }
        }
      }
      parameters {
        name: "msg"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertAlmostEqual"
    fullname: "unittest.case.TestCase.assertAlmostEqual"
    definitions {
      name: "assertAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._S"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._S"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "places"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "delta"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._SupportsAbsAndDunderGE"
          fully_qualified_name: "unittest.case._SupportsAbsAndDunderGE"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._S"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._S"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "places"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "delta"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "unittest.case._SupportsAbsAndDunderGE"
          fully_qualified_name: "unittest.case._SupportsAbsAndDunderGE"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsSub[unittest.case._T,typing.SupportsAbs[typing.SupportsRound[builtins.object]]]"
          args {
            pretty_printed_name: "unittest.case._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing.SupportsAbs[typing.SupportsRound[builtins.object]]"
            args {
              pretty_printed_name: "typing.SupportsRound[builtins.object]"
              args {
                pretty_printed_name: "builtins.object"
                fully_qualified_name: "builtins.object"
              }
              fully_qualified_name: "typing.SupportsRound"
            }
            fully_qualified_name: "typing.SupportsAbs"
          }
          fully_qualified_name: "_typeshed.SupportsSub"
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "places"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "delta"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsRSub[unittest.case._T,typing.SupportsAbs[typing.SupportsRound[builtins.object]]]"
          args {
            pretty_printed_name: "unittest.case._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing.SupportsAbs[typing.SupportsRound[builtins.object]]"
            args {
              pretty_printed_name: "typing.SupportsRound[builtins.object]"
              args {
                pretty_printed_name: "builtins.object"
                fully_qualified_name: "builtins.object"
              }
              fully_qualified_name: "typing.SupportsRound"
            }
            fully_qualified_name: "typing.SupportsAbs"
          }
          fully_qualified_name: "_typeshed.SupportsRSub"
        }
      }
      parameters {
        name: "places"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "delta"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "assertNotAlmostEqual"
    fullname: "unittest.case.TestCase.assertNotAlmostEqual"
    definitions {
      name: "assertNotAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertNotAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._S"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._S"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "places"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "delta"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._SupportsAbsAndDunderGE"
          fully_qualified_name: "unittest.case._SupportsAbsAndDunderGE"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertNotAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertNotAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._S"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._S"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "places"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "delta"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "unittest.case._SupportsAbsAndDunderGE"
          fully_qualified_name: "unittest.case._SupportsAbsAndDunderGE"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertNotAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertNotAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsSub[unittest.case._T,typing.SupportsAbs[typing.SupportsRound[builtins.object]]]"
          args {
            pretty_printed_name: "unittest.case._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing.SupportsAbs[typing.SupportsRound[builtins.object]]"
            args {
              pretty_printed_name: "typing.SupportsRound[builtins.object]"
              args {
                pretty_printed_name: "builtins.object"
                fully_qualified_name: "builtins.object"
              }
              fully_qualified_name: "typing.SupportsRound"
            }
            fully_qualified_name: "typing.SupportsAbs"
          }
          fully_qualified_name: "_typeshed.SupportsSub"
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "places"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "delta"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "assertNotAlmostEqual"
      fully_qualified_name: "unittest.case.TestCase.assertNotAlmostEqual"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
      parameters {
        name: "first"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "unittest.case._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "second"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsRSub[unittest.case._T,typing.SupportsAbs[typing.SupportsRound[builtins.object]]]"
          args {
            pretty_printed_name: "unittest.case._T"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing.SupportsAbs[typing.SupportsRound[builtins.object]]"
            args {
              pretty_printed_name: "typing.SupportsRound[builtins.object]"
              args {
                pretty_printed_name: "builtins.object"
                fully_qualified_name: "builtins.object"
              }
              fully_qualified_name: "typing.SupportsRound"
            }
            fully_qualified_name: "typing.SupportsAbs"
          }
          fully_qualified_name: "_typeshed.SupportsRSub"
        }
      }
      parameters {
        name: "places"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.int,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Any,None]"
          kind: UNION
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "delta"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "failureException"
    fully_qualified_name: "unittest.case.TestCase.failureException"
    type_annotation {
      pretty_printed_name: "builtins.type"
      fully_qualified_name: "builtins.type"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  attributes {
    name: "failureException"
    fully_qualified_name: "unittest.case.TestCase.failureException"
    type_annotation {
      pretty_printed_name: "Type[builtins.BaseException]"
      kind: TYPE
      args {
        pretty_printed_name: "builtins.BaseException"
        fully_qualified_name: "builtins.BaseException"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "longMessage"
    fully_qualified_name: "unittest.case.TestCase.longMessage"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "maxDiff"
    fully_qualified_name: "unittest.case.TestCase.maxDiff"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_testMethodName"
    fully_qualified_name: "unittest.case.TestCase._testMethodName"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_testMethodDoc"
    fully_qualified_name: "unittest.case.TestCase._testMethodDoc"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "failUnlessEqual"
    fully_qualified_name: "unittest.case.TestCase.failUnlessEqual"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "assertEquals"
    fully_qualified_name: "unittest.case.TestCase.assertEquals"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "failIfEqual"
    fully_qualified_name: "unittest.case.TestCase.failIfEqual"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "assertNotEquals"
    fully_qualified_name: "unittest.case.TestCase.assertNotEquals"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "failUnless"
    fully_qualified_name: "unittest.case.TestCase.failUnless"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "assert_"
    fully_qualified_name: "unittest.case.TestCase.assert_"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "failIf"
    fully_qualified_name: "unittest.case.TestCase.failIf"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "failUnlessRaises"
    fully_qualified_name: "unittest.case.TestCase.failUnlessRaises"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "failUnlessAlmostEqual"
    fully_qualified_name: "unittest.case.TestCase.failUnlessAlmostEqual"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "assertAlmostEquals"
    fully_qualified_name: "unittest.case.TestCase.assertAlmostEquals"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "failIfAlmostEqual"
    fully_qualified_name: "unittest.case.TestCase.failIfAlmostEqual"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "assertNotAlmostEquals"
    fully_qualified_name: "unittest.case.TestCase.assertNotAlmostEquals"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "assertRegexpMatches"
    fully_qualified_name: "unittest.case.TestCase.assertRegexpMatches"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "assertNotRegexpMatches"
    fully_qualified_name: "unittest.case.TestCase.assertNotRegexpMatches"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "assertRaisesRegexp"
    fully_qualified_name: "unittest.case.TestCase.assertRaisesRegexp"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "TestLoader"
  fully_qualified_name: "unittest.loader.TestLoader"
  super_classes: "builtins.object"
  methods {
    name: "loadTestsFromTestCase"
    fully_qualified_name: "unittest.loader.TestLoader.loadTestsFromTestCase"
    return_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "testCaseClass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "loadTestsFromTestCase"
    fully_qualified_name: "unittest.loader.TestLoader.loadTestsFromTestCase"
    return_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "testCaseClass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case.TestCase]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "loadTestsFromModule"
    fully_qualified_name: "unittest.loader.TestLoader.loadTestsFromModule"
    return_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "module"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "types.ModuleType"
        fully_qualified_name: "types.ModuleType"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "pattern"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "loadTestsFromName"
    fully_qualified_name: "unittest.loader.TestLoader.loadTestsFromName"
    return_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "module"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[types.ModuleType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.ModuleType"
          fully_qualified_name: "types.ModuleType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "loadTestsFromNames"
    fully_qualified_name: "unittest.loader.TestLoader.loadTestsFromNames"
    return_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "names"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "module"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[types.ModuleType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.ModuleType"
          fully_qualified_name: "types.ModuleType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getTestCaseNames"
    fully_qualified_name: "unittest.loader.TestLoader.getTestCaseNames"
    return_annotation {
      pretty_printed_name: "typing.Sequence[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.Sequence"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "testCaseClass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "getTestCaseNames"
    fully_qualified_name: "unittest.loader.TestLoader.getTestCaseNames"
    return_annotation {
      pretty_printed_name: "typing.Sequence[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.Sequence"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "testCaseClass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[unittest.case.TestCase]"
        kind: TYPE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "discover"
    fully_qualified_name: "unittest.loader.TestLoader.discover"
    return_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "start_dir"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "pattern"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "top_level_dir"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_match_path"
    fully_qualified_name: "unittest.loader.TestLoader._match_path"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "full_path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "pattern"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "errors"
    fully_qualified_name: "unittest.loader.TestLoader.errors"
    type_annotation {
      pretty_printed_name: "builtins.list[builtins.type]"
      args {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  attributes {
    name: "errors"
    fully_qualified_name: "unittest.loader.TestLoader.errors"
    type_annotation {
      pretty_printed_name: "builtins.list[Type[builtins.BaseException]]"
      args {
        pretty_printed_name: "Type[builtins.BaseException]"
        kind: TYPE
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "testMethodPrefix"
    fully_qualified_name: "unittest.loader.TestLoader.testMethodPrefix"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "sortTestMethodsUsing"
    fully_qualified_name: "unittest.loader.TestLoader.sortTestMethodsUsing"
    type_annotation {
      pretty_printed_name: "UnboundType[_SortComparisonMethod]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "testNamePatterns"
    fully_qualified_name: "unittest.loader.TestLoader.testNamePatterns"
    type_annotation {
      pretty_printed_name: "Union[builtins.list[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "suiteClass"
    fully_qualified_name: "unittest.loader.TestLoader.suiteClass"
    type_annotation {
      pretty_printed_name: "UnboundType[_SuiteClass]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "TestProgram"
  fully_qualified_name: "unittest.main.TestProgram"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.main.TestProgram.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.main.TestProgram"
        fully_qualified_name: "unittest.main.TestProgram"
      }
    }
    parameters {
      name: "module"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[None,builtins.str,types.ModuleType]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "types.ModuleType"
          fully_qualified_name: "types.ModuleType"
        }
      }
      has_default: true
    }
    parameters {
      name: "defaultTest"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "argv"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.list[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "testRunner"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.type,unittest.main._TestRunner,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
        args {
          pretty_printed_name: "unittest.main._TestRunner"
          fully_qualified_name: "unittest.main._TestRunner"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "testLoader"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
      has_default: true
    }
    parameters {
      name: "exit"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "verbosity"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "failfast"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "catchbreak"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "buffer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "warnings"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "tb_locals"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.main.TestProgram.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.main.TestProgram"
        fully_qualified_name: "unittest.main.TestProgram"
      }
    }
    parameters {
      name: "module"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[None,builtins.str,types.ModuleType]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "types.ModuleType"
          fully_qualified_name: "types.ModuleType"
        }
      }
      has_default: true
    }
    parameters {
      name: "defaultTest"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "argv"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.list[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "testRunner"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[unittest.main._TestRunner],unittest.main._TestRunner,None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[unittest.main._TestRunner]"
          kind: TYPE
          args {
            pretty_printed_name: "unittest.main._TestRunner"
            fully_qualified_name: "unittest.main._TestRunner"
          }
        }
        args {
          pretty_printed_name: "unittest.main._TestRunner"
          fully_qualified_name: "unittest.main._TestRunner"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "testLoader"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.loader.TestLoader"
        fully_qualified_name: "unittest.loader.TestLoader"
      }
      has_default: true
    }
    parameters {
      name: "exit"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "verbosity"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "failfast"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "catchbreak"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "buffer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "warnings"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "tb_locals"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "usageExit"
    fully_qualified_name: "unittest.main.TestProgram.usageExit"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.main.TestProgram"
        fully_qualified_name: "unittest.main.TestProgram"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "parseArgs"
    fully_qualified_name: "unittest.main.TestProgram.parseArgs"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.main.TestProgram"
        fully_qualified_name: "unittest.main.TestProgram"
      }
    }
    parameters {
      name: "argv"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "createTests"
    fully_qualified_name: "unittest.main.TestProgram.createTests"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.main.TestProgram"
        fully_qualified_name: "unittest.main.TestProgram"
      }
    }
    parameters {
      name: "from_discovery"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "Loader"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[unittest.loader.TestLoader,None]"
        kind: UNION
        args {
          pretty_printed_name: "unittest.loader.TestLoader"
          fully_qualified_name: "unittest.loader.TestLoader"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "runTests"
    fully_qualified_name: "unittest.main.TestProgram.runTests"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.main.TestProgram"
        fully_qualified_name: "unittest.main.TestProgram"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "result"
    fully_qualified_name: "unittest.main.TestProgram.result"
    type_annotation {
      pretty_printed_name: "unittest.result.TestResult"
      fully_qualified_name: "unittest.result.TestResult"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "module"
    fully_qualified_name: "unittest.main.TestProgram.module"
    type_annotation {
      pretty_printed_name: "Union[None,builtins.str,types.ModuleType]"
      kind: UNION
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "types.ModuleType"
        fully_qualified_name: "types.ModuleType"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "verbosity"
    fully_qualified_name: "unittest.main.TestProgram.verbosity"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "failfast"
    fully_qualified_name: "unittest.main.TestProgram.failfast"
    type_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "catchbreak"
    fully_qualified_name: "unittest.main.TestProgram.catchbreak"
    type_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "buffer"
    fully_qualified_name: "unittest.main.TestProgram.buffer"
    type_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "progName"
    fully_qualified_name: "unittest.main.TestProgram.progName"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "warnings"
    fully_qualified_name: "unittest.main.TestProgram.warnings"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "testNamePatterns"
    fully_qualified_name: "unittest.main.TestProgram.testNamePatterns"
    type_annotation {
      pretty_printed_name: "Union[builtins.list[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "TestResult"
  fully_qualified_name: "unittest.result.TestResult"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.result.TestResult.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.TextIO,None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.TextIO"
          fully_qualified_name: "typing.TextIO"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "descriptions"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "verbosity"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "printErrors"
    fully_qualified_name: "unittest.result.TestResult.printErrors"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wasSuccessful"
    fully_qualified_name: "unittest.result.TestResult.wasSuccessful"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "stop"
    fully_qualified_name: "unittest.result.TestResult.stop"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "startTest"
    fully_qualified_name: "unittest.result.TestResult.startTest"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "test"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "stopTest"
    fully_qualified_name: "unittest.result.TestResult.stopTest"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "test"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "startTestRun"
    fully_qualified_name: "unittest.result.TestResult.startTestRun"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "stopTestRun"
    fully_qualified_name: "unittest.result.TestResult.stopTestRun"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addError"
    fully_qualified_name: "unittest.result.TestResult.addError"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "test"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "err"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[OptExcInfo]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addFailure"
    fully_qualified_name: "unittest.result.TestResult.addFailure"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "test"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "err"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[OptExcInfo]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addSuccess"
    fully_qualified_name: "unittest.result.TestResult.addSuccess"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "test"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addSkip"
    fully_qualified_name: "unittest.result.TestResult.addSkip"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "test"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addExpectedFailure"
    fully_qualified_name: "unittest.result.TestResult.addExpectedFailure"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "test"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "err"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[OptExcInfo]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addUnexpectedSuccess"
    fully_qualified_name: "unittest.result.TestResult.addUnexpectedSuccess"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "test"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addSubTest"
    fully_qualified_name: "unittest.result.TestResult.addSubTest"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "test"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "subtest"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    parameters {
      name: "err"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[OptExcInfo],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[OptExcInfo]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "errors"
    fully_qualified_name: "unittest.result.TestResult.errors"
    type_annotation {
      pretty_printed_name: "builtins.list[Tuple[unittest.case.TestCase,builtins.str]]"
      args {
        pretty_printed_name: "Tuple[unittest.case.TestCase,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "failures"
    fully_qualified_name: "unittest.result.TestResult.failures"
    type_annotation {
      pretty_printed_name: "builtins.list[Tuple[unittest.case.TestCase,builtins.str]]"
      args {
        pretty_printed_name: "Tuple[unittest.case.TestCase,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "skipped"
    fully_qualified_name: "unittest.result.TestResult.skipped"
    type_annotation {
      pretty_printed_name: "builtins.list[Tuple[unittest.case.TestCase,builtins.str]]"
      args {
        pretty_printed_name: "Tuple[unittest.case.TestCase,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "expectedFailures"
    fully_qualified_name: "unittest.result.TestResult.expectedFailures"
    type_annotation {
      pretty_printed_name: "builtins.list[Tuple[unittest.case.TestCase,builtins.str]]"
      args {
        pretty_printed_name: "Tuple[unittest.case.TestCase,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "unexpectedSuccesses"
    fully_qualified_name: "unittest.result.TestResult.unexpectedSuccesses"
    type_annotation {
      pretty_printed_name: "builtins.list[unittest.case.TestCase]"
      args {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "shouldStop"
    fully_qualified_name: "unittest.result.TestResult.shouldStop"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "testsRun"
    fully_qualified_name: "unittest.result.TestResult.testsRun"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "buffer"
    fully_qualified_name: "unittest.result.TestResult.buffer"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "failfast"
    fully_qualified_name: "unittest.result.TestResult.failfast"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "tb_locals"
    fully_qualified_name: "unittest.result.TestResult.tb_locals"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "TextTestResult"
  fully_qualified_name: "unittest.runner.TextTestResult"
  super_classes: "unittest.result.TestResult"
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.runner.TextTestResult.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.runner.TextTestResult"
        fully_qualified_name: "unittest.runner.TextTestResult"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.TextIO"
        fully_qualified_name: "typing.TextIO"
      }
    }
    parameters {
      name: "descriptions"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "verbosity"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "getDescription"
    fully_qualified_name: "unittest.runner.TextTestResult.getDescription"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.runner.TextTestResult"
        fully_qualified_name: "unittest.runner.TextTestResult"
      }
    }
    parameters {
      name: "test"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "printErrorList"
    fully_qualified_name: "unittest.runner.TextTestResult.printErrorList"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.runner.TextTestResult"
        fully_qualified_name: "unittest.runner.TextTestResult"
      }
    }
    parameters {
      name: "flavour"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Tuple[unittest.case.TestCase,builtins.str]]"
        args {
          pretty_printed_name: "Tuple[unittest.case.TestCase,builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "unittest.case.TestCase"
            fully_qualified_name: "unittest.case.TestCase"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "descriptions"
    fully_qualified_name: "unittest.runner.TextTestResult.descriptions"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "dots"
    fully_qualified_name: "unittest.runner.TextTestResult.dots"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "separator1"
    fully_qualified_name: "unittest.runner.TextTestResult.separator1"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "separator2"
    fully_qualified_name: "unittest.runner.TextTestResult.separator2"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "showAll"
    fully_qualified_name: "unittest.runner.TextTestResult.showAll"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "stream"
    fully_qualified_name: "unittest.runner.TextTestResult.stream"
    type_annotation {
      pretty_printed_name: "typing.TextIO"
      fully_qualified_name: "typing.TextIO"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "TextTestRunner"
  fully_qualified_name: "unittest.runner.TextTestRunner"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.runner.TextTestRunner.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.runner.TextTestRunner"
        fully_qualified_name: "unittest.runner.TextTestRunner"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.TextIO,None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.TextIO"
          fully_qualified_name: "typing.TextIO"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "descriptions"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "verbosity"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "failfast"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "buffer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "resultclass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_ResultClassType],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_ResultClassType]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "warnings"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.type,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "tb_locals"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.runner.TextTestRunner.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.runner.TextTestRunner"
        fully_qualified_name: "unittest.runner.TextTestRunner"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.TextIO,None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.TextIO"
          fully_qualified_name: "typing.TextIO"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "descriptions"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "verbosity"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "failfast"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "buffer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "resultclass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_ResultClassType],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_ResultClassType]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "warnings"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.Warning],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.Warning]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.Warning"
            fully_qualified_name: "builtins.Warning"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "tb_locals"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_makeResult"
    fully_qualified_name: "unittest.runner.TextTestRunner._makeResult"
    return_annotation {
      pretty_printed_name: "unittest.result.TestResult"
      fully_qualified_name: "unittest.result.TestResult"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.runner.TextTestRunner"
        fully_qualified_name: "unittest.runner.TextTestRunner"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "run"
    fully_qualified_name: "unittest.runner.TextTestRunner.run"
    return_annotation {
      pretty_printed_name: "unittest.result.TestResult"
      fully_qualified_name: "unittest.result.TestResult"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.runner.TextTestRunner"
        fully_qualified_name: "unittest.runner.TextTestRunner"
      }
    }
    parameters {
      name: "test"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[unittest.suite.TestSuite,unittest.case.TestCase]"
        kind: UNION
        args {
          pretty_printed_name: "unittest.suite.TestSuite"
          fully_qualified_name: "unittest.suite.TestSuite"
        }
        args {
          pretty_printed_name: "unittest.case.TestCase"
          fully_qualified_name: "unittest.case.TestCase"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "resultclass"
    fully_qualified_name: "unittest.runner.TextTestRunner.resultclass"
    type_annotation {
      pretty_printed_name: "UnboundType[_ResultClassType]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "BaseTestSuite"
  fully_qualified_name: "unittest.suite.BaseTestSuite"
  super_classes: "typing.Iterable"
  methods {
    name: "__init__"
    fully_qualified_name: "unittest.suite.BaseTestSuite.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.suite.BaseTestSuite"
        fully_qualified_name: "unittest.suite.BaseTestSuite"
      }
    }
    parameters {
      name: "tests"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[UnboundType[_TestType]]"
        args {
          pretty_printed_name: "UnboundType[_TestType]"
          kind: UNBOUND
        }
        fully_qualified_name: "typing.Iterable"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__call__"
    fully_qualified_name: "unittest.suite.BaseTestSuite.__call__"
    return_annotation {
      pretty_printed_name: "unittest.result.TestResult"
      fully_qualified_name: "unittest.result.TestResult"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.suite.BaseTestSuite"
        fully_qualified_name: "unittest.suite.BaseTestSuite"
      }
    }
    parameters {
      name: "result"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addTest"
    fully_qualified_name: "unittest.suite.BaseTestSuite.addTest"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.suite.BaseTestSuite"
        fully_qualified_name: "unittest.suite.BaseTestSuite"
      }
    }
    parameters {
      name: "test"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_TestType]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addTests"
    fully_qualified_name: "unittest.suite.BaseTestSuite.addTests"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.suite.BaseTestSuite"
        fully_qualified_name: "unittest.suite.BaseTestSuite"
      }
    }
    parameters {
      name: "tests"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[UnboundType[_TestType]]"
        args {
          pretty_printed_name: "UnboundType[_TestType]"
          kind: UNBOUND
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "run"
    fully_qualified_name: "unittest.suite.BaseTestSuite.run"
    return_annotation {
      pretty_printed_name: "unittest.result.TestResult"
      fully_qualified_name: "unittest.result.TestResult"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.suite.BaseTestSuite"
        fully_qualified_name: "unittest.suite.BaseTestSuite"
      }
    }
    parameters {
      name: "result"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "debug"
    fully_qualified_name: "unittest.suite.BaseTestSuite.debug"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.suite.BaseTestSuite"
        fully_qualified_name: "unittest.suite.BaseTestSuite"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "countTestCases"
    fully_qualified_name: "unittest.suite.BaseTestSuite.countTestCases"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.suite.BaseTestSuite"
        fully_qualified_name: "unittest.suite.BaseTestSuite"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "unittest.suite.BaseTestSuite.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[UnboundType[_TestType]]"
      args {
        pretty_printed_name: "UnboundType[_TestType]"
        kind: UNBOUND
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "unittest.suite.BaseTestSuite"
        fully_qualified_name: "unittest.suite.BaseTestSuite"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "unittest.suite.BaseTestSuite.__eq__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "unittest.suite.BaseTestSuite"
        fully_qualified_name: "unittest.suite.BaseTestSuite"
      }
    }
    parameters {
      name: "other"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "_tests"
    fully_qualified_name: "unittest.suite.BaseTestSuite._tests"
    type_annotation {
      pretty_printed_name: "builtins.list[unittest.case.TestCase]"
      args {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "_removed_tests"
    fully_qualified_name: "unittest.suite.BaseTestSuite._removed_tests"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "TestSuite"
  fully_qualified_name: "unittest.suite.TestSuite"
  super_classes: "unittest.suite.BaseTestSuite"
  methods {
    name: "run"
    fully_qualified_name: "unittest.suite.TestSuite.run"
    return_annotation {
      pretty_printed_name: "unittest.result.TestResult"
      fully_qualified_name: "unittest.result.TestResult"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.suite.TestSuite"
        fully_qualified_name: "unittest.suite.TestSuite"
      }
    }
    parameters {
      name: "result"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.result.TestResult"
        fully_qualified_name: "unittest.result.TestResult"
      }
    }
    parameters {
      name: "debug"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "IsolatedAsyncioTestCase"
  fully_qualified_name: "unittest.async_case.IsolatedAsyncioTestCase"
  super_classes: "unittest.case.TestCase"
  methods {
    name: "asyncSetUp"
    fully_qualified_name: "unittest.async_case.IsolatedAsyncioTestCase.asyncSetUp"
    return_annotation {
      pretty_printed_name: "typing.Coroutine[Any,Any,None]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Coroutine"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.async_case.IsolatedAsyncioTestCase"
        fully_qualified_name: "unittest.async_case.IsolatedAsyncioTestCase"
      }
    }
    is_asynchronous: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "asyncTearDown"
    fully_qualified_name: "unittest.async_case.IsolatedAsyncioTestCase.asyncTearDown"
    return_annotation {
      pretty_printed_name: "typing.Coroutine[Any,Any,None]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Coroutine"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.async_case.IsolatedAsyncioTestCase"
        fully_qualified_name: "unittest.async_case.IsolatedAsyncioTestCase"
      }
    }
    is_asynchronous: true
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "addAsyncCleanup"
    fully_qualified_name: "unittest.async_case.IsolatedAsyncioTestCase.addAsyncCleanup"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "unittest.async_case.IsolatedAsyncioTestCase"
        fully_qualified_name: "unittest.async_case.IsolatedAsyncioTestCase"
      }
    }
    parameters {
      name: "__func"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "expectedFailure"
  fully_qualified_name: "unittest.case.expectedFailure"
  return_annotation {
    pretty_printed_name: "unittest.case._FT"
    kind: TYPE_VAR
  }
  parameters {
    name: "test_item"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "unittest.case._FT"
      kind: TYPE_VAR
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "skip"
  fully_qualified_name: "unittest.case.skip"
  return_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  parameters {
    name: "reason"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "skipIf"
  fully_qualified_name: "unittest.case.skipIf"
  return_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  parameters {
    name: "condition"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
  }
  parameters {
    name: "reason"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "skipUnless"
  fully_qualified_name: "unittest.case.skipUnless"
  return_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  parameters {
    name: "condition"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
  }
  parameters {
    name: "reason"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "findTestCases"
  fully_qualified_name: "unittest.loader.findTestCases"
  return_annotation {
    pretty_printed_name: "unittest.suite.TestSuite"
    fully_qualified_name: "unittest.suite.TestSuite"
  }
  parameters {
    name: "module"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "types.ModuleType"
      fully_qualified_name: "types.ModuleType"
    }
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "sortUsing"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SortComparisonMethod]"
      kind: UNBOUND
    }
    has_default: true
  }
  parameters {
    name: "suiteClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SuiteClass]"
      kind: UNBOUND
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "getTestCaseNames"
  fully_qualified_name: "unittest.loader.getTestCaseNames"
  return_annotation {
    pretty_printed_name: "typing.Sequence[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "typing.Sequence"
  }
  parameters {
    name: "testCaseClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.type"
      fully_qualified_name: "builtins.type"
    }
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "sortUsing"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SortComparisonMethod]"
      kind: UNBOUND
    }
    has_default: true
  }
  parameters {
    name: "testNamePatterns"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.list[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
functions {
  name: "getTestCaseNames"
  fully_qualified_name: "unittest.loader.getTestCaseNames"
  return_annotation {
    pretty_printed_name: "typing.Sequence[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "typing.Sequence"
  }
  parameters {
    name: "testCaseClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Type[unittest.case.TestCase]"
      kind: TYPE
      args {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "sortUsing"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SortComparisonMethod]"
      kind: UNBOUND
    }
    has_default: true
  }
  parameters {
    name: "testNamePatterns"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.list[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "makeSuite"
  fully_qualified_name: "unittest.loader.makeSuite"
  return_annotation {
    pretty_printed_name: "unittest.suite.TestSuite"
    fully_qualified_name: "unittest.suite.TestSuite"
  }
  parameters {
    name: "testCaseClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.type"
      fully_qualified_name: "builtins.type"
    }
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "sortUsing"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SortComparisonMethod]"
      kind: UNBOUND
    }
    has_default: true
  }
  parameters {
    name: "suiteClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SuiteClass]"
      kind: UNBOUND
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
}
functions {
  name: "makeSuite"
  fully_qualified_name: "unittest.loader.makeSuite"
  return_annotation {
    pretty_printed_name: "unittest.suite.TestSuite"
    fully_qualified_name: "unittest.suite.TestSuite"
  }
  parameters {
    name: "testCaseClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Type[unittest.case.TestCase]"
      kind: TYPE
      args {
        pretty_printed_name: "unittest.case.TestCase"
        fully_qualified_name: "unittest.case.TestCase"
      }
    }
  }
  parameters {
    name: "prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "sortUsing"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SortComparisonMethod]"
      kind: UNBOUND
    }
    has_default: true
  }
  parameters {
    name: "suiteClass"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "UnboundType[_SuiteClass]"
      kind: UNBOUND
    }
    has_default: true
  }
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "installHandler"
  fully_qualified_name: "unittest.signals.installHandler"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "registerResult"
  fully_qualified_name: "unittest.signals.registerResult"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "result"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "unittest.result.TestResult"
      fully_qualified_name: "unittest.result.TestResult"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "removeResult"
  fully_qualified_name: "unittest.signals.removeResult"
  return_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
  parameters {
    name: "result"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "unittest.result.TestResult"
      fully_qualified_name: "unittest.result.TestResult"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "load_tests"
  fully_qualified_name: "unittest.load_tests"
  return_annotation {
    pretty_printed_name: "unittest.suite.TestSuite"
    fully_qualified_name: "unittest.suite.TestSuite"
  }
  parameters {
    name: "loader"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "unittest.loader.TestLoader"
      fully_qualified_name: "unittest.loader.TestLoader"
    }
  }
  parameters {
    name: "tests"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "unittest.suite.TestSuite"
      fully_qualified_name: "unittest.suite.TestSuite"
    }
  }
  parameters {
    name: "pattern"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "__dir__"
  fully_qualified_name: "unittest.__dir__"
  return_annotation {
    pretty_printed_name: "builtins.set[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.set"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "addModuleCleanup"
  fully_qualified_name: "unittest.case.addModuleCleanup"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "__function"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "kwargs"
    kind: VAR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
overloaded_functions {
  name: "removeHandler"
  fullname: "unittest.signals.removeHandler"
  definitions {
    name: "removeHandler"
    fully_qualified_name: "unittest.signals.removeHandler"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      has_default: true
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "removeHandler"
    fully_qualified_name: "unittest.signals.removeHandler"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "defaultTestLoader"
  fully_qualified_name: "unittest.loader.defaultTestLoader"
  type_annotation {
    pretty_printed_name: "unittest.loader.TestLoader"
    fully_qualified_name: "unittest.loader.TestLoader"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "__all__"
  fully_qualified_name: "unittest.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
