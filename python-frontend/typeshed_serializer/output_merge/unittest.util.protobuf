fully_qualified_name: "unittest.util"
functions {
  name: "_shorten"
  fully_qualified_name: "unittest.util._shorten"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "s"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "prefixlen"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "suffixlen"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "_common_shorten_repr"
  fully_qualified_name: "unittest.util._common_shorten_repr"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "args"
    kind: VAR_POSITIONAL
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "safe_repr"
  fully_qualified_name: "unittest.util.safe_repr"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "obj"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
  }
  parameters {
    name: "short"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "strclass"
  fully_qualified_name: "unittest.util.strclass"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "cls"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.type"
      fully_qualified_name: "builtins.type"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "sorted_list_difference"
  fully_qualified_name: "unittest.util.sorted_list_difference"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.list[unittest.util._T],builtins.list[unittest.util._T]]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.list[unittest.util._T]"
      args {
        pretty_printed_name: "unittest.util._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
    args {
      pretty_printed_name: "builtins.list[unittest.util._T]"
      args {
        pretty_printed_name: "unittest.util._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
  }
  parameters {
    name: "expected"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[unittest.util._T]"
      args {
        pretty_printed_name: "unittest.util._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  parameters {
    name: "actual"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[unittest.util._T]"
      args {
        pretty_printed_name: "unittest.util._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "unorderable_list_difference"
  fully_qualified_name: "unittest.util.unorderable_list_difference"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.list[unittest.util._T],builtins.list[unittest.util._T]]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.list[unittest.util._T]"
      args {
        pretty_printed_name: "unittest.util._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
    args {
      pretty_printed_name: "builtins.list[unittest.util._T]"
      args {
        pretty_printed_name: "unittest.util._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
  }
  parameters {
    name: "expected"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[unittest.util._T]"
      args {
        pretty_printed_name: "unittest.util._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  parameters {
    name: "actual"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[unittest.util._T]"
      args {
        pretty_printed_name: "unittest.util._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "three_way_cmp"
  fully_qualified_name: "unittest.util.three_way_cmp"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "x"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "y"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "_count_diff_all_purpose"
  fully_qualified_name: "unittest.util._count_diff_all_purpose"
  return_annotation {
    pretty_printed_name: "builtins.list[TypeAlias[Tuple[UnboundType[_T],UnboundType[_T],builtins.int]]]"
    args {
      pretty_printed_name: "TypeAlias[Tuple[UnboundType[_T],UnboundType[_T],builtins.int]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[UnboundType[_T],UnboundType[_T],builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "UnboundType[_T]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "UnboundType[_T]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      fully_qualified_name: "unittest.util._Mismatch"
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "actual"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[unittest.util._T]"
      args {
        pretty_printed_name: "unittest.util._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  parameters {
    name: "expected"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[unittest.util._T]"
      args {
        pretty_printed_name: "unittest.util._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "_count_diff_hashable"
  fully_qualified_name: "unittest.util._count_diff_hashable"
  return_annotation {
    pretty_printed_name: "builtins.list[TypeAlias[Tuple[UnboundType[_T],UnboundType[_T],builtins.int]]]"
    args {
      pretty_printed_name: "TypeAlias[Tuple[UnboundType[_T],UnboundType[_T],builtins.int]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[UnboundType[_T],UnboundType[_T],builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "UnboundType[_T]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "UnboundType[_T]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      fully_qualified_name: "unittest.util._Mismatch"
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "actual"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[unittest.util._T]"
      args {
        pretty_printed_name: "unittest.util._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  parameters {
    name: "expected"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Sequence[unittest.util._T]"
      args {
        pretty_printed_name: "unittest.util._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_MAX_LENGTH"
  fully_qualified_name: "unittest.util._MAX_LENGTH"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_PLACEHOLDER_LEN"
  fully_qualified_name: "unittest.util._PLACEHOLDER_LEN"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_MIN_BEGIN_LEN"
  fully_qualified_name: "unittest.util._MIN_BEGIN_LEN"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_MIN_END_LEN"
  fully_qualified_name: "unittest.util._MIN_END_LEN"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_MIN_COMMON_LEN"
  fully_qualified_name: "unittest.util._MIN_COMMON_LEN"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_MIN_DIFF_LEN"
  fully_qualified_name: "unittest.util._MIN_DIFF_LEN"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
