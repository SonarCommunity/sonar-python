fully_qualified_name: "UserDict"
classes {
  name: "UserDict"
  fully_qualified_name: "UserDict.UserDict"
  super_classes: "builtins.dict"
  methods {
    name: "__init__"
    fully_qualified_name: "UserDict.UserDict.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict.UserDict[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.UserDict"
      }
    }
    parameters {
      name: "initialdata"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
      has_default: true
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
  attributes {
    name: "data"
    fully_qualified_name: "UserDict.UserDict.data"
    type_annotation {
      pretty_printed_name: "builtins.dict[UserDict._KT,UserDict._VT]"
      args {
        pretty_printed_name: "UserDict._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "UserDict._VT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "27"
  }
}
classes {
  name: "IterableUserDict"
  fully_qualified_name: "UserDict.IterableUserDict"
  super_classes: "UserDict.UserDict"
  is_generic: true
  valid_for: "27"
}
classes {
  name: "DictMixin"
  fully_qualified_name: "UserDict.DictMixin"
  super_classes: "typing.Iterable"
  super_classes: "typing.Container"
  super_classes: "typing.Sized"
  methods {
    name: "has_key"
    fully_qualified_name: "UserDict.DictMixin.has_key"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    parameters {
      name: "key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict._KT"
        kind: TYPE_VAR
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "UserDict.DictMixin.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "UserDict.DictMixin.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[UserDict._KT]"
      args {
        pretty_printed_name: "UserDict._KT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "values"
    fully_qualified_name: "UserDict.DictMixin.values"
    return_annotation {
      pretty_printed_name: "builtins.list[UserDict._VT]"
      args {
        pretty_printed_name: "UserDict._VT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "items"
    fully_qualified_name: "UserDict.DictMixin.items"
    return_annotation {
      pretty_printed_name: "builtins.list[Tuple[UserDict._KT,UserDict._VT]]"
      args {
        pretty_printed_name: "Tuple[UserDict._KT,UserDict._VT]"
        kind: TUPLE
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "iterkeys"
    fully_qualified_name: "UserDict.DictMixin.iterkeys"
    return_annotation {
      pretty_printed_name: "typing.Iterator[UserDict._KT]"
      args {
        pretty_printed_name: "UserDict._KT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "itervalues"
    fully_qualified_name: "UserDict.DictMixin.itervalues"
    return_annotation {
      pretty_printed_name: "typing.Iterator[UserDict._VT]"
      args {
        pretty_printed_name: "UserDict._VT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "iteritems"
    fully_qualified_name: "UserDict.DictMixin.iteritems"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[UserDict._KT,UserDict._VT]]"
      args {
        pretty_printed_name: "Tuple[UserDict._KT,UserDict._VT]"
        kind: TUPLE
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "UserDict.DictMixin.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    parameters {
      name: "o"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "27"
  }
  methods {
    name: "clear"
    fully_qualified_name: "UserDict.DictMixin.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "pop"
    fully_qualified_name: "UserDict.DictMixin.pop"
    return_annotation {
      pretty_printed_name: "UserDict._VT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    parameters {
      name: "k"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict._KT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict._VT"
        kind: TYPE_VAR
      }
      has_default: true
    }
    valid_for: "27"
  }
  methods {
    name: "popitem"
    fully_qualified_name: "UserDict.DictMixin.popitem"
    return_annotation {
      pretty_printed_name: "Tuple[UserDict._KT,UserDict._VT]"
      kind: TUPLE
      args {
        pretty_printed_name: "UserDict._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "UserDict._VT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    valid_for: "27"
  }
  methods {
    name: "setdefault"
    fully_qualified_name: "UserDict.DictMixin.setdefault"
    return_annotation {
      pretty_printed_name: "UserDict._VT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
        args {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "UserDict.DictMixin"
      }
    }
    parameters {
      name: "k"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict._KT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UserDict._VT"
        kind: TYPE_VAR
      }
      has_default: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "get"
    fullname: "UserDict.DictMixin.get"
    definitions {
      name: "get"
      fully_qualified_name: "UserDict.DictMixin.get"
      return_annotation {
        pretty_printed_name: "Union[UserDict._VT,None]"
        kind: UNION
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
          args {
            pretty_printed_name: "UserDict._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "UserDict._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "UserDict.DictMixin"
        }
      }
      parameters {
        name: "k"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "get"
      fully_qualified_name: "UserDict.DictMixin.get"
      return_annotation {
        pretty_printed_name: "Union[UserDict._VT,UserDict._T]"
        kind: UNION
        args {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "UserDict._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
          args {
            pretty_printed_name: "UserDict._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "UserDict._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "UserDict.DictMixin"
        }
      }
      parameters {
        name: "k"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UserDict._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[UserDict._VT,UserDict._T]"
          kind: UNION
          args {
            pretty_printed_name: "UserDict._VT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "UserDict._T"
            kind: TYPE_VAR
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  overloaded_methods {
    name: "update"
    fullname: "UserDict.DictMixin.update"
    definitions {
      name: "update"
      fully_qualified_name: "UserDict.DictMixin.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
          args {
            pretty_printed_name: "UserDict._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "UserDict._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "UserDict.DictMixin"
        }
      }
      parameters {
        name: "m"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Mapping[UserDict._KT,UserDict._VT]"
          args {
            pretty_printed_name: "UserDict._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "UserDict._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "update"
      fully_qualified_name: "UserDict.DictMixin.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UserDict.DictMixin[UserDict._KT,UserDict._VT]"
          args {
            pretty_printed_name: "UserDict._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "UserDict._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "UserDict.DictMixin"
        }
      }
      parameters {
        name: "m"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[UserDict._KT,UserDict._VT]]"
          args {
            pretty_printed_name: "Tuple[UserDict._KT,UserDict._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "UserDict._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "UserDict._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "kwargs"
        kind: VAR_KEYWORD
        type_annotation {
          pretty_printed_name: "UserDict._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "27"
  }
  is_generic: true
  valid_for: "27"
}
