fully_qualified_name: "_py_abc"
classes {
  name: "_CacheToken"
  fully_qualified_name: "_py_abc._CacheToken"
  super_classes: "builtins.int"
  methods {
    name: "__init__"
    fully_qualified_name: "_py_abc._CacheToken.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_py_abc._CacheToken"
        fully_qualified_name: "_py_abc._CacheToken"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "ABCMeta"
  fully_qualified_name: "_py_abc.ABCMeta"
  super_classes: "builtins.type"
  methods {
    name: "__new__"
    fully_qualified_name: "_py_abc.ABCMeta.__new__"
    return_annotation {
      pretty_printed_name: "_typeshed.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__mcls"
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    parameters {
      name: "__name"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "__bases"
      type_annotation {
        pretty_printed_name: "Tuple[builtins.type,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
    }
    parameters {
      name: "__namespace"
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__new__"
    fully_qualified_name: "_py_abc.ABCMeta.__new__"
    return_annotation {
      pretty_printed_name: "_typeshed.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__mcls"
      type_annotation {
        pretty_printed_name: "Type[_typeshed.Self]"
        kind: TYPE
        args {
          pretty_printed_name: "_typeshed.Self"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "__name"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "__bases"
      type_annotation {
        pretty_printed_name: "builtins.tuple[Type[Any]]"
        args {
          pretty_printed_name: "Type[Any]"
          kind: TYPE
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
    parameters {
      name: "__namespace"
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "register"
    fully_qualified_name: "_py_abc.ABCMeta.register"
    return_annotation {
      pretty_printed_name: "builtins.type"
      fully_qualified_name: "builtins.type"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_py_abc.ABCMeta"
        fully_qualified_name: "_py_abc.ABCMeta"
      }
    }
    parameters {
      name: "subclass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "register"
    fully_qualified_name: "_py_abc.ABCMeta.register"
    return_annotation {
      pretty_printed_name: "Type[_py_abc._T]"
      kind: TYPE
      args {
        pretty_printed_name: "_py_abc._T"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_py_abc.ABCMeta"
        fully_qualified_name: "_py_abc.ABCMeta"
      }
    }
    parameters {
      name: "subclass"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[_py_abc._T]"
        kind: TYPE
        args {
          pretty_printed_name: "_py_abc._T"
          kind: TYPE_VAR
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "get_cache_token"
  fully_qualified_name: "_py_abc.get_cache_token"
  return_annotation {
    pretty_printed_name: "_py_abc._CacheToken"
    fully_qualified_name: "_py_abc._CacheToken"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
