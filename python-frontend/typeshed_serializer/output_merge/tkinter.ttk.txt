fully_qualified_name: "tkinter.ttk"
classes {
  name: "Style"
  fully_qualified_name: "tkinter.ttk.Style"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Style.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Style"
        fully_qualified_name: "tkinter.ttk.Style"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "configure"
    fully_qualified_name: "tkinter.ttk.Style.configure"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Style"
        fully_qualified_name: "tkinter.ttk.Style"
      }
    }
    parameters {
      name: "style"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "query_opt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "map"
    fully_qualified_name: "tkinter.ttk.Style.map"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Style"
        fully_qualified_name: "tkinter.ttk.Style"
      }
    }
    parameters {
      name: "style"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "query_opt"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "lookup"
    fully_qualified_name: "tkinter.ttk.Style.lookup"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Style"
        fully_qualified_name: "tkinter.ttk.Style"
      }
    }
    parameters {
      name: "style"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "option"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "state"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "layout"
    fully_qualified_name: "tkinter.ttk.Style.layout"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Style"
        fully_qualified_name: "tkinter.ttk.Style"
      }
    }
    parameters {
      name: "style"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "layoutspec"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "element_create"
    fully_qualified_name: "tkinter.ttk.Style.element_create"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Style"
        fully_qualified_name: "tkinter.ttk.Style"
      }
    }
    parameters {
      name: "elementname"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "etype"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "element_names"
    fully_qualified_name: "tkinter.ttk.Style.element_names"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "element_options"
    fully_qualified_name: "tkinter.ttk.Style.element_options"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "elementname"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "theme_create"
    fully_qualified_name: "tkinter.ttk.Style.theme_create"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Style"
        fully_qualified_name: "tkinter.ttk.Style"
      }
    }
    parameters {
      name: "themename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "parent"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "settings"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "theme_settings"
    fully_qualified_name: "tkinter.ttk.Style.theme_settings"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Style"
        fully_qualified_name: "tkinter.ttk.Style"
      }
    }
    parameters {
      name: "themename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "settings"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "theme_names"
    fully_qualified_name: "tkinter.ttk.Style.theme_names"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Style"
        fully_qualified_name: "tkinter.ttk.Style"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "theme_names"
    fully_qualified_name: "tkinter.ttk.Style.theme_names"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Style"
        fully_qualified_name: "tkinter.ttk.Style"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "theme_use"
    fullname: "tkinter.ttk.Style.theme_use"
    definitions {
      name: "theme_use"
      fully_qualified_name: "tkinter.ttk.Style.theme_use"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Style"
          fully_qualified_name: "tkinter.ttk.Style"
        }
      }
      parameters {
        name: "themename"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "theme_use"
      fully_qualified_name: "tkinter.ttk.Style.theme_use"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Style"
          fully_qualified_name: "tkinter.ttk.Style"
        }
      }
      parameters {
        name: "themename"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "master"
    fully_qualified_name: "tkinter.ttk.Style.master"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "tk"
    fully_qualified_name: "tkinter.ttk.Style.tk"
    type_annotation {
      pretty_printed_name: "_tkinter.TkappType"
      fully_qualified_name: "_tkinter.TkappType"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Widget"
  fully_qualified_name: "tkinter.ttk.Widget"
  super_classes: "tkinter.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Widget.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Widget"
        fully_qualified_name: "tkinter.ttk.Widget"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "widgetname"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kw"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "identify"
    fully_qualified_name: "tkinter.ttk.Widget.identify"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Widget"
        fully_qualified_name: "tkinter.ttk.Widget"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "instate"
    fully_qualified_name: "tkinter.ttk.Widget.instate"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Widget"
        fully_qualified_name: "tkinter.ttk.Widget"
      }
    }
    parameters {
      name: "statespec"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "callback"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "state"
    fully_qualified_name: "tkinter.ttk.Widget.state"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Widget"
        fully_qualified_name: "tkinter.ttk.Widget"
      }
    }
    parameters {
      name: "statespec"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Button"
  fully_qualified_name: "tkinter.ttk.Button"
  super_classes: "tkinter.ttk.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Button.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Button"
        fully_qualified_name: "tkinter.ttk.Button"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ButtonCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TtkCompound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "default"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "invoke"
    fully_qualified_name: "tkinter.ttk.Button.invoke"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Button"
        fully_qualified_name: "tkinter.ttk.Button"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Button.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Button.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Button"
          fully_qualified_name: "tkinter.ttk.Button"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ButtonCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "compound"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TtkCompound]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "default"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "padding"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "underline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Button.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Button"
          fully_qualified_name: "tkinter.ttk.Button"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Button.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Checkbutton"
  fully_qualified_name: "tkinter.ttk.Checkbutton"
  super_classes: "tkinter.ttk.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Checkbutton.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Checkbutton"
        fully_qualified_name: "tkinter.ttk.Checkbutton"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ButtonCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TtkCompound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "offvalue"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "onvalue"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "padding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "variable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "invoke"
    fully_qualified_name: "tkinter.ttk.Checkbutton.invoke"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Checkbutton"
        fully_qualified_name: "tkinter.ttk.Checkbutton"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Checkbutton.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Checkbutton.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Checkbutton"
          fully_qualified_name: "tkinter.ttk.Checkbutton"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ButtonCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "compound"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TtkCompound]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "offvalue"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "onvalue"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "padding"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "underline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "variable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Checkbutton.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Checkbutton"
          fully_qualified_name: "tkinter.ttk.Checkbutton"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Checkbutton.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Entry"
  fully_qualified_name: "tkinter.ttk.Entry"
  super_classes: "tkinter.ttk.Widget"
  super_classes: "tkinter.Entry"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Entry.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Entry"
        fully_qualified_name: "tkinter.ttk.Entry"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "widget"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "exportselection"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "invalidcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "show"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "validate"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "validatecommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "bbox"
    fully_qualified_name: "tkinter.ttk.Entry.bbox"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Entry"
        fully_qualified_name: "tkinter.ttk.Entry"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "identify"
    fully_qualified_name: "tkinter.ttk.Entry.identify"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Entry"
        fully_qualified_name: "tkinter.ttk.Entry"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "validate"
    fully_qualified_name: "tkinter.ttk.Entry.validate"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Entry.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Entry.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Entry"
          fully_qualified_name: "tkinter.ttk.Entry"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "invalidcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "show"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "validate"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "validatecommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Entry.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Entry"
          fully_qualified_name: "tkinter.ttk.Entry"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "config"
    fullname: "tkinter.ttk.Entry.config"
    definitions {
      name: "config"
      fully_qualified_name: "tkinter.ttk.Entry.config"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Entry"
          fully_qualified_name: "tkinter.ttk.Entry"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "invalidcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "show"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "validate"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "validatecommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "config"
      fully_qualified_name: "tkinter.ttk.Entry.config"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Entry"
          fully_qualified_name: "tkinter.ttk.Entry"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Combobox"
  fully_qualified_name: "tkinter.ttk.Combobox"
  super_classes: "tkinter.ttk.Entry"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Combobox.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Combobox"
        fully_qualified_name: "tkinter.ttk.Combobox"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "exportselection"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "invalidcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "postcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "show"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "validate"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "validatecommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "values"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Combobox.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Combobox"
        fully_qualified_name: "tkinter.ttk.Combobox"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "exportselection"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "invalidcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "postcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "show"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "validate"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "validatecommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "values"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "current"
    fully_qualified_name: "tkinter.ttk.Combobox.current"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Combobox"
        fully_qualified_name: "tkinter.ttk.Combobox"
      }
    }
    parameters {
      name: "newindex"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set"
    fully_qualified_name: "tkinter.ttk.Combobox.set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Combobox"
        fully_qualified_name: "tkinter.ttk.Combobox"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Combobox.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Combobox.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Combobox"
          fully_qualified_name: "tkinter.ttk.Combobox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "invalidcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "postcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "show"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "validate"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "validatecommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "values"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Combobox.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Combobox"
          fully_qualified_name: "tkinter.ttk.Combobox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Combobox.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Combobox.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Combobox"
          fully_qualified_name: "tkinter.ttk.Combobox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "invalidcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "postcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "show"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "validate"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "validatecommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "values"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Combobox.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Combobox"
          fully_qualified_name: "tkinter.ttk.Combobox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "config"
    fullname: "tkinter.ttk.Combobox.config"
    definitions {
      name: "config"
      fully_qualified_name: "tkinter.ttk.Combobox.config"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Combobox"
          fully_qualified_name: "tkinter.ttk.Combobox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "invalidcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "postcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "show"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "validate"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "validatecommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "values"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "config"
      fully_qualified_name: "tkinter.ttk.Combobox.config"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Combobox"
          fully_qualified_name: "tkinter.ttk.Combobox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "config"
    fullname: "tkinter.ttk.Combobox.config"
    definitions {
      name: "config"
      fully_qualified_name: "tkinter.ttk.Combobox.config"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Combobox"
          fully_qualified_name: "tkinter.ttk.Combobox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "invalidcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "postcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "show"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "validate"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "validatecommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "values"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "config"
      fully_qualified_name: "tkinter.ttk.Combobox.config"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Combobox"
          fully_qualified_name: "tkinter.ttk.Combobox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Frame"
  fully_qualified_name: "tkinter.ttk.Frame"
  super_classes: "tkinter.ttk.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Frame.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Frame"
        fully_qualified_name: "tkinter.ttk.Frame"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Padding]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Frame.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Frame.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Frame"
          fully_qualified_name: "tkinter.ttk.Frame"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "padding"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Padding]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Frame.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Frame"
          fully_qualified_name: "tkinter.ttk.Frame"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Frame.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Label"
  fully_qualified_name: "tkinter.ttk.Label"
  super_classes: "tkinter.ttk.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Label.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Label"
        fully_qualified_name: "tkinter.ttk.Label"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "anchor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Anchor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TtkCompound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Padding]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "wraplength"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Label.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Label.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Label"
          fully_qualified_name: "tkinter.ttk.Label"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "compound"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TtkCompound]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "padding"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Padding]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "underline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "wraplength"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Label.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Label"
          fully_qualified_name: "tkinter.ttk.Label"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Label.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Labelframe"
  fully_qualified_name: "tkinter.ttk.Labelframe"
  super_classes: "tkinter.ttk.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Labelframe.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Labelframe"
        fully_qualified_name: "tkinter.ttk.Labelframe"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "border"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "borderwidth"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "labelanchor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "labelwidget"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Misc"
        fully_qualified_name: "tkinter.Misc"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Padding]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "relief"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Relief]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Labelframe.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Labelframe.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Labelframe"
          fully_qualified_name: "tkinter.ttk.Labelframe"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "border"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "borderwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "labelanchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "labelwidget"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        has_default: true
      }
      parameters {
        name: "padding"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Padding]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "relief"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Relief]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "underline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Labelframe.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Labelframe"
          fully_qualified_name: "tkinter.ttk.Labelframe"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Labelframe.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Menubutton"
  fully_qualified_name: "tkinter.ttk.Menubutton"
  super_classes: "tkinter.ttk.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Menubutton.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Menubutton"
        fully_qualified_name: "tkinter.ttk.Menubutton"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TtkCompound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "direction"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "menu"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Menu"
        fully_qualified_name: "tkinter.Menu"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Menubutton.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Menubutton.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Menubutton"
          fully_qualified_name: "tkinter.ttk.Menubutton"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "compound"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TtkCompound]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "direction"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "menu"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Menu"
          fully_qualified_name: "tkinter.Menu"
        }
        has_default: true
      }
      parameters {
        name: "padding"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "underline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Menubutton.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Menubutton"
          fully_qualified_name: "tkinter.ttk.Menubutton"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Menubutton.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Notebook"
  fully_qualified_name: "tkinter.ttk.Notebook"
  super_classes: "tkinter.ttk.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Notebook.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Notebook"
        fully_qualified_name: "tkinter.ttk.Notebook"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Padding]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "add"
    fully_qualified_name: "tkinter.ttk.Notebook.add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Notebook"
        fully_qualified_name: "tkinter.ttk.Notebook"
      }
    }
    parameters {
      name: "child"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Widget"
        fully_qualified_name: "tkinter.Widget"
      }
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "sticky"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Padding]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Compound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "forget"
    fully_qualified_name: "tkinter.ttk.Notebook.forget"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Notebook"
        fully_qualified_name: "tkinter.ttk.Notebook"
      }
    }
    parameters {
      name: "tab_id"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "hide"
    fully_qualified_name: "tkinter.ttk.Notebook.hide"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Notebook"
        fully_qualified_name: "tkinter.ttk.Notebook"
      }
    }
    parameters {
      name: "tab_id"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "identify"
    fully_qualified_name: "tkinter.ttk.Notebook.identify"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Notebook"
        fully_qualified_name: "tkinter.ttk.Notebook"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "index"
    fully_qualified_name: "tkinter.ttk.Notebook.index"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "tab_id"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "tkinter.ttk.Notebook.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Notebook"
        fully_qualified_name: "tkinter.ttk.Notebook"
      }
    }
    parameters {
      name: "pos"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "child"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "select"
    fully_qualified_name: "tkinter.ttk.Notebook.select"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Notebook"
        fully_qualified_name: "tkinter.ttk.Notebook"
      }
    }
    parameters {
      name: "tab_id"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tab"
    fully_qualified_name: "tkinter.ttk.Notebook.tab"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Notebook"
        fully_qualified_name: "tkinter.ttk.Notebook"
      }
    }
    parameters {
      name: "tab_id"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "option"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "tabs"
    fully_qualified_name: "tkinter.ttk.Notebook.tabs"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "enable_traversal"
    fully_qualified_name: "tkinter.ttk.Notebook.enable_traversal"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Notebook"
        fully_qualified_name: "tkinter.ttk.Notebook"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Notebook.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Notebook.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Notebook"
          fully_qualified_name: "tkinter.ttk.Notebook"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "padding"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Padding]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Notebook.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Notebook"
          fully_qualified_name: "tkinter.ttk.Notebook"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Notebook.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Panedwindow"
  fully_qualified_name: "tkinter.ttk.Panedwindow"
  super_classes: "tkinter.ttk.Widget"
  super_classes: "tkinter.PanedWindow"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Panedwindow.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Panedwindow"
        fully_qualified_name: "tkinter.ttk.Panedwindow"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "orient"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "add"
    fully_qualified_name: "tkinter.ttk.Panedwindow.add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Panedwindow"
        fully_qualified_name: "tkinter.ttk.Panedwindow"
      }
    }
    parameters {
      name: "child"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.Widget"
        fully_qualified_name: "tkinter.Widget"
      }
    }
    parameters {
      name: "weight"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "tkinter.ttk.Panedwindow.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Panedwindow"
        fully_qualified_name: "tkinter.ttk.Panedwindow"
      }
    }
    parameters {
      name: "pos"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "child"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "pane"
    fully_qualified_name: "tkinter.ttk.Panedwindow.pane"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Panedwindow"
        fully_qualified_name: "tkinter.ttk.Panedwindow"
      }
    }
    parameters {
      name: "pane"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "option"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "sashpos"
    fully_qualified_name: "tkinter.ttk.Panedwindow.sashpos"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Panedwindow"
        fully_qualified_name: "tkinter.ttk.Panedwindow"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "newpos"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Panedwindow.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Panedwindow.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Panedwindow"
          fully_qualified_name: "tkinter.ttk.Panedwindow"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Panedwindow.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Panedwindow"
          fully_qualified_name: "tkinter.ttk.Panedwindow"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "config"
    fullname: "tkinter.ttk.Panedwindow.config"
    definitions {
      name: "config"
      fully_qualified_name: "tkinter.ttk.Panedwindow.config"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Panedwindow"
          fully_qualified_name: "tkinter.ttk.Panedwindow"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "config"
      fully_qualified_name: "tkinter.ttk.Panedwindow.config"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Panedwindow"
          fully_qualified_name: "tkinter.ttk.Panedwindow"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "forget"
    fully_qualified_name: "tkinter.ttk.Panedwindow.forget"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Progressbar"
  fully_qualified_name: "tkinter.ttk.Progressbar"
  super_classes: "tkinter.ttk.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Progressbar.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Progressbar"
        fully_qualified_name: "tkinter.ttk.Progressbar"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "length"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "maximum"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "mode"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "orient"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "phase"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "value"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "variable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[tkinter.IntVar,tkinter.DoubleVar]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.IntVar"
          fully_qualified_name: "tkinter.IntVar"
        }
        args {
          pretty_printed_name: "tkinter.DoubleVar"
          fully_qualified_name: "tkinter.DoubleVar"
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "start"
    fully_qualified_name: "tkinter.ttk.Progressbar.start"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Progressbar"
        fully_qualified_name: "tkinter.ttk.Progressbar"
      }
    }
    parameters {
      name: "interval"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "step"
    fully_qualified_name: "tkinter.ttk.Progressbar.step"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Progressbar"
        fully_qualified_name: "tkinter.ttk.Progressbar"
      }
    }
    parameters {
      name: "amount"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.float,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "stop"
    fully_qualified_name: "tkinter.ttk.Progressbar.stop"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Progressbar"
        fully_qualified_name: "tkinter.ttk.Progressbar"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Progressbar.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Progressbar.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Progressbar"
          fully_qualified_name: "tkinter.ttk.Progressbar"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "length"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "maximum"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "mode"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "orient"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "phase"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "value"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "variable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[tkinter.IntVar,tkinter.DoubleVar]"
          kind: UNION
          args {
            pretty_printed_name: "tkinter.IntVar"
            fully_qualified_name: "tkinter.IntVar"
          }
          args {
            pretty_printed_name: "tkinter.DoubleVar"
            fully_qualified_name: "tkinter.DoubleVar"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Progressbar.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Progressbar"
          fully_qualified_name: "tkinter.ttk.Progressbar"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Progressbar.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Radiobutton"
  fully_qualified_name: "tkinter.ttk.Radiobutton"
  super_classes: "tkinter.ttk.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Radiobutton.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Radiobutton"
        fully_qualified_name: "tkinter.ttk.Radiobutton"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ButtonCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_TtkCompound]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.float,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "underline"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "value"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "variable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[tkinter.Variable,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "invoke"
    fully_qualified_name: "tkinter.ttk.Radiobutton.invoke"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Radiobutton"
        fully_qualified_name: "tkinter.ttk.Radiobutton"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Radiobutton.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Radiobutton.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Radiobutton"
          fully_qualified_name: "tkinter.ttk.Radiobutton"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ButtonCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "compound"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_TtkCompound]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "padding"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.float,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.float"
            fully_qualified_name: "builtins.float"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "underline"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "value"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "variable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[tkinter.Variable,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "tkinter.Variable"
            fully_qualified_name: "tkinter.Variable"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Radiobutton.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Radiobutton"
          fully_qualified_name: "tkinter.ttk.Radiobutton"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Radiobutton.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Scale"
  fully_qualified_name: "tkinter.ttk.Scale"
  super_classes: "tkinter.ttk.Widget"
  super_classes: "tkinter.Scale"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Scale.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Scale"
        fully_qualified_name: "tkinter.ttk.Scale"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "from_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "length"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "orient"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "to"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "value"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "variable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[tkinter.IntVar,tkinter.DoubleVar]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.IntVar"
          fully_qualified_name: "tkinter.IntVar"
        }
        args {
          pretty_printed_name: "tkinter.DoubleVar"
          fully_qualified_name: "tkinter.DoubleVar"
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get"
    fully_qualified_name: "tkinter.ttk.Scale.get"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Scale"
        fully_qualified_name: "tkinter.ttk.Scale"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Scale.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Scale.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Scale"
          fully_qualified_name: "tkinter.ttk.Scale"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "from_"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "length"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "orient"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "to"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "value"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "variable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[tkinter.IntVar,tkinter.DoubleVar]"
          kind: UNION
          args {
            pretty_printed_name: "tkinter.IntVar"
            fully_qualified_name: "tkinter.IntVar"
          }
          args {
            pretty_printed_name: "tkinter.DoubleVar"
            fully_qualified_name: "tkinter.DoubleVar"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Scale.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Scale"
          fully_qualified_name: "tkinter.ttk.Scale"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "config"
    fullname: "tkinter.ttk.Scale.config"
    definitions {
      name: "config"
      fully_qualified_name: "tkinter.ttk.Scale.config"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Scale"
          fully_qualified_name: "tkinter.ttk.Scale"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "from_"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "length"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ScreenUnits]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "orient"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "to"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "value"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "variable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[tkinter.IntVar,tkinter.DoubleVar]"
          kind: UNION
          args {
            pretty_printed_name: "tkinter.IntVar"
            fully_qualified_name: "tkinter.IntVar"
          }
          args {
            pretty_printed_name: "tkinter.DoubleVar"
            fully_qualified_name: "tkinter.DoubleVar"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "config"
      fully_qualified_name: "tkinter.ttk.Scale.config"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Scale"
          fully_qualified_name: "tkinter.ttk.Scale"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Scrollbar"
  fully_qualified_name: "tkinter.ttk.Scrollbar"
  super_classes: "tkinter.ttk.Widget"
  super_classes: "tkinter.Scrollbar"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Scrollbar.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Scrollbar"
        fully_qualified_name: "tkinter.ttk.Scrollbar"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "orient"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Scrollbar.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Scrollbar.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Scrollbar"
          fully_qualified_name: "tkinter.ttk.Scrollbar"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "orient"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Scrollbar.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Scrollbar"
          fully_qualified_name: "tkinter.ttk.Scrollbar"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "config"
    fullname: "tkinter.ttk.Scrollbar.config"
    definitions {
      name: "config"
      fully_qualified_name: "tkinter.ttk.Scrollbar.config"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Scrollbar"
          fully_qualified_name: "tkinter.ttk.Scrollbar"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "orient"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "config"
      fully_qualified_name: "tkinter.ttk.Scrollbar.config"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Scrollbar"
          fully_qualified_name: "tkinter.ttk.Scrollbar"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Separator"
  fully_qualified_name: "tkinter.ttk.Separator"
  super_classes: "tkinter.ttk.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Separator.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Separator"
        fully_qualified_name: "tkinter.ttk.Separator"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "orient"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Separator.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Separator.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Separator"
          fully_qualified_name: "tkinter.ttk.Separator"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "orient"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Separator.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Separator"
          fully_qualified_name: "tkinter.ttk.Separator"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Separator.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Sizegrip"
  fully_qualified_name: "tkinter.ttk.Sizegrip"
  super_classes: "tkinter.ttk.Widget"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Sizegrip.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Sizegrip"
        fully_qualified_name: "tkinter.ttk.Sizegrip"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Sizegrip.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Sizegrip.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Sizegrip"
          fully_qualified_name: "tkinter.ttk.Sizegrip"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Sizegrip.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Sizegrip"
          fully_qualified_name: "tkinter.ttk.Sizegrip"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Sizegrip.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "Spinbox"
  fully_qualified_name: "tkinter.ttk.Spinbox"
  super_classes: "tkinter.ttk.Entry"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Spinbox.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Spinbox"
        fully_qualified_name: "tkinter.ttk.Spinbox"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "exportselection"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "format"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "from_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "increment"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "invalidcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "show"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "to"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "validate"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "validatecommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "values"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "wrap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Spinbox.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Spinbox"
        fully_qualified_name: "tkinter.ttk.Spinbox"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "background"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "exportselection"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "font"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "foreground"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "format"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "from_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "increment"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "invalidcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "justify"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "show"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    parameters {
      name: "state"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "textvariable"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "tkinter.Variable"
        fully_qualified_name: "tkinter.Variable"
      }
      has_default: true
    }
    parameters {
      name: "to"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "validate"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "validatecommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "values"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    parameters {
      name: "width"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "wrap"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set"
    fully_qualified_name: "tkinter.ttk.Spinbox.set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Spinbox"
        fully_qualified_name: "tkinter.ttk.Spinbox"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Spinbox.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Spinbox.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Spinbox"
          fully_qualified_name: "tkinter.ttk.Spinbox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "format"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "from_"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "increment"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "invalidcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "show"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "to"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "validate"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "validatecommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "values"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "wrap"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Spinbox.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Spinbox"
          fully_qualified_name: "tkinter.ttk.Spinbox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Spinbox.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Spinbox.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Spinbox"
          fully_qualified_name: "tkinter.ttk.Spinbox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "exportselection"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "format"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "from_"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "increment"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "invalidcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "justify"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "show"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
        has_default: true
      }
      parameters {
        name: "state"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "textvariable"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "tkinter.Variable"
          fully_qualified_name: "tkinter.Variable"
        }
        has_default: true
      }
      parameters {
        name: "to"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        has_default: true
      }
      parameters {
        name: "validate"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "validatecommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._EntryValidateCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "values"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "wrap"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Spinbox.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Spinbox"
          fully_qualified_name: "tkinter.ttk.Spinbox"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Spinbox.config"
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "_TreeviewItemDict"
  fully_qualified_name: "tkinter.ttk._TreeviewItemDict"
  super_classes: "typing._TypedDict"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_TreeviewTagDict"
  fully_qualified_name: "tkinter.ttk._TreeviewTagDict"
  super_classes: "typing._TypedDict"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_TreeviewHeaderDict"
  fully_qualified_name: "tkinter.ttk._TreeviewHeaderDict"
  super_classes: "typing._TypedDict"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "_TreeviewColumnDict"
  fully_qualified_name: "tkinter.ttk._TreeviewColumnDict"
  super_classes: "typing._TypedDict"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "Treeview"
  fully_qualified_name: "tkinter.ttk.Treeview"
  super_classes: "tkinter.ttk.Widget"
  super_classes: "tkinter.XView"
  super_classes: "tkinter.YView"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Treeview.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "columns"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "displaycolumns"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any],builtins.list[builtins.int],Tuple[builtins.int,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        args {
          pretty_printed_name: "builtins.list[builtins.int]"
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.int,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Padding]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectmode"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "show"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "yscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.Treeview.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "class_"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "columns"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    parameters {
      name: "cursor"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._Cursor]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "displaycolumns"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str],builtins.list[builtins.int],builtins.tuple[builtins.int]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.int]"
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.int]"
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    parameters {
      name: "height"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    parameters {
      name: "name"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "padding"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[_Padding]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "selectmode"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "show"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "takefocus"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "xscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "yscrollcommand"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
        kind: UNBOUND
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "bbox"
    fully_qualified_name: "tkinter.ttk.Treeview.bbox"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],Literal[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "column"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[_TreeviewColumnId],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_children"
    fully_qualified_name: "tkinter.ttk.Treeview.get_children"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "get_children"
    fully_qualified_name: "tkinter.ttk.Treeview.get_children"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_children"
    fully_qualified_name: "tkinter.ttk.Treeview.set_children"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "newchildren"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "delete"
    fully_qualified_name: "tkinter.ttk.Treeview.delete"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "items"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "detach"
    fully_qualified_name: "tkinter.ttk.Treeview.detach"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "items"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "exists"
    fully_qualified_name: "tkinter.ttk.Treeview.exists"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "identify"
    fully_qualified_name: "tkinter.ttk.Treeview.identify"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "component"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "identify_row"
    fully_qualified_name: "tkinter.ttk.Treeview.identify_row"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "identify_column"
    fully_qualified_name: "tkinter.ttk.Treeview.identify_column"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "identify_region"
    fully_qualified_name: "tkinter.ttk.Treeview.identify_region"
    return_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "identify_element"
    fully_qualified_name: "tkinter.ttk.Treeview.identify_element"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "index"
    fully_qualified_name: "tkinter.ttk.Treeview.index"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "insert"
    fully_qualified_name: "tkinter.ttk.Treeview.insert"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "parent"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
    }
    parameters {
      name: "iid"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "id"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "values"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.list[Any],Tuple[Any,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[Any,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "open"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "tags"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "insert"
    fully_qualified_name: "tkinter.ttk.Treeview.insert"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "parent"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
    }
    parameters {
      name: "iid"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "id"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "text"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "image"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
        kind: UNBOUND
      }
      has_default: true
    }
    parameters {
      name: "values"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.list[Any],builtins.tuple[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    parameters {
      name: "open"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "tags"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      has_default: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "move"
    fully_qualified_name: "tkinter.ttk.Treeview.move"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "parent"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "next"
    fully_qualified_name: "tkinter.ttk.Treeview.next"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "parent"
    fully_qualified_name: "tkinter.ttk.Treeview.parent"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "prev"
    fully_qualified_name: "tkinter.ttk.Treeview.prev"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "see"
    fully_qualified_name: "tkinter.ttk.Treeview.see"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "item"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection"
    fully_qualified_name: "tkinter.ttk.Treeview.selection"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "selop"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "items"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
  }
  methods {
    name: "selection"
    fully_qualified_name: "tkinter.ttk.Treeview.selection"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,Any]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    valid_for: "38"
  }
  methods {
    name: "selection"
    fully_qualified_name: "tkinter.ttk.Treeview.selection"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_set"
    fully_qualified_name: "tkinter.ttk.Treeview.selection_set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "items"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "selection_set"
    fully_qualified_name: "tkinter.ttk.Treeview.selection_set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "items"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_add"
    fully_qualified_name: "tkinter.ttk.Treeview.selection_add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "items"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "selection_add"
    fully_qualified_name: "tkinter.ttk.Treeview.selection_add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "items"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_remove"
    fully_qualified_name: "tkinter.ttk.Treeview.selection_remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "items"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "selection_remove"
    fully_qualified_name: "tkinter.ttk.Treeview.selection_remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "items"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "selection_toggle"
    fully_qualified_name: "tkinter.ttk.Treeview.selection_toggle"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "items"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  methods {
    name: "selection_toggle"
    fully_qualified_name: "tkinter.ttk.Treeview.selection_toggle"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.Treeview"
        fully_qualified_name: "tkinter.ttk.Treeview"
      }
    }
    parameters {
      name: "items"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.list[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Treeview.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Treeview.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "columns"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "displaycolumns"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any],builtins.list[builtins.int],Tuple[builtins.int,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.int,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "padding"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Padding]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectmode"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "show"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "yscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Treeview.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "configure"
    fullname: "tkinter.ttk.Treeview.configure"
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Treeview.configure"
      return_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Tuple[builtins.str,builtins.str,builtins.str,Any,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "columns"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "cursor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Cursor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "displaycolumns"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str],builtins.list[builtins.int],builtins.tuple[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "height"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "padding"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_Padding]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "selectmode"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "show"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      parameters {
        name: "style"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "takefocus"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._TakeFocusValue]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "xscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "yscrollcommand"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._XYScrollCommand]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "configure"
      fully_qualified_name: "tkinter.ttk.Treeview.configure"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,Any,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "cnf"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "column"
    fullname: "tkinter.ttk.Treeview.column"
    definitions {
      name: "column"
      fully_qualified_name: "tkinter.ttk.Treeview.column"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "column"
      fully_qualified_name: "tkinter.ttk.Treeview.column"
      return_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "column"
      fully_qualified_name: "tkinter.ttk.Treeview.column"
      return_annotation {
        pretty_printed_name: "_tkinter.Tcl_Obj"
        fully_qualified_name: "_tkinter.Tcl_Obj"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "column"
      fully_qualified_name: "tkinter.ttk.Treeview.column"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "column"
      fully_qualified_name: "tkinter.ttk.Treeview.column"
      return_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "column"
      fully_qualified_name: "tkinter.ttk.Treeview.column"
      return_annotation {
        pretty_printed_name: "Union[TypedDict,None]"
        kind: UNION
        args {
          pretty_printed_name: "TypedDict"
          kind: TYPED_DICT
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "width"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "minwidth"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        has_default: true
      }
      parameters {
        name: "stretch"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "focus"
    fullname: "tkinter.ttk.Treeview.focus"
    definitions {
      name: "focus"
      fully_qualified_name: "tkinter.ttk.Treeview.focus"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "focus"
      fully_qualified_name: "tkinter.ttk.Treeview.focus"
      return_annotation {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "heading"
    fullname: "tkinter.ttk.Treeview.heading"
    definitions {
      name: "heading"
      fully_qualified_name: "tkinter.ttk.Treeview.heading"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "heading"
      fully_qualified_name: "tkinter.ttk.Treeview.heading"
      return_annotation {
        pretty_printed_name: "Union[Tuple[builtins.str],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "heading"
      fully_qualified_name: "tkinter.ttk.Treeview.heading"
      return_annotation {
        pretty_printed_name: "_tkinter.Tcl_Obj"
        fully_qualified_name: "_tkinter.Tcl_Obj"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "heading"
      fully_qualified_name: "tkinter.ttk.Treeview.heading"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "heading"
      fully_qualified_name: "tkinter.ttk.Treeview.heading"
      return_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "heading"
      fully_qualified_name: "tkinter.ttk.Treeview.heading"
      return_annotation {
        pretty_printed_name: "TypedDict"
        kind: TYPED_DICT
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "heading"
      fully_qualified_name: "tkinter.ttk.Treeview.heading"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "anchor"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._Anchor]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "command"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "item"
    fullname: "tkinter.ttk.Treeview.item"
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "Union[Tuple[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "Union[Tuple[Any,Any],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[Any,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "Union[Tuple[builtins.str,Any],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "TypedDict"
        kind: TYPED_DICT
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "values"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.list[Any],Tuple[Any,Any],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[Any,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "open"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],Tuple[builtins.str,Any]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "item"
    fullname: "tkinter.ttk.Treeview.item"
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "Union[Tuple[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[builtins.str]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "Union[builtins.tuple[Any],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.tuple[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "Union[builtins.tuple[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.tuple[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.tuple"
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "TypedDict"
        kind: TYPED_DICT
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "item"
      fully_qualified_name: "tkinter.ttk.Treeview.item"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "text"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "values"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.list[Any],builtins.tuple[Any],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.tuple"
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        has_default: true
      }
      parameters {
        name: "open"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        has_default: true
      }
      parameters {
        name: "tags"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.list[builtins.str],builtins.tuple[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.list[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.list"
          }
          args {
            pretty_printed_name: "builtins.tuple[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "builtins.tuple"
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "set"
    fullname: "tkinter.ttk.Treeview.set"
    definitions {
      name: "set"
      fully_qualified_name: "tkinter.ttk.Treeview.set"
      return_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "value"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "set"
      fully_qualified_name: "tkinter.ttk.Treeview.set"
      return_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "value"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "set"
      fully_qualified_name: "tkinter.ttk.Treeview.set"
      return_annotation {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "column"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "UnboundType[_TreeviewColumnId]"
          kind: UNBOUND
        }
      }
      parameters {
        name: "value"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "tag_bind"
    fullname: "tkinter.ttk.Treeview.tag_bind"
    definitions {
      name: "tag_bind"
      fully_qualified_name: "tkinter.ttk.Treeview.tag_bind"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "tagname"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      parameters {
        name: "callback"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[CallableType[builtins.function],None]"
          kind: UNION
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "tag_bind"
      fully_qualified_name: "tkinter.ttk.Treeview.tag_bind"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "tagname"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "sequence"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "callback"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "tag_bind"
      fully_qualified_name: "tkinter.ttk.Treeview.tag_bind"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "tagname"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "callback"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "tag_configure"
    fullname: "tkinter.ttk.Treeview.tag_configure"
    definitions {
      name: "tag_configure"
      fully_qualified_name: "tkinter.ttk.Treeview.tag_configure"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "tagname"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "tag_configure"
      fully_qualified_name: "tkinter.ttk.Treeview.tag_configure"
      return_annotation {
        pretty_printed_name: "UnboundType[_FontDescription]"
        kind: UNBOUND
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "tagname"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "tag_configure"
      fully_qualified_name: "tkinter.ttk.Treeview.tag_configure"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "tagname"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "tag_configure"
      fully_qualified_name: "tkinter.ttk.Treeview.tag_configure"
      return_annotation {
        pretty_printed_name: "Union[TypedDict,Any]"
        kind: UNION
        args {
          pretty_printed_name: "TypedDict"
          kind: TYPED_DICT
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "tagname"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "option"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      parameters {
        name: "foreground"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "background"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        has_default: true
      }
      parameters {
        name: "font"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[_FontDescription]"
          kind: UNBOUND
        }
        has_default: true
      }
      parameters {
        name: "image"
        kind: KEYWORD_ONLY
        type_annotation {
          pretty_printed_name: "UnboundType[tkinter._ImageSpec]"
          kind: UNBOUND
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "tag_has"
    fullname: "tkinter.ttk.Treeview.tag_has"
    definitions {
      name: "tag_has"
      fully_qualified_name: "tkinter.ttk.Treeview.tag_has"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,Any]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "tagname"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "tag_has"
      fully_qualified_name: "tkinter.ttk.Treeview.tag_has"
      return_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "tagname"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
  }
  overloaded_methods {
    name: "tag_has"
    fullname: "tkinter.ttk.Treeview.tag_has"
    definitions {
      name: "tag_has"
      fully_qualified_name: "tkinter.ttk.Treeview.tag_has"
      return_annotation {
        pretty_printed_name: "builtins.tuple[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.tuple"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "tagname"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
        has_default: true
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "tag_has"
      fully_qualified_name: "tkinter.ttk.Treeview.tag_has"
      return_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "tkinter.ttk.Treeview"
          fully_qualified_name: "tkinter.ttk.Treeview"
        }
      }
      parameters {
        name: "tagname"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "item"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "config"
    fully_qualified_name: "tkinter.ttk.Treeview.config"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
      fully_qualified_name: "builtins.function"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "reattach"
    fully_qualified_name: "tkinter.ttk.Treeview.reattach"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "LabeledScale"
  fully_qualified_name: "tkinter.ttk.LabeledScale"
  super_classes: "tkinter.ttk.Frame"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.LabeledScale.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.LabeledScale"
        fully_qualified_name: "tkinter.ttk.LabeledScale"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.Misc,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.Misc"
          fully_qualified_name: "tkinter.Misc"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "variable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[tkinter.IntVar,tkinter.DoubleVar,None]"
        kind: UNION
        args {
          pretty_printed_name: "tkinter.IntVar"
          fully_qualified_name: "tkinter.IntVar"
        }
        args {
          pretty_printed_name: "tkinter.DoubleVar"
          fully_qualified_name: "tkinter.DoubleVar"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "from_"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "to"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      has_default: true
    }
    parameters {
      name: "compound"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "kw"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "label"
    fully_qualified_name: "tkinter.ttk.LabeledScale.label"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "scale"
    fully_qualified_name: "tkinter.ttk.LabeledScale.scale"
    type_annotation {
      pretty_printed_name: "UnboundType[Incomplete]"
      kind: UNBOUND
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "value"
    fully_qualified_name: "tkinter.ttk.LabeledScale.value"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "OptionMenu"
  fully_qualified_name: "tkinter.ttk.OptionMenu"
  super_classes: "tkinter.ttk.Menubutton"
  methods {
    name: "__init__"
    fully_qualified_name: "tkinter.ttk.OptionMenu.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.OptionMenu"
        fully_qualified_name: "tkinter.ttk.OptionMenu"
      }
    }
    parameters {
      name: "master"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "variable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "values"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "style"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      has_default: true
    }
    parameters {
      name: "direction"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_default: true
    }
    parameters {
      name: "command"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_menu"
    fully_qualified_name: "tkinter.ttk.OptionMenu.set_menu"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "tkinter.ttk.OptionMenu"
        fully_qualified_name: "tkinter.ttk.OptionMenu"
      }
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[UnboundType[Incomplete],None]"
        kind: UNION
        args {
          pretty_printed_name: "UnboundType[Incomplete]"
          kind: UNBOUND
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "values"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "tclobjs_to_py"
  fully_qualified_name: "tkinter.ttk.tclobjs_to_py"
  return_annotation {
    pretty_printed_name: "builtins.dict[Any,Any]"
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
  parameters {
    name: "adict"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.dict[Any,Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "setup_master"
  fully_qualified_name: "tkinter.ttk.setup_master"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "master"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[UnboundType[Incomplete],None]"
      kind: UNION
      args {
        pretty_printed_name: "UnboundType[Incomplete]"
        kind: UNBOUND
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "__all__"
  fully_qualified_name: "tkinter.ttk.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_Padding"
  fully_qualified_name: "tkinter.ttk._Padding"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_TtkCompound"
  fully_qualified_name: "tkinter.ttk._TtkCompound"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "_TreeviewColumnId"
  fully_qualified_name: "tkinter.ttk._TreeviewColumnId"
  type_annotation {
    pretty_printed_name: "UnboundType[TypeAlias]"
    kind: UNBOUND
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
