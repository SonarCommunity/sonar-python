fully_qualified_name: "markdown.core"
classes {
  name: "Markdown"
  fully_qualified_name: "markdown.core.Markdown"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "markdown.core.Markdown.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "markdown.core.Markdown"
        fully_qualified_name: "markdown.core.Markdown"
      }
    }
    parameters {
      name: "extensions"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Sequence[Union[builtins.str,markdown.extensions.Extension]],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Sequence[Union[builtins.str,markdown.extensions.Extension]]"
          args {
            pretty_printed_name: "Union[builtins.str,markdown.extensions.Extension]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "markdown.extensions.Extension"
              fully_qualified_name: "markdown.extensions.Extension"
            }
          }
          fully_qualified_name: "typing.Sequence"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "extension_configs"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,typing.Mapping[builtins.str,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,typing.Mapping[builtins.str,Any]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Mapping"
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "output_format"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "tab_length"
      kind: KEYWORD_ONLY
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "build_parser"
    fully_qualified_name: "markdown.core.Markdown.build_parser"
    return_annotation {
      pretty_printed_name: "markdown.core.Markdown"
      fully_qualified_name: "markdown.core.Markdown"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "markdown.core.Markdown"
        fully_qualified_name: "markdown.core.Markdown"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "registerExtensions"
    fully_qualified_name: "markdown.core.Markdown.registerExtensions"
    return_annotation {
      pretty_printed_name: "markdown.core.Markdown"
      fully_qualified_name: "markdown.core.Markdown"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "markdown.core.Markdown"
        fully_qualified_name: "markdown.core.Markdown"
      }
    }
    parameters {
      name: "extensions"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Union[markdown.extensions.Extension,builtins.str]]"
        args {
          pretty_printed_name: "Union[markdown.extensions.Extension,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "markdown.extensions.Extension"
            fully_qualified_name: "markdown.extensions.Extension"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "configs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,typing.Mapping[builtins.str,Any]]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "build_extension"
    fully_qualified_name: "markdown.core.Markdown.build_extension"
    return_annotation {
      pretty_printed_name: "markdown.extensions.Extension"
      fully_qualified_name: "markdown.extensions.Extension"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "markdown.core.Markdown"
        fully_qualified_name: "markdown.core.Markdown"
      }
    }
    parameters {
      name: "ext_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "configs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "registerExtension"
    fully_qualified_name: "markdown.core.Markdown.registerExtension"
    return_annotation {
      pretty_printed_name: "markdown.core.Markdown"
      fully_qualified_name: "markdown.core.Markdown"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "markdown.core.Markdown"
        fully_qualified_name: "markdown.core.Markdown"
      }
    }
    parameters {
      name: "extension"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "markdown.extensions.Extension"
        fully_qualified_name: "markdown.extensions.Extension"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "reset"
    fully_qualified_name: "markdown.core.Markdown.reset"
    return_annotation {
      pretty_printed_name: "markdown.core.Markdown"
      fully_qualified_name: "markdown.core.Markdown"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "markdown.core.Markdown"
        fully_qualified_name: "markdown.core.Markdown"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "set_output_format"
    fully_qualified_name: "markdown.core.Markdown.set_output_format"
    return_annotation {
      pretty_printed_name: "markdown.core.Markdown"
      fully_qualified_name: "markdown.core.Markdown"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "markdown.core.Markdown"
        fully_qualified_name: "markdown.core.Markdown"
      }
    }
    parameters {
      name: "format"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "is_block_level"
    fully_qualified_name: "markdown.core.Markdown.is_block_level"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "markdown.core.Markdown"
        fully_qualified_name: "markdown.core.Markdown"
      }
    }
    parameters {
      name: "tag"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "convert"
    fully_qualified_name: "markdown.core.Markdown.convert"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "markdown.core.Markdown"
        fully_qualified_name: "markdown.core.Markdown"
      }
    }
    parameters {
      name: "source"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "convertFile"
    fully_qualified_name: "markdown.core.Markdown.convertFile"
    return_annotation {
      pretty_printed_name: "markdown.core.Markdown"
      fully_qualified_name: "markdown.core.Markdown"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "markdown.core.Markdown"
        fully_qualified_name: "markdown.core.Markdown"
      }
    }
    parameters {
      name: "input"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,typing.TextIO,typing.BinaryIO,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "typing.TextIO"
          fully_qualified_name: "typing.TextIO"
        }
        args {
          pretty_printed_name: "typing.BinaryIO"
          fully_qualified_name: "typing.BinaryIO"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "output"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,typing.TextIO,typing.BinaryIO,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "typing.TextIO"
          fully_qualified_name: "typing.TextIO"
        }
        args {
          pretty_printed_name: "typing.BinaryIO"
          fully_qualified_name: "typing.BinaryIO"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "preprocessors"
    fully_qualified_name: "markdown.core.Markdown.preprocessors"
    type_annotation {
      pretty_printed_name: "markdown.util.Registry"
      fully_qualified_name: "markdown.util.Registry"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "inlinePatterns"
    fully_qualified_name: "markdown.core.Markdown.inlinePatterns"
    type_annotation {
      pretty_printed_name: "markdown.util.Registry"
      fully_qualified_name: "markdown.util.Registry"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "treeprocessors"
    fully_qualified_name: "markdown.core.Markdown.treeprocessors"
    type_annotation {
      pretty_printed_name: "markdown.util.Registry"
      fully_qualified_name: "markdown.util.Registry"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "postprocessors"
    fully_qualified_name: "markdown.core.Markdown.postprocessors"
    type_annotation {
      pretty_printed_name: "markdown.util.Registry"
      fully_qualified_name: "markdown.util.Registry"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "parser"
    fully_qualified_name: "markdown.core.Markdown.parser"
    type_annotation {
      pretty_printed_name: "markdown.blockparser.BlockParser"
      fully_qualified_name: "markdown.blockparser.BlockParser"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "htmlStash"
    fully_qualified_name: "markdown.core.Markdown.htmlStash"
    type_annotation {
      pretty_printed_name: "markdown.util.HtmlStash"
      fully_qualified_name: "markdown.util.HtmlStash"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "output_formats"
    fully_qualified_name: "markdown.core.Markdown.output_formats"
    type_annotation {
      pretty_printed_name: "builtins.dict[Union[Literal[builtins.str],Literal[builtins.str]],CallableType[builtins.function]]"
      args {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "output_format"
    fully_qualified_name: "markdown.core.Markdown.output_format"
    type_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "serializer"
    fully_qualified_name: "markdown.core.Markdown.serializer"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "tab_length"
    fully_qualified_name: "markdown.core.Markdown.tab_length"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "block_level_elements"
    fully_qualified_name: "markdown.core.Markdown.block_level_elements"
    type_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "markdown"
  fully_qualified_name: "markdown.core.markdown"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "text"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "extensions"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[typing.Sequence[Union[builtins.str,markdown.extensions.Extension]],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Sequence[Union[builtins.str,markdown.extensions.Extension]]"
        args {
          pretty_printed_name: "Union[builtins.str,markdown.extensions.Extension]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "markdown.extensions.Extension"
            fully_qualified_name: "markdown.extensions.Extension"
          }
        }
        fully_qualified_name: "typing.Sequence"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "extension_configs"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[typing.Mapping[builtins.str,typing.Mapping[builtins.str,Any]],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Mapping[builtins.str,typing.Mapping[builtins.str,Any]]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        fully_qualified_name: "typing.Mapping"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "output_format"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "tab_length"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "markdownFromFile"
  fully_qualified_name: "markdown.core.markdownFromFile"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "input"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,typing.TextIO,typing.BinaryIO,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "typing.TextIO"
        fully_qualified_name: "typing.TextIO"
      }
      args {
        pretty_printed_name: "typing.BinaryIO"
        fully_qualified_name: "typing.BinaryIO"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "output"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,typing.TextIO,typing.BinaryIO,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "typing.TextIO"
        fully_qualified_name: "typing.TextIO"
      }
      args {
        pretty_printed_name: "typing.BinaryIO"
        fully_qualified_name: "typing.BinaryIO"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "encoding"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "extensions"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[typing.Sequence[Union[builtins.str,markdown.extensions.Extension]],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Sequence[Union[builtins.str,markdown.extensions.Extension]]"
        args {
          pretty_printed_name: "Union[builtins.str,markdown.extensions.Extension]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "markdown.extensions.Extension"
            fully_qualified_name: "markdown.extensions.Extension"
          }
        }
        fully_qualified_name: "typing.Sequence"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "extension_configs"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[typing.Mapping[builtins.str,typing.Mapping[builtins.str,Any]],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Mapping[builtins.str,typing.Mapping[builtins.str,Any]]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        fully_qualified_name: "typing.Mapping"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "output_format"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "Literal[builtins.str]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "tab_length"
    kind: KEYWORD_ONLY
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
