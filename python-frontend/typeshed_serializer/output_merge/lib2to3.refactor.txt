fully_qualified_name: "lib2to3.refactor"
classes {
  name: "FixerError"
  fully_qualified_name: "lib2to3.refactor.FixerError"
  super_classes: "builtins.Exception"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "RefactoringTool"
  fully_qualified_name: "lib2to3.refactor.RefactoringTool"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "fixer_names"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,builtins.object],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,builtins.object]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.object"
            fully_qualified_name: "builtins.object"
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "explicit"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Container[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Container[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Container"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "get_fixers"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.get_fixers"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.list[lib2to3.fixer_base.BaseFix],builtins.list[lib2to3.fixer_base.BaseFix]]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.list[lib2to3.fixer_base.BaseFix]"
        args {
          pretty_printed_name: "lib2to3.fixer_base.BaseFix"
          fully_qualified_name: "lib2to3.fixer_base.BaseFix"
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "builtins.list[lib2to3.fixer_base.BaseFix]"
        args {
          pretty_printed_name: "lib2to3.fixer_base.BaseFix"
          fully_qualified_name: "lib2to3.fixer_base.BaseFix"
        }
        fully_qualified_name: "builtins.list"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "log_error"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.log_error"
    return_annotation {
      pretty_printed_name: "NoReturn"
      kind: UNINHABITED
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "args"
      kind: VAR_POSITIONAL
      type_annotation {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[_ExcInfoType]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "print_output"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.print_output"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "old_text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "new_text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[StrPath]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "equal"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "refactor"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.refactor"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "items"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "doctests_only"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "refactor_dir"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.refactor_dir"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "dir_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "doctests_only"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "_read_python_source"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool._read_python_source"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[FileDescriptorOrPath]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "refactor_file"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.refactor_file"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[StrPath]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "doctests_only"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "refactor_string"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.refactor_string"
    return_annotation {
      pretty_printed_name: "Union[lib2to3.pytree.Node,None]"
      kind: UNION
      args {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "refactor_stdin"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.refactor_stdin"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "doctests_only"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "refactor_tree"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.refactor_tree"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "tree"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.pytree.Node"
        fully_qualified_name: "lib2to3.pytree.Node"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "traverse_by"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.traverse_by"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "fixers"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[_typeshed.SupportsGetItem[builtins.int,typing.Iterable[lib2to3.fixer_base.BaseFix]],None]"
        kind: UNION
        args {
          pretty_printed_name: "_typeshed.SupportsGetItem[builtins.int,typing.Iterable[lib2to3.fixer_base.BaseFix]]"
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "typing.Iterable[lib2to3.fixer_base.BaseFix]"
            args {
              pretty_printed_name: "lib2to3.fixer_base.BaseFix"
              fully_qualified_name: "lib2to3.fixer_base.BaseFix"
            }
            fully_qualified_name: "typing.Iterable"
          }
          fully_qualified_name: "_typeshed.SupportsGetItem"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "traversal"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[lib2to3.pytree.Node]"
        args {
          pretty_printed_name: "lib2to3.pytree.Node"
          fully_qualified_name: "lib2to3.pytree.Node"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "processed_file"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.processed_file"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "new_text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[StrPath]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "old_text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "write_file"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.write_file"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "new_text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[FileDescriptorOrPath]"
        kind: UNBOUND
      }
    }
    parameters {
      name: "old_text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "refactor_docstring"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.refactor_docstring"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "input"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[StrPath]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "refactor_doctest"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.refactor_doctest"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "block"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
    }
    parameters {
      name: "lineno"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "indent"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "UnboundType[StrPath]"
        kind: UNBOUND
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "summarize"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.summarize"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "parse_block"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.parse_block"
    return_annotation {
      pretty_printed_name: "lib2to3.pytree.Node"
      fully_qualified_name: "lib2to3.pytree.Node"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "block"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "lineno"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "indent"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "wrap_toks"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.wrap_toks"
    return_annotation {
      pretty_printed_name: "typing.Generator[Tuple[builtins.int,builtins.str,Tuple[builtins.int,builtins.int],Tuple[builtins.int,builtins.int],builtins.str],None,None]"
      args {
        pretty_printed_name: "Tuple[builtins.int,builtins.str,Tuple[builtins.int,builtins.int],Tuple[builtins.int,builtins.int],builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Tuple[builtins.int,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "Tuple[builtins.int,builtins.int]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "block"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "lineno"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "indent"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "gen_lines"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.gen_lines"
    return_annotation {
      pretty_printed_name: "typing.Generator[builtins.str,None,None]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.RefactoringTool"
        fully_qualified_name: "lib2to3.refactor.RefactoringTool"
      }
    }
    parameters {
      name: "block"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "indent"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "log_message"
    fullname: "lib2to3.refactor.RefactoringTool.log_message"
    definitions {
      name: "log_message"
      fully_qualified_name: "lib2to3.refactor.RefactoringTool.log_message"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "lib2to3.refactor.RefactoringTool"
          fully_qualified_name: "lib2to3.refactor.RefactoringTool"
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "log_message"
      fully_qualified_name: "lib2to3.refactor.RefactoringTool.log_message"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "lib2to3.refactor.RefactoringTool"
          fully_qualified_name: "lib2to3.refactor.RefactoringTool"
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  overloaded_methods {
    name: "log_debug"
    fullname: "lib2to3.refactor.RefactoringTool.log_debug"
    definitions {
      name: "log_debug"
      fully_qualified_name: "lib2to3.refactor.RefactoringTool.log_debug"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "lib2to3.refactor.RefactoringTool"
          fully_qualified_name: "lib2to3.refactor.RefactoringTool"
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "log_debug"
      fully_qualified_name: "lib2to3.refactor.RefactoringTool.log_debug"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "lib2to3.refactor.RefactoringTool"
          fully_qualified_name: "lib2to3.refactor.RefactoringTool"
        }
      }
      parameters {
        name: "msg"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "args"
        kind: VAR_POSITIONAL
        type_annotation {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "CLASS_PREFIX"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.CLASS_PREFIX"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "FILE_PREFIX"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.FILE_PREFIX"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "fixers"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.fixers"
    type_annotation {
      pretty_printed_name: "typing.Iterable[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.Iterable"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "explicit"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.explicit"
    type_annotation {
      pretty_printed_name: "typing.Container[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.Container"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "options"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.options"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "grammar"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.grammar"
    type_annotation {
      pretty_printed_name: "lib2to3.pgen2.grammar.Grammar"
      fully_qualified_name: "lib2to3.pgen2.grammar.Grammar"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "write_unchanged_files"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.write_unchanged_files"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "errors"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.errors"
    type_annotation {
      pretty_printed_name: "builtins.list[Tuple[builtins.str,typing.Iterable[builtins.str],builtins.dict[builtins.str,UnboundType[_ExcInfoType]]]]"
      args {
        pretty_printed_name: "Tuple[builtins.str,typing.Iterable[builtins.str],builtins.dict[builtins.str,UnboundType[_ExcInfoType]]]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "builtins.dict[builtins.str,UnboundType[_ExcInfoType]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "UnboundType[_ExcInfoType]"
            kind: UNBOUND
          }
          fully_qualified_name: "builtins.dict"
        }
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "logger"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.logger"
    type_annotation {
      pretty_printed_name: "logging.Logger"
      fully_qualified_name: "logging.Logger"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "fixer_log"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.fixer_log"
    type_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "wrote"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.wrote"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "driver"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.driver"
    type_annotation {
      pretty_printed_name: "lib2to3.pgen2.driver.Driver"
      fully_qualified_name: "lib2to3.pgen2.driver.Driver"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "pre_order"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.pre_order"
    type_annotation {
      pretty_printed_name: "builtins.list[lib2to3.fixer_base.BaseFix]"
      args {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "post_order"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.post_order"
    type_annotation {
      pretty_printed_name: "builtins.list[lib2to3.fixer_base.BaseFix]"
      args {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "files"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.files"
    type_annotation {
      pretty_printed_name: "builtins.list[UnboundType[StrPath]]"
      args {
        pretty_printed_name: "UnboundType[StrPath]"
        kind: UNBOUND
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "BM"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.BM"
    type_annotation {
      pretty_printed_name: "lib2to3.btm_matcher.BottomMatcher"
      fully_qualified_name: "lib2to3.btm_matcher.BottomMatcher"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "bmi_pre_order"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.bmi_pre_order"
    type_annotation {
      pretty_printed_name: "builtins.list[lib2to3.fixer_base.BaseFix]"
      args {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "bmi_post_order"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.bmi_post_order"
    type_annotation {
      pretty_printed_name: "builtins.list[lib2to3.fixer_base.BaseFix]"
      args {
        pretty_printed_name: "lib2to3.fixer_base.BaseFix"
        fully_qualified_name: "lib2to3.fixer_base.BaseFix"
      }
      fully_qualified_name: "builtins.list"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "PS1"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.PS1"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "PS2"
    fully_qualified_name: "lib2to3.refactor.RefactoringTool.PS2"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
classes {
  name: "MultiprocessingUnsupported"
  fully_qualified_name: "lib2to3.refactor.MultiprocessingUnsupported"
  super_classes: "builtins.Exception"
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "MultiprocessRefactoringTool"
  fully_qualified_name: "lib2to3.refactor.MultiprocessRefactoringTool"
  super_classes: "lib2to3.refactor.RefactoringTool"
  methods {
    name: "refactor"
    fully_qualified_name: "lib2to3.refactor.MultiprocessRefactoringTool.refactor"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "lib2to3.refactor.MultiprocessRefactoringTool"
        fully_qualified_name: "lib2to3.refactor.MultiprocessRefactoringTool"
      }
    }
    parameters {
      name: "items"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "write"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "doctests_only"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      has_default: true
    }
    parameters {
      name: "num_processes"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "queue"
    fully_qualified_name: "lib2to3.refactor.MultiprocessRefactoringTool.queue"
    type_annotation {
      pretty_printed_name: "Union[multiprocessing.queues.JoinableQueue[Union[None,Tuple[typing.Iterable[builtins.str],Union[builtins.bool,builtins.int]]]],None]"
      kind: UNION
      args {
        pretty_printed_name: "multiprocessing.queues.JoinableQueue[Union[None,Tuple[typing.Iterable[builtins.str],Union[builtins.bool,builtins.int]]]]"
        args {
          pretty_printed_name: "Union[None,Tuple[typing.Iterable[builtins.str],Union[builtins.bool,builtins.int]]]"
          kind: UNION
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
          args {
            pretty_printed_name: "Tuple[typing.Iterable[builtins.str],Union[builtins.bool,builtins.int]]"
            kind: TUPLE
            args {
              pretty_printed_name: "typing.Iterable[builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "typing.Iterable"
            }
            args {
              pretty_printed_name: "Union[builtins.bool,builtins.int]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bool"
                fully_qualified_name: "builtins.bool"
              }
              args {
                pretty_printed_name: "builtins.int"
                fully_qualified_name: "builtins.int"
              }
            }
          }
        }
        fully_qualified_name: "multiprocessing.queues.JoinableQueue"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  attributes {
    name: "output_lock"
    fully_qualified_name: "lib2to3.refactor.MultiprocessRefactoringTool.output_lock"
    type_annotation {
      pretty_printed_name: "Union[multiprocessing.synchronize.Lock,None]"
      kind: UNION
      args {
        pretty_printed_name: "multiprocessing.synchronize.Lock"
        fully_qualified_name: "multiprocessing.synchronize.Lock"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
functions {
  name: "get_all_fix_names"
  fully_qualified_name: "lib2to3.refactor.get_all_fix_names"
  return_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "fixer_pkg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "remove_prefix"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "get_fixers_from_package"
  fully_qualified_name: "lib2to3.refactor.get_fixers_from_package"
  return_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  parameters {
    name: "pkg_name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
