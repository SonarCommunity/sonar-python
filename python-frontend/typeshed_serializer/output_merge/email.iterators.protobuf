fully_qualified_name: "email.iterators"
functions {
  name: "walk"
  fully_qualified_name: "email.iterators.walk"
  return_annotation {
    pretty_printed_name: "typing.Generator[Any,Any,Any]"
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "typing.Generator"
  }
  parameters {
    name: "self"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  valid_for: "27"
}
functions {
  name: "walk"
  fully_qualified_name: "email.iterators.walk"
  return_annotation {
    pretty_printed_name: "typing.Iterator[email.message.Message]"
    args {
      pretty_printed_name: "email.message.Message"
      fully_qualified_name: "email.message.Message"
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "self"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "email.message.Message"
      fully_qualified_name: "email.message.Message"
    }
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "body_line_iterator"
  fully_qualified_name: "email.iterators.body_line_iterator"
  return_annotation {
    pretty_printed_name: "typing.Generator[Any,Any,Any]"
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "typing.Generator"
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "decode"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "body_line_iterator"
  fully_qualified_name: "email.iterators.body_line_iterator"
  return_annotation {
    pretty_printed_name: "typing.Iterator[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "email.message.Message"
      fully_qualified_name: "email.message.Message"
    }
  }
  parameters {
    name: "decode"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "typed_subpart_iterator"
  fully_qualified_name: "email.iterators.typed_subpart_iterator"
  return_annotation {
    pretty_printed_name: "typing.Generator[Any,Any,Any]"
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "typing.Generator"
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  parameters {
    name: "maintype"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    has_default: true
  }
  parameters {
    name: "subtype"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    has_default: true
  }
  valid_for: "27"
}
functions {
  name: "typed_subpart_iterator"
  fully_qualified_name: "email.iterators.typed_subpart_iterator"
  return_annotation {
    pretty_printed_name: "typing.Iterator[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "email.message.Message"
      fully_qualified_name: "email.message.Message"
    }
  }
  parameters {
    name: "maintype"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    has_default: true
  }
  parameters {
    name: "subtype"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
functions {
  name: "_structure"
  fully_qualified_name: "email.iterators._structure"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "msg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "email.message.Message"
      fully_qualified_name: "email.message.Message"
    }
  }
  parameters {
    name: "fp"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[_typeshed.SupportsWrite[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "_typeshed.SupportsWrite[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "_typeshed.SupportsWrite"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_default: true
  }
  parameters {
    name: "level"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    has_default: true
  }
  parameters {
    name: "include_default"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    has_default: true
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
vars {
  name: "__all__"
  fully_qualified_name: "email.iterators.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
