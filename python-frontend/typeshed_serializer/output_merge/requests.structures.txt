fully_qualified_name: "requests.structures"
classes {
  name: "CaseInsensitiveDict"
  fully_qualified_name: "requests.structures.CaseInsensitiveDict"
  super_classes: "typing.MutableMapping"
  methods {
    name: "__init__"
    fully_qualified_name: "requests.structures.CaseInsensitiveDict.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "requests.structures.CaseInsensitiveDict[requests.structures._VT]"
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "requests.structures.CaseInsensitiveDict"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,requests.structures._VT],typing.Iterable[Tuple[builtins.str,requests.structures._VT]],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,requests.structures._VT]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "requests.structures._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "typing.Iterable[Tuple[builtins.str,requests.structures._VT]]"
          args {
            pretty_printed_name: "Tuple[builtins.str,requests.structures._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "requests.structures._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_default: true
    }
    parameters {
      name: "kwargs"
      kind: VAR_KEYWORD
      type_annotation {
        pretty_printed_name: "requests.structures._VT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "lower_items"
    fully_qualified_name: "requests.structures.CaseInsensitiveDict.lower_items"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[builtins.str,requests.structures._VT]]"
      args {
        pretty_printed_name: "Tuple[builtins.str,requests.structures._VT]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "requests.structures.CaseInsensitiveDict[requests.structures._VT]"
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "requests.structures.CaseInsensitiveDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__setitem__"
    fully_qualified_name: "requests.structures.CaseInsensitiveDict.__setitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "requests.structures.CaseInsensitiveDict[requests.structures._VT]"
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "requests.structures.CaseInsensitiveDict"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "value"
      type_annotation {
        pretty_printed_name: "requests.structures._VT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "requests.structures.CaseInsensitiveDict.__getitem__"
    return_annotation {
      pretty_printed_name: "requests.structures._VT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "requests.structures.CaseInsensitiveDict[requests.structures._VT]"
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "requests.structures.CaseInsensitiveDict"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "requests.structures.CaseInsensitiveDict.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "requests.structures.CaseInsensitiveDict[requests.structures._VT]"
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "requests.structures.CaseInsensitiveDict"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "requests.structures.CaseInsensitiveDict.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "requests.structures.CaseInsensitiveDict[requests.structures._VT]"
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "requests.structures.CaseInsensitiveDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__len__"
    fully_qualified_name: "requests.structures.CaseInsensitiveDict.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "requests.structures.CaseInsensitiveDict[requests.structures._VT]"
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "requests.structures.CaseInsensitiveDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "copy"
    fully_qualified_name: "requests.structures.CaseInsensitiveDict.copy"
    return_annotation {
      pretty_printed_name: "requests.structures.CaseInsensitiveDict[requests.structures._VT]"
      args {
        pretty_printed_name: "requests.structures._VT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "requests.structures.CaseInsensitiveDict"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "requests.structures.CaseInsensitiveDict[requests.structures._VT]"
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "requests.structures.CaseInsensitiveDict"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
}
classes {
  name: "LookupDict"
  fully_qualified_name: "requests.structures.LookupDict"
  super_classes: "builtins.dict"
  methods {
    name: "__init__"
    fully_qualified_name: "requests.structures.LookupDict.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "requests.structures.LookupDict[requests.structures._VT]"
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "requests.structures.LookupDict"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
      has_default: true
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "requests.structures.LookupDict.__getitem__"
    return_annotation {
      pretty_printed_name: "Union[requests.structures._VT,None]"
      kind: UNION
      args {
        pretty_printed_name: "requests.structures._VT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "requests.structures.LookupDict[requests.structures._VT]"
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "requests.structures.LookupDict"
      }
    }
    parameters {
      name: "key"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__getattr__"
    fully_qualified_name: "requests.structures.LookupDict.__getattr__"
    return_annotation {
      pretty_printed_name: "requests.structures._VT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "requests.structures.LookupDict[requests.structures._VT]"
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "requests.structures.LookupDict"
      }
    }
    parameters {
      name: "attr"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  methods {
    name: "__setattr__"
    fully_qualified_name: "requests.structures.LookupDict.__setattr__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      type_annotation {
        pretty_printed_name: "requests.structures.LookupDict[requests.structures._VT]"
        args {
          pretty_printed_name: "requests.structures._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "requests.structures.LookupDict"
      }
    }
    parameters {
      name: "attr"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "value"
      type_annotation {
        pretty_printed_name: "requests.structures._VT"
        kind: TYPE_VAR
      }
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
  is_generic: true
  valid_for: "35"
  valid_for: "36"
  valid_for: "37"
  valid_for: "38"
  valid_for: "39"
  valid_for: "310"
  attributes {
    name: "name"
    fully_qualified_name: "requests.structures.LookupDict.name"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    valid_for: "35"
    valid_for: "36"
    valid_for: "37"
    valid_for: "38"
    valid_for: "39"
    valid_for: "310"
  }
}
