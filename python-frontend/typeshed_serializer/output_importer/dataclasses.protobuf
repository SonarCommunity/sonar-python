fully_qualified_name: "dataclasses"
classes {
  name: "Type"
  fully_qualified_name: "builtins.type"
  super_classes: "builtins.object"
  methods {
    name: "__base__"
    fully_qualified_name: "builtins.type.__base__"
    return_annotation {
      pretty_printed_name: "builtins.type"
      fully_qualified_name: "builtins.type"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__basicsize__"
    fully_qualified_name: "builtins.type.__basicsize__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__dict__"
    fully_qualified_name: "builtins.type.__dict__"
    return_annotation {
      pretty_printed_name: "types.MappingProxyType[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "types.MappingProxyType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__dictoffset__"
    fully_qualified_name: "builtins.type.__dictoffset__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__flags__"
    fully_qualified_name: "builtins.type.__flags__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__itemsize__"
    fully_qualified_name: "builtins.type.__itemsize__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__mro__"
    fully_qualified_name: "builtins.type.__mro__"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.type]"
      args {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__text_signature__"
    fully_qualified_name: "builtins.type.__text_signature__"
    return_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__weakrefoffset__"
    fully_qualified_name: "builtins.type.__weakrefoffset__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__call__"
    fully_qualified_name: "builtins.type.__call__"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwds"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  methods {
    name: "__subclasses__"
    fully_qualified_name: "builtins.type.__subclasses__"
    return_annotation {
      pretty_printed_name: "builtins.list[_typeshed.Self]"
      args {
        pretty_printed_name: "_typeshed.Self"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_typeshed.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "mro"
    fully_qualified_name: "builtins.type.mro"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.type]"
      args {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
  }
  methods {
    name: "__instancecheck__"
    fully_qualified_name: "builtins.type.__instancecheck__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  methods {
    name: "__subclasscheck__"
    fully_qualified_name: "builtins.type.__subclasscheck__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
  }
  methods {
    name: "__prepare__"
    fully_qualified_name: "builtins.type.__prepare__"
    return_annotation {
      pretty_printed_name: "typing.Mapping[builtins.str,builtins.object]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
      fully_qualified_name: "typing.Mapping"
    }
    parameters {
      name: "metacls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[builtins.type]"
        kind: TYPE
        args {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.tuple[builtins.type]"
        args {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
    parameters {
      name: "kwds"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  overloaded_methods {
    name: "__init__"
    fullname: "builtins.type.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "builtins.type.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "builtins.type.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.type"
          fully_qualified_name: "builtins.type"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.tuple[builtins.type]"
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
      }
      parameters {
        name: "kwds"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "__new__"
    fullname: "builtins.type.__new__"
    definitions {
      name: "__new__"
      fully_qualified_name: "builtins.type.__new__"
      return_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[builtins.type]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__new__"
      fully_qualified_name: "builtins.type.__new__"
      return_annotation {
        pretty_printed_name: "_typeshed.Self"
        kind: TYPE_VAR
      }
      parameters {
        name: "cls"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Type[_typeshed.Self]"
          kind: TYPE
          args {
            pretty_printed_name: "_typeshed.Self"
            kind: TYPE_VAR
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.tuple[builtins.type]"
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          fully_qualified_name: "builtins.tuple"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
      }
      parameters {
        name: "kwds"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  attributes {
    name: "__bases__"
    fully_qualified_name: "builtins.type.__bases__"
    type_annotation {
      pretty_printed_name: "builtins.tuple[builtins.type]"
      args {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
      fully_qualified_name: "builtins.tuple"
    }
  }
  attributes {
    name: "__module__"
    fully_qualified_name: "builtins.type.__module__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "__qualname__"
    fully_qualified_name: "builtins.type.__qualname__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "_MISSING_TYPE"
  fully_qualified_name: "dataclasses._MISSING_TYPE"
  super_classes: "enum.Enum"
  is_enum: true
  attributes {
    name: "MISSING"
    fully_qualified_name: "dataclasses._MISSING_TYPE.MISSING"
    type_annotation {
      pretty_printed_name: "enum.auto"
      fully_qualified_name: "enum.auto"
    }
  }
}
classes {
  name: "_DefaultFactory"
  fully_qualified_name: "dataclasses._DefaultFactory"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "dataclasses._DefaultFactory.__call__"
    return_annotation {
      pretty_printed_name: "dataclasses._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "dataclasses._DefaultFactory[dataclasses._T_co]"
        args {
          pretty_printed_name: "dataclasses._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "dataclasses._DefaultFactory"
      }
    }
  }
  is_generic: true
  is_protocol: true
}
classes {
  name: "Field"
  fully_qualified_name: "dataclasses.Field"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "dataclasses.Field.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "dataclasses.Field[dataclasses._T]"
        args {
          pretty_printed_name: "dataclasses._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "dataclasses.Field"
      }
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "dataclasses._T"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "default_factory"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "init"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "repr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "hash"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "compare"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "metadata"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "__set_name__"
    fully_qualified_name: "dataclasses.Field.__set_name__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "dataclasses.Field[dataclasses._T]"
        args {
          pretty_printed_name: "dataclasses._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "dataclasses.Field"
      }
    }
    parameters {
      name: "owner"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[Any]"
        kind: TYPE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  is_generic: true
  attributes {
    name: "name"
    fully_qualified_name: "dataclasses.Field.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "type"
    fully_qualified_name: "dataclasses.Field.type"
    type_annotation {
      pretty_printed_name: "Type[dataclasses._T]"
      kind: TYPE
      args {
        pretty_printed_name: "dataclasses._T"
        kind: TYPE_VAR
      }
    }
  }
  attributes {
    name: "default"
    fully_qualified_name: "dataclasses.Field.default"
    type_annotation {
      pretty_printed_name: "Union[dataclasses._T,Literal[dataclasses._MISSING_TYPE]]"
      kind: UNION
      args {
        pretty_printed_name: "dataclasses._T"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "Literal[dataclasses._MISSING_TYPE]"
        kind: LITERAL
        args {
          pretty_printed_name: "dataclasses._MISSING_TYPE"
          fully_qualified_name: "dataclasses._MISSING_TYPE"
        }
      }
    }
  }
  attributes {
    name: "default_factory"
    fully_qualified_name: "dataclasses.Field.default_factory"
    type_annotation {
      pretty_printed_name: "Union[dataclasses._DefaultFactory[dataclasses._T],Literal[dataclasses._MISSING_TYPE]]"
      kind: UNION
      args {
        pretty_printed_name: "dataclasses._DefaultFactory[dataclasses._T]"
        args {
          pretty_printed_name: "dataclasses._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "dataclasses._DefaultFactory"
      }
      args {
        pretty_printed_name: "Literal[dataclasses._MISSING_TYPE]"
        kind: LITERAL
        args {
          pretty_printed_name: "dataclasses._MISSING_TYPE"
          fully_qualified_name: "dataclasses._MISSING_TYPE"
        }
      }
    }
  }
  attributes {
    name: "repr"
    fully_qualified_name: "dataclasses.Field.repr"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "hash"
    fully_qualified_name: "dataclasses.Field.hash"
    type_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "init"
    fully_qualified_name: "dataclasses.Field.init"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "compare"
    fully_qualified_name: "dataclasses.Field.compare"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "metadata"
    fully_qualified_name: "dataclasses.Field.metadata"
    type_annotation {
      pretty_printed_name: "types.MappingProxyType[Any,Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "types.MappingProxyType"
    }
  }
}
classes {
  name: "FrozenInstanceError"
  fully_qualified_name: "dataclasses.FrozenInstanceError"
  super_classes: "builtins.AttributeError"
}
classes {
  name: "_InitVarMeta"
  fully_qualified_name: "dataclasses._InitVarMeta"
  super_classes: "builtins.type"
  methods {
    name: "__getitem__"
    fully_qualified_name: "dataclasses._InitVarMeta.__getitem__"
    return_annotation {
      pretty_printed_name: "dataclasses.InitVar[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "dataclasses.InitVar"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "dataclasses._InitVarMeta"
        fully_qualified_name: "dataclasses._InitVarMeta"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
}
classes {
  name: "InitVar"
  fully_qualified_name: "dataclasses.InitVar"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "dataclasses.InitVar.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "dataclasses.InitVar[dataclasses._T]"
        args {
          pretty_printed_name: "dataclasses._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "dataclasses.InitVar"
      }
    }
    parameters {
      name: "type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[dataclasses._T]"
        kind: TYPE
        args {
          pretty_printed_name: "dataclasses._T"
          kind: TYPE_VAR
        }
      }
    }
  }
  has_metaclass: true
  is_generic: true
  metaclass_name: "dataclasses._InitVarMeta"
  attributes {
    name: "type"
    fully_qualified_name: "dataclasses.InitVar.type"
    type_annotation {
      pretty_printed_name: "Type[dataclasses._T]"
      kind: TYPE
      args {
        pretty_printed_name: "dataclasses._T"
        kind: TYPE_VAR
      }
    }
  }
}
functions {
  name: "fields"
  fully_qualified_name: "dataclasses.fields"
  return_annotation {
    pretty_printed_name: "builtins.tuple[dataclasses.Field[Any]]"
    args {
      pretty_printed_name: "dataclasses.Field[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "dataclasses.Field"
    }
    fully_qualified_name: "builtins.tuple"
  }
  parameters {
    name: "class_or_instance"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[_typeshed.DataclassInstance,Type[_typeshed.DataclassInstance]]"
      kind: UNION
      args {
        pretty_printed_name: "_typeshed.DataclassInstance"
        fully_qualified_name: "_typeshed.DataclassInstance"
      }
      args {
        pretty_printed_name: "Type[_typeshed.DataclassInstance]"
        kind: TYPE
        args {
          pretty_printed_name: "_typeshed.DataclassInstance"
          fully_qualified_name: "_typeshed.DataclassInstance"
        }
      }
    }
  }
}
functions {
  name: "make_dataclass"
  fully_qualified_name: "dataclasses.make_dataclass"
  return_annotation {
    pretty_printed_name: "builtins.type"
    fully_qualified_name: "builtins.type"
  }
  parameters {
    name: "cls_name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "fields"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[Union[builtins.str,Tuple[builtins.str,builtins.type],Tuple[builtins.str,builtins.type,Any]]]"
      args {
        pretty_printed_name: "Union[builtins.str,Tuple[builtins.str,builtins.type],Tuple[builtins.str,builtins.type,Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.type]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
        }
        args {
          pretty_printed_name: "Tuple[builtins.str,builtins.type,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.type"
            fully_qualified_name: "builtins.type"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "bases"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.tuple[builtins.type]"
      args {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
      fully_qualified_name: "builtins.tuple"
    }
  }
  parameters {
    name: "namespace"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "init"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  parameters {
    name: "repr"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  parameters {
    name: "eq"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  parameters {
    name: "order"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  parameters {
    name: "unsafe_hash"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  parameters {
    name: "frozen"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "replace"
  fully_qualified_name: "dataclasses.replace"
  return_annotation {
    pretty_printed_name: "dataclasses._DataclassT"
    kind: TYPE_VAR
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "dataclasses._DataclassT"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "changes"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
}
overloaded_functions {
  name: "asdict"
  fullname: "dataclasses.asdict"
  definitions {
    name: "asdict"
    fully_qualified_name: "dataclasses.asdict"
    return_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_typeshed.DataclassInstance"
        fully_qualified_name: "_typeshed.DataclassInstance"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "asdict"
    fully_qualified_name: "dataclasses.asdict"
    return_annotation {
      pretty_printed_name: "dataclasses._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_typeshed.DataclassInstance"
        fully_qualified_name: "_typeshed.DataclassInstance"
      }
    }
    parameters {
      name: "dict_factory"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "astuple"
  fullname: "dataclasses.astuple"
  definitions {
    name: "astuple"
    fully_qualified_name: "dataclasses.astuple"
    return_annotation {
      pretty_printed_name: "builtins.tuple[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_typeshed.DataclassInstance"
        fully_qualified_name: "_typeshed.DataclassInstance"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "astuple"
    fully_qualified_name: "dataclasses.astuple"
    return_annotation {
      pretty_printed_name: "dataclasses._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_typeshed.DataclassInstance"
        fully_qualified_name: "_typeshed.DataclassInstance"
      }
    }
    parameters {
      name: "tuple_factory"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "dataclass"
  fullname: "dataclasses.dataclass"
  definitions {
    name: "dataclass"
    fully_qualified_name: "dataclasses.dataclass"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "dataclass"
    fully_qualified_name: "dataclasses.dataclass"
    return_annotation {
      pretty_printed_name: "Type[dataclasses._T]"
      kind: TYPE
      args {
        pretty_printed_name: "dataclasses._T"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Type[dataclasses._T]"
        kind: TYPE
        args {
          pretty_printed_name: "dataclasses._T"
          kind: TYPE_VAR
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "dataclass"
    fully_qualified_name: "dataclasses.dataclass"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "init"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "repr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "eq"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "order"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "unsafe_hash"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "frozen"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "field"
  fullname: "dataclasses.field"
  definitions {
    name: "field"
    fully_qualified_name: "dataclasses.field"
    return_annotation {
      pretty_printed_name: "dataclasses._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "dataclasses._T"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "init"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "repr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "hash"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "compare"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "metadata"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[Any,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "field"
    fully_qualified_name: "dataclasses.field"
    return_annotation {
      pretty_printed_name: "dataclasses._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "default_factory"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "init"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "repr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "hash"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "compare"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "metadata"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[Any,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "field"
    fully_qualified_name: "dataclasses.field"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "init"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "repr"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "hash"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "compare"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "metadata"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[Any,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "is_dataclass"
  fullname: "dataclasses.is_dataclass"
  definitions {
    name: "is_dataclass"
    fully_qualified_name: "dataclasses.is_dataclass"
    return_annotation {
      pretty_printed_name: "Literal[builtins.bool]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "_typeshed.DataclassInstance"
        fully_qualified_name: "_typeshed.DataclassInstance"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "is_dataclass"
    fully_qualified_name: "dataclasses.is_dataclass"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "is_dataclass"
    fully_qualified_name: "dataclasses.is_dataclass"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "dataclasses.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "__all__"
  fully_qualified_name: "dataclasses.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
}
vars {
  name: "MISSING"
  fully_qualified_name: "dataclasses.MISSING"
  type_annotation {
    pretty_printed_name: "dataclasses._MISSING_TYPE"
    fully_qualified_name: "dataclasses._MISSING_TYPE"
  }
}
