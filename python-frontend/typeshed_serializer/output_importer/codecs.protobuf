fully_qualified_name: "codecs"
classes {
  name: "_WritableStream"
  fully_qualified_name: "codecs._WritableStream"
  super_classes: "builtins.object"
  methods {
    name: "write"
    fully_qualified_name: "codecs._WritableStream.write"
    return_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._WritableStream"
        fully_qualified_name: "codecs._WritableStream"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
  }
  methods {
    name: "seek"
    fully_qualified_name: "codecs._WritableStream.seek"
    return_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._WritableStream"
        fully_qualified_name: "codecs._WritableStream"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "close"
    fully_qualified_name: "codecs._WritableStream.close"
    return_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._WritableStream"
        fully_qualified_name: "codecs._WritableStream"
      }
    }
  }
  is_protocol: true
}
classes {
  name: "_ReadableStream"
  fully_qualified_name: "codecs._ReadableStream"
  super_classes: "builtins.object"
  methods {
    name: "read"
    fully_qualified_name: "codecs._ReadableStream.read"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._ReadableStream"
        fully_qualified_name: "codecs._ReadableStream"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "seek"
    fully_qualified_name: "codecs._ReadableStream.seek"
    return_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._ReadableStream"
        fully_qualified_name: "codecs._ReadableStream"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "close"
    fully_qualified_name: "codecs._ReadableStream.close"
    return_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._ReadableStream"
        fully_qualified_name: "codecs._ReadableStream"
      }
    }
  }
  is_protocol: true
}
classes {
  name: "_Stream"
  fully_qualified_name: "codecs._Stream"
  super_classes: "codecs._WritableStream"
  super_classes: "codecs._ReadableStream"
  is_protocol: true
}
classes {
  name: "_Encoder"
  fully_qualified_name: "codecs._Encoder"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "codecs._Encoder.__call__"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._Encoder"
        fully_qualified_name: "codecs._Encoder"
      }
    }
    parameters {
      name: "input"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  is_protocol: true
}
classes {
  name: "_Decoder"
  fully_qualified_name: "codecs._Decoder"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "codecs._Decoder.__call__"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._Decoder"
        fully_qualified_name: "codecs._Decoder"
      }
    }
    parameters {
      name: "input"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  is_protocol: true
}
classes {
  name: "_StreamReader"
  fully_qualified_name: "codecs._StreamReader"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "codecs._StreamReader.__call__"
    return_annotation {
      pretty_printed_name: "codecs.StreamReader"
      fully_qualified_name: "codecs.StreamReader"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._StreamReader"
        fully_qualified_name: "codecs._StreamReader"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._ReadableStream"
        fully_qualified_name: "codecs._ReadableStream"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  is_protocol: true
}
classes {
  name: "_StreamWriter"
  fully_qualified_name: "codecs._StreamWriter"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "codecs._StreamWriter.__call__"
    return_annotation {
      pretty_printed_name: "codecs.StreamWriter"
      fully_qualified_name: "codecs.StreamWriter"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._StreamWriter"
        fully_qualified_name: "codecs._StreamWriter"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._WritableStream"
        fully_qualified_name: "codecs._WritableStream"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  is_protocol: true
}
classes {
  name: "_IncrementalEncoder"
  fully_qualified_name: "codecs._IncrementalEncoder"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "codecs._IncrementalEncoder.__call__"
    return_annotation {
      pretty_printed_name: "codecs.IncrementalEncoder"
      fully_qualified_name: "codecs.IncrementalEncoder"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._IncrementalEncoder"
        fully_qualified_name: "codecs._IncrementalEncoder"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  is_protocol: true
}
classes {
  name: "_IncrementalDecoder"
  fully_qualified_name: "codecs._IncrementalDecoder"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "codecs._IncrementalDecoder.__call__"
    return_annotation {
      pretty_printed_name: "codecs.IncrementalDecoder"
      fully_qualified_name: "codecs.IncrementalDecoder"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._IncrementalDecoder"
        fully_qualified_name: "codecs._IncrementalDecoder"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  is_protocol: true
}
classes {
  name: "CodecInfo"
  fully_qualified_name: "codecs.CodecInfo"
  super_classes: "builtins.tuple"
  methods {
    name: "encode"
    fully_qualified_name: "codecs.CodecInfo.encode"
    return_annotation {
      pretty_printed_name: "codecs._Encoder"
      fully_qualified_name: "codecs._Encoder"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
        kind: TUPLE
        args {
          pretty_printed_name: "codecs._Encoder"
          fully_qualified_name: "codecs._Encoder"
        }
        args {
          pretty_printed_name: "codecs._Decoder"
          fully_qualified_name: "codecs._Decoder"
        }
        args {
          pretty_printed_name: "codecs._StreamReader"
          fully_qualified_name: "codecs._StreamReader"
        }
        args {
          pretty_printed_name: "codecs._StreamWriter"
          fully_qualified_name: "codecs._StreamWriter"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "decode"
    fully_qualified_name: "codecs.CodecInfo.decode"
    return_annotation {
      pretty_printed_name: "codecs._Decoder"
      fully_qualified_name: "codecs._Decoder"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
        kind: TUPLE
        args {
          pretty_printed_name: "codecs._Encoder"
          fully_qualified_name: "codecs._Encoder"
        }
        args {
          pretty_printed_name: "codecs._Decoder"
          fully_qualified_name: "codecs._Decoder"
        }
        args {
          pretty_printed_name: "codecs._StreamReader"
          fully_qualified_name: "codecs._StreamReader"
        }
        args {
          pretty_printed_name: "codecs._StreamWriter"
          fully_qualified_name: "codecs._StreamWriter"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "streamreader"
    fully_qualified_name: "codecs.CodecInfo.streamreader"
    return_annotation {
      pretty_printed_name: "codecs._StreamReader"
      fully_qualified_name: "codecs._StreamReader"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
        kind: TUPLE
        args {
          pretty_printed_name: "codecs._Encoder"
          fully_qualified_name: "codecs._Encoder"
        }
        args {
          pretty_printed_name: "codecs._Decoder"
          fully_qualified_name: "codecs._Decoder"
        }
        args {
          pretty_printed_name: "codecs._StreamReader"
          fully_qualified_name: "codecs._StreamReader"
        }
        args {
          pretty_printed_name: "codecs._StreamWriter"
          fully_qualified_name: "codecs._StreamWriter"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "streamwriter"
    fully_qualified_name: "codecs.CodecInfo.streamwriter"
    return_annotation {
      pretty_printed_name: "codecs._StreamWriter"
      fully_qualified_name: "codecs._StreamWriter"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
        kind: TUPLE
        args {
          pretty_printed_name: "codecs._Encoder"
          fully_qualified_name: "codecs._Encoder"
        }
        args {
          pretty_printed_name: "codecs._Decoder"
          fully_qualified_name: "codecs._Decoder"
        }
        args {
          pretty_printed_name: "codecs._StreamReader"
          fully_qualified_name: "codecs._StreamReader"
        }
        args {
          pretty_printed_name: "codecs._StreamWriter"
          fully_qualified_name: "codecs._StreamWriter"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "incrementalencoder"
    fully_qualified_name: "codecs.CodecInfo.incrementalencoder"
    return_annotation {
      pretty_printed_name: "codecs._IncrementalEncoder"
      fully_qualified_name: "codecs._IncrementalEncoder"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
        kind: TUPLE
        args {
          pretty_printed_name: "codecs._Encoder"
          fully_qualified_name: "codecs._Encoder"
        }
        args {
          pretty_printed_name: "codecs._Decoder"
          fully_qualified_name: "codecs._Decoder"
        }
        args {
          pretty_printed_name: "codecs._StreamReader"
          fully_qualified_name: "codecs._StreamReader"
        }
        args {
          pretty_printed_name: "codecs._StreamWriter"
          fully_qualified_name: "codecs._StreamWriter"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "incrementaldecoder"
    fully_qualified_name: "codecs.CodecInfo.incrementaldecoder"
    return_annotation {
      pretty_printed_name: "codecs._IncrementalDecoder"
      fully_qualified_name: "codecs._IncrementalDecoder"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
        kind: TUPLE
        args {
          pretty_printed_name: "codecs._Encoder"
          fully_qualified_name: "codecs._Encoder"
        }
        args {
          pretty_printed_name: "codecs._Decoder"
          fully_qualified_name: "codecs._Decoder"
        }
        args {
          pretty_printed_name: "codecs._StreamReader"
          fully_qualified_name: "codecs._StreamReader"
        }
        args {
          pretty_printed_name: "codecs._StreamWriter"
          fully_qualified_name: "codecs._StreamWriter"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__new__"
    fully_qualified_name: "codecs.CodecInfo.__new__"
    return_annotation {
      pretty_printed_name: "codecs.CodecInfo.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[codecs.CodecInfo.Self]"
        kind: TYPE
        args {
          pretty_printed_name: "codecs.CodecInfo.Self"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "encode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._Encoder"
        fully_qualified_name: "codecs._Encoder"
      }
    }
    parameters {
      name: "decode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._Decoder"
        fully_qualified_name: "codecs._Decoder"
      }
    }
    parameters {
      name: "streamreader"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[codecs._StreamReader,None]"
        kind: UNION
        args {
          pretty_printed_name: "codecs._StreamReader"
          fully_qualified_name: "codecs._StreamReader"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "streamwriter"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[codecs._StreamWriter,None]"
        kind: UNION
        args {
          pretty_printed_name: "codecs._StreamWriter"
          fully_qualified_name: "codecs._StreamWriter"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "incrementalencoder"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[codecs._IncrementalEncoder,None]"
        kind: UNION
        args {
          pretty_printed_name: "codecs._IncrementalEncoder"
          fully_qualified_name: "codecs._IncrementalEncoder"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "incrementaldecoder"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[codecs._IncrementalDecoder,None]"
        kind: UNION
        args {
          pretty_printed_name: "codecs._IncrementalDecoder"
          fully_qualified_name: "codecs._IncrementalDecoder"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "_is_text_encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  attributes {
    name: "name"
    fully_qualified_name: "codecs.CodecInfo.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "Codec"
  fully_qualified_name: "codecs.Codec"
  super_classes: "builtins.object"
  methods {
    name: "encode"
    fully_qualified_name: "codecs.Codec.encode"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.Codec"
        fully_qualified_name: "codecs.Codec"
      }
    }
    parameters {
      name: "input"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "decode"
    fully_qualified_name: "codecs.Codec.decode"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.Codec"
        fully_qualified_name: "codecs.Codec"
      }
    }
    parameters {
      name: "input"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
}
classes {
  name: "IncrementalEncoder"
  fully_qualified_name: "codecs.IncrementalEncoder"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "codecs.IncrementalEncoder.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.IncrementalEncoder"
        fully_qualified_name: "codecs.IncrementalEncoder"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "encode"
    fully_qualified_name: "codecs.IncrementalEncoder.encode"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.IncrementalEncoder"
        fully_qualified_name: "codecs.IncrementalEncoder"
      }
    }
    parameters {
      name: "input"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "final"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "reset"
    fully_qualified_name: "codecs.IncrementalEncoder.reset"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.IncrementalEncoder"
        fully_qualified_name: "codecs.IncrementalEncoder"
      }
    }
  }
  methods {
    name: "getstate"
    fully_qualified_name: "codecs.IncrementalEncoder.getstate"
    return_annotation {
      pretty_printed_name: "Union[builtins.int,builtins.str]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.IncrementalEncoder"
        fully_qualified_name: "codecs.IncrementalEncoder"
      }
    }
  }
  methods {
    name: "setstate"
    fully_qualified_name: "codecs.IncrementalEncoder.setstate"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.IncrementalEncoder"
        fully_qualified_name: "codecs.IncrementalEncoder"
      }
    }
    parameters {
      name: "state"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
  }
  attributes {
    name: "errors"
    fully_qualified_name: "codecs.IncrementalEncoder.errors"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "IncrementalDecoder"
  fully_qualified_name: "codecs.IncrementalDecoder"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "codecs.IncrementalDecoder.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.IncrementalDecoder"
        fully_qualified_name: "codecs.IncrementalDecoder"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "decode"
    fully_qualified_name: "codecs.IncrementalDecoder.decode"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.IncrementalDecoder"
        fully_qualified_name: "codecs.IncrementalDecoder"
      }
    }
    parameters {
      name: "input"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytearray"
                fully_qualified_name: "builtins.bytearray"
              }
              args {
                pretty_printed_name: "builtins.memoryview"
                fully_qualified_name: "builtins.memoryview"
              }
              args {
                pretty_printed_name: "array.array[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "array.array"
              }
              args {
                pretty_printed_name: "mmap.mmap"
                fully_qualified_name: "mmap.mmap"
              }
              args {
                pretty_printed_name: "ctypes._CData"
                fully_qualified_name: "ctypes._CData"
              }
              args {
                pretty_printed_name: "pickle.PickleBuffer"
                fully_qualified_name: "pickle.PickleBuffer"
              }
            }
            fully_qualified_name: "_typeshed.WriteableBuffer"
          }
        }
        fully_qualified_name: "_typeshed.ReadableBuffer"
      }
    }
    parameters {
      name: "final"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "reset"
    fully_qualified_name: "codecs.IncrementalDecoder.reset"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.IncrementalDecoder"
        fully_qualified_name: "codecs.IncrementalDecoder"
      }
    }
  }
  methods {
    name: "getstate"
    fully_qualified_name: "codecs.IncrementalDecoder.getstate"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.IncrementalDecoder"
        fully_qualified_name: "codecs.IncrementalDecoder"
      }
    }
  }
  methods {
    name: "setstate"
    fully_qualified_name: "codecs.IncrementalDecoder.setstate"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.IncrementalDecoder"
        fully_qualified_name: "codecs.IncrementalDecoder"
      }
    }
    parameters {
      name: "state"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
  }
  attributes {
    name: "errors"
    fully_qualified_name: "codecs.IncrementalDecoder.errors"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "BufferedIncrementalEncoder"
  fully_qualified_name: "codecs.BufferedIncrementalEncoder"
  super_classes: "codecs.IncrementalEncoder"
  methods {
    name: "__init__"
    fully_qualified_name: "codecs.BufferedIncrementalEncoder.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.BufferedIncrementalEncoder"
        fully_qualified_name: "codecs.BufferedIncrementalEncoder"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "_buffer_encode"
    fully_qualified_name: "codecs.BufferedIncrementalEncoder._buffer_encode"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.BufferedIncrementalEncoder"
        fully_qualified_name: "codecs.BufferedIncrementalEncoder"
      }
    }
    parameters {
      name: "input"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "final"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "encode"
    fully_qualified_name: "codecs.BufferedIncrementalEncoder.encode"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.BufferedIncrementalEncoder"
        fully_qualified_name: "codecs.BufferedIncrementalEncoder"
      }
    }
    parameters {
      name: "input"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "final"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  attributes {
    name: "buffer"
    fully_qualified_name: "codecs.BufferedIncrementalEncoder.buffer"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "BufferedIncrementalDecoder"
  fully_qualified_name: "codecs.BufferedIncrementalDecoder"
  super_classes: "codecs.IncrementalDecoder"
  methods {
    name: "__init__"
    fully_qualified_name: "codecs.BufferedIncrementalDecoder.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.BufferedIncrementalDecoder"
        fully_qualified_name: "codecs.BufferedIncrementalDecoder"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "_buffer_decode"
    fully_qualified_name: "codecs.BufferedIncrementalDecoder._buffer_decode"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.BufferedIncrementalDecoder"
        fully_qualified_name: "codecs.BufferedIncrementalDecoder"
      }
    }
    parameters {
      name: "input"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytearray"
                fully_qualified_name: "builtins.bytearray"
              }
              args {
                pretty_printed_name: "builtins.memoryview"
                fully_qualified_name: "builtins.memoryview"
              }
              args {
                pretty_printed_name: "array.array[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "array.array"
              }
              args {
                pretty_printed_name: "mmap.mmap"
                fully_qualified_name: "mmap.mmap"
              }
              args {
                pretty_printed_name: "ctypes._CData"
                fully_qualified_name: "ctypes._CData"
              }
              args {
                pretty_printed_name: "pickle.PickleBuffer"
                fully_qualified_name: "pickle.PickleBuffer"
              }
            }
            fully_qualified_name: "_typeshed.WriteableBuffer"
          }
        }
        fully_qualified_name: "_typeshed.ReadableBuffer"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "final"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "decode"
    fully_qualified_name: "codecs.BufferedIncrementalDecoder.decode"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.BufferedIncrementalDecoder"
        fully_qualified_name: "codecs.BufferedIncrementalDecoder"
      }
    }
    parameters {
      name: "input"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytearray"
                fully_qualified_name: "builtins.bytearray"
              }
              args {
                pretty_printed_name: "builtins.memoryview"
                fully_qualified_name: "builtins.memoryview"
              }
              args {
                pretty_printed_name: "array.array[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "array.array"
              }
              args {
                pretty_printed_name: "mmap.mmap"
                fully_qualified_name: "mmap.mmap"
              }
              args {
                pretty_printed_name: "ctypes._CData"
                fully_qualified_name: "ctypes._CData"
              }
              args {
                pretty_printed_name: "pickle.PickleBuffer"
                fully_qualified_name: "pickle.PickleBuffer"
              }
            }
            fully_qualified_name: "_typeshed.WriteableBuffer"
          }
        }
        fully_qualified_name: "_typeshed.ReadableBuffer"
      }
    }
    parameters {
      name: "final"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  attributes {
    name: "buffer"
    fully_qualified_name: "codecs.BufferedIncrementalDecoder.buffer"
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
classes {
  name: "StreamWriter"
  fully_qualified_name: "codecs.StreamWriter"
  super_classes: "codecs.Codec"
  methods {
    name: "__init__"
    fully_qualified_name: "codecs.StreamWriter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamWriter"
        fully_qualified_name: "codecs.StreamWriter"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._WritableStream"
        fully_qualified_name: "codecs._WritableStream"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "write"
    fully_qualified_name: "codecs.StreamWriter.write"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamWriter"
        fully_qualified_name: "codecs.StreamWriter"
      }
    }
    parameters {
      name: "object"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "writelines"
    fully_qualified_name: "codecs.StreamWriter.writelines"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamWriter"
        fully_qualified_name: "codecs.StreamWriter"
      }
    }
    parameters {
      name: "list"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "reset"
    fully_qualified_name: "codecs.StreamWriter.reset"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamWriter"
        fully_qualified_name: "codecs.StreamWriter"
      }
    }
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "codecs.StreamWriter.__enter__"
    return_annotation {
      pretty_printed_name: "codecs.StreamWriter.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamWriter.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "codecs.StreamWriter.__exit__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamWriter"
        fully_qualified_name: "codecs.StreamWriter"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "__getattr__"
    fully_qualified_name: "codecs.StreamWriter.__getattr__"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamWriter"
        fully_qualified_name: "codecs.StreamWriter"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
  }
  attributes {
    name: "stream"
    fully_qualified_name: "codecs.StreamWriter.stream"
    type_annotation {
      pretty_printed_name: "codecs._WritableStream"
      fully_qualified_name: "codecs._WritableStream"
    }
  }
  attributes {
    name: "errors"
    fully_qualified_name: "codecs.StreamWriter.errors"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "StreamReader"
  fully_qualified_name: "codecs.StreamReader"
  super_classes: "codecs.Codec"
  methods {
    name: "__init__"
    fully_qualified_name: "codecs.StreamReader.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReader"
        fully_qualified_name: "codecs.StreamReader"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._ReadableStream"
        fully_qualified_name: "codecs._ReadableStream"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "read"
    fully_qualified_name: "codecs.StreamReader.read"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReader"
        fully_qualified_name: "codecs.StreamReader"
      }
    }
    parameters {
      name: "size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "chars"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "firstline"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "readline"
    fully_qualified_name: "codecs.StreamReader.readline"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReader"
        fully_qualified_name: "codecs.StreamReader"
      }
    }
    parameters {
      name: "size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "keepends"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "readlines"
    fully_qualified_name: "codecs.StreamReader.readlines"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReader"
        fully_qualified_name: "codecs.StreamReader"
      }
    }
    parameters {
      name: "sizehint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "keepends"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "reset"
    fully_qualified_name: "codecs.StreamReader.reset"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReader"
        fully_qualified_name: "codecs.StreamReader"
      }
    }
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "codecs.StreamReader.__enter__"
    return_annotation {
      pretty_printed_name: "codecs.StreamReader.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamReader.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "codecs.StreamReader.__exit__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamReader"
        fully_qualified_name: "codecs.StreamReader"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "codecs.StreamReader.__iter__"
    return_annotation {
      pretty_printed_name: "codecs.StreamReader.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamReader.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__next__"
    fully_qualified_name: "codecs.StreamReader.__next__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReader"
        fully_qualified_name: "codecs.StreamReader"
      }
    }
  }
  methods {
    name: "__getattr__"
    fully_qualified_name: "codecs.StreamReader.__getattr__"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamReader"
        fully_qualified_name: "codecs.StreamReader"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
  }
  attributes {
    name: "stream"
    fully_qualified_name: "codecs.StreamReader.stream"
    type_annotation {
      pretty_printed_name: "codecs._ReadableStream"
      fully_qualified_name: "codecs._ReadableStream"
    }
  }
  attributes {
    name: "errors"
    fully_qualified_name: "codecs.StreamReader.errors"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "StreamReaderWriter"
  fully_qualified_name: "codecs.StreamReaderWriter"
  super_classes: "typing.TextIO"
  methods {
    name: "__init__"
    fully_qualified_name: "codecs.StreamReaderWriter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._Stream"
        fully_qualified_name: "codecs._Stream"
      }
    }
    parameters {
      name: "Reader"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._StreamReader"
        fully_qualified_name: "codecs._StreamReader"
      }
    }
    parameters {
      name: "Writer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._StreamWriter"
        fully_qualified_name: "codecs._StreamWriter"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "read"
    fully_qualified_name: "codecs.StreamReaderWriter.read"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
    parameters {
      name: "size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "readline"
    fully_qualified_name: "codecs.StreamReaderWriter.readline"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
    parameters {
      name: "size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "readlines"
    fully_qualified_name: "codecs.StreamReaderWriter.readlines"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
    parameters {
      name: "sizehint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "__next__"
    fully_qualified_name: "codecs.StreamReaderWriter.__next__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "codecs.StreamReaderWriter.__iter__"
    return_annotation {
      pretty_printed_name: "codecs.StreamReaderWriter.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "write"
    fully_qualified_name: "codecs.StreamReaderWriter.write"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "writelines"
    fully_qualified_name: "codecs.StreamReaderWriter.writelines"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
    parameters {
      name: "list"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "reset"
    fully_qualified_name: "codecs.StreamReaderWriter.reset"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
  }
  methods {
    name: "seek"
    fully_qualified_name: "codecs.StreamReaderWriter.seek"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
    parameters {
      name: "offset"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "whence"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "codecs.StreamReaderWriter.__enter__"
    return_annotation {
      pretty_printed_name: "codecs.StreamReaderWriter.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "codecs.StreamReaderWriter.__exit__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "__getattr__"
    fully_qualified_name: "codecs.StreamReaderWriter.__getattr__"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "close"
    fully_qualified_name: "codecs.StreamReaderWriter.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
  }
  methods {
    name: "fileno"
    fully_qualified_name: "codecs.StreamReaderWriter.fileno"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
  }
  methods {
    name: "flush"
    fully_qualified_name: "codecs.StreamReaderWriter.flush"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
  }
  methods {
    name: "isatty"
    fully_qualified_name: "codecs.StreamReaderWriter.isatty"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
  }
  methods {
    name: "readable"
    fully_qualified_name: "codecs.StreamReaderWriter.readable"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
  }
  methods {
    name: "truncate"
    fully_qualified_name: "codecs.StreamReaderWriter.truncate"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
    parameters {
      name: "size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "seekable"
    fully_qualified_name: "codecs.StreamReaderWriter.seekable"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
  }
  methods {
    name: "tell"
    fully_qualified_name: "codecs.StreamReaderWriter.tell"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
  }
  methods {
    name: "writable"
    fully_qualified_name: "codecs.StreamReaderWriter.writable"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamReaderWriter"
        fully_qualified_name: "codecs.StreamReaderWriter"
      }
    }
  }
  attributes {
    name: "stream"
    fully_qualified_name: "codecs.StreamReaderWriter.stream"
    type_annotation {
      pretty_printed_name: "codecs._Stream"
      fully_qualified_name: "codecs._Stream"
    }
  }
}
classes {
  name: "StreamRecoder"
  fully_qualified_name: "codecs.StreamRecoder"
  super_classes: "typing.BinaryIO"
  methods {
    name: "__init__"
    fully_qualified_name: "codecs.StreamRecoder.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._Stream"
        fully_qualified_name: "codecs._Stream"
      }
    }
    parameters {
      name: "encode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._Encoder"
        fully_qualified_name: "codecs._Encoder"
      }
    }
    parameters {
      name: "decode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._Decoder"
        fully_qualified_name: "codecs._Decoder"
      }
    }
    parameters {
      name: "Reader"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._StreamReader"
        fully_qualified_name: "codecs._StreamReader"
      }
    }
    parameters {
      name: "Writer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs._StreamWriter"
        fully_qualified_name: "codecs._StreamWriter"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "read"
    fully_qualified_name: "codecs.StreamRecoder.read"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
    parameters {
      name: "size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "readline"
    fully_qualified_name: "codecs.StreamRecoder.readline"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
    parameters {
      name: "size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "readlines"
    fully_qualified_name: "codecs.StreamRecoder.readlines"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.bytes]"
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
    parameters {
      name: "sizehint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "__next__"
    fully_qualified_name: "codecs.StreamRecoder.__next__"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "codecs.StreamRecoder.__iter__"
    return_annotation {
      pretty_printed_name: "codecs.StreamRecoder.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "write"
    fully_qualified_name: "codecs.StreamRecoder.write"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
  }
  methods {
    name: "writelines"
    fully_qualified_name: "codecs.StreamRecoder.writelines"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
    parameters {
      name: "list"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[builtins.bytes]"
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "reset"
    fully_qualified_name: "codecs.StreamRecoder.reset"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
  }
  methods {
    name: "__getattr__"
    fully_qualified_name: "codecs.StreamRecoder.__getattr__"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "codecs.StreamRecoder.__enter__"
    return_annotation {
      pretty_printed_name: "codecs.StreamRecoder.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "codecs.StreamRecoder.__exit__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "seek"
    fully_qualified_name: "codecs.StreamRecoder.seek"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
    parameters {
      name: "offset"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "whence"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "close"
    fully_qualified_name: "codecs.StreamRecoder.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
  }
  methods {
    name: "fileno"
    fully_qualified_name: "codecs.StreamRecoder.fileno"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
  }
  methods {
    name: "flush"
    fully_qualified_name: "codecs.StreamRecoder.flush"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
  }
  methods {
    name: "isatty"
    fully_qualified_name: "codecs.StreamRecoder.isatty"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
  }
  methods {
    name: "readable"
    fully_qualified_name: "codecs.StreamRecoder.readable"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
  }
  methods {
    name: "truncate"
    fully_qualified_name: "codecs.StreamRecoder.truncate"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
    parameters {
      name: "size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "seekable"
    fully_qualified_name: "codecs.StreamRecoder.seekable"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
  }
  methods {
    name: "tell"
    fully_qualified_name: "codecs.StreamRecoder.tell"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
  }
  methods {
    name: "writable"
    fully_qualified_name: "codecs.StreamRecoder.writable"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "codecs.StreamRecoder"
        fully_qualified_name: "codecs.StreamRecoder"
      }
    }
  }
}
functions {
  name: "register"
  fully_qualified_name: "_codecs.register"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[CallableType[builtins.function]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      fully_qualified_name: "_codecs._SearchFunction"
    }
  }
}
functions {
  name: "register_error"
  fully_qualified_name: "_codecs.register_error"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[CallableType[builtins.function]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      fully_qualified_name: "_codecs._Handler"
    }
  }
}
functions {
  name: "lookup_error"
  fully_qualified_name: "_codecs.lookup_error"
  return_annotation {
    pretty_printed_name: "TypeAlias[CallableType[builtins.function]]"
    kind: TYPE_ALIAS
    args {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    fully_qualified_name: "_codecs._Handler"
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "lookup"
  fully_qualified_name: "_codecs.lookup"
  return_annotation {
    pretty_printed_name: "TypeAlias[Tuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]]"
    kind: TYPE_ALIAS
    args {
      pretty_printed_name: "Tuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
      kind: TUPLE
      args {
        pretty_printed_name: "codecs._Encoder"
        fully_qualified_name: "codecs._Encoder"
      }
      args {
        pretty_printed_name: "codecs._Decoder"
        fully_qualified_name: "codecs._Decoder"
      }
      args {
        pretty_printed_name: "codecs._StreamReader"
        fully_qualified_name: "codecs._StreamReader"
      }
      args {
        pretty_printed_name: "codecs._StreamWriter"
        fully_qualified_name: "codecs._StreamWriter"
      }
    }
    fully_qualified_name: "codecs.CodecInfo"
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "charmap_build"
  fully_qualified_name: "_codecs.charmap_build"
  return_annotation {
    pretty_printed_name: "TypeAlias[Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]]"
    kind: TYPE_ALIAS
    args {
      pretty_printed_name: "Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.int,builtins.int]"
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "_codecs._EncodingMap"
        fully_qualified_name: "_codecs._EncodingMap"
      }
    }
    fully_qualified_name: "_codecs._CharMap"
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "ascii_decode"
  fully_qualified_name: "_codecs.ascii_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "ascii_encode"
  fully_qualified_name: "_codecs.ascii_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "charmap_decode"
  fully_qualified_name: "_codecs.charmap_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[TypeAlias[Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]],None]"
      kind: UNION
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.int,builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "_codecs._EncodingMap"
            fully_qualified_name: "_codecs._EncodingMap"
          }
        }
        fully_qualified_name: "_codecs._CharMap"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "charmap_encode"
  fully_qualified_name: "_codecs.charmap_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[TypeAlias[Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]],None]"
      kind: UNION
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.dict[builtins.int,builtins.int]"
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            fully_qualified_name: "builtins.dict"
          }
          args {
            pretty_printed_name: "_codecs._EncodingMap"
            fully_qualified_name: "_codecs._EncodingMap"
          }
        }
        fully_qualified_name: "_codecs._CharMap"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "escape_decode"
  fully_qualified_name: "_codecs.escape_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytearray"
                fully_qualified_name: "builtins.bytearray"
              }
              args {
                pretty_printed_name: "builtins.memoryview"
                fully_qualified_name: "builtins.memoryview"
              }
              args {
                pretty_printed_name: "array.array[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "array.array"
              }
              args {
                pretty_printed_name: "mmap.mmap"
                fully_qualified_name: "mmap.mmap"
              }
              args {
                pretty_printed_name: "ctypes._CData"
                fully_qualified_name: "ctypes._CData"
              }
              args {
                pretty_printed_name: "pickle.PickleBuffer"
                fully_qualified_name: "pickle.PickleBuffer"
              }
            }
            fully_qualified_name: "_typeshed.WriteableBuffer"
          }
        }
        fully_qualified_name: "_typeshed.ReadableBuffer"
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "escape_encode"
  fully_qualified_name: "_codecs.escape_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "latin_1_decode"
  fully_qualified_name: "_codecs.latin_1_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "latin_1_encode"
  fully_qualified_name: "_codecs.latin_1_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "raw_unicode_escape_decode"
  fully_qualified_name: "_codecs.raw_unicode_escape_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytearray"
                fully_qualified_name: "builtins.bytearray"
              }
              args {
                pretty_printed_name: "builtins.memoryview"
                fully_qualified_name: "builtins.memoryview"
              }
              args {
                pretty_printed_name: "array.array[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "array.array"
              }
              args {
                pretty_printed_name: "mmap.mmap"
                fully_qualified_name: "mmap.mmap"
              }
              args {
                pretty_printed_name: "ctypes._CData"
                fully_qualified_name: "ctypes._CData"
              }
              args {
                pretty_printed_name: "pickle.PickleBuffer"
                fully_qualified_name: "pickle.PickleBuffer"
              }
            }
            fully_qualified_name: "_typeshed.WriteableBuffer"
          }
        }
        fully_qualified_name: "_typeshed.ReadableBuffer"
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "raw_unicode_escape_encode"
  fully_qualified_name: "_codecs.raw_unicode_escape_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "readbuffer_encode"
  fully_qualified_name: "_codecs.readbuffer_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytearray"
                fully_qualified_name: "builtins.bytearray"
              }
              args {
                pretty_printed_name: "builtins.memoryview"
                fully_qualified_name: "builtins.memoryview"
              }
              args {
                pretty_printed_name: "array.array[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "array.array"
              }
              args {
                pretty_printed_name: "mmap.mmap"
                fully_qualified_name: "mmap.mmap"
              }
              args {
                pretty_printed_name: "ctypes._CData"
                fully_qualified_name: "ctypes._CData"
              }
              args {
                pretty_printed_name: "pickle.PickleBuffer"
                fully_qualified_name: "pickle.PickleBuffer"
              }
            }
            fully_qualified_name: "_typeshed.WriteableBuffer"
          }
        }
        fully_qualified_name: "_typeshed.ReadableBuffer"
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "unicode_escape_decode"
  fully_qualified_name: "_codecs.unicode_escape_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytearray"
                fully_qualified_name: "builtins.bytearray"
              }
              args {
                pretty_printed_name: "builtins.memoryview"
                fully_qualified_name: "builtins.memoryview"
              }
              args {
                pretty_printed_name: "array.array[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "array.array"
              }
              args {
                pretty_printed_name: "mmap.mmap"
                fully_qualified_name: "mmap.mmap"
              }
              args {
                pretty_printed_name: "ctypes._CData"
                fully_qualified_name: "ctypes._CData"
              }
              args {
                pretty_printed_name: "pickle.PickleBuffer"
                fully_qualified_name: "pickle.PickleBuffer"
              }
            }
            fully_qualified_name: "_typeshed.WriteableBuffer"
          }
        }
        fully_qualified_name: "_typeshed.ReadableBuffer"
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "unicode_escape_encode"
  fully_qualified_name: "_codecs.unicode_escape_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "utf_16_be_decode"
  fully_qualified_name: "_codecs.utf_16_be_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "utf_16_be_encode"
  fully_qualified_name: "_codecs.utf_16_be_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "utf_16_decode"
  fully_qualified_name: "_codecs.utf_16_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "utf_16_encode"
  fully_qualified_name: "_codecs.utf_16_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
functions {
  name: "utf_16_ex_decode"
  fully_qualified_name: "_codecs.utf_16_ex_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "utf_16_le_decode"
  fully_qualified_name: "_codecs.utf_16_le_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "utf_16_le_encode"
  fully_qualified_name: "_codecs.utf_16_le_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "utf_32_be_decode"
  fully_qualified_name: "_codecs.utf_32_be_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "utf_32_be_encode"
  fully_qualified_name: "_codecs.utf_32_be_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "utf_32_decode"
  fully_qualified_name: "_codecs.utf_32_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "utf_32_encode"
  fully_qualified_name: "_codecs.utf_32_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
functions {
  name: "utf_32_ex_decode"
  fully_qualified_name: "_codecs.utf_32_ex_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "utf_32_le_decode"
  fully_qualified_name: "_codecs.utf_32_le_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "utf_32_le_encode"
  fully_qualified_name: "_codecs.utf_32_le_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "utf_7_decode"
  fully_qualified_name: "_codecs.utf_7_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "utf_7_encode"
  fully_qualified_name: "_codecs.utf_7_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "utf_8_decode"
  fully_qualified_name: "_codecs.utf_8_decode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytearray"
              fully_qualified_name: "builtins.bytearray"
            }
            args {
              pretty_printed_name: "builtins.memoryview"
              fully_qualified_name: "builtins.memoryview"
            }
            args {
              pretty_printed_name: "array.array[Any]"
              args {
                pretty_printed_name: "Any"
                kind: ANY
              }
              fully_qualified_name: "array.array"
            }
            args {
              pretty_printed_name: "mmap.mmap"
              fully_qualified_name: "mmap.mmap"
            }
            args {
              pretty_printed_name: "ctypes._CData"
              fully_qualified_name: "ctypes._CData"
            }
            args {
              pretty_printed_name: "pickle.PickleBuffer"
              fully_qualified_name: "pickle.PickleBuffer"
            }
          }
          fully_qualified_name: "_typeshed.WriteableBuffer"
        }
      }
      fully_qualified_name: "_typeshed.ReadableBuffer"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "utf_8_encode"
  fully_qualified_name: "_codecs.utf_8_encode"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "__"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "getencoder"
  fully_qualified_name: "codecs.getencoder"
  return_annotation {
    pretty_printed_name: "codecs._Encoder"
    fully_qualified_name: "codecs._Encoder"
  }
  parameters {
    name: "encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "getdecoder"
  fully_qualified_name: "codecs.getdecoder"
  return_annotation {
    pretty_printed_name: "codecs._Decoder"
    fully_qualified_name: "codecs._Decoder"
  }
  parameters {
    name: "encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "getincrementalencoder"
  fully_qualified_name: "codecs.getincrementalencoder"
  return_annotation {
    pretty_printed_name: "codecs._IncrementalEncoder"
    fully_qualified_name: "codecs._IncrementalEncoder"
  }
  parameters {
    name: "encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "getincrementaldecoder"
  fully_qualified_name: "codecs.getincrementaldecoder"
  return_annotation {
    pretty_printed_name: "codecs._IncrementalDecoder"
    fully_qualified_name: "codecs._IncrementalDecoder"
  }
  parameters {
    name: "encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "getreader"
  fully_qualified_name: "codecs.getreader"
  return_annotation {
    pretty_printed_name: "codecs._StreamReader"
    fully_qualified_name: "codecs._StreamReader"
  }
  parameters {
    name: "encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "getwriter"
  fully_qualified_name: "codecs.getwriter"
  return_annotation {
    pretty_printed_name: "codecs._StreamWriter"
    fully_qualified_name: "codecs._StreamWriter"
  }
  parameters {
    name: "encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "open"
  fully_qualified_name: "codecs.open"
  return_annotation {
    pretty_printed_name: "codecs.StreamReaderWriter"
    fully_qualified_name: "codecs.StreamReaderWriter"
  }
  parameters {
    name: "filename"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "mode"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "errors"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "buffering"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
functions {
  name: "EncodedFile"
  fully_qualified_name: "codecs.EncodedFile"
  return_annotation {
    pretty_printed_name: "codecs.StreamRecoder"
    fully_qualified_name: "codecs.StreamRecoder"
  }
  parameters {
    name: "file"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "codecs._Stream"
      fully_qualified_name: "codecs._Stream"
    }
  }
  parameters {
    name: "data_encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "file_encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "errors"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "iterencode"
  fully_qualified_name: "codecs.iterencode"
  return_annotation {
    pretty_printed_name: "typing.Generator[builtins.bytes,None,None]"
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
    fully_qualified_name: "typing.Generator"
  }
  parameters {
    name: "iterator"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "errors"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "iterdecode"
  fully_qualified_name: "codecs.iterdecode"
  return_annotation {
    pretty_printed_name: "typing.Generator[builtins.str,None,None]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
    fully_qualified_name: "typing.Generator"
  }
  parameters {
    name: "iterator"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[builtins.bytes]"
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "encoding"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "errors"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "strict_errors"
  fully_qualified_name: "codecs.strict_errors"
  return_annotation {
    pretty_printed_name: "Tuple[Union[builtins.str,builtins.bytes],builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "Union[builtins.str,builtins.bytes]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "exception"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.UnicodeError"
      fully_qualified_name: "builtins.UnicodeError"
    }
  }
}
functions {
  name: "replace_errors"
  fully_qualified_name: "codecs.replace_errors"
  return_annotation {
    pretty_printed_name: "Tuple[Union[builtins.str,builtins.bytes],builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "Union[builtins.str,builtins.bytes]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "exception"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.UnicodeError"
      fully_qualified_name: "builtins.UnicodeError"
    }
  }
}
functions {
  name: "ignore_errors"
  fully_qualified_name: "codecs.ignore_errors"
  return_annotation {
    pretty_printed_name: "Tuple[Union[builtins.str,builtins.bytes],builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "Union[builtins.str,builtins.bytes]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "exception"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.UnicodeError"
      fully_qualified_name: "builtins.UnicodeError"
    }
  }
}
functions {
  name: "xmlcharrefreplace_errors"
  fully_qualified_name: "codecs.xmlcharrefreplace_errors"
  return_annotation {
    pretty_printed_name: "Tuple[Union[builtins.str,builtins.bytes],builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "Union[builtins.str,builtins.bytes]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "exception"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.UnicodeError"
      fully_qualified_name: "builtins.UnicodeError"
    }
  }
}
functions {
  name: "backslashreplace_errors"
  fully_qualified_name: "codecs.backslashreplace_errors"
  return_annotation {
    pretty_printed_name: "Tuple[Union[builtins.str,builtins.bytes],builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "Union[builtins.str,builtins.bytes]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "exception"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.UnicodeError"
      fully_qualified_name: "builtins.UnicodeError"
    }
  }
}
functions {
  name: "namereplace_errors"
  fully_qualified_name: "codecs.namereplace_errors"
  return_annotation {
    pretty_printed_name: "Tuple[Union[builtins.str,builtins.bytes],builtins.int]"
    kind: TUPLE
    args {
      pretty_printed_name: "Union[builtins.str,builtins.bytes]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "exception"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.UnicodeError"
      fully_qualified_name: "builtins.UnicodeError"
    }
  }
}
overloaded_functions {
  name: "encode"
  fullname: "_codecs.encode"
  definitions {
    name: "encode"
    fully_qualified_name: "_codecs.encode"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytearray"
                fully_qualified_name: "builtins.bytearray"
              }
              args {
                pretty_printed_name: "builtins.memoryview"
                fully_qualified_name: "builtins.memoryview"
              }
              args {
                pretty_printed_name: "array.array[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "array.array"
              }
              args {
                pretty_printed_name: "mmap.mmap"
                fully_qualified_name: "mmap.mmap"
              }
              args {
                pretty_printed_name: "ctypes._CData"
                fully_qualified_name: "ctypes._CData"
              }
              args {
                pretty_printed_name: "pickle.PickleBuffer"
                fully_qualified_name: "pickle.PickleBuffer"
              }
            }
            fully_qualified_name: "_typeshed.WriteableBuffer"
          }
        }
        fully_qualified_name: "_typeshed.ReadableBuffer"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        fully_qualified_name: "_codecs._BytesToBytesEncoding"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "encode"
    fully_qualified_name: "_codecs.encode"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        fully_qualified_name: "_codecs._StrToStrEncoding"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "encode"
    fully_qualified_name: "_codecs.encode"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "decode"
  fullname: "_codecs.decode"
  definitions {
    name: "decode"
    fully_qualified_name: "_codecs.decode"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytearray"
                fully_qualified_name: "builtins.bytearray"
              }
              args {
                pretty_printed_name: "builtins.memoryview"
                fully_qualified_name: "builtins.memoryview"
              }
              args {
                pretty_printed_name: "array.array[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "array.array"
              }
              args {
                pretty_printed_name: "mmap.mmap"
                fully_qualified_name: "mmap.mmap"
              }
              args {
                pretty_printed_name: "ctypes._CData"
                fully_qualified_name: "ctypes._CData"
              }
              args {
                pretty_printed_name: "pickle.PickleBuffer"
                fully_qualified_name: "pickle.PickleBuffer"
              }
            }
            fully_qualified_name: "_typeshed.WriteableBuffer"
          }
        }
        fully_qualified_name: "_typeshed.ReadableBuffer"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        fully_qualified_name: "_codecs._BytesToBytesEncoding"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "decode"
    fully_qualified_name: "_codecs.decode"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.str]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
          }
        }
        fully_qualified_name: "_codecs._StrToStrEncoding"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "decode"
    fully_qualified_name: "_codecs.decode"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "decode"
    fully_qualified_name: "_codecs.decode"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
        args {
          pretty_printed_name: "Literal[builtins.str]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "decode"
    fully_qualified_name: "_codecs.decode"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytearray"
                fully_qualified_name: "builtins.bytearray"
              }
              args {
                pretty_printed_name: "builtins.memoryview"
                fully_qualified_name: "builtins.memoryview"
              }
              args {
                pretty_printed_name: "array.array[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "array.array"
              }
              args {
                pretty_printed_name: "mmap.mmap"
                fully_qualified_name: "mmap.mmap"
              }
              args {
                pretty_printed_name: "ctypes._CData"
                fully_qualified_name: "ctypes._CData"
              }
              args {
                pretty_printed_name: "pickle.PickleBuffer"
                fully_qualified_name: "pickle.PickleBuffer"
              }
            }
            fully_qualified_name: "_typeshed.WriteableBuffer"
          }
        }
        fully_qualified_name: "_typeshed.ReadableBuffer"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "codecs.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "__all__"
  fully_qualified_name: "codecs.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
}
vars {
  name: "BOM32_BE"
  fully_qualified_name: "codecs.BOM32_BE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.bytes]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
vars {
  name: "BOM32_LE"
  fully_qualified_name: "codecs.BOM32_LE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.bytes]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
vars {
  name: "BOM64_BE"
  fully_qualified_name: "codecs.BOM64_BE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.bytes]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
vars {
  name: "BOM64_LE"
  fully_qualified_name: "codecs.BOM64_LE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.bytes]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
vars {
  name: "BOM"
  fully_qualified_name: "codecs.BOM"
  type_annotation {
    pretty_printed_name: "Union[Literal[builtins.bytes],Literal[builtins.bytes]]"
    kind: UNION
    args {
      pretty_printed_name: "Literal[builtins.bytes]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.bytes]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
  }
}
vars {
  name: "BOM_BE"
  fully_qualified_name: "codecs.BOM_BE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.bytes]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
vars {
  name: "BOM_LE"
  fully_qualified_name: "codecs.BOM_LE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.bytes]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
vars {
  name: "BOM_UTF8"
  fully_qualified_name: "codecs.BOM_UTF8"
  type_annotation {
    pretty_printed_name: "Literal[builtins.bytes]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
vars {
  name: "BOM_UTF16"
  fully_qualified_name: "codecs.BOM_UTF16"
  type_annotation {
    pretty_printed_name: "Union[Literal[builtins.bytes],Literal[builtins.bytes]]"
    kind: UNION
    args {
      pretty_printed_name: "Literal[builtins.bytes]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.bytes]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
  }
}
vars {
  name: "BOM_UTF16_BE"
  fully_qualified_name: "codecs.BOM_UTF16_BE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.bytes]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
vars {
  name: "BOM_UTF16_LE"
  fully_qualified_name: "codecs.BOM_UTF16_LE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.bytes]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
vars {
  name: "BOM_UTF32"
  fully_qualified_name: "codecs.BOM_UTF32"
  type_annotation {
    pretty_printed_name: "Union[Literal[builtins.bytes],Literal[builtins.bytes]]"
    kind: UNION
    args {
      pretty_printed_name: "Literal[builtins.bytes]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    args {
      pretty_printed_name: "Literal[builtins.bytes]"
      kind: LITERAL
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
  }
}
vars {
  name: "BOM_UTF32_BE"
  fully_qualified_name: "codecs.BOM_UTF32_BE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.bytes]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
vars {
  name: "BOM_UTF32_LE"
  fully_qualified_name: "codecs.BOM_UTF32_LE"
  type_annotation {
    pretty_printed_name: "Literal[builtins.bytes]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
