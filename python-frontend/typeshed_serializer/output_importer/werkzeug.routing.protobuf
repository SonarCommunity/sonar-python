fully_qualified_name: "werkzeug.routing"
classes {
  name: "AnyConverter"
  fully_qualified_name: "werkzeug.routing.converters.AnyConverter"
  super_classes: "werkzeug.routing.converters.BaseConverter"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.converters.AnyConverter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.converters.AnyConverter"
        fully_qualified_name: "werkzeug.routing.converters.AnyConverter"
      }
    }
    parameters {
      name: "map"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    parameters {
      name: "items"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "to_url"
    fully_qualified_name: "werkzeug.routing.converters.AnyConverter.to_url"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.converters.AnyConverter"
        fully_qualified_name: "werkzeug.routing.converters.AnyConverter"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  attributes {
    name: "items"
    fully_qualified_name: "werkzeug.routing.converters.AnyConverter.items"
    type_annotation {
      pretty_printed_name: "builtins.set[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.set"
    }
  }
}
classes {
  name: "BaseConverter"
  fully_qualified_name: "werkzeug.routing.converters.BaseConverter"
  super_classes: "builtins.object"
  methods {
    name: "__init_subclass__"
    fully_qualified_name: "werkzeug.routing.converters.BaseConverter.__init_subclass__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[werkzeug.routing.converters.BaseConverter]"
        kind: TYPE
        args {
          pretty_printed_name: "werkzeug.routing.converters.BaseConverter"
          fully_qualified_name: "werkzeug.routing.converters.BaseConverter"
        }
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    is_class_method: true
  }
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.converters.BaseConverter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.converters.BaseConverter"
        fully_qualified_name: "werkzeug.routing.converters.BaseConverter"
      }
    }
    parameters {
      name: "map"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  methods {
    name: "to_python"
    fully_qualified_name: "werkzeug.routing.converters.BaseConverter.to_python"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.converters.BaseConverter"
        fully_qualified_name: "werkzeug.routing.converters.BaseConverter"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "to_url"
    fully_qualified_name: "werkzeug.routing.converters.BaseConverter.to_url"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.converters.BaseConverter"
        fully_qualified_name: "werkzeug.routing.converters.BaseConverter"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  attributes {
    name: "regex"
    fully_qualified_name: "werkzeug.routing.converters.BaseConverter.regex"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "weight"
    fully_qualified_name: "werkzeug.routing.converters.BaseConverter.weight"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "part_isolating"
    fully_qualified_name: "werkzeug.routing.converters.BaseConverter.part_isolating"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "map"
    fully_qualified_name: "werkzeug.routing.converters.BaseConverter.map"
    type_annotation {
      pretty_printed_name: "werkzeug.routing.map.Map"
      fully_qualified_name: "werkzeug.routing.map.Map"
    }
  }
}
classes {
  name: "FloatConverter"
  fully_qualified_name: "werkzeug.routing.converters.FloatConverter"
  super_classes: "werkzeug.routing.converters.NumberConverter"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.converters.FloatConverter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.converters.FloatConverter"
        fully_qualified_name: "werkzeug.routing.converters.FloatConverter"
      }
    }
    parameters {
      name: "map"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    parameters {
      name: "min"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.float,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "max"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.float,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "signed"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  attributes {
    name: "regex"
    fully_qualified_name: "werkzeug.routing.converters.FloatConverter.regex"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "num_convert"
    fully_qualified_name: "werkzeug.routing.converters.FloatConverter.num_convert"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.type]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
  }
}
classes {
  name: "IntegerConverter"
  fully_qualified_name: "werkzeug.routing.converters.IntegerConverter"
  super_classes: "werkzeug.routing.converters.NumberConverter"
  attributes {
    name: "regex"
    fully_qualified_name: "werkzeug.routing.converters.IntegerConverter.regex"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "PathConverter"
  fully_qualified_name: "werkzeug.routing.converters.PathConverter"
  super_classes: "werkzeug.routing.converters.BaseConverter"
  attributes {
    name: "regex"
    fully_qualified_name: "werkzeug.routing.converters.PathConverter.regex"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "weight"
    fully_qualified_name: "werkzeug.routing.converters.PathConverter.weight"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "UnicodeConverter"
  fully_qualified_name: "werkzeug.routing.converters.UnicodeConverter"
  super_classes: "werkzeug.routing.converters.BaseConverter"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.converters.UnicodeConverter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.converters.UnicodeConverter"
        fully_qualified_name: "werkzeug.routing.converters.UnicodeConverter"
      }
    }
    parameters {
      name: "map"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    parameters {
      name: "minlength"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "maxlength"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "length"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
}
classes {
  name: "UUIDConverter"
  fully_qualified_name: "werkzeug.routing.converters.UUIDConverter"
  super_classes: "werkzeug.routing.converters.BaseConverter"
  methods {
    name: "to_python"
    fully_qualified_name: "werkzeug.routing.converters.UUIDConverter.to_python"
    return_annotation {
      pretty_printed_name: "uuid.UUID"
      fully_qualified_name: "uuid.UUID"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.converters.UUIDConverter"
        fully_qualified_name: "werkzeug.routing.converters.UUIDConverter"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "to_url"
    fully_qualified_name: "werkzeug.routing.converters.UUIDConverter.to_url"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.converters.UUIDConverter"
        fully_qualified_name: "werkzeug.routing.converters.UUIDConverter"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "uuid.UUID"
        fully_qualified_name: "uuid.UUID"
      }
    }
  }
  attributes {
    name: "regex"
    fully_qualified_name: "werkzeug.routing.converters.UUIDConverter.regex"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "ValidationError"
  fully_qualified_name: "werkzeug.routing.converters.ValidationError"
  super_classes: "builtins.ValueError"
}
classes {
  name: "BuildError"
  fully_qualified_name: "werkzeug.routing.exceptions.BuildError"
  super_classes: "werkzeug.routing.exceptions.RoutingException"
  super_classes: "builtins.LookupError"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.exceptions.BuildError.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.exceptions.BuildError"
        fully_qualified_name: "werkzeug.routing.exceptions.BuildError"
      }
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "adapter"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[werkzeug.routing.map.MapAdapter,None]"
        kind: UNION
        args {
          pretty_printed_name: "werkzeug.routing.map.MapAdapter"
          fully_qualified_name: "werkzeug.routing.map.MapAdapter"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "suggested"
    fully_qualified_name: "werkzeug.routing.exceptions.BuildError.suggested"
    return_annotation {
      pretty_printed_name: "Union[werkzeug.routing.rules.Rule,None]"
      kind: UNION
      args {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.exceptions.BuildError"
        fully_qualified_name: "werkzeug.routing.exceptions.BuildError"
      }
    }
    has_decorators: true
    resolved_decorator_names: "cached_property"
  }
  methods {
    name: "closest_rule"
    fully_qualified_name: "werkzeug.routing.exceptions.BuildError.closest_rule"
    return_annotation {
      pretty_printed_name: "Union[werkzeug.routing.rules.Rule,None]"
      kind: UNION
      args {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.exceptions.BuildError"
        fully_qualified_name: "werkzeug.routing.exceptions.BuildError"
      }
    }
    parameters {
      name: "adapter"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[werkzeug.routing.map.MapAdapter,None]"
        kind: UNION
        args {
          pretty_printed_name: "werkzeug.routing.map.MapAdapter"
          fully_qualified_name: "werkzeug.routing.map.MapAdapter"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "__str__"
    fully_qualified_name: "werkzeug.routing.exceptions.BuildError.__str__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "werkzeug.routing.exceptions.BuildError"
        fully_qualified_name: "werkzeug.routing.exceptions.BuildError"
      }
    }
  }
  attributes {
    name: "endpoint"
    fully_qualified_name: "werkzeug.routing.exceptions.BuildError.endpoint"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "values"
    fully_qualified_name: "werkzeug.routing.exceptions.BuildError.values"
    type_annotation {
      pretty_printed_name: "typing.Mapping[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Mapping"
    }
  }
  attributes {
    name: "method"
    fully_qualified_name: "werkzeug.routing.exceptions.BuildError.method"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "adapter"
    fully_qualified_name: "werkzeug.routing.exceptions.BuildError.adapter"
    type_annotation {
      pretty_printed_name: "Union[werkzeug.routing.map.MapAdapter,None]"
      kind: UNION
      args {
        pretty_printed_name: "werkzeug.routing.map.MapAdapter"
        fully_qualified_name: "werkzeug.routing.map.MapAdapter"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
classes {
  name: "NoMatch"
  fully_qualified_name: "werkzeug.routing.exceptions.NoMatch"
  super_classes: "builtins.Exception"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.exceptions.NoMatch.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.exceptions.NoMatch"
        fully_qualified_name: "werkzeug.routing.exceptions.NoMatch"
      }
    }
    parameters {
      name: "have_match_for"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.set[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.set"
      }
    }
    parameters {
      name: "websocket_mismatch"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  attributes {
    name: "__slots__"
    fully_qualified_name: "werkzeug.routing.exceptions.NoMatch.__slots__"
    type_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  attributes {
    name: "have_match_for"
    fully_qualified_name: "werkzeug.routing.exceptions.NoMatch.have_match_for"
    type_annotation {
      pretty_printed_name: "builtins.set[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.set"
    }
  }
  attributes {
    name: "websocket_mismatch"
    fully_qualified_name: "werkzeug.routing.exceptions.NoMatch.websocket_mismatch"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
classes {
  name: "RequestAliasRedirect"
  fully_qualified_name: "werkzeug.routing.exceptions.RequestAliasRedirect"
  super_classes: "werkzeug.routing.exceptions.RoutingException"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.exceptions.RequestAliasRedirect.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.exceptions.RequestAliasRedirect"
        fully_qualified_name: "werkzeug.routing.exceptions.RequestAliasRedirect"
      }
    }
    parameters {
      name: "matched_values"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  attributes {
    name: "matched_values"
    fully_qualified_name: "werkzeug.routing.exceptions.RequestAliasRedirect.matched_values"
    type_annotation {
      pretty_printed_name: "typing.Mapping[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Mapping"
    }
  }
  attributes {
    name: "endpoint"
    fully_qualified_name: "werkzeug.routing.exceptions.RequestAliasRedirect.endpoint"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "RequestPath"
  fully_qualified_name: "werkzeug.routing.exceptions.RequestPath"
  super_classes: "werkzeug.routing.exceptions.RoutingException"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.exceptions.RequestPath.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.exceptions.RequestPath"
        fully_qualified_name: "werkzeug.routing.exceptions.RequestPath"
      }
    }
    parameters {
      name: "path_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  attributes {
    name: "__slots__"
    fully_qualified_name: "werkzeug.routing.exceptions.RequestPath.__slots__"
    type_annotation {
      pretty_printed_name: "Tuple[builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  attributes {
    name: "path_info"
    fully_qualified_name: "werkzeug.routing.exceptions.RequestPath.path_info"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "RequestRedirect"
  fully_qualified_name: "werkzeug.routing.exceptions.RequestRedirect"
  super_classes: "werkzeug.exceptions.HTTPException"
  super_classes: "werkzeug.routing.exceptions.RoutingException"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.exceptions.RequestRedirect.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.exceptions.RequestRedirect"
        fully_qualified_name: "werkzeug.routing.exceptions.RequestRedirect"
      }
    }
    parameters {
      name: "new_url"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "get_response"
    fully_qualified_name: "werkzeug.routing.exceptions.RequestRedirect.get_response"
    return_annotation {
      pretty_printed_name: "werkzeug.wrappers.response.Response"
      fully_qualified_name: "werkzeug.wrappers.response.Response"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.exceptions.RequestRedirect"
        fully_qualified_name: "werkzeug.routing.exceptions.RequestRedirect"
      }
    }
    parameters {
      name: "environ"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[builtins.dict[builtins.str,Any]],werkzeug.wrappers.request.Request,None]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[builtins.dict[builtins.str,Any]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          fully_qualified_name: "_typeshed.wsgi.WSGIEnvironment"
        }
        args {
          pretty_printed_name: "werkzeug.wrappers.request.Request"
          fully_qualified_name: "werkzeug.wrappers.request.Request"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "scope"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[Any,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  attributes {
    name: "code"
    fully_qualified_name: "werkzeug.routing.exceptions.RequestRedirect.code"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "new_url"
    fully_qualified_name: "werkzeug.routing.exceptions.RequestRedirect.new_url"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "RoutingException"
  fully_qualified_name: "werkzeug.routing.exceptions.RoutingException"
  super_classes: "builtins.Exception"
}
classes {
  name: "WebsocketMismatch"
  fully_qualified_name: "werkzeug.routing.exceptions.WebsocketMismatch"
  super_classes: "werkzeug.exceptions.BadRequest"
}
classes {
  name: "Map"
  fully_qualified_name: "werkzeug.routing.map.Map"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.map.Map.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    parameters {
      name: "rules"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[werkzeug.routing.rules.RuleFactory],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[werkzeug.routing.rules.RuleFactory]"
          args {
            pretty_printed_name: "werkzeug.routing.rules.RuleFactory"
            fully_qualified_name: "werkzeug.routing.rules.RuleFactory"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "default_subdomain"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "charset"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "strict_slashes"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "merge_slashes"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "redirect_defaults"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "converters"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Type[werkzeug.routing.converters.BaseConverter]],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Type[werkzeug.routing.converters.BaseConverter]]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Type[werkzeug.routing.converters.BaseConverter]"
            kind: TYPE
            args {
              pretty_printed_name: "werkzeug.routing.converters.BaseConverter"
              fully_qualified_name: "werkzeug.routing.converters.BaseConverter"
            }
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "sort_parameters"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "sort_key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "encoding_errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "host_matching"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "is_endpoint_expecting"
    fully_qualified_name: "werkzeug.routing.map.Map.is_endpoint_expecting"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "arguments"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "_rules"
    fully_qualified_name: "werkzeug.routing.map.Map._rules"
    return_annotation {
      pretty_printed_name: "builtins.list[werkzeug.routing.rules.Rule]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "iter_rules"
    fully_qualified_name: "werkzeug.routing.map.Map.iter_rules"
    return_annotation {
      pretty_printed_name: "typing.Iterator[werkzeug.routing.rules.Rule]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "add"
    fully_qualified_name: "werkzeug.routing.map.Map.add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    parameters {
      name: "rulefactory"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.RuleFactory"
        fully_qualified_name: "werkzeug.routing.rules.RuleFactory"
      }
    }
  }
  methods {
    name: "bind"
    fully_qualified_name: "werkzeug.routing.map.Map.bind"
    return_annotation {
      pretty_printed_name: "werkzeug.routing.map.MapAdapter"
      fully_qualified_name: "werkzeug.routing.map.MapAdapter"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    parameters {
      name: "server_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "script_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "subdomain"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "url_scheme"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "default_method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "path_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "query_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "bind_to_environ"
    fully_qualified_name: "werkzeug.routing.map.Map.bind_to_environ"
    return_annotation {
      pretty_printed_name: "werkzeug.routing.map.MapAdapter"
      fully_qualified_name: "werkzeug.routing.map.MapAdapter"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    parameters {
      name: "environ"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[builtins.dict[builtins.str,Any]],werkzeug.wrappers.request.Request]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[builtins.dict[builtins.str,Any]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "builtins.dict[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.dict"
          }
          fully_qualified_name: "_typeshed.wsgi.WSGIEnvironment"
        }
        args {
          pretty_printed_name: "werkzeug.wrappers.request.Request"
          fully_qualified_name: "werkzeug.wrappers.request.Request"
        }
      }
    }
    parameters {
      name: "server_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "subdomain"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "update"
    fully_qualified_name: "werkzeug.routing.map.Map.update"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
  }
  methods {
    name: "__repr__"
    fully_qualified_name: "werkzeug.routing.map.Map.__repr__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
  }
  attributes {
    name: "default_converters"
    fully_qualified_name: "werkzeug.routing.map.Map.default_converters"
    type_annotation {
      pretty_printed_name: "werkzeug.datastructures.structures.ImmutableDict[builtins.str,Type[werkzeug.routing.converters.BaseConverter]]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Type[werkzeug.routing.converters.BaseConverter]"
        kind: TYPE
        args {
          pretty_printed_name: "werkzeug.routing.converters.BaseConverter"
          fully_qualified_name: "werkzeug.routing.converters.BaseConverter"
        }
      }
      fully_qualified_name: "werkzeug.datastructures.structures.ImmutableDict"
    }
  }
  attributes {
    name: "lock_class"
    fully_qualified_name: "werkzeug.routing.map.Map.lock_class"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.type]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
    }
  }
  attributes {
    name: "_matcher"
    fully_qualified_name: "werkzeug.routing.map.Map._matcher"
    type_annotation {
      pretty_printed_name: "werkzeug.routing.matcher.StateMachineMatcher"
      fully_qualified_name: "werkzeug.routing.matcher.StateMachineMatcher"
    }
  }
  attributes {
    name: "_rules_by_endpoint"
    fully_qualified_name: "werkzeug.routing.map.Map._rules_by_endpoint"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,builtins.list[werkzeug.routing.rules.Rule]]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.list[werkzeug.routing.rules.Rule]"
        args {
          pretty_printed_name: "werkzeug.routing.rules.Rule"
          fully_qualified_name: "werkzeug.routing.rules.Rule"
        }
        fully_qualified_name: "builtins.list"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "_remap"
    fully_qualified_name: "werkzeug.routing.map.Map._remap"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "_remap_lock"
    fully_qualified_name: "werkzeug.routing.map.Map._remap_lock"
    type_annotation {
      pretty_printed_name: "threading.Lock"
      fully_qualified_name: "threading.Lock"
    }
  }
  attributes {
    name: "default_subdomain"
    fully_qualified_name: "werkzeug.routing.map.Map.default_subdomain"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "charset"
    fully_qualified_name: "werkzeug.routing.map.Map.charset"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "encoding_errors"
    fully_qualified_name: "werkzeug.routing.map.Map.encoding_errors"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "strict_slashes"
    fully_qualified_name: "werkzeug.routing.map.Map.strict_slashes"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "merge_slashes"
    fully_qualified_name: "werkzeug.routing.map.Map.merge_slashes"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "redirect_defaults"
    fully_qualified_name: "werkzeug.routing.map.Map.redirect_defaults"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "host_matching"
    fully_qualified_name: "werkzeug.routing.map.Map.host_matching"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "converters"
    fully_qualified_name: "werkzeug.routing.map.Map.converters"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Type[werkzeug.routing.converters.BaseConverter]]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Type[werkzeug.routing.converters.BaseConverter]"
        kind: TYPE
        args {
          pretty_printed_name: "werkzeug.routing.converters.BaseConverter"
          fully_qualified_name: "werkzeug.routing.converters.BaseConverter"
        }
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "sort_parameters"
    fully_qualified_name: "werkzeug.routing.map.Map.sort_parameters"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "sort_key"
    fully_qualified_name: "werkzeug.routing.map.Map.sort_key"
    type_annotation {
      pretty_printed_name: "Union[CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
classes {
  name: "MapAdapter"
  fully_qualified_name: "werkzeug.routing.map.MapAdapter"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.MapAdapter"
        fully_qualified_name: "werkzeug.routing.map.MapAdapter"
      }
    }
    parameters {
      name: "map"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    parameters {
      name: "server_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "script_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "subdomain"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "url_scheme"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "path_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "default_method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "query_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "dispatch"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.dispatch"
    return_annotation {
      pretty_printed_name: "TypeAlias[CallableType[builtins.function]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      fully_qualified_name: "_typeshed.wsgi.WSGIApplication"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.MapAdapter"
        fully_qualified_name: "werkzeug.routing.map.MapAdapter"
      }
    }
    parameters {
      name: "view_func"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "path_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "catch_http_exceptions"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "test"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.test"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.MapAdapter"
        fully_qualified_name: "werkzeug.routing.map.MapAdapter"
      }
    }
    parameters {
      name: "path_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "allowed_methods"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.allowed_methods"
    return_annotation {
      pretty_printed_name: "typing.Iterable[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "typing.Iterable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.MapAdapter"
        fully_qualified_name: "werkzeug.routing.map.MapAdapter"
      }
    }
    parameters {
      name: "path_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "get_host"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.get_host"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.MapAdapter"
        fully_qualified_name: "werkzeug.routing.map.MapAdapter"
      }
    }
    parameters {
      name: "domain_part"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "get_default_redirect"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.get_default_redirect"
    return_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.MapAdapter"
        fully_qualified_name: "werkzeug.routing.map.MapAdapter"
      }
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    parameters {
      name: "query_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
  }
  methods {
    name: "encode_query_args"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.encode_query_args"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.MapAdapter"
        fully_qualified_name: "werkzeug.routing.map.MapAdapter"
      }
    }
    parameters {
      name: "query_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
  }
  methods {
    name: "make_redirect_url"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.make_redirect_url"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.MapAdapter"
        fully_qualified_name: "werkzeug.routing.map.MapAdapter"
      }
    }
    parameters {
      name: "path_info"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "query_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "domain_part"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "make_alias_redirect_url"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.make_alias_redirect_url"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.MapAdapter"
        fully_qualified_name: "werkzeug.routing.map.MapAdapter"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "query_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
  }
  methods {
    name: "_partial_build"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter._partial_build"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.str,builtins.str,builtins.bool],None]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.bool]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.MapAdapter"
        fully_qualified_name: "werkzeug.routing.map.MapAdapter"
      }
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "append_unknown"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "build"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.build"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.MapAdapter"
        fully_qualified_name: "werkzeug.routing.map.MapAdapter"
      }
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "force_external"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "append_unknown"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "url_scheme"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  overloaded_methods {
    name: "match"
    fullname: "werkzeug.routing.map.MapAdapter.match"
    definitions {
      name: "match"
      fully_qualified_name: "werkzeug.routing.map.MapAdapter.match"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,typing.Mapping[builtins.str,Any]]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "werkzeug.routing.map.MapAdapter"
          fully_qualified_name: "werkzeug.routing.map.MapAdapter"
        }
      }
      parameters {
        name: "path_info"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "method"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "return_rule"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.bool]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
        }
      }
      parameters {
        name: "query_args"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Mapping"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "websocket"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "t.overload"
      is_overload: true
    }
    definitions {
      name: "match"
      fully_qualified_name: "werkzeug.routing.map.MapAdapter.match"
      return_annotation {
        pretty_printed_name: "Tuple[werkzeug.routing.rules.Rule,typing.Mapping[builtins.str,Any]]"
        kind: TUPLE
        args {
          pretty_printed_name: "werkzeug.routing.rules.Rule"
          fully_qualified_name: "werkzeug.routing.rules.Rule"
        }
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "werkzeug.routing.map.MapAdapter"
          fully_qualified_name: "werkzeug.routing.map.MapAdapter"
        }
      }
      parameters {
        name: "path_info"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "method"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "return_rule"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.bool]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
        }
      }
      parameters {
        name: "query_args"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "typing.Mapping[builtins.str,Any]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "typing.Mapping"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "websocket"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.bool,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "t.overload"
      is_overload: true
    }
  }
  attributes {
    name: "map"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.map"
    type_annotation {
      pretty_printed_name: "werkzeug.routing.map.Map"
      fully_qualified_name: "werkzeug.routing.map.Map"
    }
  }
  attributes {
    name: "server_name"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.server_name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "script_name"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.script_name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "subdomain"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.subdomain"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "url_scheme"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.url_scheme"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "path_info"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.path_info"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "default_method"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.default_method"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "query_args"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.query_args"
    type_annotation {
      pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "websocket"
    fully_qualified_name: "werkzeug.routing.map.MapAdapter.websocket"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
classes {
  name: "StateMachineMatcher"
  fully_qualified_name: "werkzeug.routing.matcher.StateMachineMatcher"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.matcher.StateMachineMatcher.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.matcher.StateMachineMatcher"
        fully_qualified_name: "werkzeug.routing.matcher.StateMachineMatcher"
      }
    }
    parameters {
      name: "merge_slashes"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "add"
    fully_qualified_name: "werkzeug.routing.matcher.StateMachineMatcher.add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.matcher.StateMachineMatcher"
        fully_qualified_name: "werkzeug.routing.matcher.StateMachineMatcher"
      }
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
  }
  methods {
    name: "update"
    fully_qualified_name: "werkzeug.routing.matcher.StateMachineMatcher.update"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.matcher.StateMachineMatcher"
        fully_qualified_name: "werkzeug.routing.matcher.StateMachineMatcher"
      }
    }
  }
  methods {
    name: "match"
    fully_qualified_name: "werkzeug.routing.matcher.StateMachineMatcher.match"
    return_annotation {
      pretty_printed_name: "Tuple[werkzeug.routing.rules.Rule,typing.MutableMapping[builtins.str,Any]]"
      kind: TUPLE
      args {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
      args {
        pretty_printed_name: "typing.MutableMapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.matcher.StateMachineMatcher"
        fully_qualified_name: "werkzeug.routing.matcher.StateMachineMatcher"
      }
    }
    parameters {
      name: "domain"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "websocket"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  attributes {
    name: "_root"
    fully_qualified_name: "werkzeug.routing.matcher.StateMachineMatcher._root"
    type_annotation {
      pretty_printed_name: "werkzeug.routing.matcher.State"
      fully_qualified_name: "werkzeug.routing.matcher.State"
    }
  }
  attributes {
    name: "merge_slashes"
    fully_qualified_name: "werkzeug.routing.matcher.StateMachineMatcher.merge_slashes"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
classes {
  name: "EndpointPrefix"
  fully_qualified_name: "werkzeug.routing.rules.EndpointPrefix"
  super_classes: "werkzeug.routing.rules.RuleFactory"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.rules.EndpointPrefix.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.EndpointPrefix"
        fully_qualified_name: "werkzeug.routing.rules.EndpointPrefix"
      }
    }
    parameters {
      name: "prefix"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "rules"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[werkzeug.routing.rules.RuleFactory]"
        args {
          pretty_printed_name: "werkzeug.routing.rules.RuleFactory"
          fully_qualified_name: "werkzeug.routing.rules.RuleFactory"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "get_rules"
    fully_qualified_name: "werkzeug.routing.rules.EndpointPrefix.get_rules"
    return_annotation {
      pretty_printed_name: "typing.Iterator[werkzeug.routing.rules.Rule]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.EndpointPrefix"
        fully_qualified_name: "werkzeug.routing.rules.EndpointPrefix"
      }
    }
    parameters {
      name: "map"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
  }
  attributes {
    name: "prefix"
    fully_qualified_name: "werkzeug.routing.rules.EndpointPrefix.prefix"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "rules"
    fully_qualified_name: "werkzeug.routing.rules.EndpointPrefix.rules"
    type_annotation {
      pretty_printed_name: "typing.Iterable[werkzeug.routing.rules.RuleFactory]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.RuleFactory"
        fully_qualified_name: "werkzeug.routing.rules.RuleFactory"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
}
classes {
  name: "Rule"
  fully_qualified_name: "werkzeug.routing.rules.Rule"
  super_classes: "werkzeug.routing.rules.RuleFactory"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.rules.Rule.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
    parameters {
      name: "string"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "defaults"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Mapping[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Mapping"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "subdomain"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "methods"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[typing.Iterable[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "build_only"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "endpoint"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "strict_slashes"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "merge_slashes"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "redirect_to"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,CallableType[builtins.function],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "alias"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "host"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "websocket"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "empty"
    fully_qualified_name: "werkzeug.routing.rules.Rule.empty"
    return_annotation {
      pretty_printed_name: "werkzeug.routing.rules.Rule"
      fully_qualified_name: "werkzeug.routing.rules.Rule"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
  }
  methods {
    name: "get_empty_kwargs"
    fully_qualified_name: "werkzeug.routing.rules.Rule.get_empty_kwargs"
    return_annotation {
      pretty_printed_name: "typing.Mapping[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "typing.Mapping"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
  }
  methods {
    name: "get_rules"
    fully_qualified_name: "werkzeug.routing.rules.Rule.get_rules"
    return_annotation {
      pretty_printed_name: "typing.Iterator[werkzeug.routing.rules.Rule]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
    parameters {
      name: "map"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
  }
  methods {
    name: "refresh"
    fully_qualified_name: "werkzeug.routing.rules.Rule.refresh"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
  }
  methods {
    name: "bind"
    fully_qualified_name: "werkzeug.routing.rules.Rule.bind"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
    parameters {
      name: "map"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
    parameters {
      name: "rebind"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "get_converter"
    fully_qualified_name: "werkzeug.routing.rules.Rule.get_converter"
    return_annotation {
      pretty_printed_name: "werkzeug.routing.converters.BaseConverter"
      fully_qualified_name: "werkzeug.routing.converters.BaseConverter"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
    parameters {
      name: "variable_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "converter_name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.tuple[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.tuple"
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "_encode_query_vars"
    fully_qualified_name: "werkzeug.routing.rules.Rule._encode_query_vars"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
    parameters {
      name: "query_vars"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "_parse_rule"
    fully_qualified_name: "werkzeug.routing.rules.Rule._parse_rule"
    return_annotation {
      pretty_printed_name: "typing.Iterable[werkzeug.routing.rules.RulePart]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.RulePart"
        fully_qualified_name: "werkzeug.routing.rules.RulePart"
      }
      fully_qualified_name: "typing.Iterable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "compile"
    fully_qualified_name: "werkzeug.routing.rules.Rule.compile"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
  }
  methods {
    name: "_get_func_code"
    fully_qualified_name: "werkzeug.routing.rules.Rule._get_func_code"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "code"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "types.CodeType"
        fully_qualified_name: "types.CodeType"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "staticmethod"
    is_static: true
  }
  methods {
    name: "_compile_builder"
    fully_qualified_name: "werkzeug.routing.rules.Rule._compile_builder"
    return_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
    parameters {
      name: "append_unknown"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "build"
    fully_qualified_name: "werkzeug.routing.rules.Rule.build"
    return_annotation {
      pretty_printed_name: "Union[Tuple[builtins.str,builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[builtins.str,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "append_unknown"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "provides_defaults_for"
    fully_qualified_name: "werkzeug.routing.rules.Rule.provides_defaults_for"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
    parameters {
      name: "rule"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
  }
  methods {
    name: "suitable_for"
    fully_qualified_name: "werkzeug.routing.rules.Rule.suitable_for"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "method"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "build_compare_key"
    fully_qualified_name: "werkzeug.routing.rules.Rule.build_compare_key"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "werkzeug.routing.rules.Rule.__eq__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  methods {
    name: "__str__"
    fully_qualified_name: "werkzeug.routing.rules.Rule.__str__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
  }
  methods {
    name: "__repr__"
    fully_qualified_name: "werkzeug.routing.rules.Rule.__repr__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
    }
  }
  attributes {
    name: "__hash__"
    fully_qualified_name: "werkzeug.routing.rules.Rule.__hash__"
  }
  attributes {
    name: "rule"
    fully_qualified_name: "werkzeug.routing.rules.Rule.rule"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "is_leaf"
    fully_qualified_name: "werkzeug.routing.rules.Rule.is_leaf"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "is_branch"
    fully_qualified_name: "werkzeug.routing.rules.Rule.is_branch"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "map"
    fully_qualified_name: "werkzeug.routing.rules.Rule.map"
    type_annotation {
      pretty_printed_name: "werkzeug.routing.map.Map"
      fully_qualified_name: "werkzeug.routing.map.Map"
    }
  }
  attributes {
    name: "strict_slashes"
    fully_qualified_name: "werkzeug.routing.rules.Rule.strict_slashes"
    type_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "merge_slashes"
    fully_qualified_name: "werkzeug.routing.rules.Rule.merge_slashes"
    type_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "subdomain"
    fully_qualified_name: "werkzeug.routing.rules.Rule.subdomain"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "host"
    fully_qualified_name: "werkzeug.routing.rules.Rule.host"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "defaults"
    fully_qualified_name: "werkzeug.routing.rules.Rule.defaults"
    type_annotation {
      pretty_printed_name: "Union[typing.Mapping[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Mapping[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "build_only"
    fully_qualified_name: "werkzeug.routing.rules.Rule.build_only"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "alias"
    fully_qualified_name: "werkzeug.routing.rules.Rule.alias"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "websocket"
    fully_qualified_name: "werkzeug.routing.rules.Rule.websocket"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "methods"
    fully_qualified_name: "werkzeug.routing.rules.Rule.methods"
    type_annotation {
      pretty_printed_name: "Union[builtins.set[builtins.str],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.set[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.set"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "endpoint"
    fully_qualified_name: "werkzeug.routing.rules.Rule.endpoint"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "redirect_to"
    fully_qualified_name: "werkzeug.routing.rules.Rule.redirect_to"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,CallableType[builtins.function],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "arguments"
    fully_qualified_name: "werkzeug.routing.rules.Rule.arguments"
    type_annotation {
      pretty_printed_name: "builtins.set[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.set"
    }
  }
  attributes {
    name: "_converters"
    fully_qualified_name: "werkzeug.routing.rules.Rule._converters"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,werkzeug.routing.converters.BaseConverter]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "werkzeug.routing.converters.BaseConverter"
        fully_qualified_name: "werkzeug.routing.converters.BaseConverter"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "_trace"
    fully_qualified_name: "werkzeug.routing.rules.Rule._trace"
    type_annotation {
      pretty_printed_name: "builtins.list[Tuple[builtins.bool,builtins.str]]"
      args {
        pretty_printed_name: "Tuple[builtins.bool,builtins.str]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      fully_qualified_name: "builtins.list"
    }
  }
  attributes {
    name: "_parts"
    fully_qualified_name: "werkzeug.routing.rules.Rule._parts"
    type_annotation {
      pretty_printed_name: "builtins.list[werkzeug.routing.rules.RulePart]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.RulePart"
        fully_qualified_name: "werkzeug.routing.rules.RulePart"
      }
      fully_qualified_name: "builtins.list"
    }
  }
  attributes {
    name: "_build"
    fully_qualified_name: "werkzeug.routing.rules.Rule._build"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
  attributes {
    name: "_build_unknown"
    fully_qualified_name: "werkzeug.routing.rules.Rule._build_unknown"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
}
classes {
  name: "RuleFactory"
  fully_qualified_name: "werkzeug.routing.rules.RuleFactory"
  super_classes: "builtins.object"
  methods {
    name: "get_rules"
    fully_qualified_name: "werkzeug.routing.rules.RuleFactory.get_rules"
    return_annotation {
      pretty_printed_name: "typing.Iterable[werkzeug.routing.rules.Rule]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
      fully_qualified_name: "typing.Iterable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.RuleFactory"
        fully_qualified_name: "werkzeug.routing.rules.RuleFactory"
      }
    }
    parameters {
      name: "map"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
  }
}
classes {
  name: "RuleTemplate"
  fully_qualified_name: "werkzeug.routing.rules.RuleTemplate"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.rules.RuleTemplate.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.RuleTemplate"
        fully_qualified_name: "werkzeug.routing.rules.RuleTemplate"
      }
    }
    parameters {
      name: "rules"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[werkzeug.routing.rules.Rule]"
        args {
          pretty_printed_name: "werkzeug.routing.rules.Rule"
          fully_qualified_name: "werkzeug.routing.rules.Rule"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__call__"
    fully_qualified_name: "werkzeug.routing.rules.RuleTemplate.__call__"
    return_annotation {
      pretty_printed_name: "werkzeug.routing.rules.RuleTemplateFactory"
      fully_qualified_name: "werkzeug.routing.rules.RuleTemplateFactory"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.RuleTemplate"
        fully_qualified_name: "werkzeug.routing.rules.RuleTemplate"
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  attributes {
    name: "rules"
    fully_qualified_name: "werkzeug.routing.rules.RuleTemplate.rules"
    type_annotation {
      pretty_printed_name: "builtins.list[werkzeug.routing.rules.Rule]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
      fully_qualified_name: "builtins.list"
    }
  }
}
classes {
  name: "RuleTemplateFactory"
  fully_qualified_name: "werkzeug.routing.rules.RuleTemplateFactory"
  super_classes: "werkzeug.routing.rules.RuleFactory"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.rules.RuleTemplateFactory.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.RuleTemplateFactory"
        fully_qualified_name: "werkzeug.routing.rules.RuleTemplateFactory"
      }
    }
    parameters {
      name: "rules"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[werkzeug.routing.rules.RuleFactory]"
        args {
          pretty_printed_name: "werkzeug.routing.rules.RuleFactory"
          fully_qualified_name: "werkzeug.routing.rules.RuleFactory"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "context"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
    }
  }
  methods {
    name: "get_rules"
    fully_qualified_name: "werkzeug.routing.rules.RuleTemplateFactory.get_rules"
    return_annotation {
      pretty_printed_name: "typing.Iterator[werkzeug.routing.rules.Rule]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.RuleTemplateFactory"
        fully_qualified_name: "werkzeug.routing.rules.RuleTemplateFactory"
      }
    }
    parameters {
      name: "map"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
  }
  attributes {
    name: "rules"
    fully_qualified_name: "werkzeug.routing.rules.RuleTemplateFactory.rules"
    type_annotation {
      pretty_printed_name: "typing.Iterable[werkzeug.routing.rules.RuleFactory]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.RuleFactory"
        fully_qualified_name: "werkzeug.routing.rules.RuleFactory"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  attributes {
    name: "context"
    fully_qualified_name: "werkzeug.routing.rules.RuleTemplateFactory.context"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
}
classes {
  name: "Subdomain"
  fully_qualified_name: "werkzeug.routing.rules.Subdomain"
  super_classes: "werkzeug.routing.rules.RuleFactory"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.rules.Subdomain.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Subdomain"
        fully_qualified_name: "werkzeug.routing.rules.Subdomain"
      }
    }
    parameters {
      name: "subdomain"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "rules"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[werkzeug.routing.rules.RuleFactory]"
        args {
          pretty_printed_name: "werkzeug.routing.rules.RuleFactory"
          fully_qualified_name: "werkzeug.routing.rules.RuleFactory"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "get_rules"
    fully_qualified_name: "werkzeug.routing.rules.Subdomain.get_rules"
    return_annotation {
      pretty_printed_name: "typing.Iterator[werkzeug.routing.rules.Rule]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Subdomain"
        fully_qualified_name: "werkzeug.routing.rules.Subdomain"
      }
    }
    parameters {
      name: "map"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
  }
  attributes {
    name: "subdomain"
    fully_qualified_name: "werkzeug.routing.rules.Subdomain.subdomain"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "rules"
    fully_qualified_name: "werkzeug.routing.rules.Subdomain.rules"
    type_annotation {
      pretty_printed_name: "typing.Iterable[werkzeug.routing.rules.RuleFactory]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.RuleFactory"
        fully_qualified_name: "werkzeug.routing.rules.RuleFactory"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
}
classes {
  name: "Submount"
  fully_qualified_name: "werkzeug.routing.rules.Submount"
  super_classes: "werkzeug.routing.rules.RuleFactory"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.routing.rules.Submount.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Submount"
        fully_qualified_name: "werkzeug.routing.rules.Submount"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "rules"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[werkzeug.routing.rules.RuleFactory]"
        args {
          pretty_printed_name: "werkzeug.routing.rules.RuleFactory"
          fully_qualified_name: "werkzeug.routing.rules.RuleFactory"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "get_rules"
    fully_qualified_name: "werkzeug.routing.rules.Submount.get_rules"
    return_annotation {
      pretty_printed_name: "typing.Iterator[werkzeug.routing.rules.Rule]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.Rule"
        fully_qualified_name: "werkzeug.routing.rules.Rule"
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.rules.Submount"
        fully_qualified_name: "werkzeug.routing.rules.Submount"
      }
    }
    parameters {
      name: "map"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.routing.map.Map"
        fully_qualified_name: "werkzeug.routing.map.Map"
      }
    }
  }
  attributes {
    name: "path"
    fully_qualified_name: "werkzeug.routing.rules.Submount.path"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "rules"
    fully_qualified_name: "werkzeug.routing.rules.Submount.rules"
    type_annotation {
      pretty_printed_name: "typing.Iterable[werkzeug.routing.rules.RuleFactory]"
      args {
        pretty_printed_name: "werkzeug.routing.rules.RuleFactory"
        fully_qualified_name: "werkzeug.routing.rules.RuleFactory"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
}
functions {
  name: "parse_converter_args"
  fully_qualified_name: "werkzeug.routing.rules.parse_converter_args"
  return_annotation {
    pretty_printed_name: "Tuple[builtins.tuple[Any],builtins.dict[builtins.str,Any]]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.tuple[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.tuple"
    }
    args {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  parameters {
    name: "argstr"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
vars {
  name: "__path__"
  fully_qualified_name: "werkzeug.routing.__path__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "werkzeug.routing.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
