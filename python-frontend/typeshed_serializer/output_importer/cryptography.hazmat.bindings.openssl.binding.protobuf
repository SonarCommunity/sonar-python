fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding"
classes {
  name: "_OpenSSLErrorWithText"
  fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText"
  super_classes: "builtins.tuple"
  methods {
    name: "_replace"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._replace"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._NT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "code"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "lib"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "reason_text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  methods {
    name: "__new__"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText.__new__"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "code"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "lib"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "reason_text"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  methods {
    name: "_asdict"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._asdict"
    return_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._NT"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "_make"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._make"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "new"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "len"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  attributes {
    name: "code"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText.code"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "lib"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText.lib"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "reason"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText.reason"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "reason_text"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText.reason_text"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "_fields"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._fields"
    type_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  attributes {
    name: "_field_types"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._field_types"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "_field_defaults"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._field_defaults"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "_source"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText._source"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "__annotations__"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLErrorWithText.__annotations__"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
}
classes {
  name: "_OpenSSLError"
  fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLError"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLError.__init__"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "code"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "lib"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "_lib_reason_match"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLError._lib_reason_match"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "lib"
      kind: POSITIONAL_OR_KEYWORD
    }
    parameters {
      name: "reason"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  attributes {
    name: "code"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLError.code"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "lib"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLError.lib"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "reason"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLError.reason"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "_code"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLError._code"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "_lib"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLError._lib"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "_reason"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._OpenSSLError._reason"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
}
classes {
  name: "Binding"
  fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding.__init__"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "_enable_fips"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding._enable_fips"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "_register_osrandom_engine"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding._register_osrandom_engine"
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  methods {
    name: "_ensure_ffi_initialized"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized"
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  methods {
    name: "init_static_locks"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding.init_static_locks"
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  attributes {
    name: "lib"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding.lib"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "ffi"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding.ffi"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "_lib_loaded"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding._lib_loaded"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "_init_lock"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding._init_lock"
    type_annotation {
      pretty_printed_name: "threading.Lock"
      fully_qualified_name: "threading.Lock"
    }
  }
  attributes {
    name: "_legacy_provider"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding._legacy_provider"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "_default_provider"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding._default_provider"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "_base_provider"
    fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.Binding._base_provider"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
}
functions {
  name: "_consume_errors"
  fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._consume_errors"
  parameters {
    name: "lib"
    kind: POSITIONAL_OR_KEYWORD
  }
}
functions {
  name: "_errors_with_text"
  fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._errors_with_text"
  parameters {
    name: "errors"
    kind: POSITIONAL_OR_KEYWORD
  }
}
functions {
  name: "_consume_errors_with_text"
  fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._consume_errors_with_text"
  parameters {
    name: "lib"
    kind: POSITIONAL_OR_KEYWORD
  }
}
functions {
  name: "_openssl_assert"
  fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._openssl_assert"
  parameters {
    name: "lib"
    kind: POSITIONAL_OR_KEYWORD
  }
  parameters {
    name: "ok"
    kind: POSITIONAL_OR_KEYWORD
  }
  parameters {
    name: "errors"
    kind: POSITIONAL_OR_KEYWORD
  }
}
functions {
  name: "build_conditional_library"
  fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.build_conditional_library"
  parameters {
    name: "lib"
    kind: POSITIONAL_OR_KEYWORD
  }
  parameters {
    name: "conditional_names"
    kind: POSITIONAL_OR_KEYWORD
  }
}
functions {
  name: "_verify_package_version"
  fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding._verify_package_version"
  parameters {
    name: "version"
    kind: POSITIONAL_OR_KEYWORD
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "ffi"
  fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.ffi"
  type_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
}
vars {
  name: "lib"
  fully_qualified_name: "cryptography.hazmat.bindings.openssl.binding.lib"
  type_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
}
