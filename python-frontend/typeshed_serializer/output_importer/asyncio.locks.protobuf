fully_qualified_name: "asyncio.locks"
classes {
  name: "_ContextManager"
  fully_qualified_name: "asyncio.locks._ContextManager"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "asyncio.locks._ContextManager.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks._ContextManager"
        fully_qualified_name: "asyncio.locks._ContextManager"
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[asyncio.locks.Lock,asyncio.locks.Semaphore]"
        kind: UNION
        args {
          pretty_printed_name: "asyncio.locks.Lock"
          fully_qualified_name: "asyncio.locks.Lock"
        }
        args {
          pretty_printed_name: "asyncio.locks.Semaphore"
          fully_qualified_name: "asyncio.locks.Semaphore"
        }
      }
    }
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "asyncio.locks._ContextManager.__enter__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "asyncio.locks._ContextManager"
        fully_qualified_name: "asyncio.locks._ContextManager"
      }
    }
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "asyncio.locks._ContextManager.__exit__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "asyncio.locks._ContextManager"
        fully_qualified_name: "asyncio.locks._ContextManager"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
}
classes {
  name: "_ContextManagerMixin"
  fully_qualified_name: "asyncio.locks._ContextManagerMixin"
  super_classes: "builtins.object"
  methods {
    name: "__iter__"
    fully_qualified_name: "asyncio.locks._ContextManagerMixin.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Generator[Any,None,asyncio.locks._ContextManager]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "asyncio.locks._ContextManager"
        fully_qualified_name: "asyncio.locks._ContextManager"
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "asyncio.locks._ContextManagerMixin"
        fully_qualified_name: "asyncio.locks._ContextManagerMixin"
      }
    }
  }
  methods {
    name: "__await__"
    fully_qualified_name: "asyncio.locks._ContextManagerMixin.__await__"
    return_annotation {
      pretty_printed_name: "typing.Generator[Any,None,asyncio.locks._ContextManager]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "asyncio.locks._ContextManager"
        fully_qualified_name: "asyncio.locks._ContextManager"
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks._ContextManagerMixin"
        fully_qualified_name: "asyncio.locks._ContextManagerMixin"
      }
    }
  }
  methods {
    name: "__aenter__"
    fully_qualified_name: "asyncio.locks._ContextManagerMixin.__aenter__"
    return_annotation {
      pretty_printed_name: "typing.Coroutine[Any,Any,None]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Coroutine"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks._ContextManagerMixin"
        fully_qualified_name: "asyncio.locks._ContextManagerMixin"
      }
    }
    is_asynchronous: true
  }
  methods {
    name: "__aexit__"
    fully_qualified_name: "asyncio.locks._ContextManagerMixin.__aexit__"
    return_annotation {
      pretty_printed_name: "typing.Coroutine[Any,Any,None]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Coroutine"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks._ContextManagerMixin"
        fully_qualified_name: "asyncio.locks._ContextManagerMixin"
      }
    }
    parameters {
      name: "exc_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "exc"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "tb"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    is_asynchronous: true
  }
}
classes {
  name: "Lock"
  fully_qualified_name: "asyncio.locks.Lock"
  super_classes: "asyncio.locks._ContextManagerMixin"
  methods {
    name: "__init__"
    fully_qualified_name: "asyncio.locks.Lock.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Lock"
        fully_qualified_name: "asyncio.locks.Lock"
      }
    }
    parameters {
      name: "loop"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[asyncio.events.AbstractEventLoop,None]"
        kind: UNION
        args {
          pretty_printed_name: "asyncio.events.AbstractEventLoop"
          fully_qualified_name: "asyncio.events.AbstractEventLoop"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "locked"
    fully_qualified_name: "asyncio.locks.Lock.locked"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Lock"
        fully_qualified_name: "asyncio.locks.Lock"
      }
    }
  }
  methods {
    name: "acquire"
    fully_qualified_name: "asyncio.locks.Lock.acquire"
    return_annotation {
      pretty_printed_name: "typing.Coroutine[Any,Any,Literal[builtins.bool]]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Literal[builtins.bool]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      fully_qualified_name: "typing.Coroutine"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Lock"
        fully_qualified_name: "asyncio.locks.Lock"
      }
    }
    is_asynchronous: true
  }
  methods {
    name: "release"
    fully_qualified_name: "asyncio.locks.Lock.release"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Lock"
        fully_qualified_name: "asyncio.locks.Lock"
      }
    }
  }
}
classes {
  name: "Event"
  fully_qualified_name: "asyncio.locks.Event"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "asyncio.locks.Event.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Event"
        fully_qualified_name: "asyncio.locks.Event"
      }
    }
    parameters {
      name: "loop"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[asyncio.events.AbstractEventLoop,None]"
        kind: UNION
        args {
          pretty_printed_name: "asyncio.events.AbstractEventLoop"
          fully_qualified_name: "asyncio.events.AbstractEventLoop"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "is_set"
    fully_qualified_name: "asyncio.locks.Event.is_set"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Event"
        fully_qualified_name: "asyncio.locks.Event"
      }
    }
  }
  methods {
    name: "set"
    fully_qualified_name: "asyncio.locks.Event.set"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Event"
        fully_qualified_name: "asyncio.locks.Event"
      }
    }
  }
  methods {
    name: "clear"
    fully_qualified_name: "asyncio.locks.Event.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Event"
        fully_qualified_name: "asyncio.locks.Event"
      }
    }
  }
  methods {
    name: "wait"
    fully_qualified_name: "asyncio.locks.Event.wait"
    return_annotation {
      pretty_printed_name: "typing.Coroutine[Any,Any,Literal[builtins.bool]]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Literal[builtins.bool]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      fully_qualified_name: "typing.Coroutine"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Event"
        fully_qualified_name: "asyncio.locks.Event"
      }
    }
    is_asynchronous: true
  }
}
classes {
  name: "Condition"
  fully_qualified_name: "asyncio.locks.Condition"
  super_classes: "asyncio.locks._ContextManagerMixin"
  methods {
    name: "__init__"
    fully_qualified_name: "asyncio.locks.Condition.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Condition"
        fully_qualified_name: "asyncio.locks.Condition"
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[asyncio.locks.Lock,None]"
        kind: UNION
        args {
          pretty_printed_name: "asyncio.locks.Lock"
          fully_qualified_name: "asyncio.locks.Lock"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "loop"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[asyncio.events.AbstractEventLoop,None]"
        kind: UNION
        args {
          pretty_printed_name: "asyncio.events.AbstractEventLoop"
          fully_qualified_name: "asyncio.events.AbstractEventLoop"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "locked"
    fully_qualified_name: "asyncio.locks.Condition.locked"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Condition"
        fully_qualified_name: "asyncio.locks.Condition"
      }
    }
  }
  methods {
    name: "acquire"
    fully_qualified_name: "asyncio.locks.Condition.acquire"
    return_annotation {
      pretty_printed_name: "typing.Coroutine[Any,Any,Literal[builtins.bool]]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Literal[builtins.bool]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      fully_qualified_name: "typing.Coroutine"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Condition"
        fully_qualified_name: "asyncio.locks.Condition"
      }
    }
    is_asynchronous: true
  }
  methods {
    name: "release"
    fully_qualified_name: "asyncio.locks.Condition.release"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Condition"
        fully_qualified_name: "asyncio.locks.Condition"
      }
    }
  }
  methods {
    name: "wait"
    fully_qualified_name: "asyncio.locks.Condition.wait"
    return_annotation {
      pretty_printed_name: "typing.Coroutine[Any,Any,Literal[builtins.bool]]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Literal[builtins.bool]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      fully_qualified_name: "typing.Coroutine"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Condition"
        fully_qualified_name: "asyncio.locks.Condition"
      }
    }
    is_asynchronous: true
  }
  methods {
    name: "wait_for"
    fully_qualified_name: "asyncio.locks.Condition.wait_for"
    return_annotation {
      pretty_printed_name: "typing.Coroutine[Any,Any,asyncio.locks._T]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "asyncio.locks._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Coroutine"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Condition"
        fully_qualified_name: "asyncio.locks.Condition"
      }
    }
    parameters {
      name: "predicate"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    is_asynchronous: true
  }
  methods {
    name: "notify"
    fully_qualified_name: "asyncio.locks.Condition.notify"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Condition"
        fully_qualified_name: "asyncio.locks.Condition"
      }
    }
    parameters {
      name: "n"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "notify_all"
    fully_qualified_name: "asyncio.locks.Condition.notify_all"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Condition"
        fully_qualified_name: "asyncio.locks.Condition"
      }
    }
  }
}
classes {
  name: "Semaphore"
  fully_qualified_name: "asyncio.locks.Semaphore"
  super_classes: "asyncio.locks._ContextManagerMixin"
  methods {
    name: "__init__"
    fully_qualified_name: "asyncio.locks.Semaphore.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Semaphore"
        fully_qualified_name: "asyncio.locks.Semaphore"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "loop"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[asyncio.events.AbstractEventLoop,None]"
        kind: UNION
        args {
          pretty_printed_name: "asyncio.events.AbstractEventLoop"
          fully_qualified_name: "asyncio.events.AbstractEventLoop"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "locked"
    fully_qualified_name: "asyncio.locks.Semaphore.locked"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Semaphore"
        fully_qualified_name: "asyncio.locks.Semaphore"
      }
    }
  }
  methods {
    name: "acquire"
    fully_qualified_name: "asyncio.locks.Semaphore.acquire"
    return_annotation {
      pretty_printed_name: "typing.Coroutine[Any,Any,Literal[builtins.bool]]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "Literal[builtins.bool]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
      fully_qualified_name: "typing.Coroutine"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Semaphore"
        fully_qualified_name: "asyncio.locks.Semaphore"
      }
    }
    is_asynchronous: true
  }
  methods {
    name: "release"
    fully_qualified_name: "asyncio.locks.Semaphore.release"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Semaphore"
        fully_qualified_name: "asyncio.locks.Semaphore"
      }
    }
  }
  methods {
    name: "_wake_up_next"
    fully_qualified_name: "asyncio.locks.Semaphore._wake_up_next"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "asyncio.locks.Semaphore"
        fully_qualified_name: "asyncio.locks.Semaphore"
      }
    }
  }
  attributes {
    name: "_value"
    fully_qualified_name: "asyncio.locks.Semaphore._value"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "_waiters"
    fully_qualified_name: "asyncio.locks.Semaphore._waiters"
    type_annotation {
      pretty_printed_name: "collections.deque[asyncio.futures.Future[Any]]"
      args {
        pretty_printed_name: "asyncio.futures.Future[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "asyncio.futures.Future"
      }
      fully_qualified_name: "collections.deque"
    }
  }
}
classes {
  name: "BoundedSemaphore"
  fully_qualified_name: "asyncio.locks.BoundedSemaphore"
  super_classes: "asyncio.locks.Semaphore"
}
vars {
  name: "__annotations__"
  fully_qualified_name: "asyncio.locks.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "__all__"
  fully_qualified_name: "asyncio.locks.__all__"
  type_annotation {
    pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]"
    kind: TUPLE
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
