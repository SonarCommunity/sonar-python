fully_qualified_name: "pathlib"
classes {
  name: "PurePath"
  fully_qualified_name: "pathlib.PurePath"
  super_classes: "os.PathLike"
  methods {
    name: "parts"
    fully_qualified_name: "pathlib.PurePath.parts"
    return_annotation {
      pretty_printed_name: "builtins.tuple[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "drive"
    fully_qualified_name: "pathlib.PurePath.drive"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "root"
    fully_qualified_name: "pathlib.PurePath.root"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "anchor"
    fully_qualified_name: "pathlib.PurePath.anchor"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "name"
    fully_qualified_name: "pathlib.PurePath.name"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "suffix"
    fully_qualified_name: "pathlib.PurePath.suffix"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "suffixes"
    fully_qualified_name: "pathlib.PurePath.suffixes"
    return_annotation {
      pretty_printed_name: "builtins.list[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "stem"
    fully_qualified_name: "pathlib.PurePath.stem"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__new__"
    fully_qualified_name: "pathlib.PurePath.__new__"
    return_annotation {
      pretty_printed_name: "pathlib.PurePath.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[pathlib.PurePath.Self]"
        kind: TYPE
        args {
          pretty_printed_name: "pathlib.PurePath.Self"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "pathlib.PurePath.__eq__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  methods {
    name: "__fspath__"
    fully_qualified_name: "pathlib.PurePath.__fspath__"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
  }
  methods {
    name: "__lt__"
    fully_qualified_name: "pathlib.PurePath.__lt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
  }
  methods {
    name: "__le__"
    fully_qualified_name: "pathlib.PurePath.__le__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
  }
  methods {
    name: "__gt__"
    fully_qualified_name: "pathlib.PurePath.__gt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
  }
  methods {
    name: "__ge__"
    fully_qualified_name: "pathlib.PurePath.__ge__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
  }
  methods {
    name: "__truediv__"
    fully_qualified_name: "pathlib.PurePath.__truediv__"
    return_annotation {
      pretty_printed_name: "pathlib.PurePath.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.PurePath.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
  }
  methods {
    name: "__rtruediv__"
    fully_qualified_name: "pathlib.PurePath.__rtruediv__"
    return_annotation {
      pretty_printed_name: "pathlib.PurePath.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.PurePath.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
  }
  methods {
    name: "__bytes__"
    fully_qualified_name: "pathlib.PurePath.__bytes__"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
  }
  methods {
    name: "as_posix"
    fully_qualified_name: "pathlib.PurePath.as_posix"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
  }
  methods {
    name: "as_uri"
    fully_qualified_name: "pathlib.PurePath.as_uri"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
  }
  methods {
    name: "is_absolute"
    fully_qualified_name: "pathlib.PurePath.is_absolute"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
  }
  methods {
    name: "is_reserved"
    fully_qualified_name: "pathlib.PurePath.is_reserved"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
  }
  methods {
    name: "match"
    fully_qualified_name: "pathlib.PurePath.match"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath"
        fully_qualified_name: "pathlib.PurePath"
      }
    }
    parameters {
      name: "path_pattern"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "relative_to"
    fully_qualified_name: "pathlib.PurePath.relative_to"
    return_annotation {
      pretty_printed_name: "pathlib.PurePath.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
  }
  methods {
    name: "with_name"
    fully_qualified_name: "pathlib.PurePath.with_name"
    return_annotation {
      pretty_printed_name: "pathlib.PurePath.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "with_suffix"
    fully_qualified_name: "pathlib.PurePath.with_suffix"
    return_annotation {
      pretty_printed_name: "pathlib.PurePath.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "suffix"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "joinpath"
    fully_qualified_name: "pathlib.PurePath.joinpath"
    return_annotation {
      pretty_printed_name: "pathlib.PurePath.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
  }
  methods {
    name: "parents"
    fully_qualified_name: "pathlib.PurePath.parents"
    return_annotation {
      pretty_printed_name: "typing.Sequence[pathlib.PurePath.Self]"
      args {
        pretty_printed_name: "pathlib.PurePath.Self"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Sequence"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath.Self"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "parent"
    fully_qualified_name: "pathlib.PurePath.parent"
    return_annotation {
      pretty_printed_name: "pathlib.PurePath.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.PurePath.Self"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
}
classes {
  name: "PurePosixPath"
  fully_qualified_name: "pathlib.PurePosixPath"
  super_classes: "pathlib.PurePath"
}
classes {
  name: "PureWindowsPath"
  fully_qualified_name: "pathlib.PureWindowsPath"
  super_classes: "pathlib.PurePath"
}
classes {
  name: "Path"
  fully_qualified_name: "pathlib.Path"
  super_classes: "pathlib.PurePath"
  methods {
    name: "__new__"
    fully_qualified_name: "pathlib.Path.__new__"
    return_annotation {
      pretty_printed_name: "pathlib.Path.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[pathlib.Path.Self]"
        kind: TYPE
        args {
          pretty_printed_name: "pathlib.Path.Self"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "pathlib.Path.__enter__"
    return_annotation {
      pretty_printed_name: "pathlib.Path.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.Path.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "pathlib.Path.__exit__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "cwd"
    fully_qualified_name: "pathlib.Path.cwd"
    return_annotation {
      pretty_printed_name: "pathlib.Path.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[pathlib.Path.Self]"
        kind: TYPE
        args {
          pretty_printed_name: "pathlib.Path.Self"
          kind: TYPE_VAR
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  methods {
    name: "stat"
    fully_qualified_name: "pathlib.Path.stat"
    return_annotation {
      pretty_printed_name: "TypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.float,builtins.float]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.float,builtins.float]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      fully_qualified_name: "os.stat_result"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "chmod"
    fully_qualified_name: "pathlib.Path.chmod"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "exists"
    fully_qualified_name: "pathlib.Path.exists"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "glob"
    fully_qualified_name: "pathlib.Path.glob"
    return_annotation {
      pretty_printed_name: "typing.Generator[pathlib.Path.Self,None,None]"
      args {
        pretty_printed_name: "pathlib.Path.Self"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "pattern"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "is_dir"
    fully_qualified_name: "pathlib.Path.is_dir"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "is_file"
    fully_qualified_name: "pathlib.Path.is_file"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "is_symlink"
    fully_qualified_name: "pathlib.Path.is_symlink"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "is_socket"
    fully_qualified_name: "pathlib.Path.is_socket"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "is_fifo"
    fully_qualified_name: "pathlib.Path.is_fifo"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "is_block_device"
    fully_qualified_name: "pathlib.Path.is_block_device"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "is_char_device"
    fully_qualified_name: "pathlib.Path.is_char_device"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "iterdir"
    fully_qualified_name: "pathlib.Path.iterdir"
    return_annotation {
      pretty_printed_name: "typing.Generator[pathlib.Path.Self,None,None]"
      args {
        pretty_printed_name: "pathlib.Path.Self"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "lchmod"
    fully_qualified_name: "pathlib.Path.lchmod"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "lstat"
    fully_qualified_name: "pathlib.Path.lstat"
    return_annotation {
      pretty_printed_name: "TypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.float,builtins.float]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.float,builtins.float]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
      }
      fully_qualified_name: "os.stat_result"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "mkdir"
    fully_qualified_name: "pathlib.Path.mkdir"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "parents"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "exist_ok"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "owner"
    fully_qualified_name: "pathlib.Path.owner"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "group"
    fully_qualified_name: "pathlib.Path.group"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "is_mount"
    fully_qualified_name: "pathlib.Path.is_mount"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "rename"
    fully_qualified_name: "pathlib.Path.rename"
    return_annotation {
      pretty_printed_name: "pathlib.Path.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "target"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,pathlib.PurePath]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "pathlib.PurePath"
          fully_qualified_name: "pathlib.PurePath"
        }
      }
    }
  }
  methods {
    name: "replace"
    fully_qualified_name: "pathlib.Path.replace"
    return_annotation {
      pretty_printed_name: "pathlib.Path.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "target"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,pathlib.PurePath]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "pathlib.PurePath"
          fully_qualified_name: "pathlib.PurePath"
        }
      }
    }
  }
  methods {
    name: "resolve"
    fully_qualified_name: "pathlib.Path.resolve"
    return_annotation {
      pretty_printed_name: "pathlib.Path.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "strict"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "rglob"
    fully_qualified_name: "pathlib.Path.rglob"
    return_annotation {
      pretty_printed_name: "typing.Generator[pathlib.Path.Self,None,None]"
      args {
        pretty_printed_name: "pathlib.Path.Self"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "pattern"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "rmdir"
    fully_qualified_name: "pathlib.Path.rmdir"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "symlink_to"
    fully_qualified_name: "pathlib.Path.symlink_to"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
    parameters {
      name: "target"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,pathlib.Path]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "pathlib.Path"
          fully_qualified_name: "pathlib.Path"
        }
      }
    }
    parameters {
      name: "target_is_directory"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "touch"
    fully_qualified_name: "pathlib.Path.touch"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "exist_ok"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "unlink"
    fully_qualified_name: "pathlib.Path.unlink"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
    parameters {
      name: "missing_ok"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "home"
    fully_qualified_name: "pathlib.Path.home"
    return_annotation {
      pretty_printed_name: "pathlib.Path.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[pathlib.Path.Self]"
        kind: TYPE
        args {
          pretty_printed_name: "pathlib.Path.Self"
          kind: TYPE_VAR
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  methods {
    name: "absolute"
    fully_qualified_name: "pathlib.Path.absolute"
    return_annotation {
      pretty_printed_name: "pathlib.Path.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "expanduser"
    fully_qualified_name: "pathlib.Path.expanduser"
    return_annotation {
      pretty_printed_name: "pathlib.Path.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "read_bytes"
    fully_qualified_name: "pathlib.Path.read_bytes"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
  }
  methods {
    name: "read_text"
    fully_qualified_name: "pathlib.Path.read_text"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "samefile"
    fully_qualified_name: "pathlib.Path.samefile"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
    parameters {
      name: "other_path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
  }
  methods {
    name: "write_bytes"
    fully_qualified_name: "pathlib.Path.write_bytes"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytearray"
                fully_qualified_name: "builtins.bytearray"
              }
              args {
                pretty_printed_name: "builtins.memoryview"
                fully_qualified_name: "builtins.memoryview"
              }
              args {
                pretty_printed_name: "array.array[Any]"
                args {
                  pretty_printed_name: "Any"
                  kind: ANY
                }
                fully_qualified_name: "array.array"
              }
              args {
                pretty_printed_name: "mmap.mmap"
                fully_qualified_name: "mmap.mmap"
              }
              args {
                pretty_printed_name: "ctypes._CData"
                fully_qualified_name: "ctypes._CData"
              }
              args {
                pretty_printed_name: "pickle.PickleBuffer"
                fully_qualified_name: "pickle.PickleBuffer"
              }
            }
            fully_qualified_name: "_typeshed.WriteableBuffer"
          }
        }
        fully_qualified_name: "_typeshed.ReadableBuffer"
      }
    }
  }
  methods {
    name: "write_text"
    fully_qualified_name: "pathlib.Path.write_text"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "link_to"
    fully_qualified_name: "pathlib.Path.link_to"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "pathlib.Path"
        fully_qualified_name: "pathlib.Path"
      }
    }
    parameters {
      name: "target"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrOrBytesPath"
      }
    }
  }
  overloaded_methods {
    name: "open"
    fullname: "pathlib.Path.open"
    definitions {
      name: "open"
      fully_qualified_name: "pathlib.Path.open"
      return_annotation {
        pretty_printed_name: "io.TextIOWrapper"
        fully_qualified_name: "io.TextIOWrapper"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "pathlib.Path"
          fully_qualified_name: "pathlib.Path"
        }
      }
      parameters {
        name: "mode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]]"
            kind: UNION
            args {
              pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
                kind: UNION
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
              }
              fully_qualified_name: "_typeshed.OpenTextModeUpdating"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
                kind: UNION
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
              }
              fully_qualified_name: "_typeshed.OpenTextModeWriting"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
                kind: UNION
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
              }
              fully_qualified_name: "_typeshed.OpenTextModeReading"
            }
          }
          fully_qualified_name: "_typeshed.OpenTextMode"
        }
      }
      parameters {
        name: "buffering"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "encoding"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "errors"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "newline"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "open"
      fully_qualified_name: "pathlib.Path.open"
      return_annotation {
        pretty_printed_name: "io.FileIO"
        fully_qualified_name: "io.FileIO"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "pathlib.Path"
          fully_qualified_name: "pathlib.Path"
        }
      }
      parameters {
        name: "mode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]]"
            kind: UNION
            args {
              pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
                kind: UNION
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
              }
              fully_qualified_name: "_typeshed.OpenBinaryModeUpdating"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
                kind: UNION
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
              }
              fully_qualified_name: "_typeshed.OpenBinaryModeReading"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
                kind: UNION
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
              }
              fully_qualified_name: "_typeshed.OpenBinaryModeWriting"
            }
          }
          fully_qualified_name: "_typeshed.OpenBinaryMode"
        }
      }
      parameters {
        name: "buffering"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      parameters {
        name: "encoding"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "errors"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "newline"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "open"
      fully_qualified_name: "pathlib.Path.open"
      return_annotation {
        pretty_printed_name: "io.BufferedRandom"
        fully_qualified_name: "io.BufferedRandom"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "pathlib.Path"
          fully_qualified_name: "pathlib.Path"
        }
      }
      parameters {
        name: "mode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
            kind: UNION
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
          }
          fully_qualified_name: "_typeshed.OpenBinaryModeUpdating"
        }
      }
      parameters {
        name: "buffering"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.int],Literal[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.int]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.int]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
          }
        }
      }
      parameters {
        name: "encoding"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "errors"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "newline"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "open"
      fully_qualified_name: "pathlib.Path.open"
      return_annotation {
        pretty_printed_name: "io.BufferedWriter"
        fully_qualified_name: "io.BufferedWriter"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "pathlib.Path"
          fully_qualified_name: "pathlib.Path"
        }
      }
      parameters {
        name: "mode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
            kind: UNION
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
          }
          fully_qualified_name: "_typeshed.OpenBinaryModeWriting"
        }
      }
      parameters {
        name: "buffering"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.int],Literal[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.int]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.int]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
          }
        }
      }
      parameters {
        name: "encoding"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "errors"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "newline"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "open"
      fully_qualified_name: "pathlib.Path.open"
      return_annotation {
        pretty_printed_name: "io.BufferedReader"
        fully_qualified_name: "io.BufferedReader"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "pathlib.Path"
          fully_qualified_name: "pathlib.Path"
        }
      }
      parameters {
        name: "mode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
            kind: UNION
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
            args {
              pretty_printed_name: "Literal[builtins.str]"
              kind: LITERAL
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
            }
          }
          fully_qualified_name: "_typeshed.OpenBinaryModeReading"
        }
      }
      parameters {
        name: "buffering"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[Literal[builtins.int],Literal[builtins.int]]"
          kind: UNION
          args {
            pretty_printed_name: "Literal[builtins.int]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
          }
          args {
            pretty_printed_name: "Literal[builtins.int]"
            kind: LITERAL
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
          }
        }
      }
      parameters {
        name: "encoding"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "errors"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "newline"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "open"
      fully_qualified_name: "pathlib.Path.open"
      return_annotation {
        pretty_printed_name: "typing.BinaryIO"
        fully_qualified_name: "typing.BinaryIO"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "pathlib.Path"
          fully_qualified_name: "pathlib.Path"
        }
      }
      parameters {
        name: "mode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]]"
            kind: UNION
            args {
              pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
                kind: UNION
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
              }
              fully_qualified_name: "_typeshed.OpenBinaryModeUpdating"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
                kind: UNION
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
              }
              fully_qualified_name: "_typeshed.OpenBinaryModeReading"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]"
                kind: UNION
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
                args {
                  pretty_printed_name: "Literal[builtins.str]"
                  kind: LITERAL
                  args {
                    pretty_printed_name: "builtins.str"
                    fully_qualified_name: "builtins.str"
                  }
                }
              }
              fully_qualified_name: "_typeshed.OpenBinaryModeWriting"
            }
          }
          fully_qualified_name: "_typeshed.OpenBinaryMode"
        }
      }
      parameters {
        name: "buffering"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "encoding"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "errors"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "newline"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "open"
      fully_qualified_name: "pathlib.Path.open"
      return_annotation {
        pretty_printed_name: "typing.IO[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.IO"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "pathlib.Path"
          fully_qualified_name: "pathlib.Path"
        }
      }
      parameters {
        name: "mode"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "buffering"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "encoding"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "errors"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      parameters {
        name: "newline"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,None]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
}
classes {
  name: "PosixPath"
  fully_qualified_name: "pathlib.PosixPath"
  super_classes: "pathlib.Path"
  super_classes: "pathlib.PurePosixPath"
}
classes {
  name: "WindowsPath"
  fully_qualified_name: "pathlib.WindowsPath"
  super_classes: "pathlib.Path"
  super_classes: "pathlib.PureWindowsPath"
}
vars {
  name: "__annotations__"
  fully_qualified_name: "pathlib.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "__all__"
  fully_qualified_name: "pathlib.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
}
