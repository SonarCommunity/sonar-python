fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec"
classes {
  name: "EllipticCurveOID"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID"
  super_classes: "builtins.object"
  attributes {
    name: "SECP192R1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECP192R1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECP224R1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECP224R1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECP256K1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECP256K1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECP256R1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECP256R1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECP384R1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECP384R1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECP521R1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECP521R1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "BRAINPOOLP256R1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.BRAINPOOLP256R1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "BRAINPOOLP384R1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.BRAINPOOLP384R1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "BRAINPOOLP512R1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.BRAINPOOLP512R1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECT163K1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECT163K1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECT163R2"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECT163R2"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECT233K1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECT233K1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECT233R1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECT233R1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECT283K1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECT283K1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECT283R1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECT283R1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECT409K1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECT409K1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECT409R1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECT409R1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECT571K1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECT571K1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
  attributes {
    name: "SECT571R1"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID.SECT571R1"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
}
classes {
  name: "EllipticCurve"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  super_classes: "builtins.object"
  methods {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve.name"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractproperty"
    is_property: true
  }
  methods {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve.key_size"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractproperty"
    is_property: true
  }
  has_metaclass: true
}
classes {
  name: "EllipticCurveSignatureAlgorithm"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm"
  super_classes: "builtins.object"
  methods {
    name: "algorithm"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm.algorithm"
    return_annotation {
      pretty_printed_name: "Union[cryptography.hazmat.primitives.asymmetric.utils.Prehashed,cryptography.hazmat.primitives.hashes.HashAlgorithm]"
      kind: UNION
      args {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.utils.Prehashed"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.utils.Prehashed"
      }
      args {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractproperty"
    is_property: true
  }
  has_metaclass: true
}
classes {
  name: "EllipticCurvePrivateKey"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
  super_classes: "builtins.object"
  methods {
    name: "signer"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.signer"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.AsymmetricSignatureContext"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.AsymmetricSignatureContext"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
      }
    }
    parameters {
      name: "signature_algorithm"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  methods {
    name: "exchange"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.exchange"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
      }
    }
    parameters {
      name: "algorithm"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.ECDH"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.ECDH"
      }
    }
    parameters {
      name: "peer_public_key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  methods {
    name: "public_key"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.public_key"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  methods {
    name: "curve"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.curve"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractproperty"
    is_property: true
  }
  methods {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.key_size"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractproperty"
    is_property: true
  }
  methods {
    name: "sign"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.sign"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "signature_algorithm"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  methods {
    name: "private_numbers"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.private_numbers"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  methods {
    name: "private_bytes"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.private_bytes"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives._serialization.Encoding"
        fully_qualified_name: "cryptography.hazmat.primitives._serialization.Encoding"
      }
    }
    parameters {
      name: "format"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives._serialization.PrivateFormat"
        fully_qualified_name: "cryptography.hazmat.primitives._serialization.PrivateFormat"
      }
    }
    parameters {
      name: "encryption_algorithm"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives._serialization.KeySerializationEncryption"
        fully_qualified_name: "cryptography.hazmat.primitives._serialization.KeySerializationEncryption"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  has_metaclass: true
}
classes {
  name: "EllipticCurvePublicKey"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
  super_classes: "builtins.object"
  methods {
    name: "verifier"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.verifier"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.AsymmetricVerificationContext"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.AsymmetricVerificationContext"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
      }
    }
    parameters {
      name: "signature"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "signature_algorithm"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  methods {
    name: "curve"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.curve"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractproperty"
    is_property: true
  }
  methods {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.key_size"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractproperty"
    is_property: true
  }
  methods {
    name: "public_numbers"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.public_numbers"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  methods {
    name: "public_bytes"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.public_bytes"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives._serialization.Encoding"
        fully_qualified_name: "cryptography.hazmat.primitives._serialization.Encoding"
      }
    }
    parameters {
      name: "format"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives._serialization.PublicFormat"
        fully_qualified_name: "cryptography.hazmat.primitives._serialization.PublicFormat"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  methods {
    name: "verify"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.verify"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
      }
    }
    parameters {
      name: "signature"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "signature_algorithm"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  methods {
    name: "from_encoded_point"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.from_encoded_point"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey]"
        kind: TYPE
        args {
          pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
          fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
        }
      }
    }
    parameters {
      name: "curve"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  has_metaclass: true
}
classes {
  name: "SECT571R1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECT409R1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECT283R1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECT233R1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECT163R2"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECT571K1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECT409K1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECT283K1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECT233K1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECT163K1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECP521R1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECP384R1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECP256R1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECP256K1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECP224R1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "SECP192R1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "BrainpoolP256R1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "BrainpoolP384R1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "BrainpoolP512R1"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
  attributes {
    name: "name"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1.name"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "key_size"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1.key_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "ECDSA"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.ECDSA"
  super_classes: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm"
  methods {
    name: "__init__"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.ECDSA.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.ECDSA"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.ECDSA"
      }
    }
    parameters {
      name: "algorithm"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[cryptography.hazmat.primitives.asymmetric.utils.Prehashed,cryptography.hazmat.primitives.hashes.HashAlgorithm]"
        kind: UNION
        args {
          pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.utils.Prehashed"
          fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.utils.Prehashed"
        }
        args {
          pretty_printed_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
          fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
        }
      }
    }
  }
  methods {
    name: "algorithm"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.ECDSA.algorithm"
    return_annotation {
      pretty_printed_name: "Union[cryptography.hazmat.primitives.asymmetric.utils.Prehashed,cryptography.hazmat.primitives.hashes.HashAlgorithm]"
      kind: UNION
      args {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.utils.Prehashed"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.utils.Prehashed"
      }
      args {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.ECDSA"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.ECDSA"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  attributes {
    name: "_algorithm"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.ECDSA._algorithm"
    type_annotation {
      pretty_printed_name: "Union[cryptography.hazmat.primitives.asymmetric.utils.Prehashed,cryptography.hazmat.primitives.hashes.HashAlgorithm]"
      kind: UNION
      args {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.utils.Prehashed"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.utils.Prehashed"
      }
      args {
        pretty_printed_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
        fully_qualified_name: "cryptography.hazmat.primitives.hashes.HashAlgorithm"
      }
    }
  }
}
classes {
  name: "EllipticCurvePublicNumbers"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
      }
    }
    parameters {
      name: "x"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "y"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "curve"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      }
    }
  }
  methods {
    name: "public_key"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.public_key"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
      }
    }
    parameters {
      name: "backend"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  methods {
    name: "encode_point"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.encode_point"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
      }
    }
  }
  methods {
    name: "from_encoded_point"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.from_encoded_point"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers]"
        kind: TYPE
        args {
          pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
          fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
        }
      }
    }
    parameters {
      name: "curve"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__eq__"
    parameters {
      name: "__"
    }
    parameters {
      name: "__"
    }
  }
  methods {
    name: "__ne__"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__ne__"
    parameters {
      name: "__"
    }
    parameters {
      name: "__"
    }
  }
  methods {
    name: "__hash__"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__hash__"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  methods {
    name: "__repr__"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__repr__"
    parameters {
      name: "__"
    }
  }
  attributes {
    name: "curve"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.curve"
    type_annotation {
      pretty_printed_name: "builtins.property"
      fully_qualified_name: "builtins.property"
    }
  }
  attributes {
    name: "x"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.x"
    type_annotation {
      pretty_printed_name: "builtins.property"
      fully_qualified_name: "builtins.property"
    }
  }
  attributes {
    name: "y"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.y"
    type_annotation {
      pretty_printed_name: "builtins.property"
      fully_qualified_name: "builtins.property"
    }
  }
  attributes {
    name: "_y"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers._y"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "_x"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers._x"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "_curve"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers._curve"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
    }
  }
}
classes {
  name: "EllipticCurvePrivateNumbers"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers"
      }
    }
    parameters {
      name: "private_value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "public_numbers"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
      }
    }
  }
  methods {
    name: "private_key"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.private_key"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers"
      }
    }
    parameters {
      name: "backend"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.__eq__"
    parameters {
      name: "__"
    }
    parameters {
      name: "__"
    }
  }
  methods {
    name: "__ne__"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.__ne__"
    parameters {
      name: "__"
    }
    parameters {
      name: "__"
    }
  }
  methods {
    name: "__hash__"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.__hash__"
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
    }
  }
  attributes {
    name: "private_value"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.private_value"
    type_annotation {
      pretty_printed_name: "builtins.property"
      fully_qualified_name: "builtins.property"
    }
  }
  attributes {
    name: "public_numbers"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.public_numbers"
    type_annotation {
      pretty_printed_name: "builtins.property"
      fully_qualified_name: "builtins.property"
    }
  }
  attributes {
    name: "_private_value"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers._private_value"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "_public_numbers"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers._public_numbers"
    type_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"
    }
  }
}
classes {
  name: "ECDH"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.ECDH"
  super_classes: "builtins.object"
}
functions {
  name: "generate_private_key"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.generate_private_key"
  return_annotation {
    pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
  }
  parameters {
    name: "curve"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
    }
  }
  parameters {
    name: "backend"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
}
functions {
  name: "derive_private_key"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.derive_private_key"
  return_annotation {
    pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
  }
  parameters {
    name: "private_value"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "curve"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
    }
  }
  parameters {
    name: "backend"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
}
functions {
  name: "get_curve_for_oid"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.get_curve_for_oid"
  return_annotation {
    pretty_printed_name: "Type[cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve]"
    kind: TYPE
    args {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
    }
  }
  parameters {
    name: "oid"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "asym_utils"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.utils"
  is_imported_module: true
}
vars {
  name: "_CURVE_TYPES"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec._CURVE_TYPES"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Type[cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve]]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Type[cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve]"
      kind: TYPE
      args {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve"
      }
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "_OID_TO_CURVE"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.ec._OID_TO_CURVE"
  type_annotation {
    pretty_printed_name: "builtins.dict[cryptography.hazmat._oid.ObjectIdentifier,CallableType[abc.ABCMeta]]"
    args {
      pretty_printed_name: "cryptography.hazmat._oid.ObjectIdentifier"
      fully_qualified_name: "cryptography.hazmat._oid.ObjectIdentifier"
    }
    args {
      pretty_printed_name: "CallableType[abc.ABCMeta]"
      kind: CALLABLE
      args {
        pretty_printed_name: "abc.ABCMeta"
        fully_qualified_name: "abc.ABCMeta"
      }
    }
    fully_qualified_name: "builtins.dict"
  }
}
