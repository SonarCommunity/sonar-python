fully_qualified_name: "werkzeug.formparser"
classes {
  name: "TStreamFactory"
  fully_qualified_name: "werkzeug.formparser.TStreamFactory"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "werkzeug.formparser.TStreamFactory.__call__"
    return_annotation {
      pretty_printed_name: "typing.IO[builtins.bytes]"
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      fully_qualified_name: "typing.IO"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.formparser.TStreamFactory"
        fully_qualified_name: "werkzeug.formparser.TStreamFactory"
      }
    }
    parameters {
      name: "total_content_length"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "content_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "filename"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "content_length"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  is_protocol: true
}
classes {
  name: "FormDataParser"
  fully_qualified_name: "werkzeug.formparser.FormDataParser"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.formparser.FormDataParser"
        fully_qualified_name: "werkzeug.formparser.FormDataParser"
      }
    }
    parameters {
      name: "stream_factory"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[werkzeug.formparser.TStreamFactory,None]"
        kind: UNION
        args {
          pretty_printed_name: "werkzeug.formparser.TStreamFactory"
          fully_qualified_name: "werkzeug.formparser.TStreamFactory"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "charset"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "max_form_memory_size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "max_content_length"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[werkzeug.datastructures.structures.MultiDict[Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[werkzeug.datastructures.structures.MultiDict[Any,Any]]"
          kind: TYPE
          args {
            pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "silent"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "max_form_parts"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "get_parse_func"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.get_parse_func"
    return_annotation {
      pretty_printed_name: "Union[None,CallableType[builtins.function]]"
      kind: UNION
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.formparser.FormDataParser"
        fully_qualified_name: "werkzeug.formparser.FormDataParser"
      }
    }
    parameters {
      name: "mimetype"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.dict"
      }
    }
  }
  methods {
    name: "parse_from_environ"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.parse_from_environ"
    return_annotation {
      pretty_printed_name: "TypeAlias[Tuple[typing.IO[builtins.bytes],werkzeug.datastructures.structures.MultiDict[Any,Any],werkzeug.datastructures.structures.MultiDict[Any,Any]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[typing.IO[builtins.bytes],werkzeug.datastructures.structures.MultiDict[Any,Any],werkzeug.datastructures.structures.MultiDict[Any,Any]]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing.IO[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "typing.IO"
        }
        args {
          pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
        }
        args {
          pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
        }
      }
      fully_qualified_name: "werkzeug.formparser.t_parse_result"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.formparser.FormDataParser"
        fully_qualified_name: "werkzeug.formparser.FormDataParser"
      }
    }
    parameters {
      name: "environ"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[builtins.dict[builtins.str,Any]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        fully_qualified_name: "_typeshed.wsgi.WSGIEnvironment"
      }
    }
  }
  methods {
    name: "parse"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.parse"
    return_annotation {
      pretty_printed_name: "TypeAlias[Tuple[typing.IO[builtins.bytes],werkzeug.datastructures.structures.MultiDict[Any,Any],werkzeug.datastructures.structures.MultiDict[Any,Any]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[typing.IO[builtins.bytes],werkzeug.datastructures.structures.MultiDict[Any,Any],werkzeug.datastructures.structures.MultiDict[Any,Any]]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing.IO[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "typing.IO"
        }
        args {
          pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
        }
        args {
          pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
        }
      }
      fully_qualified_name: "werkzeug.formparser.t_parse_result"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.formparser.FormDataParser"
        fully_qualified_name: "werkzeug.formparser.FormDataParser"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[builtins.bytes]"
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        fully_qualified_name: "typing.IO"
      }
    }
    parameters {
      name: "mimetype"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "content_length"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "_parse_multipart"
    fully_qualified_name: "werkzeug.formparser.FormDataParser._parse_multipart"
    return_annotation {
      pretty_printed_name: "TypeAlias[Tuple[typing.IO[builtins.bytes],werkzeug.datastructures.structures.MultiDict[Any,Any],werkzeug.datastructures.structures.MultiDict[Any,Any]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[typing.IO[builtins.bytes],werkzeug.datastructures.structures.MultiDict[Any,Any],werkzeug.datastructures.structures.MultiDict[Any,Any]]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing.IO[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "typing.IO"
        }
        args {
          pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
        }
        args {
          pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
        }
      }
      fully_qualified_name: "werkzeug.formparser.t_parse_result"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.formparser.FormDataParser"
        fully_qualified_name: "werkzeug.formparser.FormDataParser"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[builtins.bytes]"
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        fully_qualified_name: "typing.IO"
      }
    }
    parameters {
      name: "mimetype"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "content_length"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.dict"
      }
    }
  }
  methods {
    name: "_parse_urlencoded"
    fully_qualified_name: "werkzeug.formparser.FormDataParser._parse_urlencoded"
    return_annotation {
      pretty_printed_name: "TypeAlias[Tuple[typing.IO[builtins.bytes],werkzeug.datastructures.structures.MultiDict[Any,Any],werkzeug.datastructures.structures.MultiDict[Any,Any]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[typing.IO[builtins.bytes],werkzeug.datastructures.structures.MultiDict[Any,Any],werkzeug.datastructures.structures.MultiDict[Any,Any]]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing.IO[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "typing.IO"
        }
        args {
          pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
        }
        args {
          pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
        }
      }
      fully_qualified_name: "werkzeug.formparser.t_parse_result"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.formparser.FormDataParser"
        fully_qualified_name: "werkzeug.formparser.FormDataParser"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[builtins.bytes]"
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        fully_qualified_name: "typing.IO"
      }
    }
    parameters {
      name: "mimetype"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "content_length"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "options"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.dict"
      }
    }
  }
  attributes {
    name: "parse_functions"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.parse_functions"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,CallableType[builtins.function]]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "stream_factory"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.stream_factory"
    type_annotation {
      pretty_printed_name: "werkzeug.formparser.TStreamFactory"
      fully_qualified_name: "werkzeug.formparser.TStreamFactory"
    }
  }
  attributes {
    name: "charset"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.charset"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "errors"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.errors"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "max_form_memory_size"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.max_form_memory_size"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "max_content_length"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.max_content_length"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "max_form_parts"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.max_form_parts"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "cls"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.cls"
    type_annotation {
      pretty_printed_name: "Type[werkzeug.datastructures.structures.MultiDict[Any,Any]]"
      kind: TYPE
      args {
        pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
      }
    }
  }
  attributes {
    name: "silent"
    fully_qualified_name: "werkzeug.formparser.FormDataParser.silent"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
classes {
  name: "MultiPartParser"
  fully_qualified_name: "werkzeug.formparser.MultiPartParser"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "werkzeug.formparser.MultiPartParser.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.formparser.MultiPartParser"
        fully_qualified_name: "werkzeug.formparser.MultiPartParser"
      }
    }
    parameters {
      name: "stream_factory"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[werkzeug.formparser.TStreamFactory,None]"
        kind: UNION
        args {
          pretty_printed_name: "werkzeug.formparser.TStreamFactory"
          fully_qualified_name: "werkzeug.formparser.TStreamFactory"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "charset"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "max_form_memory_size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[werkzeug.datastructures.structures.MultiDict[Any,Any]],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[werkzeug.datastructures.structures.MultiDict[Any,Any]]"
          kind: TYPE
          args {
            pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "buffer_size"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "max_form_parts"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "fail"
    fully_qualified_name: "werkzeug.formparser.MultiPartParser.fail"
    return_annotation {
      pretty_printed_name: "NoReturn"
      kind: UNINHABITED
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.formparser.MultiPartParser"
        fully_qualified_name: "werkzeug.formparser.MultiPartParser"
      }
    }
    parameters {
      name: "message"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "get_part_charset"
    fully_qualified_name: "werkzeug.formparser.MultiPartParser.get_part_charset"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.formparser.MultiPartParser"
        fully_qualified_name: "werkzeug.formparser.MultiPartParser"
      }
    }
    parameters {
      name: "headers"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.datastructures.headers.Headers"
        fully_qualified_name: "werkzeug.datastructures.headers.Headers"
      }
    }
  }
  methods {
    name: "start_file_streaming"
    fully_qualified_name: "werkzeug.formparser.MultiPartParser.start_file_streaming"
    return_annotation {
      pretty_printed_name: "typing.IO[builtins.bytes]"
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      fully_qualified_name: "typing.IO"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.formparser.MultiPartParser"
        fully_qualified_name: "werkzeug.formparser.MultiPartParser"
      }
    }
    parameters {
      name: "event"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.sansio.multipart.File"
        fully_qualified_name: "werkzeug.sansio.multipart.File"
      }
    }
    parameters {
      name: "total_content_length"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "parse"
    fully_qualified_name: "werkzeug.formparser.MultiPartParser.parse"
    return_annotation {
      pretty_printed_name: "Tuple[werkzeug.datastructures.structures.MultiDict[Any,Any],werkzeug.datastructures.structures.MultiDict[Any,Any]]"
      kind: TUPLE
      args {
        pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
      }
      args {
        pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "werkzeug.formparser.MultiPartParser"
        fully_qualified_name: "werkzeug.formparser.MultiPartParser"
      }
    }
    parameters {
      name: "stream"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[builtins.bytes]"
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        fully_qualified_name: "typing.IO"
      }
    }
    parameters {
      name: "boundary"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "content_length"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  attributes {
    name: "charset"
    fully_qualified_name: "werkzeug.formparser.MultiPartParser.charset"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "errors"
    fully_qualified_name: "werkzeug.formparser.MultiPartParser.errors"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "max_form_memory_size"
    fully_qualified_name: "werkzeug.formparser.MultiPartParser.max_form_memory_size"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "max_form_parts"
    fully_qualified_name: "werkzeug.formparser.MultiPartParser.max_form_parts"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "stream_factory"
    fully_qualified_name: "werkzeug.formparser.MultiPartParser.stream_factory"
    type_annotation {
      pretty_printed_name: "werkzeug.formparser.TStreamFactory"
      fully_qualified_name: "werkzeug.formparser.TStreamFactory"
    }
  }
  attributes {
    name: "cls"
    fully_qualified_name: "werkzeug.formparser.MultiPartParser.cls"
    type_annotation {
      pretty_printed_name: "Type[werkzeug.datastructures.structures.MultiDict[Any,Any]]"
      kind: TYPE
      args {
        pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
      }
    }
  }
  attributes {
    name: "buffer_size"
    fully_qualified_name: "werkzeug.formparser.MultiPartParser.buffer_size"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
functions {
  name: "default_stream_factory"
  fully_qualified_name: "werkzeug.formparser.default_stream_factory"
  return_annotation {
    pretty_printed_name: "typing.IO[builtins.bytes]"
    args {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    fully_qualified_name: "typing.IO"
  }
  parameters {
    name: "total_content_length"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "content_type"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "filename"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "content_length"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "parse_form_data"
  fully_qualified_name: "werkzeug.formparser.parse_form_data"
  return_annotation {
    pretty_printed_name: "TypeAlias[Tuple[typing.IO[builtins.bytes],werkzeug.datastructures.structures.MultiDict[Any,Any],werkzeug.datastructures.structures.MultiDict[Any,Any]]]"
    kind: TYPE_ALIAS
    args {
      pretty_printed_name: "Tuple[typing.IO[builtins.bytes],werkzeug.datastructures.structures.MultiDict[Any,Any],werkzeug.datastructures.structures.MultiDict[Any,Any]]"
      kind: TUPLE
      args {
        pretty_printed_name: "typing.IO[builtins.bytes]"
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        fully_qualified_name: "typing.IO"
      }
      args {
        pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
      }
      args {
        pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
      }
    }
    fully_qualified_name: "werkzeug.formparser.t_parse_result"
  }
  parameters {
    name: "environ"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[builtins.dict[builtins.str,Any]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      fully_qualified_name: "_typeshed.wsgi.WSGIEnvironment"
    }
  }
  parameters {
    name: "stream_factory"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[werkzeug.formparser.TStreamFactory,None]"
      kind: UNION
      args {
        pretty_printed_name: "werkzeug.formparser.TStreamFactory"
        fully_qualified_name: "werkzeug.formparser.TStreamFactory"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "charset"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "errors"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "max_form_memory_size"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "max_content_length"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "cls"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[Type[werkzeug.datastructures.structures.MultiDict[Any,Any]],None]"
      kind: UNION
      args {
        pretty_printed_name: "Type[werkzeug.datastructures.structures.MultiDict[Any,Any]]"
        kind: TYPE
        args {
          pretty_printed_name: "werkzeug.datastructures.structures.MultiDict[Any,Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "werkzeug.datastructures.structures.MultiDict"
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "silent"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  parameters {
    name: "max_form_parts"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "_chunk_iter"
  fully_qualified_name: "werkzeug.formparser._chunk_iter"
  return_annotation {
    pretty_printed_name: "typing.Iterator[Union[builtins.bytes,None]]"
    args {
      pretty_printed_name: "Union[builtins.bytes,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "read"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
  parameters {
    name: "size"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "werkzeug.formparser.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "t"
  fully_qualified_name: "typing"
  is_imported_module: true
}
vars {
  name: "te"
  fully_qualified_name: "typing"
  is_imported_module: true
}
