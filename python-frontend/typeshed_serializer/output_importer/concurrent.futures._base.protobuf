fully_qualified_name: "concurrent.futures._base"
classes {
  name: "Error"
  fully_qualified_name: "concurrent.futures._base.Error"
  super_classes: "builtins.Exception"
}
classes {
  name: "CancelledError"
  fully_qualified_name: "concurrent.futures._base.CancelledError"
  super_classes: "concurrent.futures._base.Error"
}
classes {
  name: "TimeoutError"
  fully_qualified_name: "concurrent.futures._base.TimeoutError"
  super_classes: "concurrent.futures._base.Error"
}
classes {
  name: "InvalidStateError"
  fully_qualified_name: "concurrent.futures._base.InvalidStateError"
  super_classes: "concurrent.futures._base.Error"
}
classes {
  name: "BrokenExecutor"
  fully_qualified_name: "concurrent.futures._base.BrokenExecutor"
  super_classes: "builtins.RuntimeError"
}
classes {
  name: "Future"
  fully_qualified_name: "concurrent.futures._base.Future"
  super_classes: "builtins.object"
  methods {
    name: "cancel"
    fully_qualified_name: "concurrent.futures._base.Future.cancel"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
  }
  methods {
    name: "cancelled"
    fully_qualified_name: "concurrent.futures._base.Future.cancelled"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
  }
  methods {
    name: "running"
    fully_qualified_name: "concurrent.futures._base.Future.running"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
  }
  methods {
    name: "done"
    fully_qualified_name: "concurrent.futures._base.Future.done"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
  }
  methods {
    name: "add_done_callback"
    fully_qualified_name: "concurrent.futures._base.Future.add_done_callback"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
    parameters {
      name: "fn"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
  }
  methods {
    name: "result"
    fully_qualified_name: "concurrent.futures._base.Future.result"
    return_annotation {
      pretty_printed_name: "concurrent.futures._base._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
    parameters {
      name: "timeout"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.float,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "set_running_or_notify_cancel"
    fully_qualified_name: "concurrent.futures._base.Future.set_running_or_notify_cancel"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
  }
  methods {
    name: "set_result"
    fully_qualified_name: "concurrent.futures._base.Future.set_result"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
    parameters {
      name: "result"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base._T"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "exception"
    fully_qualified_name: "concurrent.futures._base.Future.exception"
    return_annotation {
      pretty_printed_name: "Union[builtins.BaseException,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.BaseException"
        fully_qualified_name: "builtins.BaseException"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
    parameters {
      name: "timeout"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.float,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "set_exception"
    fully_qualified_name: "concurrent.futures._base.Future.set_exception"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
    parameters {
      name: "exception"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  is_generic: true
}
classes {
  name: "Executor"
  fully_qualified_name: "concurrent.futures._base.Executor"
  super_classes: "builtins.object"
  methods {
    name: "submit"
    fully_qualified_name: "concurrent.futures._base.Executor.submit"
    return_annotation {
      pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
      args {
        pretty_printed_name: "concurrent.futures._base._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "concurrent.futures._base.Future"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Executor"
        fully_qualified_name: "concurrent.futures._base.Executor"
      }
    }
    parameters {
      name: "fn"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
      }
    }
  }
  methods {
    name: "map"
    fully_qualified_name: "concurrent.futures._base.Executor.map"
    return_annotation {
      pretty_printed_name: "typing.Iterator[concurrent.futures._base._T]"
      args {
        pretty_printed_name: "concurrent.futures._base._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Executor"
        fully_qualified_name: "concurrent.futures._base.Executor"
      }
    }
    parameters {
      name: "fn"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "iterables"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "timeout"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.float,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "chunksize"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "shutdown"
    fully_qualified_name: "concurrent.futures._base.Executor.shutdown"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Executor"
        fully_qualified_name: "concurrent.futures._base.Executor"
      }
    }
    parameters {
      name: "wait"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "concurrent.futures._base.Executor.__enter__"
    return_annotation {
      pretty_printed_name: "concurrent.futures._base.Executor.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Executor.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "concurrent.futures._base.Executor.__exit__"
    return_annotation {
      pretty_printed_name: "Union[builtins.bool,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Executor"
        fully_qualified_name: "concurrent.futures._base.Executor"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
}
classes {
  name: "DoneAndNotDoneFutures"
  fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures"
  super_classes: "builtins.tuple"
  methods {
    name: "_replace"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures._replace"
    return_annotation {
      pretty_printed_name: "concurrent.futures._base.DoneAndNotDoneFutures._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.DoneAndNotDoneFutures._NT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "done"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]"
        args {
          pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
          args {
            pretty_printed_name: "concurrent.futures._base._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "concurrent.futures._base.Future"
        }
        fully_qualified_name: "builtins.set"
      }
    }
    parameters {
      name: "not_done"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]"
        args {
          pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
          args {
            pretty_printed_name: "concurrent.futures._base._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "concurrent.futures._base.Future"
        }
        fully_qualified_name: "builtins.set"
      }
    }
  }
  methods {
    name: "__new__"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures.__new__"
    return_annotation {
      pretty_printed_name: "concurrent.futures._base.DoneAndNotDoneFutures._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[concurrent.futures._base.DoneAndNotDoneFutures._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "concurrent.futures._base.DoneAndNotDoneFutures._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "done"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]"
        args {
          pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
          args {
            pretty_printed_name: "concurrent.futures._base._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "concurrent.futures._base.Future"
        }
        fully_qualified_name: "builtins.set"
      }
    }
    parameters {
      name: "not_done"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]"
        args {
          pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
          args {
            pretty_printed_name: "concurrent.futures._base._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "concurrent.futures._base.Future"
        }
        fully_qualified_name: "builtins.set"
      }
    }
  }
  methods {
    name: "_asdict"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures._asdict"
    return_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.DoneAndNotDoneFutures._NT"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "_make"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures._make"
    return_annotation {
      pretty_printed_name: "concurrent.futures._base.DoneAndNotDoneFutures._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[concurrent.futures._base.DoneAndNotDoneFutures._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "concurrent.futures._base.DoneAndNotDoneFutures._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "new"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "len"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  is_generic: true
  attributes {
    name: "done"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures.done"
    type_annotation {
      pretty_printed_name: "builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]"
      args {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
      fully_qualified_name: "builtins.set"
    }
  }
  attributes {
    name: "not_done"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures.not_done"
    type_annotation {
      pretty_printed_name: "builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]"
      args {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
      fully_qualified_name: "builtins.set"
    }
  }
  attributes {
    name: "done"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures.done"
    type_annotation {
      pretty_printed_name: "builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]"
      args {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
      fully_qualified_name: "builtins.set"
    }
  }
  attributes {
    name: "not_done"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures.not_done"
    type_annotation {
      pretty_printed_name: "builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]"
      args {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
      fully_qualified_name: "builtins.set"
    }
  }
  attributes {
    name: "_fields"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures._fields"
    type_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  attributes {
    name: "_field_types"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures._field_types"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "_field_defaults"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures._field_defaults"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "_source"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures._source"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "__annotations__"
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures.__annotations__"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
}
classes {
  name: "_Waiter"
  fully_qualified_name: "concurrent.futures._base._Waiter"
  super_classes: "builtins.object"
  methods {
    name: "add_result"
    fully_qualified_name: "concurrent.futures._base._Waiter.add_result"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base._Waiter"
        fully_qualified_name: "concurrent.futures._base._Waiter"
      }
    }
    parameters {
      name: "future"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
  }
  methods {
    name: "add_exception"
    fully_qualified_name: "concurrent.futures._base._Waiter.add_exception"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base._Waiter"
        fully_qualified_name: "concurrent.futures._base._Waiter"
      }
    }
    parameters {
      name: "future"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
  }
  methods {
    name: "add_cancelled"
    fully_qualified_name: "concurrent.futures._base._Waiter.add_cancelled"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base._Waiter"
        fully_qualified_name: "concurrent.futures._base._Waiter"
      }
    }
    parameters {
      name: "future"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base.Future[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
    }
  }
  attributes {
    name: "event"
    fully_qualified_name: "concurrent.futures._base._Waiter.event"
    type_annotation {
      pretty_printed_name: "threading.Event"
      fully_qualified_name: "threading.Event"
    }
  }
  attributes {
    name: "finished_futures"
    fully_qualified_name: "concurrent.futures._base._Waiter.finished_futures"
    type_annotation {
      pretty_printed_name: "builtins.list[concurrent.futures._base.Future[Any]]"
      args {
        pretty_printed_name: "concurrent.futures._base.Future[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
      fully_qualified_name: "builtins.list"
    }
  }
}
classes {
  name: "_AsCompletedWaiter"
  fully_qualified_name: "concurrent.futures._base._AsCompletedWaiter"
  super_classes: "concurrent.futures._base._Waiter"
  attributes {
    name: "lock"
    fully_qualified_name: "concurrent.futures._base._AsCompletedWaiter.lock"
    type_annotation {
      pretty_printed_name: "threading.Lock"
      fully_qualified_name: "threading.Lock"
    }
  }
}
classes {
  name: "_FirstCompletedWaiter"
  fully_qualified_name: "concurrent.futures._base._FirstCompletedWaiter"
  super_classes: "concurrent.futures._base._Waiter"
}
classes {
  name: "_AllCompletedWaiter"
  fully_qualified_name: "concurrent.futures._base._AllCompletedWaiter"
  super_classes: "concurrent.futures._base._Waiter"
  methods {
    name: "__init__"
    fully_qualified_name: "concurrent.futures._base._AllCompletedWaiter.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base._AllCompletedWaiter"
        fully_qualified_name: "concurrent.futures._base._AllCompletedWaiter"
      }
    }
    parameters {
      name: "num_pending_calls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "stop_on_exception"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  attributes {
    name: "num_pending_calls"
    fully_qualified_name: "concurrent.futures._base._AllCompletedWaiter.num_pending_calls"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "stop_on_exception"
    fully_qualified_name: "concurrent.futures._base._AllCompletedWaiter.stop_on_exception"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "lock"
    fully_qualified_name: "concurrent.futures._base._AllCompletedWaiter.lock"
    type_annotation {
      pretty_printed_name: "threading.Lock"
      fully_qualified_name: "threading.Lock"
    }
  }
}
classes {
  name: "_AcquireFutures"
  fully_qualified_name: "concurrent.futures._base._AcquireFutures"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "concurrent.futures._base._AcquireFutures.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "concurrent.futures._base._AcquireFutures"
        fully_qualified_name: "concurrent.futures._base._AcquireFutures"
      }
    }
    parameters {
      name: "futures"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[concurrent.futures._base.Future[Any]]"
        args {
          pretty_printed_name: "concurrent.futures._base.Future[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "concurrent.futures._base.Future"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "concurrent.futures._base._AcquireFutures.__enter__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "concurrent.futures._base._AcquireFutures"
        fully_qualified_name: "concurrent.futures._base._AcquireFutures"
      }
    }
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "concurrent.futures._base._AcquireFutures.__exit__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "concurrent.futures._base._AcquireFutures"
        fully_qualified_name: "concurrent.futures._base._AcquireFutures"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  attributes {
    name: "futures"
    fully_qualified_name: "concurrent.futures._base._AcquireFutures.futures"
    type_annotation {
      pretty_printed_name: "typing.Iterable[concurrent.futures._base.Future[Any]]"
      args {
        pretty_printed_name: "concurrent.futures._base.Future[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
}
functions {
  name: "as_completed"
  fully_qualified_name: "concurrent.futures._base.as_completed"
  return_annotation {
    pretty_printed_name: "typing.Iterator[concurrent.futures._base.Future[concurrent.futures._base._T]]"
    args {
      pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
      args {
        pretty_printed_name: "concurrent.futures._base._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "concurrent.futures._base.Future"
    }
    fully_qualified_name: "typing.Iterator"
  }
  parameters {
    name: "fs"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[concurrent.futures._base.Future[concurrent.futures._base._T]]"
      args {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "timeout"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.float,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "wait"
  fully_qualified_name: "concurrent.futures._base.wait"
  return_annotation {
    pretty_printed_name: "TypeAlias[Tuple[builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]],builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]]]"
    kind: TYPE_ALIAS
    args {
      pretty_printed_name: "Tuple[builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]],builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]"
        args {
          pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
          args {
            pretty_printed_name: "concurrent.futures._base._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "concurrent.futures._base.Future"
        }
        fully_qualified_name: "builtins.set"
      }
      args {
        pretty_printed_name: "builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]"
        args {
          pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
          args {
            pretty_printed_name: "concurrent.futures._base._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "concurrent.futures._base.Future"
        }
        fully_qualified_name: "builtins.set"
      }
    }
    fully_qualified_name: "concurrent.futures._base.DoneAndNotDoneFutures"
  }
  parameters {
    name: "fs"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing.Iterable[concurrent.futures._base.Future[concurrent.futures._base._T]]"
      args {
        pretty_printed_name: "concurrent.futures._base.Future[concurrent.futures._base._T]"
        args {
          pretty_printed_name: "concurrent.futures._base._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "concurrent.futures._base.Future"
      }
      fully_qualified_name: "typing.Iterable"
    }
  }
  parameters {
    name: "timeout"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.float,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.float"
        fully_qualified_name: "builtins.float"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "return_when"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "concurrent.futures._base.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "FIRST_COMPLETED"
  fully_qualified_name: "concurrent.futures._base.FIRST_COMPLETED"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
vars {
  name: "FIRST_EXCEPTION"
  fully_qualified_name: "concurrent.futures._base.FIRST_EXCEPTION"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
vars {
  name: "ALL_COMPLETED"
  fully_qualified_name: "concurrent.futures._base.ALL_COMPLETED"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
vars {
  name: "PENDING"
  fully_qualified_name: "concurrent.futures._base.PENDING"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
vars {
  name: "RUNNING"
  fully_qualified_name: "concurrent.futures._base.RUNNING"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
vars {
  name: "CANCELLED"
  fully_qualified_name: "concurrent.futures._base.CANCELLED"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
vars {
  name: "CANCELLED_AND_NOTIFIED"
  fully_qualified_name: "concurrent.futures._base.CANCELLED_AND_NOTIFIED"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
vars {
  name: "FINISHED"
  fully_qualified_name: "concurrent.futures._base.FINISHED"
  type_annotation {
    pretty_printed_name: "Literal[builtins.str]"
    kind: LITERAL
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
vars {
  name: "_FUTURE_STATES"
  fully_qualified_name: "concurrent.futures._base._FUTURE_STATES"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
}
vars {
  name: "_STATE_TO_DESCRIPTION_MAP"
  fully_qualified_name: "concurrent.futures._base._STATE_TO_DESCRIPTION_MAP"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "LOGGER"
  fully_qualified_name: "concurrent.futures._base.LOGGER"
  type_annotation {
    pretty_printed_name: "logging.Logger"
    fully_qualified_name: "logging.Logger"
  }
}
