fully_qualified_name: "shutil"
classes {
  name: "Error"
  fully_qualified_name: "shutil.Error"
  super_classes: "builtins.OSError"
}
classes {
  name: "SameFileError"
  fully_qualified_name: "shutil.SameFileError"
  super_classes: "shutil.Error"
}
classes {
  name: "SpecialFileError"
  fully_qualified_name: "shutil.SpecialFileError"
  super_classes: "builtins.OSError"
}
classes {
  name: "ExecError"
  fully_qualified_name: "shutil.ExecError"
  super_classes: "builtins.OSError"
}
classes {
  name: "ReadError"
  fully_qualified_name: "shutil.ReadError"
  super_classes: "builtins.OSError"
}
classes {
  name: "RegistryError"
  fully_qualified_name: "shutil.RegistryError"
  super_classes: "builtins.Exception"
}
classes {
  name: "_RmtreeType"
  fully_qualified_name: "shutil._RmtreeType"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "shutil._RmtreeType.__call__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "shutil._RmtreeType"
        fully_qualified_name: "shutil._RmtreeType"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrOrBytesPath"
      }
    }
    parameters {
      name: "ignore_errors"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "onerror"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[CallableType[builtins.function]],None]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[CallableType[builtins.function]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
          fully_qualified_name: "shutil._OnErrorCallback"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  is_protocol: true
  attributes {
    name: "avoids_symlink_attacks"
    fully_qualified_name: "shutil._RmtreeType.avoids_symlink_attacks"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
classes {
  name: "_ntuple_diskusage"
  fully_qualified_name: "shutil._ntuple_diskusage"
  super_classes: "builtins.tuple"
  methods {
    name: "_replace"
    fully_qualified_name: "shutil._ntuple_diskusage._replace"
    return_annotation {
      pretty_printed_name: "shutil._ntuple_diskusage._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "shutil._ntuple_diskusage._NT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "total"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "used"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "free"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "__new__"
    fully_qualified_name: "shutil._ntuple_diskusage.__new__"
    return_annotation {
      pretty_printed_name: "shutil._ntuple_diskusage._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[shutil._ntuple_diskusage._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "shutil._ntuple_diskusage._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "total"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "used"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "free"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "_asdict"
    fully_qualified_name: "shutil._ntuple_diskusage._asdict"
    return_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "_self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "shutil._ntuple_diskusage._NT"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "_make"
    fully_qualified_name: "shutil._ntuple_diskusage._make"
    return_annotation {
      pretty_printed_name: "shutil._ntuple_diskusage._NT"
      kind: TYPE_VAR
    }
    parameters {
      name: "_cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[shutil._ntuple_diskusage._NT]"
        kind: TYPE
        args {
          pretty_printed_name: "shutil._ntuple_diskusage._NT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    parameters {
      name: "new"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "len"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  attributes {
    name: "total"
    fully_qualified_name: "shutil._ntuple_diskusage.total"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "used"
    fully_qualified_name: "shutil._ntuple_diskusage.used"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "free"
    fully_qualified_name: "shutil._ntuple_diskusage.free"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "total"
    fully_qualified_name: "shutil._ntuple_diskusage.total"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "used"
    fully_qualified_name: "shutil._ntuple_diskusage.used"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "free"
    fully_qualified_name: "shutil._ntuple_diskusage.free"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "_fields"
    fully_qualified_name: "shutil._ntuple_diskusage._fields"
    type_annotation {
      pretty_printed_name: "Tuple[builtins.str,builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  attributes {
    name: "_field_types"
    fully_qualified_name: "shutil._ntuple_diskusage._field_types"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "_field_defaults"
    fully_qualified_name: "shutil._ntuple_diskusage._field_defaults"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "_source"
    fully_qualified_name: "shutil._ntuple_diskusage._source"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "__annotations__"
    fully_qualified_name: "shutil._ntuple_diskusage.__annotations__"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
}
functions {
  name: "copyfileobj"
  fully_qualified_name: "shutil.copyfileobj"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "fsrc"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "_typeshed.SupportsRead[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "_typeshed.SupportsRead"
    }
  }
  parameters {
    name: "fdst"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "_typeshed.SupportsWrite[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "_typeshed.SupportsWrite"
    }
  }
  parameters {
    name: "length"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
functions {
  name: "copyfile"
  fully_qualified_name: "shutil.copyfile"
  return_annotation {
    pretty_printed_name: "shutil._StrOrBytesPathT"
    kind: TYPE_VAR
  }
  parameters {
    name: "src"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "os.PathLike"
        }
      }
      fully_qualified_name: "_typeshed.StrOrBytesPath"
    }
  }
  parameters {
    name: "dst"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "shutil._StrOrBytesPathT"
      kind: TYPE_VAR
    }
  }
  parameters {
    name: "follow_symlinks"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "copymode"
  fully_qualified_name: "shutil.copymode"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "src"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "os.PathLike"
        }
      }
      fully_qualified_name: "_typeshed.StrOrBytesPath"
    }
  }
  parameters {
    name: "dst"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "os.PathLike"
        }
      }
      fully_qualified_name: "_typeshed.StrOrBytesPath"
    }
  }
  parameters {
    name: "follow_symlinks"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "copystat"
  fully_qualified_name: "shutil.copystat"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "src"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "os.PathLike"
        }
      }
      fully_qualified_name: "_typeshed.StrOrBytesPath"
    }
  }
  parameters {
    name: "dst"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "os.PathLike"
        }
      }
      fully_qualified_name: "_typeshed.StrOrBytesPath"
    }
  }
  parameters {
    name: "follow_symlinks"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "ignore_patterns"
  fully_qualified_name: "shutil.ignore_patterns"
  return_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  parameters {
    name: "patterns"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
      }
      fully_qualified_name: "_typeshed.StrPath"
    }
  }
}
functions {
  name: "copytree"
  fully_qualified_name: "shutil.copytree"
  return_annotation {
    pretty_printed_name: "TypeAlias[Any]"
    kind: TYPE_ALIAS
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "shutil._PathReturn"
  }
  parameters {
    name: "src"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
      }
      fully_qualified_name: "_typeshed.StrPath"
    }
  }
  parameters {
    name: "dst"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
      }
      fully_qualified_name: "_typeshed.StrPath"
    }
  }
  parameters {
    name: "symlinks"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  parameters {
    name: "ignore"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[None,CallableType[builtins.function],CallableType[builtins.function]]"
      kind: UNION
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
  }
  parameters {
    name: "copy_function"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
  parameters {
    name: "ignore_dangling_symlinks"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  parameters {
    name: "dirs_exist_ok"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
functions {
  name: "move"
  fully_qualified_name: "shutil.move"
  return_annotation {
    pretty_printed_name: "TypeAlias[Any]"
    kind: TYPE_ALIAS
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "shutil._PathReturn"
  }
  parameters {
    name: "src"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "dst"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
      }
      fully_qualified_name: "_typeshed.StrPath"
    }
  }
  parameters {
    name: "copy_function"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[CallableType[builtins.function],CallableType[builtins.function]]"
        kind: UNION
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
      }
      fully_qualified_name: "shutil._CopyFn"
    }
  }
}
functions {
  name: "disk_usage"
  fully_qualified_name: "shutil.disk_usage"
  return_annotation {
    pretty_printed_name: "TypeAlias[Tuple[builtins.int,builtins.int,builtins.int]]"
    kind: TYPE_ALIAS
    args {
      pretty_printed_name: "Tuple[builtins.int,builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    fully_qualified_name: "shutil._ntuple_diskusage"
  }
  parameters {
    name: "path"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.int,TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.int,TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "os.PathLike[builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "os.PathLike"
            }
            args {
              pretty_printed_name: "os.PathLike[builtins.bytes]"
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              fully_qualified_name: "os.PathLike"
            }
          }
          fully_qualified_name: "_typeshed.StrOrBytesPath"
        }
      }
      fully_qualified_name: "_typeshed.FileDescriptorOrPath"
    }
  }
}
functions {
  name: "make_archive"
  fully_qualified_name: "shutil.make_archive"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "base_name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "format"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "root_dir"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]"
      kind: UNION
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "base_dir"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]"
      kind: UNION
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "verbose"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  parameters {
    name: "dry_run"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  parameters {
    name: "owner"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "group"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "logger"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "get_archive_formats"
  fully_qualified_name: "shutil.get_archive_formats"
  return_annotation {
    pretty_printed_name: "builtins.list[Tuple[builtins.str,builtins.str]]"
    args {
      pretty_printed_name: "Tuple[builtins.str,builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    fully_qualified_name: "builtins.list"
  }
}
functions {
  name: "unregister_archive_format"
  fully_qualified_name: "shutil.unregister_archive_format"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "unpack_archive"
  fully_qualified_name: "shutil.unpack_archive"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "filename"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "os.PathLike[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "os.PathLike"
        }
      }
      fully_qualified_name: "_typeshed.StrPath"
    }
  }
  parameters {
    name: "extract_dir"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]"
      kind: UNION
      args {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "format"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "unregister_unpack_format"
  fully_qualified_name: "shutil.unregister_unpack_format"
  return_annotation {
    pretty_printed_name: "None"
    kind: NONE
  }
  parameters {
    name: "name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
functions {
  name: "get_unpack_formats"
  fully_qualified_name: "shutil.get_unpack_formats"
  return_annotation {
    pretty_printed_name: "builtins.list[Tuple[builtins.str,builtins.list[builtins.str],builtins.str]]"
    args {
      pretty_printed_name: "Tuple[builtins.str,builtins.list[builtins.str],builtins.str]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    fully_qualified_name: "builtins.list"
  }
}
functions {
  name: "get_terminal_size"
  fully_qualified_name: "shutil.get_terminal_size"
  return_annotation {
    pretty_printed_name: "TypeAlias[Tuple[builtins.int,builtins.int]]"
    kind: TYPE_ALIAS
    args {
      pretty_printed_name: "Tuple[builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    fully_qualified_name: "os.terminal_size"
  }
  parameters {
    name: "fallback"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
}
overloaded_functions {
  name: "copy"
  fullname: "shutil.copy"
  definitions {
    name: "copy"
    fully_qualified_name: "shutil.copy"
    return_annotation {
      pretty_printed_name: "TypeAlias[Any]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "shutil._PathReturn"
    }
    parameters {
      name: "src"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
    parameters {
      name: "dst"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
    parameters {
      name: "follow_symlinks"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "copy"
    fully_qualified_name: "shutil.copy"
    return_annotation {
      pretty_printed_name: "TypeAlias[Any]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "shutil._PathReturn"
    }
    parameters {
      name: "src"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,os.PathLike[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.BytesPath"
      }
    }
    parameters {
      name: "dst"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,os.PathLike[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.BytesPath"
      }
    }
    parameters {
      name: "follow_symlinks"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "copy2"
  fullname: "shutil.copy2"
  definitions {
    name: "copy2"
    fully_qualified_name: "shutil.copy2"
    return_annotation {
      pretty_printed_name: "TypeAlias[Any]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "shutil._PathReturn"
    }
    parameters {
      name: "src"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
    parameters {
      name: "dst"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrPath"
      }
    }
    parameters {
      name: "follow_symlinks"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "copy2"
    fully_qualified_name: "shutil.copy2"
    return_annotation {
      pretty_printed_name: "TypeAlias[Any]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "shutil._PathReturn"
    }
    parameters {
      name: "src"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,os.PathLike[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.BytesPath"
      }
    }
    parameters {
      name: "dst"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.bytes,os.PathLike[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.BytesPath"
      }
    }
    parameters {
      name: "follow_symlinks"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "chown"
  fullname: "shutil.chown"
  definitions {
    name: "chown"
    fully_qualified_name: "shutil.chown"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrOrBytesPath"
      }
    }
    parameters {
      name: "user"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "group"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "chown"
    fully_qualified_name: "shutil.chown"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrOrBytesPath"
      }
    }
    parameters {
      name: "user"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "group"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "chown"
    fully_qualified_name: "shutil.chown"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrOrBytesPath"
      }
    }
    parameters {
      name: "user"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "group"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "chown"
    fully_qualified_name: "shutil.chown"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.str]"
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            fully_qualified_name: "os.PathLike"
          }
          args {
            pretty_printed_name: "os.PathLike[builtins.bytes]"
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            fully_qualified_name: "os.PathLike"
          }
        }
        fully_qualified_name: "_typeshed.StrOrBytesPath"
      }
    }
    parameters {
      name: "user"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    parameters {
      name: "group"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.int]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "which"
  fullname: "shutil.which"
  definitions {
    name: "which"
    fully_qualified_name: "shutil.which"
    return_annotation {
      pretty_printed_name: "Union[builtins.str,shutil._StrPathT,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "shutil._StrPathT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "cmd"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "shutil._StrPathT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "os.PathLike[builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "os.PathLike"
            }
          }
          fully_qualified_name: "_typeshed.StrPath"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "which"
    fully_qualified_name: "shutil.which"
    return_annotation {
      pretty_printed_name: "Union[builtins.bytes,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "cmd"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "mode"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "path"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.str,os.PathLike[builtins.str]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "os.PathLike[builtins.str]"
              args {
                pretty_printed_name: "builtins.str"
                fully_qualified_name: "builtins.str"
              }
              fully_qualified_name: "os.PathLike"
            }
          }
          fully_qualified_name: "_typeshed.StrPath"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "register_archive_format"
  fullname: "shutil.register_archive_format"
  definitions {
    name: "register_archive_format"
    fully_qualified_name: "shutil.register_archive_format"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "function"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "extra_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Union[Tuple[builtins.str,Any],builtins.list[Any]]]"
        args {
          pretty_printed_name: "Union[Tuple[builtins.str,Any],builtins.list[Any]]"
          kind: UNION
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          args {
            pretty_printed_name: "builtins.list[Any]"
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
            fully_qualified_name: "builtins.list"
          }
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "description"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "register_archive_format"
    fully_qualified_name: "shutil.register_archive_format"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "function"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "extra_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "description"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "register_unpack_format"
  fullname: "shutil.register_unpack_format"
  definitions {
    name: "register_unpack_format"
    fully_qualified_name: "shutil.register_unpack_format"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "extensions"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
    }
    parameters {
      name: "function"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "extra_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[Tuple[builtins.str,Any]]"
        args {
          pretty_printed_name: "Tuple[builtins.str,Any]"
          kind: TUPLE
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "description"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "register_unpack_format"
    fully_qualified_name: "shutil.register_unpack_format"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "extensions"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.list[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "builtins.list"
      }
    }
    parameters {
      name: "function"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
    }
    parameters {
      name: "extra_args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "description"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "shutil.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "__all__"
  fully_qualified_name: "shutil.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
}
vars {
  name: "rmtree"
  fully_qualified_name: "shutil.rmtree"
  type_annotation {
    pretty_printed_name: "shutil._RmtreeType"
    fully_qualified_name: "shutil._RmtreeType"
  }
}
