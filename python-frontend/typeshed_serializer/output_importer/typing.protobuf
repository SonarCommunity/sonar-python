fully_qualified_name: "typing"
classes {
  name: "Match"
  fully_qualified_name: "re.Match"
  super_classes: "builtins.object"
  methods {
    name: "pos"
    fully_qualified_name: "re.Match.pos"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Match[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Match"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "endpos"
    fully_qualified_name: "re.Match.endpos"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Match[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Match"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "lastindex"
    fully_qualified_name: "re.Match.lastindex"
    return_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Match[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Match"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "lastgroup"
    fully_qualified_name: "re.Match.lastgroup"
    return_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Match[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Match"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "string"
    fully_qualified_name: "re.Match.string"
    return_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Match[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Match"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "re"
    fully_qualified_name: "re.Match.re"
    return_annotation {
      pretty_printed_name: "re.Pattern[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "re.Pattern"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Match[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Match"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "start"
    fully_qualified_name: "re.Match.start"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Match[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Match"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
  }
  methods {
    name: "end"
    fully_qualified_name: "re.Match.end"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Match[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Match"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
  }
  methods {
    name: "span"
    fully_qualified_name: "re.Match.span"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Match[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Match"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
  }
  methods {
    name: "regs"
    fully_qualified_name: "re.Match.regs"
    return_annotation {
      pretty_printed_name: "builtins.tuple[Tuple[builtins.int,builtins.int]]"
      args {
        pretty_printed_name: "Tuple[builtins.int,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      fully_qualified_name: "builtins.tuple"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Match[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Match"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__copy__"
    fully_qualified_name: "re.Match.__copy__"
    return_annotation {
      pretty_printed_name: "re.Match[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "re.Match"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Match[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Match"
      }
    }
  }
  methods {
    name: "__deepcopy__"
    fully_qualified_name: "re.Match.__deepcopy__"
    return_annotation {
      pretty_printed_name: "re.Match[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "re.Match"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Match[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Match"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  overloaded_methods {
    name: "expand"
    fullname: "re.Match.expand"
    definitions {
      name: "expand"
      fully_qualified_name: "re.Match.expand"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Match[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Match"
        }
      }
      parameters {
        name: "template"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "expand"
      fully_qualified_name: "re.Match.expand"
      return_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Match[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Match"
        }
      }
      parameters {
        name: "template"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "expand"
      fully_qualified_name: "re.Match.expand"
      return_annotation {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
      }
      parameters {
        name: "template"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "group"
    fullname: "re.Match.group"
    definitions {
      name: "group"
      fully_qualified_name: "re.Match.group"
      return_annotation {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "group"
      fully_qualified_name: "re.Match.group"
      return_annotation {
        pretty_printed_name: "Union[typing.AnyStr,Any]"
        kind: UNION
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "group"
      fully_qualified_name: "re.Match.group"
      return_annotation {
        pretty_printed_name: "builtins.tuple[Union[typing.AnyStr,Any]]"
        args {
          pretty_printed_name: "Union[typing.AnyStr,Any]"
          kind: UNION
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        fully_qualified_name: "builtins.tuple"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      parameters {
        name: "groups"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,builtins.int]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "groups"
    fullname: "re.Match.groups"
    definitions {
      name: "groups"
      fully_qualified_name: "re.Match.groups"
      return_annotation {
        pretty_printed_name: "builtins.tuple[Union[typing.AnyStr,Any]]"
        args {
          pretty_printed_name: "Union[typing.AnyStr,Any]"
          kind: UNION
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        fully_qualified_name: "builtins.tuple"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "groups"
      fully_qualified_name: "re.Match.groups"
      return_annotation {
        pretty_printed_name: "builtins.tuple[Union[typing.AnyStr,re._T]]"
        args {
          pretty_printed_name: "Union[typing.AnyStr,re._T]"
          kind: UNION
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "re._T"
            kind: TYPE_VAR
          }
        }
        fully_qualified_name: "builtins.tuple"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re._T"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "groupdict"
    fullname: "re.Match.groupdict"
    definitions {
      name: "groupdict"
      fully_qualified_name: "re.Match.groupdict"
      return_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,Union[typing.AnyStr,Any]]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Union[typing.AnyStr,Any]"
          kind: UNION
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        fully_qualified_name: "builtins.dict"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "groupdict"
      fully_qualified_name: "re.Match.groupdict"
      return_annotation {
        pretty_printed_name: "builtins.dict[builtins.str,Union[typing.AnyStr,re._T]]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Union[typing.AnyStr,re._T]"
          kind: UNION
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "re._T"
            kind: TYPE_VAR
          }
        }
        fully_qualified_name: "builtins.dict"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re._T"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "__getitem__"
    fullname: "re.Match.__getitem__"
    definitions {
      name: "__getitem__"
      fully_qualified_name: "re.Match.__getitem__"
      return_annotation {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Literal[builtins.int]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__getitem__"
      fully_qualified_name: "re.Match.__getitem__"
      return_annotation {
        pretty_printed_name: "Union[typing.AnyStr,Any]"
        kind: UNION
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[builtins.int,builtins.str]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.int"
            fully_qualified_name: "builtins.int"
          }
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  has_decorators: true
  is_generic: true
}
classes {
  name: "Pattern"
  fully_qualified_name: "re.Pattern"
  super_classes: "builtins.object"
  methods {
    name: "flags"
    fully_qualified_name: "re.Pattern.flags"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Pattern"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "groupindex"
    fully_qualified_name: "re.Pattern.groupindex"
    return_annotation {
      pretty_printed_name: "typing.Mapping[builtins.str,builtins.int]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "typing.Mapping"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Pattern"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "groups"
    fully_qualified_name: "re.Pattern.groups"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Pattern"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "pattern"
    fully_qualified_name: "re.Pattern.pattern"
    return_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Pattern"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__copy__"
    fully_qualified_name: "re.Pattern.__copy__"
    return_annotation {
      pretty_printed_name: "re.Pattern[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "re.Pattern"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Pattern"
      }
    }
  }
  methods {
    name: "__deepcopy__"
    fully_qualified_name: "re.Pattern.__deepcopy__"
    return_annotation {
      pretty_printed_name: "re.Pattern[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "re.Pattern"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Pattern"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  overloaded_methods {
    name: "search"
    fullname: "re.Pattern.search"
    definitions {
      name: "search"
      fully_qualified_name: "re.Pattern.search"
      return_annotation {
        pretty_printed_name: "Union[re.Match[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "search"
      fully_qualified_name: "re.Pattern.search"
      return_annotation {
        pretty_printed_name: "Union[re.Match[builtins.bytes],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "search"
      fully_qualified_name: "re.Pattern.search"
      return_annotation {
        pretty_printed_name: "Union[re.Match[typing.AnyStr],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "match"
    fullname: "re.Pattern.match"
    definitions {
      name: "match"
      fully_qualified_name: "re.Pattern.match"
      return_annotation {
        pretty_printed_name: "Union[re.Match[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "match"
      fully_qualified_name: "re.Pattern.match"
      return_annotation {
        pretty_printed_name: "Union[re.Match[builtins.bytes],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "match"
      fully_qualified_name: "re.Pattern.match"
      return_annotation {
        pretty_printed_name: "Union[re.Match[typing.AnyStr],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "fullmatch"
    fullname: "re.Pattern.fullmatch"
    definitions {
      name: "fullmatch"
      fully_qualified_name: "re.Pattern.fullmatch"
      return_annotation {
        pretty_printed_name: "Union[re.Match[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "fullmatch"
      fully_qualified_name: "re.Pattern.fullmatch"
      return_annotation {
        pretty_printed_name: "Union[re.Match[builtins.bytes],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "fullmatch"
      fully_qualified_name: "re.Pattern.fullmatch"
      return_annotation {
        pretty_printed_name: "Union[re.Match[typing.AnyStr],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "split"
    fullname: "re.Pattern.split"
    definitions {
      name: "split"
      fully_qualified_name: "re.Pattern.split"
      return_annotation {
        pretty_printed_name: "builtins.list[Union[builtins.str,Any]]"
        args {
          pretty_printed_name: "Union[builtins.str,Any]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "maxsplit"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "split"
      fully_qualified_name: "re.Pattern.split"
      return_annotation {
        pretty_printed_name: "builtins.list[Union[builtins.bytes,Any]]"
        args {
          pretty_printed_name: "Union[builtins.bytes,Any]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "maxsplit"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "split"
      fully_qualified_name: "re.Pattern.split"
      return_annotation {
        pretty_printed_name: "builtins.list[Union[typing.AnyStr,Any]]"
        args {
          pretty_printed_name: "Union[typing.AnyStr,Any]"
          kind: UNION
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "maxsplit"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "findall"
    fullname: "re.Pattern.findall"
    definitions {
      name: "findall"
      fully_qualified_name: "re.Pattern.findall"
      return_annotation {
        pretty_printed_name: "builtins.list[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "findall"
      fully_qualified_name: "re.Pattern.findall"
      return_annotation {
        pretty_printed_name: "builtins.list[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "findall"
      fully_qualified_name: "re.Pattern.findall"
      return_annotation {
        pretty_printed_name: "builtins.list[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "finditer"
    fullname: "re.Pattern.finditer"
    definitions {
      name: "finditer"
      fully_qualified_name: "re.Pattern.finditer"
      return_annotation {
        pretty_printed_name: "typing.Iterator[re.Match[builtins.str]]"
        args {
          pretty_printed_name: "re.Match[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Match"
        }
        fully_qualified_name: "typing.Iterator"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "finditer"
      fully_qualified_name: "re.Pattern.finditer"
      return_annotation {
        pretty_printed_name: "typing.Iterator[re.Match[builtins.bytes]]"
        args {
          pretty_printed_name: "re.Match[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Match"
        }
        fully_qualified_name: "typing.Iterator"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "finditer"
      fully_qualified_name: "re.Pattern.finditer"
      return_annotation {
        pretty_printed_name: "typing.Iterator[re.Match[typing.AnyStr]]"
        args {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
        fully_qualified_name: "typing.Iterator"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "sub"
    fullname: "re.Pattern.sub"
    definitions {
      name: "sub"
      fully_qualified_name: "re.Pattern.sub"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "repl"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "count"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "sub"
      fully_qualified_name: "re.Pattern.sub"
      return_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "repl"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                  kind: UNION
                  args {
                    pretty_printed_name: "builtins.bytearray"
                    fully_qualified_name: "builtins.bytearray"
                  }
                  args {
                    pretty_printed_name: "builtins.memoryview"
                    fully_qualified_name: "builtins.memoryview"
                  }
                  args {
                    pretty_printed_name: "array.array[Any]"
                    args {
                      pretty_printed_name: "Any"
                      kind: ANY
                    }
                    fully_qualified_name: "array.array"
                  }
                  args {
                    pretty_printed_name: "mmap.mmap"
                    fully_qualified_name: "mmap.mmap"
                  }
                  args {
                    pretty_printed_name: "ctypes._CData"
                    fully_qualified_name: "ctypes._CData"
                  }
                  args {
                    pretty_printed_name: "pickle.PickleBuffer"
                    fully_qualified_name: "pickle.PickleBuffer"
                  }
                }
                fully_qualified_name: "_typeshed.WriteableBuffer"
              }
            }
            fully_qualified_name: "_typeshed.ReadableBuffer"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "count"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "sub"
      fully_qualified_name: "re.Pattern.sub"
      return_annotation {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "repl"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing.AnyStr,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "count"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "subn"
    fullname: "re.Pattern.subn"
    definitions {
      name: "subn"
      fully_qualified_name: "re.Pattern.subn"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "repl"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "count"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "subn"
      fully_qualified_name: "re.Pattern.subn"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "repl"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                  kind: UNION
                  args {
                    pretty_printed_name: "builtins.bytearray"
                    fully_qualified_name: "builtins.bytearray"
                  }
                  args {
                    pretty_printed_name: "builtins.memoryview"
                    fully_qualified_name: "builtins.memoryview"
                  }
                  args {
                    pretty_printed_name: "array.array[Any]"
                    args {
                      pretty_printed_name: "Any"
                      kind: ANY
                    }
                    fully_qualified_name: "array.array"
                  }
                  args {
                    pretty_printed_name: "mmap.mmap"
                    fully_qualified_name: "mmap.mmap"
                  }
                  args {
                    pretty_printed_name: "ctypes._CData"
                    fully_qualified_name: "ctypes._CData"
                  }
                  args {
                    pretty_printed_name: "pickle.PickleBuffer"
                    fully_qualified_name: "pickle.PickleBuffer"
                  }
                }
                fully_qualified_name: "_typeshed.WriteableBuffer"
              }
            }
            fully_qualified_name: "_typeshed.ReadableBuffer"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "count"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "subn"
      fully_qualified_name: "re.Pattern.subn"
      return_annotation {
        pretty_printed_name: "Tuple[typing.AnyStr,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "repl"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing.AnyStr,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "count"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  has_decorators: true
  is_generic: true
}
classes {
  name: "_ParamSpec"
  fully_qualified_name: "typing_extensions.ParamSpec"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "typing_extensions.ParamSpec.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions.ParamSpec"
        fully_qualified_name: "typing_extensions.ParamSpec"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "bound"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[None,Type[Any],builtins.str]"
        kind: UNION
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
        args {
          pretty_printed_name: "Type[Any]"
          kind: TYPE
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
    }
    parameters {
      name: "contravariant"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "covariant"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Type[Any],builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[Any]"
          kind: TYPE
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "args"
    fully_qualified_name: "typing_extensions.ParamSpec.args"
    return_annotation {
      pretty_printed_name: "typing_extensions.ParamSpecArgs"
      fully_qualified_name: "typing_extensions.ParamSpecArgs"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions.ParamSpec"
        fully_qualified_name: "typing_extensions.ParamSpec"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "kwargs"
    fully_qualified_name: "typing_extensions.ParamSpec.kwargs"
    return_annotation {
      pretty_printed_name: "typing_extensions.ParamSpecKwargs"
      fully_qualified_name: "typing_extensions.ParamSpecKwargs"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing_extensions.ParamSpec"
        fully_qualified_name: "typing_extensions.ParamSpec"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  has_decorators: true
  attributes {
    name: "__bound__"
    fully_qualified_name: "typing_extensions.ParamSpec.__bound__"
    type_annotation {
      pretty_printed_name: "Union[Type[Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "Type[Any]"
        kind: TYPE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "__covariant__"
    fully_qualified_name: "typing_extensions.ParamSpec.__covariant__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "__contravariant__"
    fully_qualified_name: "typing_extensions.ParamSpec.__contravariant__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "__default__"
    fully_qualified_name: "typing_extensions.ParamSpec.__default__"
    type_annotation {
      pretty_printed_name: "Union[Type[Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "Type[Any]"
        kind: TYPE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
classes {
  name: "TypeVar"
  fully_qualified_name: "typing.TypeVar"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.TypeVar.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.TypeVar"
        fully_qualified_name: "typing.TypeVar"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "constraints"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "bound"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "covariant"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "contravariant"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  has_decorators: true
  attributes {
    name: "__bound__"
    fully_qualified_name: "typing.TypeVar.__bound__"
    type_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "__constraints__"
    fully_qualified_name: "typing.TypeVar.__constraints__"
    type_annotation {
      pretty_printed_name: "builtins.tuple[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.tuple"
    }
  }
  attributes {
    name: "__covariant__"
    fully_qualified_name: "typing.TypeVar.__covariant__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "__contravariant__"
    fully_qualified_name: "typing.TypeVar.__contravariant__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
classes {
  name: "_SpecialForm"
  fully_qualified_name: "typing._SpecialForm"
  super_classes: "builtins.object"
  methods {
    name: "__getitem__"
    fully_qualified_name: "typing._SpecialForm.__getitem__"
    return_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._SpecialForm"
        fully_qualified_name: "typing._SpecialForm"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  has_decorators: true
}
classes {
  name: "_Alias"
  fully_qualified_name: "typing._Alias"
  super_classes: "builtins.object"
  methods {
    name: "__getitem__"
    fully_qualified_name: "typing._Alias.__getitem__"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._Alias"
        fully_qualified_name: "typing._Alias"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
}
classes {
  name: "_ProtocolMeta"
  fully_qualified_name: "typing._ProtocolMeta"
  super_classes: "abc.ABCMeta"
}
classes {
  name: "SupportsInt"
  fully_qualified_name: "typing.SupportsInt"
  super_classes: "builtins.object"
  methods {
    name: "__int__"
    fully_qualified_name: "typing.SupportsInt.__int__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.SupportsInt"
        fully_qualified_name: "typing.SupportsInt"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  has_metaclass: true
  is_protocol: true
  metaclass_name: "abc.ABCMeta"
}
classes {
  name: "SupportsFloat"
  fully_qualified_name: "typing.SupportsFloat"
  super_classes: "builtins.object"
  methods {
    name: "__float__"
    fully_qualified_name: "typing.SupportsFloat.__float__"
    return_annotation {
      pretty_printed_name: "builtins.float"
      fully_qualified_name: "builtins.float"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.SupportsFloat"
        fully_qualified_name: "typing.SupportsFloat"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  has_metaclass: true
  is_protocol: true
  metaclass_name: "abc.ABCMeta"
}
classes {
  name: "SupportsComplex"
  fully_qualified_name: "typing.SupportsComplex"
  super_classes: "builtins.object"
  methods {
    name: "__complex__"
    fully_qualified_name: "typing.SupportsComplex.__complex__"
    return_annotation {
      pretty_printed_name: "builtins.complex"
      fully_qualified_name: "builtins.complex"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.SupportsComplex"
        fully_qualified_name: "typing.SupportsComplex"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  has_metaclass: true
  is_protocol: true
  metaclass_name: "abc.ABCMeta"
}
classes {
  name: "SupportsBytes"
  fully_qualified_name: "typing.SupportsBytes"
  super_classes: "builtins.object"
  methods {
    name: "__bytes__"
    fully_qualified_name: "typing.SupportsBytes.__bytes__"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.SupportsBytes"
        fully_qualified_name: "typing.SupportsBytes"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  has_metaclass: true
  is_protocol: true
  metaclass_name: "abc.ABCMeta"
}
classes {
  name: "SupportsIndex"
  fully_qualified_name: "typing.SupportsIndex"
  super_classes: "builtins.object"
  methods {
    name: "__index__"
    fully_qualified_name: "typing.SupportsIndex.__index__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.SupportsIndex"
        fully_qualified_name: "typing.SupportsIndex"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  has_metaclass: true
  is_protocol: true
  metaclass_name: "abc.ABCMeta"
}
classes {
  name: "SupportsAbs"
  fully_qualified_name: "typing.SupportsAbs"
  super_classes: "builtins.object"
  methods {
    name: "__abs__"
    fully_qualified_name: "typing.SupportsAbs.__abs__"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.SupportsAbs[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.SupportsAbs"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "SupportsRound"
  fully_qualified_name: "typing.SupportsRound"
  super_classes: "builtins.object"
  overloaded_methods {
    name: "__round__"
    fullname: "typing.SupportsRound.__round__"
    definitions {
      name: "__round__"
      fully_qualified_name: "typing.SupportsRound.__round__"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.SupportsRound[typing._T_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.SupportsRound"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "__round__"
      fully_qualified_name: "typing.SupportsRound.__round__"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.SupportsRound[typing._T_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.SupportsRound"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "Sized"
  fully_qualified_name: "typing.Sized"
  super_classes: "builtins.object"
  methods {
    name: "__len__"
    fully_qualified_name: "typing.Sized.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Sized"
        fully_qualified_name: "typing.Sized"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  has_metaclass: true
  is_protocol: true
  metaclass_name: "abc.ABCMeta"
}
classes {
  name: "Hashable"
  fully_qualified_name: "typing.Hashable"
  super_classes: "builtins.object"
  methods {
    name: "__hash__"
    fully_qualified_name: "typing.Hashable.__hash__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Hashable"
        fully_qualified_name: "typing.Hashable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  has_metaclass: true
  is_protocol: true
  metaclass_name: "abc.ABCMeta"
}
classes {
  name: "Iterable"
  fully_qualified_name: "typing.Iterable"
  super_classes: "builtins.object"
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.Iterable.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "Iterator"
  fully_qualified_name: "typing.Iterator"
  super_classes: "typing.Iterable"
  methods {
    name: "__next__"
    fully_qualified_name: "typing.Iterator.__next__"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.Iterator.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterator"
      }
    }
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "Reversible"
  fully_qualified_name: "typing.Reversible"
  super_classes: "typing.Iterable"
  methods {
    name: "__reversed__"
    fully_qualified_name: "typing.Reversible.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Reversible[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Reversible"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "Generator"
  fully_qualified_name: "typing.Generator"
  super_classes: "typing.Iterator"
  methods {
    name: "__next__"
    fully_qualified_name: "typing.Generator.__next__"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
  }
  methods {
    name: "send"
    fully_qualified_name: "typing.Generator.send"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "close"
    fully_qualified_name: "typing.Generator.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.Generator.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing._V_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
  }
  methods {
    name: "gi_code"
    fully_qualified_name: "typing.Generator.gi_code"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "gi_frame"
    fully_qualified_name: "typing.Generator.gi_frame"
    return_annotation {
      pretty_printed_name: "types.FrameType"
      fully_qualified_name: "types.FrameType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "gi_running"
    fully_qualified_name: "typing.Generator.gi_running"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "gi_yieldfrom"
    fully_qualified_name: "typing.Generator.gi_yieldfrom"
    return_annotation {
      pretty_printed_name: "Union[typing.Generator[Any,Any,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Generator[Any,Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Generator"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  overloaded_methods {
    name: "throw"
    fullname: "typing.Generator.throw"
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Generator.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Generator"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[builtins.BaseException,builtins.object]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "builtins.object"
            fully_qualified_name: "builtins.object"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Generator.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Generator"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "Awaitable"
  fully_qualified_name: "typing.Awaitable"
  super_classes: "builtins.object"
  methods {
    name: "__await__"
    fully_qualified_name: "typing.Awaitable.__await__"
    return_annotation {
      pretty_printed_name: "typing.Generator[Any,None,typing._T_co]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Awaitable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Awaitable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "Coroutine"
  fully_qualified_name: "typing.Coroutine"
  super_classes: "typing.Awaitable"
  methods {
    name: "cr_await"
    fully_qualified_name: "typing.Coroutine.cr_await"
    return_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "cr_code"
    fully_qualified_name: "typing.Coroutine.cr_code"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "cr_frame"
    fully_qualified_name: "typing.Coroutine.cr_frame"
    return_annotation {
      pretty_printed_name: "types.FrameType"
      fully_qualified_name: "types.FrameType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "cr_running"
    fully_qualified_name: "typing.Coroutine.cr_running"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "send"
    fully_qualified_name: "typing.Coroutine.send"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "close"
    fully_qualified_name: "typing.Coroutine.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  overloaded_methods {
    name: "throw"
    fullname: "typing.Coroutine.throw"
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Coroutine.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Coroutine"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[builtins.BaseException,builtins.object]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "builtins.object"
            fully_qualified_name: "builtins.object"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Coroutine.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Coroutine"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  is_generic: true
  attributes {
    name: "__qualname__"
    fully_qualified_name: "typing.Coroutine.__qualname__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "AwaitableGenerator"
  fully_qualified_name: "typing.AwaitableGenerator"
  super_classes: "typing.Awaitable"
  super_classes: "typing.Generator"
  has_decorators: true
  has_metaclass: true
  is_generic: true
  metaclass_name: "abc.ABCMeta"
}
classes {
  name: "AsyncIterable"
  fully_qualified_name: "typing.AsyncIterable"
  super_classes: "builtins.object"
  methods {
    name: "__aiter__"
    fully_qualified_name: "typing.AsyncIterable.__aiter__"
    return_annotation {
      pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AsyncIterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncIterable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncIterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "AsyncIterator"
  fully_qualified_name: "typing.AsyncIterator"
  super_classes: "typing.AsyncIterable"
  methods {
    name: "__anext__"
    fully_qualified_name: "typing.AsyncIterator.__anext__"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncIterator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "__aiter__"
    fully_qualified_name: "typing.AsyncIterator.__aiter__"
    return_annotation {
      pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AsyncIterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncIterator"
      }
    }
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "AsyncGenerator"
  fully_qualified_name: "typing.AsyncGenerator"
  super_classes: "typing.AsyncIterator"
  methods {
    name: "__anext__"
    fully_qualified_name: "typing.AsyncGenerator.__anext__"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
  }
  methods {
    name: "asend"
    fully_qualified_name: "typing.AsyncGenerator.asend"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "aclose"
    fully_qualified_name: "typing.AsyncGenerator.aclose"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[None]"
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
  }
  methods {
    name: "ag_await"
    fully_qualified_name: "typing.AsyncGenerator.ag_await"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "ag_code"
    fully_qualified_name: "typing.AsyncGenerator.ag_code"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "ag_frame"
    fully_qualified_name: "typing.AsyncGenerator.ag_frame"
    return_annotation {
      pretty_printed_name: "types.FrameType"
      fully_qualified_name: "types.FrameType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "ag_running"
    fully_qualified_name: "typing.AsyncGenerator.ag_running"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  overloaded_methods {
    name: "athrow"
    fullname: "typing.AsyncGenerator.athrow"
    definitions {
      name: "athrow"
      fully_qualified_name: "typing.AsyncGenerator.athrow"
      return_annotation {
        pretty_printed_name: "typing.Awaitable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Awaitable"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.AsyncGenerator"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[builtins.BaseException,builtins.object]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "builtins.object"
            fully_qualified_name: "builtins.object"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "athrow"
      fully_qualified_name: "typing.AsyncGenerator.athrow"
      return_annotation {
        pretty_printed_name: "typing.Awaitable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Awaitable"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.AsyncGenerator"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "Container"
  fully_qualified_name: "typing.Container"
  super_classes: "builtins.object"
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.Container.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Container[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Container"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "Collection"
  fully_qualified_name: "typing.Collection"
  super_classes: "typing.Iterable"
  super_classes: "typing.Container"
  methods {
    name: "__len__"
    fully_qualified_name: "typing.Collection.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Collection[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Collection"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "Sequence"
  fully_qualified_name: "typing.Sequence"
  super_classes: "typing.Collection"
  super_classes: "typing.Reversible"
  methods {
    name: "index"
    fully_qualified_name: "typing.Sequence.index"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "stop"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "count"
    fully_qualified_name: "typing.Sequence.count"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.Sequence.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.Sequence.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "typing.Sequence.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
  }
  overloaded_methods {
    name: "__getitem__"
    fullname: "typing.Sequence.__getitem__"
    definitions {
      name: "__getitem__"
      fully_qualified_name: "typing.Sequence.__getitem__"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.Sequence[typing._T_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "__getitem__"
      fully_qualified_name: "typing.Sequence.__getitem__"
      return_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.Sequence[typing._T_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "MutableSequence"
  fully_qualified_name: "typing.MutableSequence"
  super_classes: "typing.Sequence"
  methods {
    name: "insert"
    fully_qualified_name: "typing.MutableSequence.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "append"
    fully_qualified_name: "typing.MutableSequence.append"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "clear"
    fully_qualified_name: "typing.MutableSequence.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
  }
  methods {
    name: "extend"
    fully_qualified_name: "typing.MutableSequence.extend"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "reverse"
    fully_qualified_name: "typing.MutableSequence.reverse"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
  }
  methods {
    name: "pop"
    fully_qualified_name: "typing.MutableSequence.pop"
    return_annotation {
      pretty_printed_name: "typing._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "remove"
    fully_qualified_name: "typing.MutableSequence.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__iadd__"
    fully_qualified_name: "typing.MutableSequence.__iadd__"
    return_annotation {
      pretty_printed_name: "typing.MutableSequence.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableSequence.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  overloaded_methods {
    name: "__getitem__"
    fullname: "typing.MutableSequence.__getitem__"
    definitions {
      name: "__getitem__"
      fully_qualified_name: "typing.MutableSequence.__getitem__"
      return_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "__getitem__"
      fully_qualified_name: "typing.MutableSequence.__getitem__"
      return_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "__setitem__"
    fullname: "typing.MutableSequence.__setitem__"
    definitions {
      name: "__setitem__"
      fully_qualified_name: "typing.MutableSequence.__setitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "__setitem__"
      fully_qualified_name: "typing.MutableSequence.__setitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.Iterable[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "__delitem__"
    fullname: "typing.MutableSequence.__delitem__"
    definitions {
      name: "__delitem__"
      fully_qualified_name: "typing.MutableSequence.__delitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "__delitem__"
      fully_qualified_name: "typing.MutableSequence.__delitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "AbstractSet"
  fully_qualified_name: "typing.AbstractSet"
  super_classes: "typing.Collection"
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.AbstractSet.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "_hash"
    fully_qualified_name: "typing.AbstractSet._hash"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__le__"
    fully_qualified_name: "typing.AbstractSet.__le__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__lt__"
    fully_qualified_name: "typing.AbstractSet.__lt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__gt__"
    fully_qualified_name: "typing.AbstractSet.__gt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__ge__"
    fully_qualified_name: "typing.AbstractSet.__ge__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__and__"
    fully_qualified_name: "typing.AbstractSet.__and__"
    return_annotation {
      pretty_printed_name: "typing.AbstractSet[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AbstractSet"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__or__"
    fully_qualified_name: "typing.AbstractSet.__or__"
    return_annotation {
      pretty_printed_name: "typing.AbstractSet[Union[typing._T_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._T_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.AbstractSet"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__sub__"
    fully_qualified_name: "typing.AbstractSet.__sub__"
    return_annotation {
      pretty_printed_name: "typing.AbstractSet[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AbstractSet"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__xor__"
    fully_qualified_name: "typing.AbstractSet.__xor__"
    return_annotation {
      pretty_printed_name: "typing.AbstractSet[Union[typing._T_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._T_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.AbstractSet"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "isdisjoint"
    fully_qualified_name: "typing.AbstractSet.isdisjoint"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  is_generic: true
}
classes {
  name: "MutableSet"
  fully_qualified_name: "typing.MutableSet"
  super_classes: "typing.AbstractSet"
  methods {
    name: "add"
    fully_qualified_name: "typing.MutableSet.add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "discard"
    fully_qualified_name: "typing.MutableSet.discard"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "clear"
    fully_qualified_name: "typing.MutableSet.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
  }
  methods {
    name: "pop"
    fully_qualified_name: "typing.MutableSet.pop"
    return_annotation {
      pretty_printed_name: "typing._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
  }
  methods {
    name: "remove"
    fully_qualified_name: "typing.MutableSet.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__ior__"
    fully_qualified_name: "typing.MutableSet.__ior__"
    return_annotation {
      pretty_printed_name: "typing.MutableSet.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableSet.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__iand__"
    fully_qualified_name: "typing.MutableSet.__iand__"
    return_annotation {
      pretty_printed_name: "typing.MutableSet.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableSet.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__ixor__"
    fully_qualified_name: "typing.MutableSet.__ixor__"
    return_annotation {
      pretty_printed_name: "typing.MutableSet.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableSet.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__isub__"
    fully_qualified_name: "typing.MutableSet.__isub__"
    return_annotation {
      pretty_printed_name: "typing.MutableSet.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableSet.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  is_generic: true
}
classes {
  name: "MappingView"
  fully_qualified_name: "typing.MappingView"
  super_classes: "typing.Sized"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.MappingView.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MappingView"
        fully_qualified_name: "typing.MappingView"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "__len__"
    fully_qualified_name: "typing.MappingView.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MappingView"
        fully_qualified_name: "typing.MappingView"
      }
    }
  }
}
classes {
  name: "ItemsView"
  fully_qualified_name: "typing.ItemsView"
  super_classes: "typing.MappingView"
  super_classes: "typing.AbstractSet"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.ItemsView.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "__and__"
    fully_qualified_name: "typing.ItemsView.__and__"
    return_annotation {
      pretty_printed_name: "builtins.set[Tuple[typing._KT_co,typing._VT_co]]"
      args {
        pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__rand__"
    fully_qualified_name: "typing.ItemsView.__rand__"
    return_annotation {
      pretty_printed_name: "builtins.set[typing._T]"
      args {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.ItemsView.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.ItemsView.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[typing._KT_co,typing._VT_co]]"
      args {
        pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "typing.ItemsView.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[typing._KT_co,typing._VT_co]]"
      args {
        pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
  }
  methods {
    name: "__or__"
    fully_qualified_name: "typing.ItemsView.__or__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]"
      args {
        pretty_printed_name: "Union[Tuple[typing._KT_co,typing._VT_co],typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
          kind: TUPLE
          args {
            pretty_printed_name: "typing._KT_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__ror__"
    fully_qualified_name: "typing.ItemsView.__ror__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]"
      args {
        pretty_printed_name: "Union[Tuple[typing._KT_co,typing._VT_co],typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
          kind: TUPLE
          args {
            pretty_printed_name: "typing._KT_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__sub__"
    fully_qualified_name: "typing.ItemsView.__sub__"
    return_annotation {
      pretty_printed_name: "builtins.set[Tuple[typing._KT_co,typing._VT_co]]"
      args {
        pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__rsub__"
    fully_qualified_name: "typing.ItemsView.__rsub__"
    return_annotation {
      pretty_printed_name: "builtins.set[typing._T]"
      args {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__xor__"
    fully_qualified_name: "typing.ItemsView.__xor__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]"
      args {
        pretty_printed_name: "Union[Tuple[typing._KT_co,typing._VT_co],typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
          kind: TUPLE
          args {
            pretty_printed_name: "typing._KT_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__rxor__"
    fully_qualified_name: "typing.ItemsView.__rxor__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]"
      args {
        pretty_printed_name: "Union[Tuple[typing._KT_co,typing._VT_co],typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
          kind: TUPLE
          args {
            pretty_printed_name: "typing._KT_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  is_generic: true
}
classes {
  name: "KeysView"
  fully_qualified_name: "typing.KeysView"
  super_classes: "typing.MappingView"
  super_classes: "typing.AbstractSet"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.KeysView.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT_co,Any]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "__and__"
    fully_qualified_name: "typing.KeysView.__and__"
    return_annotation {
      pretty_printed_name: "builtins.set[typing._KT_co]"
      args {
        pretty_printed_name: "typing._KT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__rand__"
    fully_qualified_name: "typing.KeysView.__rand__"
    return_annotation {
      pretty_printed_name: "builtins.set[typing._T]"
      args {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.KeysView.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.KeysView.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._KT_co]"
      args {
        pretty_printed_name: "typing._KT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "typing.KeysView.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._KT_co]"
      args {
        pretty_printed_name: "typing._KT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
  }
  methods {
    name: "__or__"
    fully_qualified_name: "typing.KeysView.__or__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[typing._KT_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._KT_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__ror__"
    fully_qualified_name: "typing.KeysView.__ror__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[typing._KT_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._KT_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__sub__"
    fully_qualified_name: "typing.KeysView.__sub__"
    return_annotation {
      pretty_printed_name: "builtins.set[typing._KT_co]"
      args {
        pretty_printed_name: "typing._KT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__rsub__"
    fully_qualified_name: "typing.KeysView.__rsub__"
    return_annotation {
      pretty_printed_name: "builtins.set[typing._T]"
      args {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__xor__"
    fully_qualified_name: "typing.KeysView.__xor__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[typing._KT_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._KT_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__rxor__"
    fully_qualified_name: "typing.KeysView.__rxor__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[typing._KT_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._KT_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  is_generic: true
}
classes {
  name: "ValuesView"
  fully_qualified_name: "typing.ValuesView"
  super_classes: "typing.MappingView"
  super_classes: "typing.Collection"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.ValuesView.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.ValuesView[typing._VT_co]"
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ValuesView"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,typing._VT_co]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.ValuesView.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ValuesView[typing._VT_co]"
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ValuesView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.ValuesView.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._VT_co]"
      args {
        pretty_printed_name: "typing._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ValuesView[typing._VT_co]"
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ValuesView"
      }
    }
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "typing.ValuesView.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._VT_co]"
      args {
        pretty_printed_name: "typing._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ValuesView[typing._VT_co]"
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ValuesView"
      }
    }
  }
  is_generic: true
}
classes {
  name: "Mapping"
  fully_qualified_name: "typing.Mapping"
  super_classes: "typing.Collection"
  methods {
    name: "__getitem__"
    fully_qualified_name: "typing.Mapping.__getitem__"
    return_annotation {
      pretty_printed_name: "typing._VT_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "items"
    fully_qualified_name: "typing.Mapping.items"
    return_annotation {
      pretty_printed_name: "typing.ItemsView[typing._KT,typing._VT_co]"
      args {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.ItemsView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "keys"
    fully_qualified_name: "typing.Mapping.keys"
    return_annotation {
      pretty_printed_name: "typing.KeysView[typing._KT]"
      args {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.KeysView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "values"
    fully_qualified_name: "typing.Mapping.values"
    return_annotation {
      pretty_printed_name: "typing.ValuesView[typing._VT_co]"
      args {
        pretty_printed_name: "typing._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.ValuesView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.Mapping.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  overloaded_methods {
    name: "get"
    fullname: "typing.Mapping.get"
    definitions {
      name: "get"
      fully_qualified_name: "typing.Mapping.get"
      return_annotation {
        pretty_printed_name: "Union[typing._VT_co,None]"
        kind: UNION
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "get"
      fully_qualified_name: "typing.Mapping.get"
      return_annotation {
        pretty_printed_name: "Union[typing._VT_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing._VT_co,typing._T]"
          kind: UNION
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "MutableMapping"
  fully_qualified_name: "typing.MutableMapping"
  super_classes: "typing.Mapping"
  methods {
    name: "__setitem__"
    fully_qualified_name: "typing.MutableMapping.__setitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._VT"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "typing.MutableMapping.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "clear"
    fully_qualified_name: "typing.MutableMapping.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
  }
  methods {
    name: "popitem"
    fully_qualified_name: "typing.MutableMapping.popitem"
    return_annotation {
      pretty_printed_name: "Tuple[typing._KT,typing._VT]"
      kind: TUPLE
      args {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing._VT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
  }
  overloaded_methods {
    name: "pop"
    fullname: "typing.MutableMapping.pop"
    definitions {
      name: "pop"
      fully_qualified_name: "typing.MutableMapping.pop"
      return_annotation {
        pretty_printed_name: "typing._VT"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "pop"
      fully_qualified_name: "typing.MutableMapping.pop"
      return_annotation {
        pretty_printed_name: "Union[typing._VT,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing._VT,typing._T]"
          kind: UNION
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "setdefault"
    fullname: "typing.MutableMapping.setdefault"
    definitions {
      name: "setdefault"
      fully_qualified_name: "typing.MutableMapping.setdefault"
      return_annotation {
        pretty_printed_name: "Union[typing._T,None]"
        kind: UNION
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,Union[typing._T,None]]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "Union[typing._T,None]"
            kind: UNION
            args {
              pretty_printed_name: "typing._T"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "setdefault"
      fully_qualified_name: "typing.MutableMapping.setdefault"
      return_annotation {
        pretty_printed_name: "typing._VT"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "update"
    fullname: "typing.MutableMapping.update"
    definitions {
      name: "update"
      fully_qualified_name: "typing.MutableMapping.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsKeysAndGetItem[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsKeysAndGetItem"
        }
      }
      parameters {
        name: "kwargs"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "update"
      fully_qualified_name: "typing.MutableMapping.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[typing._KT,typing._VT]]"
          args {
            pretty_printed_name: "Tuple[typing._KT,typing._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "typing._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "typing._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "kwargs"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "update"
      fully_qualified_name: "typing.MutableMapping.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "kwargs"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "IO"
  fully_qualified_name: "typing.IO"
  super_classes: "typing.Iterator"
  methods {
    name: "mode"
    fully_qualified_name: "typing.IO.mode"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "name"
    fully_qualified_name: "typing.IO.name"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "close"
    fully_qualified_name: "typing.IO.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "closed"
    fully_qualified_name: "typing.IO.closed"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "fileno"
    fully_qualified_name: "typing.IO.fileno"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "flush"
    fully_qualified_name: "typing.IO.flush"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "isatty"
    fully_qualified_name: "typing.IO.isatty"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "read"
    fully_qualified_name: "typing.IO.read"
    return_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "readable"
    fully_qualified_name: "typing.IO.readable"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "readline"
    fully_qualified_name: "typing.IO.readline"
    return_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "readlines"
    fully_qualified_name: "typing.IO.readlines"
    return_annotation {
      pretty_printed_name: "builtins.list[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "seek"
    fully_qualified_name: "typing.IO.seek"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "seekable"
    fully_qualified_name: "typing.IO.seekable"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "tell"
    fully_qualified_name: "typing.IO.tell"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "truncate"
    fully_qualified_name: "typing.IO.truncate"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "writable"
    fully_qualified_name: "typing.IO.writable"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "__next__"
    fully_qualified_name: "typing.IO.__next__"
    return_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.IO.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "typing.IO.__enter__"
    return_annotation {
      pretty_printed_name: "typing.IO[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.IO"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "typing.IO.__exit__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.IO[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.IO"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  overloaded_methods {
    name: "write"
    fullname: "typing.IO.write"
    definitions {
      name: "write"
      fully_qualified_name: "typing.IO.write"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.IO[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.IO"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      has_decorators: true
      resolved_decorator_names: "abstractmethod"
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "write"
      fully_qualified_name: "typing.IO.write"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.IO[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "typing.IO"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      has_decorators: true
      resolved_decorator_names: "abstractmethod"
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "write"
      fully_qualified_name: "typing.IO.write"
      return_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.IO[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.IO"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "abstractmethod"
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "writelines"
    fullname: "typing.IO.writelines"
    definitions {
      name: "writelines"
      fully_qualified_name: "typing.IO.writelines"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.IO[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.IO"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.Iterable[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "abstractmethod"
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "writelines"
      fully_qualified_name: "typing.IO.writelines"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.IO[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "typing.IO"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.Iterable[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]"
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                  kind: UNION
                  args {
                    pretty_printed_name: "builtins.bytearray"
                    fully_qualified_name: "builtins.bytearray"
                  }
                  args {
                    pretty_printed_name: "builtins.memoryview"
                    fully_qualified_name: "builtins.memoryview"
                  }
                  args {
                    pretty_printed_name: "array.array[Any]"
                    args {
                      pretty_printed_name: "Any"
                      kind: ANY
                    }
                    fully_qualified_name: "array.array"
                  }
                  args {
                    pretty_printed_name: "mmap.mmap"
                    fully_qualified_name: "mmap.mmap"
                  }
                  args {
                    pretty_printed_name: "ctypes._CData"
                    fully_qualified_name: "ctypes._CData"
                  }
                  args {
                    pretty_printed_name: "pickle.PickleBuffer"
                    fully_qualified_name: "pickle.PickleBuffer"
                  }
                }
                fully_qualified_name: "_typeshed.WriteableBuffer"
              }
            }
            fully_qualified_name: "_typeshed.ReadableBuffer"
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "abstractmethod"
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "writelines"
      fully_qualified_name: "typing.IO.writelines"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.IO[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.IO"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.Iterable[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "abstractmethod"
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "BinaryIO"
  fully_qualified_name: "typing.BinaryIO"
  super_classes: "typing.IO"
  methods {
    name: "__enter__"
    fully_qualified_name: "typing.BinaryIO.__enter__"
    return_annotation {
      pretty_printed_name: "typing.BinaryIO"
      fully_qualified_name: "typing.BinaryIO"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.BinaryIO"
        fully_qualified_name: "typing.BinaryIO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
}
classes {
  name: "TextIO"
  fully_qualified_name: "typing.TextIO"
  super_classes: "typing.IO"
  methods {
    name: "buffer"
    fully_qualified_name: "typing.TextIO.buffer"
    return_annotation {
      pretty_printed_name: "typing.BinaryIO"
      fully_qualified_name: "typing.BinaryIO"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.TextIO"
        fully_qualified_name: "typing.TextIO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "encoding"
    fully_qualified_name: "typing.TextIO.encoding"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.TextIO"
        fully_qualified_name: "typing.TextIO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "errors"
    fully_qualified_name: "typing.TextIO.errors"
    return_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.TextIO"
        fully_qualified_name: "typing.TextIO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "line_buffering"
    fully_qualified_name: "typing.TextIO.line_buffering"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.TextIO"
        fully_qualified_name: "typing.TextIO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "newlines"
    fully_qualified_name: "typing.TextIO.newlines"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.TextIO"
        fully_qualified_name: "typing.TextIO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "typing.TextIO.__enter__"
    return_annotation {
      pretty_printed_name: "typing.TextIO"
      fully_qualified_name: "typing.TextIO"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.TextIO"
        fully_qualified_name: "typing.TextIO"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
}
classes {
  name: "ByteString"
  fully_qualified_name: "typing.ByteString"
  super_classes: "typing.Sequence"
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
}
classes {
  name: "NamedTuple"
  fully_qualified_name: "typing.NamedTuple"
  super_classes: "builtins.tuple"
  methods {
    name: "_make"
    fully_qualified_name: "typing.NamedTuple._make"
    return_annotation {
      pretty_printed_name: "typing._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[typing._T]"
        kind: TYPE
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "iterable"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  methods {
    name: "_asdict"
    fully_qualified_name: "typing.NamedTuple._asdict"
    return_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.NamedTuple"
        fully_qualified_name: "typing.NamedTuple"
      }
    }
  }
  methods {
    name: "_replace"
    fully_qualified_name: "typing.NamedTuple._replace"
    return_annotation {
      pretty_printed_name: "typing.NamedTuple.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.NamedTuple.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "kwargs"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  overloaded_methods {
    name: "__init__"
    fullname: "typing.NamedTuple.__init__"
    definitions {
      name: "__init__"
      fully_qualified_name: "typing.NamedTuple.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.NamedTuple"
          fully_qualified_name: "typing.NamedTuple"
        }
      }
      parameters {
        name: "typename"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "fields"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[builtins.str,Any]]"
          args {
            pretty_printed_name: "Tuple[builtins.str,Any]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "Any"
              kind: ANY
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "__init__"
      fully_qualified_name: "typing.NamedTuple.__init__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.NamedTuple"
          fully_qualified_name: "typing.NamedTuple"
        }
      }
      parameters {
        name: "typename"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "fields"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "kwargs"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Any"
          kind: ANY
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  attributes {
    name: "_field_types"
    fully_qualified_name: "typing.NamedTuple._field_types"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,builtins.type]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.type"
        fully_qualified_name: "builtins.type"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "_field_defaults"
    fully_qualified_name: "typing.NamedTuple._field_defaults"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,Any]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "_fields"
    fully_qualified_name: "typing.NamedTuple._fields"
    type_annotation {
      pretty_printed_name: "builtins.tuple[builtins.str]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      fully_qualified_name: "builtins.tuple"
    }
  }
  attributes {
    name: "_source"
    fully_qualified_name: "typing.NamedTuple._source"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "_TypedDict"
  fully_qualified_name: "typing._TypedDict"
  super_classes: "typing.Mapping"
  methods {
    name: "copy"
    fully_qualified_name: "typing._TypedDict.copy"
    return_annotation {
      pretty_printed_name: "typing._TypedDict.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._TypedDict.Self"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "setdefault"
    fully_qualified_name: "typing._TypedDict.setdefault"
    return_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._TypedDict"
        fully_qualified_name: "typing._TypedDict"
      }
    }
    parameters {
      name: "k"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "NoReturn"
        kind: UNINHABITED
      }
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  methods {
    name: "pop"
    fully_qualified_name: "typing._TypedDict.pop"
    return_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._TypedDict"
        fully_qualified_name: "typing._TypedDict"
      }
    }
    parameters {
      name: "k"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "NoReturn"
        kind: UNINHABITED
      }
    }
    parameters {
      name: "default"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "update"
    fully_qualified_name: "typing._TypedDict.update"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "typing._TypedDict.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._TypedDict"
        fully_qualified_name: "typing._TypedDict"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "NoReturn"
        kind: UNINHABITED
      }
    }
  }
  methods {
    name: "items"
    fully_qualified_name: "typing._TypedDict.items"
    return_annotation {
      pretty_printed_name: "_collections_abc.dict_items[builtins.str,builtins.object]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
      fully_qualified_name: "_collections_abc.dict_items"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._TypedDict"
        fully_qualified_name: "typing._TypedDict"
      }
    }
  }
  methods {
    name: "keys"
    fully_qualified_name: "typing._TypedDict.keys"
    return_annotation {
      pretty_printed_name: "_collections_abc.dict_keys[builtins.str,builtins.object]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
      fully_qualified_name: "_collections_abc.dict_keys"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._TypedDict"
        fully_qualified_name: "typing._TypedDict"
      }
    }
  }
  methods {
    name: "values"
    fully_qualified_name: "typing._TypedDict.values"
    return_annotation {
      pretty_printed_name: "_collections_abc.dict_values[builtins.str,builtins.object]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
      fully_qualified_name: "_collections_abc.dict_values"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._TypedDict"
        fully_qualified_name: "typing._TypedDict"
      }
    }
  }
  has_decorators: true
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
  attributes {
    name: "__total__"
    fully_qualified_name: "typing._TypedDict.__total__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
}
classes {
  name: "ForwardRef"
  fully_qualified_name: "typing.ForwardRef"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.ForwardRef.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.ForwardRef"
        fully_qualified_name: "typing.ForwardRef"
      }
    }
    parameters {
      name: "arg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "is_argument"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
  }
  methods {
    name: "_evaluate"
    fully_qualified_name: "typing.ForwardRef._evaluate"
    return_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.ForwardRef"
        fully_qualified_name: "typing.ForwardRef"
      }
    }
    parameters {
      name: "globalns"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "localns"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.dict[builtins.str,Any]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "builtins.dict"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "__eq__"
    fully_qualified_name: "typing.ForwardRef.__eq__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ForwardRef"
        fully_qualified_name: "typing.ForwardRef"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  has_decorators: true
  attributes {
    name: "__forward_arg__"
    fully_qualified_name: "typing.ForwardRef.__forward_arg__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "__forward_code__"
    fully_qualified_name: "typing.ForwardRef.__forward_code__"
    type_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
  }
  attributes {
    name: "__forward_evaluated__"
    fully_qualified_name: "typing.ForwardRef.__forward_evaluated__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "__forward_value__"
    fully_qualified_name: "typing.ForwardRef.__forward_value__"
    type_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "__forward_is_argument__"
    fully_qualified_name: "typing.ForwardRef.__forward_is_argument__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "__forward_is_class__"
    fully_qualified_name: "typing.ForwardRef.__forward_is_class__"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "__forward_module__"
    fully_qualified_name: "typing.ForwardRef.__forward_module__"
    type_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "_final"
  fully_qualified_name: "typing_extensions.final"
  return_annotation {
    pretty_printed_name: "typing_extensions._F"
    kind: TYPE_VAR
  }
  parameters {
    name: "f"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing_extensions._F"
      kind: TYPE_VAR
    }
  }
}
functions {
  name: "type_check_only"
  fully_qualified_name: "typing.type_check_only"
  return_annotation {
    pretty_printed_name: "typing._F"
    kind: TYPE_VAR
  }
  parameters {
    name: "func_or_cls"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing._F"
      kind: TYPE_VAR
    }
  }
}
functions {
  name: "overload"
  fully_qualified_name: "typing.overload"
  return_annotation {
    pretty_printed_name: "typing._F"
    kind: TYPE_VAR
  }
  parameters {
    name: "func"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing._F"
      kind: TYPE_VAR
    }
  }
}
functions {
  name: "final"
  fully_qualified_name: "typing.final"
  return_annotation {
    pretty_printed_name: "typing._T"
    kind: TYPE_VAR
  }
  parameters {
    name: "f"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing._T"
      kind: TYPE_VAR
    }
  }
}
functions {
  name: "NewType"
  fully_qualified_name: "typing.NewType"
  return_annotation {
    pretty_printed_name: "Any"
    kind: ANY
  }
  parameters {
    name: "name"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "tp"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
}
functions {
  name: "no_type_check"
  fully_qualified_name: "typing.no_type_check"
  return_annotation {
    pretty_printed_name: "typing._F"
    kind: TYPE_VAR
  }
  parameters {
    name: "arg"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing._F"
      kind: TYPE_VAR
    }
  }
}
functions {
  name: "no_type_check_decorator"
  fully_qualified_name: "typing.no_type_check_decorator"
  return_annotation {
    pretty_printed_name: "CallableType[builtins.function]"
    kind: CALLABLE
    args {
      pretty_printed_name: "builtins.function"
      fully_qualified_name: "builtins.function"
    }
  }
  parameters {
    name: "decorator"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
}
functions {
  name: "runtime_checkable"
  fully_qualified_name: "typing.runtime_checkable"
  return_annotation {
    pretty_printed_name: "typing._TC"
    kind: TYPE_VAR
  }
  parameters {
    name: "cls"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "typing._TC"
      kind: TYPE_VAR
    }
  }
}
functions {
  name: "get_type_hints"
  fully_qualified_name: "typing.get_type_hints"
  return_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
  parameters {
    name: "obj"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Union[builtins.object,CallableType[builtins.function],types.FunctionType,types.BuiltinFunctionType,types.MethodType,types.ModuleType,types.WrapperDescriptorType,types.MethodWrapperType,types.MethodDescriptorType]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[builtins.object,CallableType[builtins.function],types.FunctionType,types.BuiltinFunctionType,types.MethodType,types.ModuleType,types.WrapperDescriptorType,types.MethodWrapperType,types.MethodDescriptorType]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.object"
          fully_qualified_name: "builtins.object"
        }
        args {
          pretty_printed_name: "CallableType[builtins.function]"
          kind: CALLABLE
          args {
            pretty_printed_name: "builtins.function"
            fully_qualified_name: "builtins.function"
          }
        }
        args {
          pretty_printed_name: "types.FunctionType"
          fully_qualified_name: "types.FunctionType"
        }
        args {
          pretty_printed_name: "types.BuiltinFunctionType"
          fully_qualified_name: "types.BuiltinFunctionType"
        }
        args {
          pretty_printed_name: "types.MethodType"
          fully_qualified_name: "types.MethodType"
        }
        args {
          pretty_printed_name: "types.ModuleType"
          fully_qualified_name: "types.ModuleType"
        }
        args {
          pretty_printed_name: "types.WrapperDescriptorType"
          fully_qualified_name: "types.WrapperDescriptorType"
        }
        args {
          pretty_printed_name: "types.MethodWrapperType"
          fully_qualified_name: "types.MethodWrapperType"
        }
        args {
          pretty_printed_name: "types.MethodDescriptorType"
          fully_qualified_name: "types.MethodDescriptorType"
        }
      }
      fully_qualified_name: "typing._get_type_hints_obj_allowed_types"
    }
  }
  parameters {
    name: "globalns"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  parameters {
    name: "localns"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.dict[builtins.str,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.dict[builtins.str,Any]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.dict"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "get_args"
  fully_qualified_name: "typing.get_args"
  return_annotation {
    pretty_printed_name: "builtins.tuple[Any]"
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.tuple"
  }
  parameters {
    name: "tp"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
}
functions {
  name: "get_origin"
  fully_qualified_name: "typing.get_origin"
  return_annotation {
    pretty_printed_name: "Union[Any,None]"
    kind: UNION
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    args {
      pretty_printed_name: "None"
      kind: NONE
    }
  }
  parameters {
    name: "tp"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
}
functions {
  name: "_type_repr"
  fully_qualified_name: "typing._type_repr"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "obj"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.object"
      fully_qualified_name: "builtins.object"
    }
  }
}
overloaded_functions {
  name: "cast"
  fullname: "typing.cast"
  definitions {
    name: "cast"
    fully_qualified_name: "typing.cast"
    return_annotation {
      pretty_printed_name: "typing._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "typ"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[typing._T]"
        kind: TYPE
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "val"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "cast"
    fully_qualified_name: "typing.cast"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "typ"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "val"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "cast"
    fully_qualified_name: "typing.cast"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "typ"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    parameters {
      name: "val"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
vars {
  name: "typing_extensions"
  fully_qualified_name: "typing_extensions"
  is_imported_module: true
}
vars {
  name: "_Never"
  fully_qualified_name: "typing_extensions.Never"
  type_annotation {
    pretty_printed_name: "typing_extensions._SpecialForm"
    fully_qualified_name: "typing_extensions._SpecialForm"
  }
}
vars {
  name: "__all__"
  fully_qualified_name: "typing.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
}
vars {
  name: "Any"
  fully_qualified_name: "typing.Any"
  type_annotation {
    pretty_printed_name: "builtins.object"
    fully_qualified_name: "builtins.object"
  }
}
vars {
  name: "_promote"
  fully_qualified_name: "typing._promote"
  type_annotation {
    pretty_printed_name: "builtins.object"
    fully_qualified_name: "builtins.object"
  }
}
vars {
  name: "Union"
  fully_qualified_name: "typing.Union"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
}
vars {
  name: "Generic"
  fully_qualified_name: "typing.Generic"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
}
vars {
  name: "Protocol"
  fully_qualified_name: "typing.Protocol"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
}
vars {
  name: "Callable"
  fully_qualified_name: "typing.Callable"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
}
vars {
  name: "Type"
  fully_qualified_name: "typing.Type"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
}
vars {
  name: "NoReturn"
  fully_qualified_name: "typing.NoReturn"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
}
vars {
  name: "ClassVar"
  fully_qualified_name: "typing.ClassVar"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
}
vars {
  name: "Optional"
  fully_qualified_name: "typing.Optional"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
}
vars {
  name: "Tuple"
  fully_qualified_name: "typing.Tuple"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
}
vars {
  name: "Final"
  fully_qualified_name: "typing.Final"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
}
vars {
  name: "Literal"
  fully_qualified_name: "typing.Literal"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
}
vars {
  name: "TypedDict"
  fully_qualified_name: "typing.TypedDict"
  type_annotation {
    pretty_printed_name: "builtins.object"
    fully_qualified_name: "builtins.object"
  }
}
vars {
  name: "TYPE_CHECKING"
  fully_qualified_name: "typing.TYPE_CHECKING"
  type_annotation {
    pretty_printed_name: "builtins.bool"
    fully_qualified_name: "builtins.bool"
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "typing.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
