fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519"
classes {
  name: "X25519PublicKey"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey"
  super_classes: "builtins.object"
  methods {
    name: "from_public_bytes"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey.from_public_bytes"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey]"
        kind: TYPE
        args {
          pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey"
          fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey"
        }
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  methods {
    name: "public_bytes"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey.public_bytes"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives._serialization.Encoding"
        fully_qualified_name: "cryptography.hazmat.primitives._serialization.Encoding"
      }
    }
    parameters {
      name: "format"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives._serialization.PublicFormat"
        fully_qualified_name: "cryptography.hazmat.primitives._serialization.PublicFormat"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  has_metaclass: true
}
classes {
  name: "X25519PrivateKey"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
  super_classes: "builtins.object"
  methods {
    name: "generate"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.generate"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey]"
        kind: TYPE
        args {
          pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
          fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  methods {
    name: "from_private_bytes"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.from_private_bytes"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey]"
        kind: TYPE
        args {
          pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
          fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
        }
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    has_decorators: true
    resolved_decorator_names: "classmethod"
    is_class_method: true
  }
  methods {
    name: "public_key"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.public_key"
    return_annotation {
      pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey"
      fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  methods {
    name: "private_bytes"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.private_bytes"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
      }
    }
    parameters {
      name: "encoding"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives._serialization.Encoding"
        fully_qualified_name: "cryptography.hazmat.primitives._serialization.Encoding"
      }
    }
    parameters {
      name: "format"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives._serialization.PrivateFormat"
        fully_qualified_name: "cryptography.hazmat.primitives._serialization.PrivateFormat"
      }
    }
    parameters {
      name: "encryption_algorithm"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives._serialization.KeySerializationEncryption"
        fully_qualified_name: "cryptography.hazmat.primitives._serialization.KeySerializationEncryption"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  methods {
    name: "exchange"
    fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.exchange"
    return_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey"
      }
    }
    parameters {
      name: "peer_public_key"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey"
        fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abc.abstractmethod"
  }
  has_metaclass: true
}
vars {
  name: "__annotations__"
  fully_qualified_name: "cryptography.hazmat.primitives.asymmetric.x25519.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
