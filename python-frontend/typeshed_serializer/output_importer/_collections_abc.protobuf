fully_qualified_name: "_collections_abc"
classes {
  name: "Set"
  fully_qualified_name: "typing.AbstractSet"
  super_classes: "typing.Collection"
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.AbstractSet.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "_hash"
    fully_qualified_name: "typing.AbstractSet._hash"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__le__"
    fully_qualified_name: "typing.AbstractSet.__le__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__lt__"
    fully_qualified_name: "typing.AbstractSet.__lt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__gt__"
    fully_qualified_name: "typing.AbstractSet.__gt__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__ge__"
    fully_qualified_name: "typing.AbstractSet.__ge__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__and__"
    fully_qualified_name: "typing.AbstractSet.__and__"
    return_annotation {
      pretty_printed_name: "typing.AbstractSet[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AbstractSet"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__or__"
    fully_qualified_name: "typing.AbstractSet.__or__"
    return_annotation {
      pretty_printed_name: "typing.AbstractSet[Union[typing._T_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._T_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.AbstractSet"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__sub__"
    fully_qualified_name: "typing.AbstractSet.__sub__"
    return_annotation {
      pretty_printed_name: "typing.AbstractSet[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AbstractSet"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__xor__"
    fully_qualified_name: "typing.AbstractSet.__xor__"
    return_annotation {
      pretty_printed_name: "typing.AbstractSet[Union[typing._T_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._T_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.AbstractSet"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "isdisjoint"
    fully_qualified_name: "typing.AbstractSet.isdisjoint"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
    parameters {
      name: "other"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  is_generic: true
}
classes {
  name: "AsyncGenerator"
  fully_qualified_name: "typing.AsyncGenerator"
  super_classes: "typing.AsyncIterator"
  methods {
    name: "__anext__"
    fully_qualified_name: "typing.AsyncGenerator.__anext__"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
  }
  methods {
    name: "asend"
    fully_qualified_name: "typing.AsyncGenerator.asend"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "aclose"
    fully_qualified_name: "typing.AsyncGenerator.aclose"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[None]"
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
  }
  methods {
    name: "ag_await"
    fully_qualified_name: "typing.AsyncGenerator.ag_await"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "ag_code"
    fully_qualified_name: "typing.AsyncGenerator.ag_code"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "ag_frame"
    fully_qualified_name: "typing.AsyncGenerator.ag_frame"
    return_annotation {
      pretty_printed_name: "types.FrameType"
      fully_qualified_name: "types.FrameType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "ag_running"
    fully_qualified_name: "typing.AsyncGenerator.ag_running"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncGenerator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  overloaded_methods {
    name: "athrow"
    fullname: "typing.AsyncGenerator.athrow"
    definitions {
      name: "athrow"
      fully_qualified_name: "typing.AsyncGenerator.athrow"
      return_annotation {
        pretty_printed_name: "typing.Awaitable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Awaitable"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.AsyncGenerator"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[builtins.BaseException,builtins.object]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "builtins.object"
            fully_qualified_name: "builtins.object"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "athrow"
      fully_qualified_name: "typing.AsyncGenerator.athrow"
      return_annotation {
        pretty_printed_name: "typing.Awaitable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Awaitable"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AsyncGenerator[typing._T_co,typing._T_contra]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.AsyncGenerator"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "AsyncIterable"
  fully_qualified_name: "typing.AsyncIterable"
  super_classes: "builtins.object"
  methods {
    name: "__aiter__"
    fully_qualified_name: "typing.AsyncIterable.__aiter__"
    return_annotation {
      pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AsyncIterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncIterable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncIterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "AsyncIterator"
  fully_qualified_name: "typing.AsyncIterator"
  super_classes: "typing.AsyncIterable"
  methods {
    name: "__anext__"
    fully_qualified_name: "typing.AsyncIterator.__anext__"
    return_annotation {
      pretty_printed_name: "typing.Awaitable[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Awaitable"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncIterator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "__aiter__"
    fully_qualified_name: "typing.AsyncIterator.__aiter__"
    return_annotation {
      pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.AsyncIterator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.AsyncIterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AsyncIterator"
      }
    }
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "Awaitable"
  fully_qualified_name: "typing.Awaitable"
  super_classes: "builtins.object"
  methods {
    name: "__await__"
    fully_qualified_name: "typing.Awaitable.__await__"
    return_annotation {
      pretty_printed_name: "typing.Generator[Any,None,typing._T_co]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Awaitable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Awaitable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "ByteString"
  fully_qualified_name: "typing.ByteString"
  super_classes: "typing.Sequence"
  has_metaclass: true
  metaclass_name: "abc.ABCMeta"
}
classes {
  name: "Collection"
  fully_qualified_name: "typing.Collection"
  super_classes: "typing.Iterable"
  super_classes: "typing.Container"
  methods {
    name: "__len__"
    fully_qualified_name: "typing.Collection.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Collection[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Collection"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "Container"
  fully_qualified_name: "typing.Container"
  super_classes: "builtins.object"
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.Container.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Container[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Container"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "Coroutine"
  fully_qualified_name: "typing.Coroutine"
  super_classes: "typing.Awaitable"
  methods {
    name: "cr_await"
    fully_qualified_name: "typing.Coroutine.cr_await"
    return_annotation {
      pretty_printed_name: "Union[Any,None]"
      kind: UNION
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "cr_code"
    fully_qualified_name: "typing.Coroutine.cr_code"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "cr_frame"
    fully_qualified_name: "typing.Coroutine.cr_frame"
    return_annotation {
      pretty_printed_name: "types.FrameType"
      fully_qualified_name: "types.FrameType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "cr_running"
    fully_qualified_name: "typing.Coroutine.cr_running"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "send"
    fully_qualified_name: "typing.Coroutine.send"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "close"
    fully_qualified_name: "typing.Coroutine.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Coroutine"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  overloaded_methods {
    name: "throw"
    fullname: "typing.Coroutine.throw"
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Coroutine.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Coroutine"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[builtins.BaseException,builtins.object]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "builtins.object"
            fully_qualified_name: "builtins.object"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Coroutine.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Coroutine"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  is_generic: true
  attributes {
    name: "__qualname__"
    fully_qualified_name: "typing.Coroutine.__qualname__"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
}
classes {
  name: "Generator"
  fully_qualified_name: "typing.Generator"
  super_classes: "typing.Iterator"
  methods {
    name: "__next__"
    fully_qualified_name: "typing.Generator.__next__"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
  }
  methods {
    name: "send"
    fully_qualified_name: "typing.Generator.send"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "close"
    fully_qualified_name: "typing.Generator.close"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.Generator.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing._T_contra"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing._V_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Generator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
  }
  methods {
    name: "gi_code"
    fully_qualified_name: "typing.Generator.gi_code"
    return_annotation {
      pretty_printed_name: "types.CodeType"
      fully_qualified_name: "types.CodeType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "gi_frame"
    fully_qualified_name: "typing.Generator.gi_frame"
    return_annotation {
      pretty_printed_name: "types.FrameType"
      fully_qualified_name: "types.FrameType"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "gi_running"
    fully_qualified_name: "typing.Generator.gi_running"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "gi_yieldfrom"
    fully_qualified_name: "typing.Generator.gi_yieldfrom"
    return_annotation {
      pretty_printed_name: "Union[typing.Generator[Any,Any,Any],None]"
      kind: UNION
      args {
        pretty_printed_name: "typing.Generator[Any,Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Generator"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T_contra"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._V_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Generator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  overloaded_methods {
    name: "throw"
    fullname: "typing.Generator.throw"
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Generator.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Generator"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[builtins.BaseException,builtins.object]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
          args {
            pretty_printed_name: "builtins.object"
            fully_qualified_name: "builtins.object"
          }
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "throw"
      fully_qualified_name: "typing.Generator.throw"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Generator[typing._T_co,typing._T_contra,typing._V_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T_contra"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._V_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Generator"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "Union[types.TracebackType,None]"
          kind: UNION
          args {
            pretty_printed_name: "types.TracebackType"
            fully_qualified_name: "types.TracebackType"
          }
          args {
            pretty_printed_name: "None"
            kind: NONE
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "Hashable"
  fully_qualified_name: "typing.Hashable"
  super_classes: "builtins.object"
  methods {
    name: "__hash__"
    fully_qualified_name: "typing.Hashable.__hash__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Hashable"
        fully_qualified_name: "typing.Hashable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  has_metaclass: true
  is_protocol: true
  metaclass_name: "abc.ABCMeta"
}
classes {
  name: "ItemsView"
  fully_qualified_name: "typing.ItemsView"
  super_classes: "typing.MappingView"
  super_classes: "typing.AbstractSet"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.ItemsView.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "__and__"
    fully_qualified_name: "typing.ItemsView.__and__"
    return_annotation {
      pretty_printed_name: "builtins.set[Tuple[typing._KT_co,typing._VT_co]]"
      args {
        pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__rand__"
    fully_qualified_name: "typing.ItemsView.__rand__"
    return_annotation {
      pretty_printed_name: "builtins.set[typing._T]"
      args {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.ItemsView.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.ItemsView.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[typing._KT_co,typing._VT_co]]"
      args {
        pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "typing.ItemsView.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[Tuple[typing._KT_co,typing._VT_co]]"
      args {
        pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
  }
  methods {
    name: "__or__"
    fully_qualified_name: "typing.ItemsView.__or__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]"
      args {
        pretty_printed_name: "Union[Tuple[typing._KT_co,typing._VT_co],typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
          kind: TUPLE
          args {
            pretty_printed_name: "typing._KT_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__ror__"
    fully_qualified_name: "typing.ItemsView.__ror__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]"
      args {
        pretty_printed_name: "Union[Tuple[typing._KT_co,typing._VT_co],typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
          kind: TUPLE
          args {
            pretty_printed_name: "typing._KT_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__sub__"
    fully_qualified_name: "typing.ItemsView.__sub__"
    return_annotation {
      pretty_printed_name: "builtins.set[Tuple[typing._KT_co,typing._VT_co]]"
      args {
        pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__rsub__"
    fully_qualified_name: "typing.ItemsView.__rsub__"
    return_annotation {
      pretty_printed_name: "builtins.set[typing._T]"
      args {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__xor__"
    fully_qualified_name: "typing.ItemsView.__xor__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]"
      args {
        pretty_printed_name: "Union[Tuple[typing._KT_co,typing._VT_co],typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
          kind: TUPLE
          args {
            pretty_printed_name: "typing._KT_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__rxor__"
    fully_qualified_name: "typing.ItemsView.__rxor__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]"
      args {
        pretty_printed_name: "Union[Tuple[typing._KT_co,typing._VT_co],typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "Tuple[typing._KT_co,typing._VT_co]"
          kind: TUPLE
          args {
            pretty_printed_name: "typing._KT_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ItemsView[typing._KT_co,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ItemsView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  is_generic: true
}
classes {
  name: "Iterable"
  fully_qualified_name: "typing.Iterable"
  super_classes: "builtins.object"
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.Iterable.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "Iterator"
  fully_qualified_name: "typing.Iterator"
  super_classes: "typing.Iterable"
  methods {
    name: "__next__"
    fully_qualified_name: "typing.Iterator.__next__"
    return_annotation {
      pretty_printed_name: "typing._T_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterator"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.Iterator.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterator[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterator"
      }
    }
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "KeysView"
  fully_qualified_name: "typing.KeysView"
  super_classes: "typing.MappingView"
  super_classes: "typing.AbstractSet"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.KeysView.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT_co,Any]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "__and__"
    fully_qualified_name: "typing.KeysView.__and__"
    return_annotation {
      pretty_printed_name: "builtins.set[typing._KT_co]"
      args {
        pretty_printed_name: "typing._KT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__rand__"
    fully_qualified_name: "typing.KeysView.__rand__"
    return_annotation {
      pretty_printed_name: "builtins.set[typing._T]"
      args {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.KeysView.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.KeysView.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._KT_co]"
      args {
        pretty_printed_name: "typing._KT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "typing.KeysView.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._KT_co]"
      args {
        pretty_printed_name: "typing._KT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
  }
  methods {
    name: "__or__"
    fully_qualified_name: "typing.KeysView.__or__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[typing._KT_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._KT_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__ror__"
    fully_qualified_name: "typing.KeysView.__ror__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[typing._KT_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._KT_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__sub__"
    fully_qualified_name: "typing.KeysView.__sub__"
    return_annotation {
      pretty_printed_name: "builtins.set[typing._KT_co]"
      args {
        pretty_printed_name: "typing._KT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__rsub__"
    fully_qualified_name: "typing.KeysView.__rsub__"
    return_annotation {
      pretty_printed_name: "builtins.set[typing._T]"
      args {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__xor__"
    fully_qualified_name: "typing.KeysView.__xor__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[typing._KT_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._KT_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "__rxor__"
    fully_qualified_name: "typing.KeysView.__rxor__"
    return_annotation {
      pretty_printed_name: "builtins.set[Union[typing._KT_co,typing._T]]"
      args {
        pretty_printed_name: "Union[typing._KT_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      fully_qualified_name: "builtins.set"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.KeysView[typing._KT_co]"
        args {
          pretty_printed_name: "typing._KT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.KeysView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  is_generic: true
}
classes {
  name: "Mapping"
  fully_qualified_name: "typing.Mapping"
  super_classes: "typing.Collection"
  methods {
    name: "__getitem__"
    fully_qualified_name: "typing.Mapping.__getitem__"
    return_annotation {
      pretty_printed_name: "typing._VT_co"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "items"
    fully_qualified_name: "typing.Mapping.items"
    return_annotation {
      pretty_printed_name: "typing.ItemsView[typing._KT,typing._VT_co]"
      args {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.ItemsView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "keys"
    fully_qualified_name: "typing.Mapping.keys"
    return_annotation {
      pretty_printed_name: "typing.KeysView[typing._KT]"
      args {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.KeysView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "values"
    fully_qualified_name: "typing.Mapping.values"
    return_annotation {
      pretty_printed_name: "typing.ValuesView[typing._VT_co]"
      args {
        pretty_printed_name: "typing._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.ValuesView"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.Mapping.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  overloaded_methods {
    name: "get"
    fullname: "typing.Mapping.get"
    definitions {
      name: "get"
      fully_qualified_name: "typing.Mapping.get"
      return_annotation {
        pretty_printed_name: "Union[typing._VT_co,None]"
        kind: UNION
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "get"
      fully_qualified_name: "typing.Mapping.get"
      return_annotation {
        pretty_printed_name: "Union[typing._VT_co,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.Mapping[typing._KT,typing._VT_co]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Mapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing._VT_co,typing._T]"
          kind: UNION
          args {
            pretty_printed_name: "typing._VT_co"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "MappingView"
  fully_qualified_name: "typing.MappingView"
  super_classes: "typing.Sized"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.MappingView.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MappingView"
        fully_qualified_name: "typing.MappingView"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "__len__"
    fully_qualified_name: "typing.MappingView.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MappingView"
        fully_qualified_name: "typing.MappingView"
      }
    }
  }
}
classes {
  name: "MutableMapping"
  fully_qualified_name: "typing.MutableMapping"
  super_classes: "typing.Mapping"
  methods {
    name: "__setitem__"
    fully_qualified_name: "typing.MutableMapping.__setitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._VT"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "typing.MutableMapping.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "clear"
    fully_qualified_name: "typing.MutableMapping.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
  }
  methods {
    name: "popitem"
    fully_qualified_name: "typing.MutableMapping.popitem"
    return_annotation {
      pretty_printed_name: "Tuple[typing._KT,typing._VT]"
      kind: TUPLE
      args {
        pretty_printed_name: "typing._KT"
        kind: TYPE_VAR
      }
      args {
        pretty_printed_name: "typing._VT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
        args {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableMapping"
      }
    }
  }
  overloaded_methods {
    name: "pop"
    fullname: "typing.MutableMapping.pop"
    definitions {
      name: "pop"
      fully_qualified_name: "typing.MutableMapping.pop"
      return_annotation {
        pretty_printed_name: "typing._VT"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "pop"
      fully_qualified_name: "typing.MutableMapping.pop"
      return_annotation {
        pretty_printed_name: "Union[typing._VT,typing._T]"
        kind: UNION
        args {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "default"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing._VT,typing._T]"
          kind: UNION
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "setdefault"
    fullname: "typing.MutableMapping.setdefault"
    definitions {
      name: "setdefault"
      fully_qualified_name: "typing.MutableMapping.setdefault"
      return_annotation {
        pretty_printed_name: "Union[typing._T,None]"
        kind: UNION
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,Union[typing._T,None]]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "Union[typing._T,None]"
            kind: UNION
            args {
              pretty_printed_name: "typing._T"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "setdefault"
      fully_qualified_name: "typing.MutableMapping.setdefault"
      return_annotation {
        pretty_printed_name: "typing._VT"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._KT"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "update"
    fullname: "typing.MutableMapping.update"
    definitions {
      name: "update"
      fully_qualified_name: "typing.MutableMapping.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "_typeshed.SupportsKeysAndGetItem[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "_typeshed.SupportsKeysAndGetItem"
        }
      }
      parameters {
        name: "kwargs"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "update"
      fully_qualified_name: "typing.MutableMapping.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.Iterable[Tuple[typing._KT,typing._VT]]"
          args {
            pretty_printed_name: "Tuple[typing._KT,typing._VT]"
            kind: TUPLE
            args {
              pretty_printed_name: "typing._KT"
              kind: TYPE_VAR
            }
            args {
              pretty_printed_name: "typing._VT"
              kind: TYPE_VAR
            }
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      parameters {
        name: "kwargs"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "update"
      fully_qualified_name: "typing.MutableMapping.update"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.MutableMapping[typing._KT,typing._VT]"
          args {
            pretty_printed_name: "typing._KT"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "typing._VT"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableMapping"
        }
      }
      parameters {
        name: "kwargs"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing._VT"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "MutableSequence"
  fully_qualified_name: "typing.MutableSequence"
  super_classes: "typing.Sequence"
  methods {
    name: "insert"
    fully_qualified_name: "typing.MutableSequence.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "append"
    fully_qualified_name: "typing.MutableSequence.append"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "clear"
    fully_qualified_name: "typing.MutableSequence.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
  }
  methods {
    name: "extend"
    fully_qualified_name: "typing.MutableSequence.extend"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "reverse"
    fully_qualified_name: "typing.MutableSequence.reverse"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
  }
  methods {
    name: "pop"
    fully_qualified_name: "typing.MutableSequence.pop"
    return_annotation {
      pretty_printed_name: "typing._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "remove"
    fully_qualified_name: "typing.MutableSequence.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__iadd__"
    fully_qualified_name: "typing.MutableSequence.__iadd__"
    return_annotation {
      pretty_printed_name: "typing.MutableSequence.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableSequence.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Iterable[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  overloaded_methods {
    name: "__getitem__"
    fullname: "typing.MutableSequence.__getitem__"
    definitions {
      name: "__getitem__"
      fully_qualified_name: "typing.MutableSequence.__getitem__"
      return_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "__getitem__"
      fully_qualified_name: "typing.MutableSequence.__getitem__"
      return_annotation {
        pretty_printed_name: "typing.MutableSequence[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSequence"
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "__setitem__"
    fullname: "typing.MutableSequence.__setitem__"
    definitions {
      name: "__setitem__"
      fully_qualified_name: "typing.MutableSequence.__setitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "__setitem__"
      fully_qualified_name: "typing.MutableSequence.__setitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.Iterable[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Iterable"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "__delitem__"
    fullname: "typing.MutableSequence.__delitem__"
    definitions {
      name: "__delitem__"
      fully_qualified_name: "typing.MutableSequence.__delitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "__delitem__"
      fully_qualified_name: "typing.MutableSequence.__delitem__"
      return_annotation {
        pretty_printed_name: "None"
        kind: NONE
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.MutableSequence[typing._T]"
          args {
            pretty_printed_name: "typing._T"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.MutableSequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "MutableSet"
  fully_qualified_name: "typing.MutableSet"
  super_classes: "typing.AbstractSet"
  methods {
    name: "add"
    fully_qualified_name: "typing.MutableSet.add"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "discard"
    fully_qualified_name: "typing.MutableSet.discard"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  methods {
    name: "clear"
    fully_qualified_name: "typing.MutableSet.clear"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
  }
  methods {
    name: "pop"
    fully_qualified_name: "typing.MutableSet.pop"
    return_annotation {
      pretty_printed_name: "typing._T"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
  }
  methods {
    name: "remove"
    fully_qualified_name: "typing.MutableSet.remove"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.MutableSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.MutableSet"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing._T"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__ior__"
    fully_qualified_name: "typing.MutableSet.__ior__"
    return_annotation {
      pretty_printed_name: "typing.MutableSet.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableSet.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__iand__"
    fully_qualified_name: "typing.MutableSet.__iand__"
    return_annotation {
      pretty_printed_name: "typing.MutableSet.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableSet.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__ixor__"
    fully_qualified_name: "typing.MutableSet.__ixor__"
    return_annotation {
      pretty_printed_name: "typing.MutableSet.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableSet.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[typing._T]"
        args {
          pretty_printed_name: "typing._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  methods {
    name: "__isub__"
    fully_qualified_name: "typing.MutableSet.__isub__"
    return_annotation {
      pretty_printed_name: "typing.MutableSet.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.MutableSet.Self"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.AbstractSet[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "typing.AbstractSet"
      }
    }
  }
  is_generic: true
}
classes {
  name: "Reversible"
  fully_qualified_name: "typing.Reversible"
  super_classes: "typing.Iterable"
  methods {
    name: "__reversed__"
    fully_qualified_name: "typing.Reversible.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Reversible[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Reversible"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  is_generic: true
  is_protocol: true
}
classes {
  name: "Sequence"
  fully_qualified_name: "typing.Sequence"
  super_classes: "typing.Collection"
  super_classes: "typing.Reversible"
  methods {
    name: "index"
    fully_qualified_name: "typing.Sequence.index"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "stop"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "count"
    fully_qualified_name: "typing.Sequence.count"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.Sequence.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.Sequence.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "typing.Sequence.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._T_co]"
      args {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
    }
  }
  overloaded_methods {
    name: "__getitem__"
    fullname: "typing.Sequence.__getitem__"
    definitions {
      name: "__getitem__"
      fully_qualified_name: "typing.Sequence.__getitem__"
      return_annotation {
        pretty_printed_name: "typing._T_co"
        kind: TYPE_VAR
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.Sequence[typing._T_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
    definitions {
      name: "__getitem__"
      fully_qualified_name: "typing.Sequence.__getitem__"
      return_annotation {
        pretty_printed_name: "typing.Sequence[typing._T_co]"
        args {
          pretty_printed_name: "typing._T_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Sequence"
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "typing.Sequence[typing._T_co]"
          args {
            pretty_printed_name: "typing._T_co"
            kind: TYPE_VAR
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
      parameters {
        name: "__"
        type_annotation {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      resolved_decorator_names: "abstractmethod"
      is_overload: true
    }
  }
  is_generic: true
}
classes {
  name: "Sized"
  fully_qualified_name: "typing.Sized"
  super_classes: "builtins.object"
  methods {
    name: "__len__"
    fully_qualified_name: "typing.Sized.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.Sized"
        fully_qualified_name: "typing.Sized"
      }
    }
    has_decorators: true
    resolved_decorator_names: "abstractmethod"
  }
  has_decorators: true
  has_metaclass: true
  is_protocol: true
  metaclass_name: "abc.ABCMeta"
}
classes {
  name: "ValuesView"
  fully_qualified_name: "typing.ValuesView"
  super_classes: "typing.MappingView"
  super_classes: "typing.Collection"
  methods {
    name: "__init__"
    fully_qualified_name: "typing.ValuesView.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.ValuesView[typing._VT_co]"
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ValuesView"
      }
    }
    parameters {
      name: "mapping"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Mapping[Any,typing._VT_co]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Mapping"
      }
    }
  }
  methods {
    name: "__contains__"
    fully_qualified_name: "typing.ValuesView.__contains__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ValuesView[typing._VT_co]"
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ValuesView"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.object"
        fully_qualified_name: "builtins.object"
      }
    }
  }
  methods {
    name: "__iter__"
    fully_qualified_name: "typing.ValuesView.__iter__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._VT_co]"
      args {
        pretty_printed_name: "typing._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ValuesView[typing._VT_co]"
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ValuesView"
      }
    }
  }
  methods {
    name: "__reversed__"
    fully_qualified_name: "typing.ValuesView.__reversed__"
    return_annotation {
      pretty_printed_name: "typing.Iterator[typing._VT_co]"
      args {
        pretty_printed_name: "typing._VT_co"
        kind: TYPE_VAR
      }
      fully_qualified_name: "typing.Iterator"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "typing.ValuesView[typing._VT_co]"
        args {
          pretty_printed_name: "typing._VT_co"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.ValuesView"
      }
    }
  }
  is_generic: true
}
classes {
  name: "dict_keys"
  fully_qualified_name: "_collections_abc.dict_keys"
  super_classes: "typing.KeysView"
  has_decorators: true
  is_generic: true
}
classes {
  name: "dict_values"
  fully_qualified_name: "_collections_abc.dict_values"
  super_classes: "typing.ValuesView"
  has_decorators: true
  is_generic: true
}
classes {
  name: "dict_items"
  fully_qualified_name: "_collections_abc.dict_items"
  super_classes: "typing.ItemsView"
  has_decorators: true
  is_generic: true
}
vars {
  name: "Callable"
  fully_qualified_name: "typing.Callable"
  type_annotation {
    pretty_printed_name: "typing._SpecialForm"
    fully_qualified_name: "typing._SpecialForm"
  }
}
vars {
  name: "__all__"
  fully_qualified_name: "_collections_abc.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "_collections_abc.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
