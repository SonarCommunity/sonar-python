fully_qualified_name: "multiprocessing.sharedctypes"
classes {
  name: "_AcquireFunc"
  fully_qualified_name: "multiprocessing.sharedctypes._AcquireFunc"
  super_classes: "builtins.object"
  methods {
    name: "__call__"
    fully_qualified_name: "multiprocessing.sharedctypes._AcquireFunc.__call__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes._AcquireFunc"
        fully_qualified_name: "multiprocessing.sharedctypes._AcquireFunc"
      }
    }
    parameters {
      name: "block"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bool"
        fully_qualified_name: "builtins.bool"
      }
    }
    parameters {
      name: "timeout"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.float,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.float"
          fully_qualified_name: "builtins.float"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  is_protocol: true
}
classes {
  name: "SynchronizedBase"
  fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedBase[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase"
      }
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]],None]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
            kind: UNION
            args {
              pretty_printed_name: "multiprocessing.synchronize.Lock"
              fully_qualified_name: "multiprocessing.synchronize.Lock"
            }
            args {
              pretty_printed_name: "multiprocessing.synchronize.RLock"
              fully_qualified_name: "multiprocessing.synchronize.RLock"
            }
          }
          fully_qualified_name: "multiprocessing.synchronize._LockLike"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "__reduce__"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase.__reduce__"
    return_annotation {
      pretty_printed_name: "Tuple[CallableType[builtins.function],Tuple[Any,TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]]"
      kind: TUPLE
      args {
        pretty_printed_name: "CallableType[builtins.function]"
        kind: CALLABLE
        args {
          pretty_printed_name: "builtins.function"
          fully_qualified_name: "builtins.function"
        }
      }
      args {
        pretty_printed_name: "Tuple[Any,TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
        kind: TUPLE
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
            kind: UNION
            args {
              pretty_printed_name: "multiprocessing.synchronize.Lock"
              fully_qualified_name: "multiprocessing.synchronize.Lock"
            }
            args {
              pretty_printed_name: "multiprocessing.synchronize.RLock"
              fully_qualified_name: "multiprocessing.synchronize.RLock"
            }
          }
          fully_qualified_name: "multiprocessing.synchronize._LockLike"
        }
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedBase[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase"
      }
    }
  }
  methods {
    name: "get_obj"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase.get_obj"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes._CT"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedBase[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase"
      }
    }
  }
  methods {
    name: "get_lock"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase.get_lock"
    return_annotation {
      pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
        kind: UNION
        args {
          pretty_printed_name: "multiprocessing.synchronize.Lock"
          fully_qualified_name: "multiprocessing.synchronize.Lock"
        }
        args {
          pretty_printed_name: "multiprocessing.synchronize.RLock"
          fully_qualified_name: "multiprocessing.synchronize.RLock"
        }
      }
      fully_qualified_name: "multiprocessing.synchronize._LockLike"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedBase[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase"
      }
    }
  }
  methods {
    name: "__enter__"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase.__enter__"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedBase[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase"
      }
    }
  }
  methods {
    name: "__exit__"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase.__exit__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedBase[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[Type[builtins.BaseException],None]"
        kind: UNION
        args {
          pretty_printed_name: "Type[builtins.BaseException]"
          kind: TYPE
          args {
            pretty_printed_name: "builtins.BaseException"
            fully_qualified_name: "builtins.BaseException"
          }
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.BaseException,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.BaseException"
          fully_qualified_name: "builtins.BaseException"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[types.TracebackType,None]"
        kind: UNION
        args {
          pretty_printed_name: "types.TracebackType"
          fully_qualified_name: "types.TracebackType"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  is_generic: true
  attributes {
    name: "acquire"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase.acquire"
    type_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes._AcquireFunc"
      fully_qualified_name: "multiprocessing.sharedctypes._AcquireFunc"
    }
  }
  attributes {
    name: "release"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase.release"
    type_annotation {
      pretty_printed_name: "CallableType[builtins.function]"
      kind: CALLABLE
      args {
        pretty_printed_name: "builtins.function"
        fully_qualified_name: "builtins.function"
      }
    }
  }
}
classes {
  name: "Synchronized"
  fully_qualified_name: "multiprocessing.sharedctypes.Synchronized"
  super_classes: "multiprocessing.sharedctypes.SynchronizedBase"
  is_generic: true
  attributes {
    name: "value"
    fully_qualified_name: "multiprocessing.sharedctypes.Synchronized.value"
    type_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes._T"
      kind: TYPE_VAR
    }
  }
}
classes {
  name: "SynchronizedArray"
  fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray"
  super_classes: "multiprocessing.sharedctypes.SynchronizedBase"
  methods {
    name: "__len__"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedArray[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray"
      }
    }
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray.__getitem__"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes._CT"
      kind: TYPE_VAR
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedArray[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "__setitem__"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray.__setitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedArray[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes._CT"
        kind: TYPE_VAR
      }
    }
  }
  methods {
    name: "__getslice__"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray.__getslice__"
    return_annotation {
      pretty_printed_name: "builtins.list[multiprocessing.sharedctypes._CT]"
      args {
        pretty_printed_name: "multiprocessing.sharedctypes._CT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "builtins.list"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedArray[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray"
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "stop"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "__setslice__"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray.__setslice__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedArray[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray"
      }
    }
    parameters {
      name: "start"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "stop"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "values"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  is_generic: true
}
classes {
  name: "SynchronizedString"
  fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedString"
  super_classes: "multiprocessing.sharedctypes.SynchronizedArray"
  attributes {
    name: "value"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedString.value"
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
  attributes {
    name: "raw"
    fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedString.raw"
    type_annotation {
      pretty_printed_name: "builtins.bytes"
      fully_qualified_name: "builtins.bytes"
    }
  }
}
functions {
  name: "copy"
  fully_qualified_name: "multiprocessing.sharedctypes.copy"
  return_annotation {
    pretty_printed_name: "multiprocessing.sharedctypes._CT"
    kind: TYPE_VAR
  }
  parameters {
    name: "obj"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes._CT"
      kind: TYPE_VAR
    }
  }
}
overloaded_functions {
  name: "RawValue"
  fullname: "multiprocessing.sharedctypes.RawValue"
  definitions {
    name: "RawValue"
    fully_qualified_name: "multiprocessing.sharedctypes.RawValue"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes._CT"
      kind: TYPE_VAR
    }
    parameters {
      name: "typecode_or_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[multiprocessing.sharedctypes._CT]"
        kind: TYPE
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "RawValue"
    fully_qualified_name: "multiprocessing.sharedctypes.RawValue"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "typecode_or_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "RawArray"
  fullname: "multiprocessing.sharedctypes.RawArray"
  definitions {
    name: "RawArray"
    fully_qualified_name: "multiprocessing.sharedctypes.RawArray"
    return_annotation {
      pretty_printed_name: "ctypes.Array[multiprocessing.sharedctypes._CT]"
      args {
        pretty_printed_name: "multiprocessing.sharedctypes._CT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "ctypes.Array"
    }
    parameters {
      name: "typecode_or_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[multiprocessing.sharedctypes._CT]"
        kind: TYPE
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "size_or_initializer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,typing.Sequence[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.Sequence[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "RawArray"
    fully_qualified_name: "multiprocessing.sharedctypes.RawArray"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "typecode_or_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "size_or_initializer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,typing.Sequence[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.Sequence[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "Value"
  fullname: "multiprocessing.sharedctypes.Value"
  definitions {
    name: "Value"
    fully_qualified_name: "multiprocessing.sharedctypes.Value"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes._CT"
      kind: TYPE_VAR
    }
    parameters {
      name: "typecode_or_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[multiprocessing.sharedctypes._CT]"
        kind: TYPE
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Literal[builtins.bool]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[multiprocessing.context.BaseContext,None]"
        kind: UNION
        args {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "Value"
    fully_qualified_name: "multiprocessing.sharedctypes.Value"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedBase[multiprocessing.sharedctypes._CT]"
      args {
        pretty_printed_name: "multiprocessing.sharedctypes._CT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase"
    }
    parameters {
      name: "typecode_or_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[multiprocessing.sharedctypes._CT]"
        kind: TYPE
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.bool],TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.bool]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
        }
        args {
          pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
            kind: UNION
            args {
              pretty_printed_name: "multiprocessing.synchronize.Lock"
              fully_qualified_name: "multiprocessing.synchronize.Lock"
            }
            args {
              pretty_printed_name: "multiprocessing.synchronize.RLock"
              fully_qualified_name: "multiprocessing.synchronize.RLock"
            }
          }
          fully_qualified_name: "multiprocessing.synchronize._LockLike"
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[multiprocessing.context.BaseContext,None]"
        kind: UNION
        args {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "Value"
    fully_qualified_name: "multiprocessing.sharedctypes.Value"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedBase[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase"
    }
    parameters {
      name: "typecode_or_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.bool],TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.bool]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
        }
        args {
          pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
            kind: UNION
            args {
              pretty_printed_name: "multiprocessing.synchronize.Lock"
              fully_qualified_name: "multiprocessing.synchronize.Lock"
            }
            args {
              pretty_printed_name: "multiprocessing.synchronize.RLock"
              fully_qualified_name: "multiprocessing.synchronize.RLock"
            }
          }
          fully_qualified_name: "multiprocessing.synchronize._LockLike"
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[multiprocessing.context.BaseContext,None]"
        kind: UNION
        args {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "Value"
    fully_qualified_name: "multiprocessing.sharedctypes.Value"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "typecode_or_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,Type[ctypes._CData]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Type[ctypes._CData]"
          kind: TYPE
          args {
            pretty_printed_name: "ctypes._CData"
            fully_qualified_name: "ctypes._CData"
          }
        }
      }
    }
    parameters {
      name: "args"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
            kind: UNION
            args {
              pretty_printed_name: "multiprocessing.synchronize.Lock"
              fully_qualified_name: "multiprocessing.synchronize.Lock"
            }
            args {
              pretty_printed_name: "multiprocessing.synchronize.RLock"
              fully_qualified_name: "multiprocessing.synchronize.RLock"
            }
          }
          fully_qualified_name: "multiprocessing.synchronize._LockLike"
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[multiprocessing.context.BaseContext,None]"
        kind: UNION
        args {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "Array"
  fullname: "multiprocessing.sharedctypes.Array"
  definitions {
    name: "Array"
    fully_qualified_name: "multiprocessing.sharedctypes.Array"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes._CT"
      kind: TYPE_VAR
    }
    parameters {
      name: "typecode_or_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[multiprocessing.sharedctypes._CT]"
        kind: TYPE
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "size_or_initializer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,typing.Sequence[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.Sequence[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Literal[builtins.bool]"
        kind: LITERAL
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[multiprocessing.context.BaseContext,None]"
        kind: UNION
        args {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "Array"
    fully_qualified_name: "multiprocessing.sharedctypes.Array"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedArray[multiprocessing.sharedctypes._CT]"
      args {
        pretty_printed_name: "multiprocessing.sharedctypes._CT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray"
    }
    parameters {
      name: "typecode_or_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[multiprocessing.sharedctypes._CT]"
        kind: TYPE
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "size_or_initializer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,typing.Sequence[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.Sequence[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.bool],TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.bool]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
        }
        args {
          pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
            kind: UNION
            args {
              pretty_printed_name: "multiprocessing.synchronize.Lock"
              fully_qualified_name: "multiprocessing.synchronize.Lock"
            }
            args {
              pretty_printed_name: "multiprocessing.synchronize.RLock"
              fully_qualified_name: "multiprocessing.synchronize.RLock"
            }
          }
          fully_qualified_name: "multiprocessing.synchronize._LockLike"
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[multiprocessing.context.BaseContext,None]"
        kind: UNION
        args {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "Array"
    fully_qualified_name: "multiprocessing.sharedctypes.Array"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedArray[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray"
    }
    parameters {
      name: "typecode_or_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "size_or_initializer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,typing.Sequence[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.Sequence[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Literal[builtins.bool],TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
        kind: UNION
        args {
          pretty_printed_name: "Literal[builtins.bool]"
          kind: LITERAL
          args {
            pretty_printed_name: "builtins.bool"
            fully_qualified_name: "builtins.bool"
          }
        }
        args {
          pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
            kind: UNION
            args {
              pretty_printed_name: "multiprocessing.synchronize.Lock"
              fully_qualified_name: "multiprocessing.synchronize.Lock"
            }
            args {
              pretty_printed_name: "multiprocessing.synchronize.RLock"
              fully_qualified_name: "multiprocessing.synchronize.RLock"
            }
          }
          fully_qualified_name: "multiprocessing.synchronize._LockLike"
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[multiprocessing.context.BaseContext,None]"
        kind: UNION
        args {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "Array"
    fully_qualified_name: "multiprocessing.sharedctypes.Array"
    return_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
    parameters {
      name: "typecode_or_type"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,Type[ctypes._CData]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "Type[ctypes._CData]"
          kind: TYPE
          args {
            pretty_printed_name: "ctypes._CData"
            fully_qualified_name: "ctypes._CData"
          }
        }
      }
    }
    parameters {
      name: "size_or_initializer"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,typing.Sequence[Any]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "typing.Sequence[Any]"
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
          fully_qualified_name: "typing.Sequence"
        }
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.bool,TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.bool"
          fully_qualified_name: "builtins.bool"
        }
        args {
          pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
            kind: UNION
            args {
              pretty_printed_name: "multiprocessing.synchronize.Lock"
              fully_qualified_name: "multiprocessing.synchronize.Lock"
            }
            args {
              pretty_printed_name: "multiprocessing.synchronize.RLock"
              fully_qualified_name: "multiprocessing.synchronize.RLock"
            }
          }
          fully_qualified_name: "multiprocessing.synchronize._LockLike"
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[multiprocessing.context.BaseContext,None]"
        kind: UNION
        args {
          pretty_printed_name: "multiprocessing.context.BaseContext"
          fully_qualified_name: "multiprocessing.context.BaseContext"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
overloaded_functions {
  name: "synchronized"
  fullname: "multiprocessing.sharedctypes.synchronized"
  definitions {
    name: "synchronized"
    fully_qualified_name: "multiprocessing.sharedctypes.synchronized"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes.Synchronized[multiprocessing.sharedctypes._T]"
      args {
        pretty_printed_name: "multiprocessing.sharedctypes._T"
        kind: TYPE_VAR
      }
      fully_qualified_name: "multiprocessing.sharedctypes.Synchronized"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "ctypes._SimpleCData[multiprocessing.sharedctypes._T]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._T"
          kind: TYPE_VAR
        }
        fully_qualified_name: "ctypes._SimpleCData"
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]],None]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
            kind: UNION
            args {
              pretty_printed_name: "multiprocessing.synchronize.Lock"
              fully_qualified_name: "multiprocessing.synchronize.Lock"
            }
            args {
              pretty_printed_name: "multiprocessing.synchronize.RLock"
              fully_qualified_name: "multiprocessing.synchronize.RLock"
            }
          }
          fully_qualified_name: "multiprocessing.synchronize._LockLike"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "synchronized"
    fully_qualified_name: "multiprocessing.sharedctypes.synchronized"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedString"
      fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedString"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "ctypes.Array[ctypes.c_char]"
        args {
          pretty_printed_name: "ctypes.c_char"
          fully_qualified_name: "ctypes.c_char"
        }
        fully_qualified_name: "ctypes.Array"
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]],None]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
            kind: UNION
            args {
              pretty_printed_name: "multiprocessing.synchronize.Lock"
              fully_qualified_name: "multiprocessing.synchronize.Lock"
            }
            args {
              pretty_printed_name: "multiprocessing.synchronize.RLock"
              fully_qualified_name: "multiprocessing.synchronize.RLock"
            }
          }
          fully_qualified_name: "multiprocessing.synchronize._LockLike"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "synchronized"
    fully_qualified_name: "multiprocessing.sharedctypes.synchronized"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedArray[multiprocessing.sharedctypes._CT]"
      args {
        pretty_printed_name: "multiprocessing.sharedctypes._CT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedArray"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "ctypes.Array[multiprocessing.sharedctypes._CT]"
        args {
          pretty_printed_name: "multiprocessing.sharedctypes._CT"
          kind: TYPE_VAR
        }
        fully_qualified_name: "ctypes.Array"
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]],None]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
            kind: UNION
            args {
              pretty_printed_name: "multiprocessing.synchronize.Lock"
              fully_qualified_name: "multiprocessing.synchronize.Lock"
            }
            args {
              pretty_printed_name: "multiprocessing.synchronize.RLock"
              fully_qualified_name: "multiprocessing.synchronize.RLock"
            }
          }
          fully_qualified_name: "multiprocessing.synchronize._LockLike"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "synchronized"
    fully_qualified_name: "multiprocessing.sharedctypes.synchronized"
    return_annotation {
      pretty_printed_name: "multiprocessing.sharedctypes.SynchronizedBase[multiprocessing.sharedctypes._CT]"
      args {
        pretty_printed_name: "multiprocessing.sharedctypes._CT"
        kind: TYPE_VAR
      }
      fully_qualified_name: "multiprocessing.sharedctypes.SynchronizedBase"
    }
    parameters {
      name: "obj"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "multiprocessing.sharedctypes._CT"
        kind: TYPE_VAR
      }
    }
    parameters {
      name: "lock"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]],None]"
        kind: UNION
        args {
          pretty_printed_name: "TypeAlias[Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[multiprocessing.synchronize.Lock,multiprocessing.synchronize.RLock]"
            kind: UNION
            args {
              pretty_printed_name: "multiprocessing.synchronize.Lock"
              fully_qualified_name: "multiprocessing.synchronize.Lock"
            }
            args {
              pretty_printed_name: "multiprocessing.synchronize.RLock"
              fully_qualified_name: "multiprocessing.synchronize.RLock"
            }
          }
          fully_qualified_name: "multiprocessing.synchronize._LockLike"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "ctx"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[Any,None]"
        kind: UNION
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "multiprocessing.sharedctypes.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "__all__"
  fully_qualified_name: "multiprocessing.sharedctypes.__all__"
  type_annotation {
    pretty_printed_name: "builtins.list[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.list"
  }
}
