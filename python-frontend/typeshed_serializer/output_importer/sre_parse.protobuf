fully_qualified_name: "sre_parse"
classes {
  name: "_Pattern"
  fully_qualified_name: "re.Pattern"
  super_classes: "builtins.object"
  methods {
    name: "flags"
    fully_qualified_name: "re.Pattern.flags"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Pattern"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "groupindex"
    fully_qualified_name: "re.Pattern.groupindex"
    return_annotation {
      pretty_printed_name: "typing.Mapping[builtins.str,builtins.int]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "typing.Mapping"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Pattern"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "groups"
    fully_qualified_name: "re.Pattern.groups"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Pattern"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "pattern"
    fully_qualified_name: "re.Pattern.pattern"
    return_annotation {
      pretty_printed_name: "typing.AnyStr"
      kind: TYPE_VAR
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Pattern"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "__copy__"
    fully_qualified_name: "re.Pattern.__copy__"
    return_annotation {
      pretty_printed_name: "re.Pattern[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "re.Pattern"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Pattern"
      }
    }
  }
  methods {
    name: "__deepcopy__"
    fully_qualified_name: "re.Pattern.__deepcopy__"
    return_annotation {
      pretty_printed_name: "re.Pattern[typing.AnyStr]"
      args {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      fully_qualified_name: "re.Pattern"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "re.Pattern"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  overloaded_methods {
    name: "search"
    fullname: "re.Pattern.search"
    definitions {
      name: "search"
      fully_qualified_name: "re.Pattern.search"
      return_annotation {
        pretty_printed_name: "Union[re.Match[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "search"
      fully_qualified_name: "re.Pattern.search"
      return_annotation {
        pretty_printed_name: "Union[re.Match[builtins.bytes],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "search"
      fully_qualified_name: "re.Pattern.search"
      return_annotation {
        pretty_printed_name: "Union[re.Match[typing.AnyStr],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "match"
    fullname: "re.Pattern.match"
    definitions {
      name: "match"
      fully_qualified_name: "re.Pattern.match"
      return_annotation {
        pretty_printed_name: "Union[re.Match[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "match"
      fully_qualified_name: "re.Pattern.match"
      return_annotation {
        pretty_printed_name: "Union[re.Match[builtins.bytes],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "match"
      fully_qualified_name: "re.Pattern.match"
      return_annotation {
        pretty_printed_name: "Union[re.Match[typing.AnyStr],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "fullmatch"
    fullname: "re.Pattern.fullmatch"
    definitions {
      name: "fullmatch"
      fully_qualified_name: "re.Pattern.fullmatch"
      return_annotation {
        pretty_printed_name: "Union[re.Match[builtins.str],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "fullmatch"
      fully_qualified_name: "re.Pattern.fullmatch"
      return_annotation {
        pretty_printed_name: "Union[re.Match[builtins.bytes],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "fullmatch"
      fully_qualified_name: "re.Pattern.fullmatch"
      return_annotation {
        pretty_printed_name: "Union[re.Match[typing.AnyStr],None]"
        kind: UNION
        args {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "split"
    fullname: "re.Pattern.split"
    definitions {
      name: "split"
      fully_qualified_name: "re.Pattern.split"
      return_annotation {
        pretty_printed_name: "builtins.list[Union[builtins.str,Any]]"
        args {
          pretty_printed_name: "Union[builtins.str,Any]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "maxsplit"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "split"
      fully_qualified_name: "re.Pattern.split"
      return_annotation {
        pretty_printed_name: "builtins.list[Union[builtins.bytes,Any]]"
        args {
          pretty_printed_name: "Union[builtins.bytes,Any]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "maxsplit"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "split"
      fully_qualified_name: "re.Pattern.split"
      return_annotation {
        pretty_printed_name: "builtins.list[Union[typing.AnyStr,Any]]"
        args {
          pretty_printed_name: "Union[typing.AnyStr,Any]"
          kind: UNION
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "Any"
            kind: ANY
          }
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "maxsplit"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "findall"
    fullname: "re.Pattern.findall"
    definitions {
      name: "findall"
      fully_qualified_name: "re.Pattern.findall"
      return_annotation {
        pretty_printed_name: "builtins.list[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "findall"
      fully_qualified_name: "re.Pattern.findall"
      return_annotation {
        pretty_printed_name: "builtins.list[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "findall"
      fully_qualified_name: "re.Pattern.findall"
      return_annotation {
        pretty_printed_name: "builtins.list[typing.AnyStr]"
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        fully_qualified_name: "builtins.list"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "finditer"
    fullname: "re.Pattern.finditer"
    definitions {
      name: "finditer"
      fully_qualified_name: "re.Pattern.finditer"
      return_annotation {
        pretty_printed_name: "typing.Iterator[re.Match[builtins.str]]"
        args {
          pretty_printed_name: "re.Match[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Match"
        }
        fully_qualified_name: "typing.Iterator"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "finditer"
      fully_qualified_name: "re.Pattern.finditer"
      return_annotation {
        pretty_printed_name: "typing.Iterator[re.Match[builtins.bytes]]"
        args {
          pretty_printed_name: "re.Match[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Match"
        }
        fully_qualified_name: "typing.Iterator"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "finditer"
      fully_qualified_name: "re.Pattern.finditer"
      return_annotation {
        pretty_printed_name: "typing.Iterator[re.Match[typing.AnyStr]]"
        args {
          pretty_printed_name: "re.Match[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Match"
        }
        fully_qualified_name: "typing.Iterator"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "pos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "endpos"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "sub"
    fullname: "re.Pattern.sub"
    definitions {
      name: "sub"
      fully_qualified_name: "re.Pattern.sub"
      return_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "repl"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "count"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "sub"
      fully_qualified_name: "re.Pattern.sub"
      return_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "repl"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                  kind: UNION
                  args {
                    pretty_printed_name: "builtins.bytearray"
                    fully_qualified_name: "builtins.bytearray"
                  }
                  args {
                    pretty_printed_name: "builtins.memoryview"
                    fully_qualified_name: "builtins.memoryview"
                  }
                  args {
                    pretty_printed_name: "array.array[Any]"
                    args {
                      pretty_printed_name: "Any"
                      kind: ANY
                    }
                    fully_qualified_name: "array.array"
                  }
                  args {
                    pretty_printed_name: "mmap.mmap"
                    fully_qualified_name: "mmap.mmap"
                  }
                  args {
                    pretty_printed_name: "ctypes._CData"
                    fully_qualified_name: "ctypes._CData"
                  }
                  args {
                    pretty_printed_name: "pickle.PickleBuffer"
                    fully_qualified_name: "pickle.PickleBuffer"
                  }
                }
                fully_qualified_name: "_typeshed.WriteableBuffer"
              }
            }
            fully_qualified_name: "_typeshed.ReadableBuffer"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "count"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "sub"
      fully_qualified_name: "re.Pattern.sub"
      return_annotation {
        pretty_printed_name: "typing.AnyStr"
        kind: TYPE_VAR
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "repl"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing.AnyStr,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "count"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  overloaded_methods {
    name: "subn"
    fullname: "re.Pattern.subn"
    definitions {
      name: "subn"
      fully_qualified_name: "re.Pattern.subn"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.str,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.str]"
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "repl"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[builtins.str,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "builtins.str"
            fully_qualified_name: "builtins.str"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
      }
      parameters {
        name: "count"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "subn"
      fully_qualified_name: "re.Pattern.subn"
      return_annotation {
        pretty_printed_name: "Tuple[builtins.bytes,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[builtins.bytes]"
          args {
            pretty_printed_name: "builtins.bytes"
            fully_qualified_name: "builtins.bytes"
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "repl"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
              kind: UNION
              args {
                pretty_printed_name: "builtins.bytes"
                fully_qualified_name: "builtins.bytes"
              }
              args {
                pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                  kind: UNION
                  args {
                    pretty_printed_name: "builtins.bytearray"
                    fully_qualified_name: "builtins.bytearray"
                  }
                  args {
                    pretty_printed_name: "builtins.memoryview"
                    fully_qualified_name: "builtins.memoryview"
                  }
                  args {
                    pretty_printed_name: "array.array[Any]"
                    args {
                      pretty_printed_name: "Any"
                      kind: ANY
                    }
                    fully_qualified_name: "array.array"
                  }
                  args {
                    pretty_printed_name: "mmap.mmap"
                    fully_qualified_name: "mmap.mmap"
                  }
                  args {
                    pretty_printed_name: "ctypes._CData"
                    fully_qualified_name: "ctypes._CData"
                  }
                  args {
                    pretty_printed_name: "pickle.PickleBuffer"
                    fully_qualified_name: "pickle.PickleBuffer"
                  }
                }
                fully_qualified_name: "_typeshed.WriteableBuffer"
              }
            }
            fully_qualified_name: "_typeshed.ReadableBuffer"
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]"
          kind: TYPE_ALIAS
          args {
            pretty_printed_name: "Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]"
              kind: TYPE_ALIAS
              args {
                pretty_printed_name: "Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]"
                kind: UNION
                args {
                  pretty_printed_name: "builtins.bytearray"
                  fully_qualified_name: "builtins.bytearray"
                }
                args {
                  pretty_printed_name: "builtins.memoryview"
                  fully_qualified_name: "builtins.memoryview"
                }
                args {
                  pretty_printed_name: "array.array[Any]"
                  args {
                    pretty_printed_name: "Any"
                    kind: ANY
                  }
                  fully_qualified_name: "array.array"
                }
                args {
                  pretty_printed_name: "mmap.mmap"
                  fully_qualified_name: "mmap.mmap"
                }
                args {
                  pretty_printed_name: "ctypes._CData"
                  fully_qualified_name: "ctypes._CData"
                }
                args {
                  pretty_printed_name: "pickle.PickleBuffer"
                  fully_qualified_name: "pickle.PickleBuffer"
                }
              }
              fully_qualified_name: "_typeshed.WriteableBuffer"
            }
          }
          fully_qualified_name: "_typeshed.ReadableBuffer"
        }
      }
      parameters {
        name: "count"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
    definitions {
      name: "subn"
      fully_qualified_name: "re.Pattern.subn"
      return_annotation {
        pretty_printed_name: "Tuple[typing.AnyStr,builtins.int]"
        kind: TUPLE
        args {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      parameters {
        name: "self"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "re.Pattern[typing.AnyStr]"
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          fully_qualified_name: "re.Pattern"
        }
      }
      parameters {
        name: "repl"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "Union[typing.AnyStr,CallableType[builtins.function]]"
          kind: UNION
          args {
            pretty_printed_name: "typing.AnyStr"
            kind: TYPE_VAR
          }
          args {
            pretty_printed_name: "CallableType[builtins.function]"
            kind: CALLABLE
            args {
              pretty_printed_name: "builtins.function"
              fully_qualified_name: "builtins.function"
            }
          }
        }
      }
      parameters {
        name: "string"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "typing.AnyStr"
          kind: TYPE_VAR
        }
      }
      parameters {
        name: "count"
        kind: POSITIONAL_OR_KEYWORD
        type_annotation {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
      }
      has_decorators: true
      resolved_decorator_names: "overload"
      is_overload: true
    }
  }
  has_decorators: true
  is_generic: true
}
classes {
  name: "_NIC"
  fully_qualified_name: "sre_constants._NamedIntConstant"
  super_classes: "builtins.int"
  methods {
    name: "__new__"
    fully_qualified_name: "sre_constants._NamedIntConstant.__new__"
    return_annotation {
      pretty_printed_name: "sre_constants._NamedIntConstant.Self"
      kind: TYPE_VAR
    }
    parameters {
      name: "cls"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Type[sre_constants._NamedIntConstant.Self]"
        kind: TYPE
        args {
          pretty_printed_name: "sre_constants._NamedIntConstant.Self"
          kind: TYPE_VAR
        }
      }
    }
    parameters {
      name: "value"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  attributes {
    name: "name"
    fully_qualified_name: "sre_constants._NamedIntConstant.name"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
}
classes {
  name: "_Error"
  fully_qualified_name: "sre_constants.error"
  super_classes: "builtins.Exception"
  methods {
    name: "__init__"
    fully_qualified_name: "sre_constants.error.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_constants.error"
        fully_qualified_name: "sre_constants.error"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "pattern"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,builtins.bytes,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "builtins.bytes"
          fully_qualified_name: "builtins.bytes"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
    parameters {
      name: "pos"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  attributes {
    name: "msg"
    fully_qualified_name: "sre_constants.error.msg"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "pattern"
    fully_qualified_name: "sre_constants.error.pattern"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,builtins.bytes,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "pos"
    fully_qualified_name: "sre_constants.error.pos"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "lineno"
    fully_qualified_name: "sre_constants.error.lineno"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "colno"
    fully_qualified_name: "sre_constants.error.colno"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
classes {
  name: "Verbose"
  fully_qualified_name: "sre_parse.Verbose"
  super_classes: "builtins.Exception"
}
classes {
  name: "_State"
  fully_qualified_name: "sre_parse._State"
  super_classes: "builtins.object"
  methods {
    name: "groups"
    fully_qualified_name: "sre_parse._State.groups"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse._State"
        fully_qualified_name: "sre_parse._State"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "opengroup"
    fully_qualified_name: "sre_parse._State.opengroup"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse._State"
        fully_qualified_name: "sre_parse._State"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.str,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "closegroup"
    fully_qualified_name: "sre_parse._State.closegroup"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse._State"
        fully_qualified_name: "sre_parse._State"
      }
    }
    parameters {
      name: "gid"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "p"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.SubPattern"
        fully_qualified_name: "sre_parse.SubPattern"
      }
    }
  }
  methods {
    name: "checkgroup"
    fully_qualified_name: "sre_parse._State.checkgroup"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse._State"
        fully_qualified_name: "sre_parse._State"
      }
    }
    parameters {
      name: "gid"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "checklookbehindgroup"
    fully_qualified_name: "sre_parse._State.checklookbehindgroup"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse._State"
        fully_qualified_name: "sre_parse._State"
      }
    }
    parameters {
      name: "gid"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "source"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.Tokenizer"
        fully_qualified_name: "sre_parse.Tokenizer"
      }
    }
  }
  attributes {
    name: "flags"
    fully_qualified_name: "sre_parse._State.flags"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "groupdict"
    fully_qualified_name: "sre_parse._State.groupdict"
    type_annotation {
      pretty_printed_name: "builtins.dict[builtins.str,builtins.int]"
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      fully_qualified_name: "builtins.dict"
    }
  }
  attributes {
    name: "groupwidths"
    fully_qualified_name: "sre_parse._State.groupwidths"
    type_annotation {
      pretty_printed_name: "builtins.list[Union[builtins.int,None]]"
      args {
        pretty_printed_name: "Union[builtins.int,None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
      fully_qualified_name: "builtins.list"
    }
  }
  attributes {
    name: "lookbehindgroups"
    fully_qualified_name: "sre_parse._State.lookbehindgroups"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
classes {
  name: "SubPattern"
  fully_qualified_name: "sre_parse.SubPattern"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "sre_parse.SubPattern.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.SubPattern"
        fully_qualified_name: "sre_parse.SubPattern"
      }
    }
    parameters {
      name: "state"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse._State"
        fully_qualified_name: "sre_parse._State"
      }
    }
    parameters {
      name: "data"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Union[builtins.list[TypeAlias[Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]]],None]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.list[TypeAlias[Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]]]"
          args {
            pretty_printed_name: "TypeAlias[Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]"
              kind: TUPLE
              args {
                pretty_printed_name: "sre_constants._NamedIntConstant"
                fully_qualified_name: "sre_constants._NamedIntConstant"
              }
              args {
                pretty_printed_name: "TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]"
                  kind: UNION
                  args {
                    pretty_printed_name: "TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]]"
                    kind: TYPE_ALIAS
                    args {
                      pretty_printed_name: "builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]"
                      args {
                        pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,builtins.int]"
                        kind: TUPLE
                        args {
                          pretty_printed_name: "sre_constants._NamedIntConstant"
                          fully_qualified_name: "sre_constants._NamedIntConstant"
                        }
                        args {
                          pretty_printed_name: "builtins.int"
                          fully_qualified_name: "builtins.int"
                        }
                      }
                      fully_qualified_name: "builtins.list"
                    }
                    fully_qualified_name: "sre_parse._OpInType"
                  }
                  args {
                    pretty_printed_name: "TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]]"
                    kind: TYPE_ALIAS
                    args {
                      pretty_printed_name: "Tuple[None,builtins.list[sre_parse.SubPattern]]"
                      kind: TUPLE
                      args {
                        pretty_printed_name: "None"
                        kind: NONE
                      }
                      args {
                        pretty_printed_name: "builtins.list[sre_parse.SubPattern]"
                        args {
                          pretty_printed_name: "sre_parse.SubPattern"
                          fully_qualified_name: "sre_parse.SubPattern"
                        }
                        fully_qualified_name: "builtins.list"
                      }
                    }
                    fully_qualified_name: "sre_parse._OpBranchType"
                  }
                  args {
                    pretty_printed_name: "typing.Iterable[sre_parse.SubPattern]"
                    args {
                      pretty_printed_name: "sre_parse.SubPattern"
                      fully_qualified_name: "sre_parse.SubPattern"
                    }
                    fully_qualified_name: "typing.Iterable"
                  }
                  args {
                    pretty_printed_name: "TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]]"
                    kind: TYPE_ALIAS
                    args {
                      pretty_printed_name: "Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]"
                      kind: TUPLE
                      args {
                        pretty_printed_name: "builtins.int"
                        fully_qualified_name: "builtins.int"
                      }
                      args {
                        pretty_printed_name: "sre_parse.SubPattern"
                        fully_qualified_name: "sre_parse.SubPattern"
                      }
                      args {
                        pretty_printed_name: "sre_parse.SubPattern"
                        fully_qualified_name: "sre_parse.SubPattern"
                      }
                    }
                    fully_qualified_name: "sre_parse._OpGroupRefExistsType"
                  }
                  args {
                    pretty_printed_name: "TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]"
                    kind: TYPE_ALIAS
                    args {
                      pretty_printed_name: "Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]"
                      kind: TUPLE
                      args {
                        pretty_printed_name: "Union[builtins.int,None]"
                        kind: UNION
                        args {
                          pretty_printed_name: "builtins.int"
                          fully_qualified_name: "builtins.int"
                        }
                        args {
                          pretty_printed_name: "None"
                          kind: NONE
                        }
                      }
                      args {
                        pretty_printed_name: "builtins.int"
                        fully_qualified_name: "builtins.int"
                      }
                      args {
                        pretty_printed_name: "builtins.int"
                        fully_qualified_name: "builtins.int"
                      }
                      args {
                        pretty_printed_name: "sre_parse.SubPattern"
                        fully_qualified_name: "sre_parse.SubPattern"
                      }
                    }
                    fully_qualified_name: "sre_parse._OpSubpatternType"
                  }
                }
                fully_qualified_name: "sre_parse._AvType"
              }
            }
            fully_qualified_name: "sre_parse._CodeType"
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "None"
          kind: NONE
        }
      }
    }
  }
  methods {
    name: "dump"
    fully_qualified_name: "sre_parse.SubPattern.dump"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.SubPattern"
        fully_qualified_name: "sre_parse.SubPattern"
      }
    }
    parameters {
      name: "level"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "__len__"
    fully_qualified_name: "sre_parse.SubPattern.__len__"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "sre_parse.SubPattern"
        fully_qualified_name: "sre_parse.SubPattern"
      }
    }
  }
  methods {
    name: "__delitem__"
    fully_qualified_name: "sre_parse.SubPattern.__delitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "sre_parse.SubPattern"
        fully_qualified_name: "sre_parse.SubPattern"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.slice]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
    }
  }
  methods {
    name: "__getitem__"
    fully_qualified_name: "sre_parse.SubPattern.__getitem__"
    return_annotation {
      pretty_printed_name: "Union[sre_parse.SubPattern,TypeAlias[Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]]]"
      kind: UNION
      args {
        pretty_printed_name: "sre_parse.SubPattern"
        fully_qualified_name: "sre_parse.SubPattern"
      }
      args {
        pretty_printed_name: "TypeAlias[Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]"
          kind: TUPLE
          args {
            pretty_printed_name: "sre_constants._NamedIntConstant"
            fully_qualified_name: "sre_constants._NamedIntConstant"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]"
              kind: UNION
              args {
                pretty_printed_name: "TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]"
                  args {
                    pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,builtins.int]"
                    kind: TUPLE
                    args {
                      pretty_printed_name: "sre_constants._NamedIntConstant"
                      fully_qualified_name: "sre_constants._NamedIntConstant"
                    }
                    args {
                      pretty_printed_name: "builtins.int"
                      fully_qualified_name: "builtins.int"
                    }
                  }
                  fully_qualified_name: "builtins.list"
                }
                fully_qualified_name: "sre_parse._OpInType"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[None,builtins.list[sre_parse.SubPattern]]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                  args {
                    pretty_printed_name: "builtins.list[sre_parse.SubPattern]"
                    args {
                      pretty_printed_name: "sre_parse.SubPattern"
                      fully_qualified_name: "sre_parse.SubPattern"
                    }
                    fully_qualified_name: "builtins.list"
                  }
                }
                fully_qualified_name: "sre_parse._OpBranchType"
              }
              args {
                pretty_printed_name: "typing.Iterable[sre_parse.SubPattern]"
                args {
                  pretty_printed_name: "sre_parse.SubPattern"
                  fully_qualified_name: "sre_parse.SubPattern"
                }
                fully_qualified_name: "typing.Iterable"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                }
                fully_qualified_name: "sre_parse._OpGroupRefExistsType"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "Union[builtins.int,None]"
                    kind: UNION
                    args {
                      pretty_printed_name: "builtins.int"
                      fully_qualified_name: "builtins.int"
                    }
                    args {
                      pretty_printed_name: "None"
                      kind: NONE
                    }
                  }
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                }
                fully_qualified_name: "sre_parse._OpSubpatternType"
              }
            }
            fully_qualified_name: "sre_parse._AvType"
          }
        }
        fully_qualified_name: "sre_parse._CodeType"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "sre_parse.SubPattern"
        fully_qualified_name: "sre_parse.SubPattern"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.slice]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
    }
  }
  methods {
    name: "__setitem__"
    fully_qualified_name: "sre_parse.SubPattern.__setitem__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "sre_parse.SubPattern"
        fully_qualified_name: "sre_parse.SubPattern"
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "Union[builtins.int,builtins.slice]"
        kind: UNION
        args {
          pretty_printed_name: "builtins.int"
          fully_qualified_name: "builtins.int"
        }
        args {
          pretty_printed_name: "builtins.slice"
          fully_qualified_name: "builtins.slice"
        }
      }
    }
    parameters {
      name: "__"
      type_annotation {
        pretty_printed_name: "TypeAlias[Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]"
          kind: TUPLE
          args {
            pretty_printed_name: "sre_constants._NamedIntConstant"
            fully_qualified_name: "sre_constants._NamedIntConstant"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]"
              kind: UNION
              args {
                pretty_printed_name: "TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]"
                  args {
                    pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,builtins.int]"
                    kind: TUPLE
                    args {
                      pretty_printed_name: "sre_constants._NamedIntConstant"
                      fully_qualified_name: "sre_constants._NamedIntConstant"
                    }
                    args {
                      pretty_printed_name: "builtins.int"
                      fully_qualified_name: "builtins.int"
                    }
                  }
                  fully_qualified_name: "builtins.list"
                }
                fully_qualified_name: "sre_parse._OpInType"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[None,builtins.list[sre_parse.SubPattern]]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                  args {
                    pretty_printed_name: "builtins.list[sre_parse.SubPattern]"
                    args {
                      pretty_printed_name: "sre_parse.SubPattern"
                      fully_qualified_name: "sre_parse.SubPattern"
                    }
                    fully_qualified_name: "builtins.list"
                  }
                }
                fully_qualified_name: "sre_parse._OpBranchType"
              }
              args {
                pretty_printed_name: "typing.Iterable[sre_parse.SubPattern]"
                args {
                  pretty_printed_name: "sre_parse.SubPattern"
                  fully_qualified_name: "sre_parse.SubPattern"
                }
                fully_qualified_name: "typing.Iterable"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                }
                fully_qualified_name: "sre_parse._OpGroupRefExistsType"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "Union[builtins.int,None]"
                    kind: UNION
                    args {
                      pretty_printed_name: "builtins.int"
                      fully_qualified_name: "builtins.int"
                    }
                    args {
                      pretty_printed_name: "None"
                      kind: NONE
                    }
                  }
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                }
                fully_qualified_name: "sre_parse._OpSubpatternType"
              }
            }
            fully_qualified_name: "sre_parse._AvType"
          }
        }
        fully_qualified_name: "sre_parse._CodeType"
      }
    }
  }
  methods {
    name: "insert"
    fully_qualified_name: "sre_parse.SubPattern.insert"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.SubPattern"
        fully_qualified_name: "sre_parse.SubPattern"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "code"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]"
          kind: TUPLE
          args {
            pretty_printed_name: "sre_constants._NamedIntConstant"
            fully_qualified_name: "sre_constants._NamedIntConstant"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]"
              kind: UNION
              args {
                pretty_printed_name: "TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]"
                  args {
                    pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,builtins.int]"
                    kind: TUPLE
                    args {
                      pretty_printed_name: "sre_constants._NamedIntConstant"
                      fully_qualified_name: "sre_constants._NamedIntConstant"
                    }
                    args {
                      pretty_printed_name: "builtins.int"
                      fully_qualified_name: "builtins.int"
                    }
                  }
                  fully_qualified_name: "builtins.list"
                }
                fully_qualified_name: "sre_parse._OpInType"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[None,builtins.list[sre_parse.SubPattern]]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                  args {
                    pretty_printed_name: "builtins.list[sre_parse.SubPattern]"
                    args {
                      pretty_printed_name: "sre_parse.SubPattern"
                      fully_qualified_name: "sre_parse.SubPattern"
                    }
                    fully_qualified_name: "builtins.list"
                  }
                }
                fully_qualified_name: "sre_parse._OpBranchType"
              }
              args {
                pretty_printed_name: "typing.Iterable[sre_parse.SubPattern]"
                args {
                  pretty_printed_name: "sre_parse.SubPattern"
                  fully_qualified_name: "sre_parse.SubPattern"
                }
                fully_qualified_name: "typing.Iterable"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                }
                fully_qualified_name: "sre_parse._OpGroupRefExistsType"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "Union[builtins.int,None]"
                    kind: UNION
                    args {
                      pretty_printed_name: "builtins.int"
                      fully_qualified_name: "builtins.int"
                    }
                    args {
                      pretty_printed_name: "None"
                      kind: NONE
                    }
                  }
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                }
                fully_qualified_name: "sre_parse._OpSubpatternType"
              }
            }
            fully_qualified_name: "sre_parse._AvType"
          }
        }
        fully_qualified_name: "sre_parse._CodeType"
      }
    }
  }
  methods {
    name: "append"
    fully_qualified_name: "sre_parse.SubPattern.append"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.SubPattern"
        fully_qualified_name: "sre_parse.SubPattern"
      }
    }
    parameters {
      name: "code"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "TypeAlias[Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]"
          kind: TUPLE
          args {
            pretty_printed_name: "sre_constants._NamedIntConstant"
            fully_qualified_name: "sre_constants._NamedIntConstant"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]"
              kind: UNION
              args {
                pretty_printed_name: "TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]"
                  args {
                    pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,builtins.int]"
                    kind: TUPLE
                    args {
                      pretty_printed_name: "sre_constants._NamedIntConstant"
                      fully_qualified_name: "sre_constants._NamedIntConstant"
                    }
                    args {
                      pretty_printed_name: "builtins.int"
                      fully_qualified_name: "builtins.int"
                    }
                  }
                  fully_qualified_name: "builtins.list"
                }
                fully_qualified_name: "sre_parse._OpInType"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[None,builtins.list[sre_parse.SubPattern]]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                  args {
                    pretty_printed_name: "builtins.list[sre_parse.SubPattern]"
                    args {
                      pretty_printed_name: "sre_parse.SubPattern"
                      fully_qualified_name: "sre_parse.SubPattern"
                    }
                    fully_qualified_name: "builtins.list"
                  }
                }
                fully_qualified_name: "sre_parse._OpBranchType"
              }
              args {
                pretty_printed_name: "typing.Iterable[sre_parse.SubPattern]"
                args {
                  pretty_printed_name: "sre_parse.SubPattern"
                  fully_qualified_name: "sre_parse.SubPattern"
                }
                fully_qualified_name: "typing.Iterable"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                }
                fully_qualified_name: "sre_parse._OpGroupRefExistsType"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "Union[builtins.int,None]"
                    kind: UNION
                    args {
                      pretty_printed_name: "builtins.int"
                      fully_qualified_name: "builtins.int"
                    }
                    args {
                      pretty_printed_name: "None"
                      kind: NONE
                    }
                  }
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                }
                fully_qualified_name: "sre_parse._OpSubpatternType"
              }
            }
            fully_qualified_name: "sre_parse._AvType"
          }
        }
        fully_qualified_name: "sre_parse._CodeType"
      }
    }
  }
  methods {
    name: "getwidth"
    fully_qualified_name: "sre_parse.SubPattern.getwidth"
    return_annotation {
      pretty_printed_name: "Tuple[builtins.int,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.SubPattern"
        fully_qualified_name: "sre_parse.SubPattern"
      }
    }
  }
  attributes {
    name: "data"
    fully_qualified_name: "sre_parse.SubPattern.data"
    type_annotation {
      pretty_printed_name: "builtins.list[TypeAlias[Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]]]"
      args {
        pretty_printed_name: "TypeAlias[Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]]"
        kind: TYPE_ALIAS
        args {
          pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]]"
          kind: TUPLE
          args {
            pretty_printed_name: "sre_constants._NamedIntConstant"
            fully_qualified_name: "sre_constants._NamedIntConstant"
          }
          args {
            pretty_printed_name: "TypeAlias[Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]]"
            kind: TYPE_ALIAS
            args {
              pretty_printed_name: "Union[TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]],TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]],typing.Iterable[sre_parse.SubPattern],TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]],TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]]"
              kind: UNION
              args {
                pretty_printed_name: "TypeAlias[builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "builtins.list[Tuple[sre_constants._NamedIntConstant,builtins.int]]"
                  args {
                    pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,builtins.int]"
                    kind: TUPLE
                    args {
                      pretty_printed_name: "sre_constants._NamedIntConstant"
                      fully_qualified_name: "sre_constants._NamedIntConstant"
                    }
                    args {
                      pretty_printed_name: "builtins.int"
                      fully_qualified_name: "builtins.int"
                    }
                  }
                  fully_qualified_name: "builtins.list"
                }
                fully_qualified_name: "sre_parse._OpInType"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[None,builtins.list[sre_parse.SubPattern]]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[None,builtins.list[sre_parse.SubPattern]]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "None"
                    kind: NONE
                  }
                  args {
                    pretty_printed_name: "builtins.list[sre_parse.SubPattern]"
                    args {
                      pretty_printed_name: "sre_parse.SubPattern"
                      fully_qualified_name: "sre_parse.SubPattern"
                    }
                    fully_qualified_name: "builtins.list"
                  }
                }
                fully_qualified_name: "sre_parse._OpBranchType"
              }
              args {
                pretty_printed_name: "typing.Iterable[sre_parse.SubPattern]"
                args {
                  pretty_printed_name: "sre_parse.SubPattern"
                  fully_qualified_name: "sre_parse.SubPattern"
                }
                fully_qualified_name: "typing.Iterable"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[builtins.int,sre_parse.SubPattern,sre_parse.SubPattern]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                }
                fully_qualified_name: "sre_parse._OpGroupRefExistsType"
              }
              args {
                pretty_printed_name: "TypeAlias[Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]]"
                kind: TYPE_ALIAS
                args {
                  pretty_printed_name: "Tuple[Union[builtins.int,None],builtins.int,builtins.int,sre_parse.SubPattern]"
                  kind: TUPLE
                  args {
                    pretty_printed_name: "Union[builtins.int,None]"
                    kind: UNION
                    args {
                      pretty_printed_name: "builtins.int"
                      fully_qualified_name: "builtins.int"
                    }
                    args {
                      pretty_printed_name: "None"
                      kind: NONE
                    }
                  }
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "builtins.int"
                    fully_qualified_name: "builtins.int"
                  }
                  args {
                    pretty_printed_name: "sre_parse.SubPattern"
                    fully_qualified_name: "sre_parse.SubPattern"
                  }
                }
                fully_qualified_name: "sre_parse._OpSubpatternType"
              }
            }
            fully_qualified_name: "sre_parse._AvType"
          }
        }
        fully_qualified_name: "sre_parse._CodeType"
      }
      fully_qualified_name: "builtins.list"
    }
  }
  attributes {
    name: "width"
    fully_qualified_name: "sre_parse.SubPattern.width"
    type_annotation {
      pretty_printed_name: "Union[builtins.int,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
  attributes {
    name: "state"
    fully_qualified_name: "sre_parse.SubPattern.state"
    type_annotation {
      pretty_printed_name: "sre_parse._State"
      fully_qualified_name: "sre_parse._State"
    }
  }
}
classes {
  name: "Tokenizer"
  fully_qualified_name: "sre_parse.Tokenizer"
  super_classes: "builtins.object"
  methods {
    name: "__init__"
    fully_qualified_name: "sre_parse.Tokenizer.__init__"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.Tokenizer"
        fully_qualified_name: "sre_parse.Tokenizer"
      }
    }
    parameters {
      name: "string"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "Any"
        kind: ANY
      }
    }
  }
  methods {
    name: "match"
    fully_qualified_name: "sre_parse.Tokenizer.match"
    return_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.Tokenizer"
        fully_qualified_name: "sre_parse.Tokenizer"
      }
    }
    parameters {
      name: "char"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "get"
    fully_qualified_name: "sre_parse.Tokenizer.get"
    return_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.Tokenizer"
        fully_qualified_name: "sre_parse.Tokenizer"
      }
    }
  }
  methods {
    name: "getwhile"
    fully_qualified_name: "sre_parse.Tokenizer.getwhile"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.Tokenizer"
        fully_qualified_name: "sre_parse.Tokenizer"
      }
    }
    parameters {
      name: "n"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    parameters {
      name: "charset"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "typing.Iterable[builtins.str]"
        args {
          pretty_printed_name: "builtins.str"
          fully_qualified_name: "builtins.str"
        }
        fully_qualified_name: "typing.Iterable"
      }
    }
  }
  methods {
    name: "getuntil"
    fully_qualified_name: "sre_parse.Tokenizer.getuntil"
    return_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.Tokenizer"
        fully_qualified_name: "sre_parse.Tokenizer"
      }
    }
    parameters {
      name: "terminator"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "name"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
  }
  methods {
    name: "pos"
    fully_qualified_name: "sre_parse.Tokenizer.pos"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.Tokenizer"
        fully_qualified_name: "sre_parse.Tokenizer"
      }
    }
    has_decorators: true
    resolved_decorator_names: "property"
    is_property: true
  }
  methods {
    name: "tell"
    fully_qualified_name: "sre_parse.Tokenizer.tell"
    return_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.Tokenizer"
        fully_qualified_name: "sre_parse.Tokenizer"
      }
    }
  }
  methods {
    name: "seek"
    fully_qualified_name: "sre_parse.Tokenizer.seek"
    return_annotation {
      pretty_printed_name: "None"
      kind: NONE
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.Tokenizer"
        fully_qualified_name: "sre_parse.Tokenizer"
      }
    }
    parameters {
      name: "index"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  methods {
    name: "error"
    fully_qualified_name: "sre_parse.Tokenizer.error"
    return_annotation {
      pretty_printed_name: "sre_constants.error"
      fully_qualified_name: "sre_constants.error"
    }
    parameters {
      name: "self"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "sre_parse.Tokenizer"
        fully_qualified_name: "sre_parse.Tokenizer"
      }
    }
    parameters {
      name: "msg"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "offset"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
  }
  attributes {
    name: "istext"
    fully_qualified_name: "sre_parse.Tokenizer.istext"
    type_annotation {
      pretty_printed_name: "builtins.bool"
      fully_qualified_name: "builtins.bool"
    }
  }
  attributes {
    name: "string"
    fully_qualified_name: "sre_parse.Tokenizer.string"
    type_annotation {
      pretty_printed_name: "Any"
      kind: ANY
    }
  }
  attributes {
    name: "decoded_string"
    fully_qualified_name: "sre_parse.Tokenizer.decoded_string"
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  attributes {
    name: "index"
    fully_qualified_name: "sre_parse.Tokenizer.index"
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  attributes {
    name: "next"
    fully_qualified_name: "sre_parse.Tokenizer.next"
    type_annotation {
      pretty_printed_name: "Union[builtins.str,None]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "fix_flags"
  fully_qualified_name: "sre_parse.fix_flags"
  return_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
  parameters {
    name: "src"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[builtins.str,builtins.bytes]"
      kind: UNION
      args {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
      args {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
  }
  parameters {
    name: "flags"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
}
functions {
  name: "parse"
  fully_qualified_name: "sre_parse.parse"
  return_annotation {
    pretty_printed_name: "sre_parse.SubPattern"
    fully_qualified_name: "sre_parse.SubPattern"
  }
  parameters {
    name: "str"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
  }
  parameters {
    name: "flags"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
  }
  parameters {
    name: "state"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "Union[sre_parse._State,None]"
      kind: UNION
      args {
        pretty_printed_name: "sre_parse._State"
        fully_qualified_name: "sre_parse._State"
      }
      args {
        pretty_printed_name: "None"
        kind: NONE
      }
    }
  }
}
functions {
  name: "expand_template"
  fully_qualified_name: "sre_parse.expand_template"
  return_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
  parameters {
    name: "template"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "TypeAlias[Tuple[builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Union[builtins.str,None]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Union[builtins.str,None]]]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.list[Tuple[builtins.int,builtins.int]]"
          args {
            pretty_printed_name: "Tuple[builtins.int,builtins.int]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.list[Union[builtins.str,None]]"
          args {
            pretty_printed_name: "Union[builtins.str,None]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
          fully_qualified_name: "builtins.list"
        }
      }
      fully_qualified_name: "sre_parse._TemplateType"
    }
  }
  parameters {
    name: "match"
    kind: POSITIONAL_OR_KEYWORD
    type_annotation {
      pretty_printed_name: "re.Match[Any]"
      args {
        pretty_printed_name: "Any"
        kind: ANY
      }
      fully_qualified_name: "re.Match"
    }
  }
}
overloaded_functions {
  name: "parse_template"
  fullname: "sre_parse.parse_template"
  definitions {
    name: "parse_template"
    fully_qualified_name: "sre_parse.parse_template"
    return_annotation {
      pretty_printed_name: "TypeAlias[Tuple[builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Union[builtins.str,None]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Union[builtins.str,None]]]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.list[Tuple[builtins.int,builtins.int]]"
          args {
            pretty_printed_name: "Tuple[builtins.int,builtins.int]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.list[Union[builtins.str,None]]"
          args {
            pretty_printed_name: "Union[builtins.str,None]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.str"
              fully_qualified_name: "builtins.str"
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
          fully_qualified_name: "builtins.list"
        }
      }
      fully_qualified_name: "sre_parse._TemplateType"
    }
    parameters {
      name: "source"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.str"
        fully_qualified_name: "builtins.str"
      }
    }
    parameters {
      name: "state"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "re.Pattern"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
  definitions {
    name: "parse_template"
    fully_qualified_name: "sre_parse.parse_template"
    return_annotation {
      pretty_printed_name: "TypeAlias[Tuple[builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Union[builtins.bytes,None]]]]"
      kind: TYPE_ALIAS
      args {
        pretty_printed_name: "Tuple[builtins.list[Tuple[builtins.int,builtins.int]],builtins.list[Union[builtins.bytes,None]]]"
        kind: TUPLE
        args {
          pretty_printed_name: "builtins.list[Tuple[builtins.int,builtins.int]]"
          args {
            pretty_printed_name: "Tuple[builtins.int,builtins.int]"
            kind: TUPLE
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
            args {
              pretty_printed_name: "builtins.int"
              fully_qualified_name: "builtins.int"
            }
          }
          fully_qualified_name: "builtins.list"
        }
        args {
          pretty_printed_name: "builtins.list[Union[builtins.bytes,None]]"
          args {
            pretty_printed_name: "Union[builtins.bytes,None]"
            kind: UNION
            args {
              pretty_printed_name: "builtins.bytes"
              fully_qualified_name: "builtins.bytes"
            }
            args {
              pretty_printed_name: "None"
              kind: NONE
            }
          }
          fully_qualified_name: "builtins.list"
        }
      }
      fully_qualified_name: "sre_parse._TemplateByteType"
    }
    parameters {
      name: "source"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "builtins.bytes"
        fully_qualified_name: "builtins.bytes"
      }
    }
    parameters {
      name: "state"
      kind: POSITIONAL_OR_KEYWORD
      type_annotation {
        pretty_printed_name: "re.Pattern[Any]"
        args {
          pretty_printed_name: "Any"
          kind: ANY
        }
        fully_qualified_name: "re.Pattern"
      }
    }
    has_decorators: true
    resolved_decorator_names: "overload"
    is_overload: true
  }
}
vars {
  name: "__annotations__"
  fully_qualified_name: "sre_parse.__annotations__"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Any]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Any"
      kind: ANY
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "MAXGROUPS"
  fully_qualified_name: "sre_constants.MAXGROUPS"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "MAGIC"
  fully_qualified_name: "sre_constants.MAGIC"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "MAXREPEAT"
  fully_qualified_name: "sre_constants.MAXREPEAT"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "OPCODES"
  fully_qualified_name: "sre_constants.OPCODES"
  type_annotation {
    pretty_printed_name: "builtins.list[sre_constants._NamedIntConstant]"
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    fully_qualified_name: "builtins.list"
  }
}
vars {
  name: "ATCODES"
  fully_qualified_name: "sre_constants.ATCODES"
  type_annotation {
    pretty_printed_name: "builtins.list[sre_constants._NamedIntConstant]"
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    fully_qualified_name: "builtins.list"
  }
}
vars {
  name: "CHCODES"
  fully_qualified_name: "sre_constants.CHCODES"
  type_annotation {
    pretty_printed_name: "builtins.list[sre_constants._NamedIntConstant]"
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    fully_qualified_name: "builtins.list"
  }
}
vars {
  name: "OP_IGNORE"
  fully_qualified_name: "sre_constants.OP_IGNORE"
  type_annotation {
    pretty_printed_name: "builtins.dict[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]"
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "OP_LOCALE_IGNORE"
  fully_qualified_name: "sre_constants.OP_LOCALE_IGNORE"
  type_annotation {
    pretty_printed_name: "builtins.dict[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]"
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "OP_UNICODE_IGNORE"
  fully_qualified_name: "sre_constants.OP_UNICODE_IGNORE"
  type_annotation {
    pretty_printed_name: "builtins.dict[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]"
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "AT_MULTILINE"
  fully_qualified_name: "sre_constants.AT_MULTILINE"
  type_annotation {
    pretty_printed_name: "builtins.dict[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]"
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "AT_LOCALE"
  fully_qualified_name: "sre_constants.AT_LOCALE"
  type_annotation {
    pretty_printed_name: "builtins.dict[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]"
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "AT_UNICODE"
  fully_qualified_name: "sre_constants.AT_UNICODE"
  type_annotation {
    pretty_printed_name: "builtins.dict[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]"
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "CH_LOCALE"
  fully_qualified_name: "sre_constants.CH_LOCALE"
  type_annotation {
    pretty_printed_name: "builtins.dict[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]"
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "CH_UNICODE"
  fully_qualified_name: "sre_constants.CH_UNICODE"
  type_annotation {
    pretty_printed_name: "builtins.dict[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]"
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    args {
      pretty_printed_name: "sre_constants._NamedIntConstant"
      fully_qualified_name: "sre_constants._NamedIntConstant"
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "SRE_FLAG_TEMPLATE"
  fully_qualified_name: "sre_constants.SRE_FLAG_TEMPLATE"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "SRE_FLAG_IGNORECASE"
  fully_qualified_name: "sre_constants.SRE_FLAG_IGNORECASE"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "SRE_FLAG_LOCALE"
  fully_qualified_name: "sre_constants.SRE_FLAG_LOCALE"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "SRE_FLAG_MULTILINE"
  fully_qualified_name: "sre_constants.SRE_FLAG_MULTILINE"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "SRE_FLAG_DOTALL"
  fully_qualified_name: "sre_constants.SRE_FLAG_DOTALL"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "SRE_FLAG_UNICODE"
  fully_qualified_name: "sre_constants.SRE_FLAG_UNICODE"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "SRE_FLAG_VERBOSE"
  fully_qualified_name: "sre_constants.SRE_FLAG_VERBOSE"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "SRE_FLAG_DEBUG"
  fully_qualified_name: "sre_constants.SRE_FLAG_DEBUG"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "SRE_FLAG_ASCII"
  fully_qualified_name: "sre_constants.SRE_FLAG_ASCII"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "SRE_INFO_PREFIX"
  fully_qualified_name: "sre_constants.SRE_INFO_PREFIX"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "SRE_INFO_LITERAL"
  fully_qualified_name: "sre_constants.SRE_INFO_LITERAL"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "SRE_INFO_CHARSET"
  fully_qualified_name: "sre_constants.SRE_INFO_CHARSET"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "FAILURE"
  fully_qualified_name: "sre_constants.FAILURE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "SUCCESS"
  fully_qualified_name: "sre_constants.SUCCESS"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "ANY"
  fully_qualified_name: "sre_constants.ANY"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "ANY_ALL"
  fully_qualified_name: "sre_constants.ANY_ALL"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "ASSERT"
  fully_qualified_name: "sre_constants.ASSERT"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "ASSERT_NOT"
  fully_qualified_name: "sre_constants.ASSERT_NOT"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT"
  fully_qualified_name: "sre_constants.AT"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "BRANCH"
  fully_qualified_name: "sre_constants.BRANCH"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CALL"
  fully_qualified_name: "sre_constants.CALL"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY"
  fully_qualified_name: "sre_constants.CATEGORY"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CHARSET"
  fully_qualified_name: "sre_constants.CHARSET"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "BIGCHARSET"
  fully_qualified_name: "sre_constants.BIGCHARSET"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "GROUPREF"
  fully_qualified_name: "sre_constants.GROUPREF"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "GROUPREF_EXISTS"
  fully_qualified_name: "sre_constants.GROUPREF_EXISTS"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "GROUPREF_IGNORE"
  fully_qualified_name: "sre_constants.GROUPREF_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "IN"
  fully_qualified_name: "sre_constants.IN"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "IN_IGNORE"
  fully_qualified_name: "sre_constants.IN_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "INFO"
  fully_qualified_name: "sre_constants.INFO"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "JUMP"
  fully_qualified_name: "sre_constants.JUMP"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "LITERAL"
  fully_qualified_name: "sre_constants.LITERAL"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "LITERAL_IGNORE"
  fully_qualified_name: "sre_constants.LITERAL_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "MARK"
  fully_qualified_name: "sre_constants.MARK"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "MAX_UNTIL"
  fully_qualified_name: "sre_constants.MAX_UNTIL"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "MIN_UNTIL"
  fully_qualified_name: "sre_constants.MIN_UNTIL"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "NOT_LITERAL"
  fully_qualified_name: "sre_constants.NOT_LITERAL"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "NOT_LITERAL_IGNORE"
  fully_qualified_name: "sre_constants.NOT_LITERAL_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "NEGATE"
  fully_qualified_name: "sre_constants.NEGATE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "RANGE"
  fully_qualified_name: "sre_constants.RANGE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "REPEAT"
  fully_qualified_name: "sre_constants.REPEAT"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "REPEAT_ONE"
  fully_qualified_name: "sre_constants.REPEAT_ONE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "SUBPATTERN"
  fully_qualified_name: "sre_constants.SUBPATTERN"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "MIN_REPEAT_ONE"
  fully_qualified_name: "sre_constants.MIN_REPEAT_ONE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "RANGE_UNI_IGNORE"
  fully_qualified_name: "sre_constants.RANGE_UNI_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "GROUPREF_LOC_IGNORE"
  fully_qualified_name: "sre_constants.GROUPREF_LOC_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "GROUPREF_UNI_IGNORE"
  fully_qualified_name: "sre_constants.GROUPREF_UNI_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "IN_LOC_IGNORE"
  fully_qualified_name: "sre_constants.IN_LOC_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "IN_UNI_IGNORE"
  fully_qualified_name: "sre_constants.IN_UNI_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "LITERAL_LOC_IGNORE"
  fully_qualified_name: "sre_constants.LITERAL_LOC_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "LITERAL_UNI_IGNORE"
  fully_qualified_name: "sre_constants.LITERAL_UNI_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "NOT_LITERAL_LOC_IGNORE"
  fully_qualified_name: "sre_constants.NOT_LITERAL_LOC_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "NOT_LITERAL_UNI_IGNORE"
  fully_qualified_name: "sre_constants.NOT_LITERAL_UNI_IGNORE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "MIN_REPEAT"
  fully_qualified_name: "sre_constants.MIN_REPEAT"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "MAX_REPEAT"
  fully_qualified_name: "sre_constants.MAX_REPEAT"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT_BEGINNING"
  fully_qualified_name: "sre_constants.AT_BEGINNING"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT_BEGINNING_LINE"
  fully_qualified_name: "sre_constants.AT_BEGINNING_LINE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT_BEGINNING_STRING"
  fully_qualified_name: "sre_constants.AT_BEGINNING_STRING"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT_BOUNDARY"
  fully_qualified_name: "sre_constants.AT_BOUNDARY"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT_NON_BOUNDARY"
  fully_qualified_name: "sre_constants.AT_NON_BOUNDARY"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT_END"
  fully_qualified_name: "sre_constants.AT_END"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT_END_LINE"
  fully_qualified_name: "sre_constants.AT_END_LINE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT_END_STRING"
  fully_qualified_name: "sre_constants.AT_END_STRING"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT_LOC_BOUNDARY"
  fully_qualified_name: "sre_constants.AT_LOC_BOUNDARY"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT_LOC_NON_BOUNDARY"
  fully_qualified_name: "sre_constants.AT_LOC_NON_BOUNDARY"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT_UNI_BOUNDARY"
  fully_qualified_name: "sre_constants.AT_UNI_BOUNDARY"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "AT_UNI_NON_BOUNDARY"
  fully_qualified_name: "sre_constants.AT_UNI_NON_BOUNDARY"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_DIGIT"
  fully_qualified_name: "sre_constants.CATEGORY_DIGIT"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_NOT_DIGIT"
  fully_qualified_name: "sre_constants.CATEGORY_NOT_DIGIT"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_SPACE"
  fully_qualified_name: "sre_constants.CATEGORY_SPACE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_NOT_SPACE"
  fully_qualified_name: "sre_constants.CATEGORY_NOT_SPACE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_WORD"
  fully_qualified_name: "sre_constants.CATEGORY_WORD"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_NOT_WORD"
  fully_qualified_name: "sre_constants.CATEGORY_NOT_WORD"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_LINEBREAK"
  fully_qualified_name: "sre_constants.CATEGORY_LINEBREAK"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_NOT_LINEBREAK"
  fully_qualified_name: "sre_constants.CATEGORY_NOT_LINEBREAK"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_LOC_WORD"
  fully_qualified_name: "sre_constants.CATEGORY_LOC_WORD"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_LOC_NOT_WORD"
  fully_qualified_name: "sre_constants.CATEGORY_LOC_NOT_WORD"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_UNI_DIGIT"
  fully_qualified_name: "sre_constants.CATEGORY_UNI_DIGIT"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_UNI_NOT_DIGIT"
  fully_qualified_name: "sre_constants.CATEGORY_UNI_NOT_DIGIT"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_UNI_SPACE"
  fully_qualified_name: "sre_constants.CATEGORY_UNI_SPACE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_UNI_NOT_SPACE"
  fully_qualified_name: "sre_constants.CATEGORY_UNI_NOT_SPACE"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_UNI_WORD"
  fully_qualified_name: "sre_constants.CATEGORY_UNI_WORD"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_UNI_NOT_WORD"
  fully_qualified_name: "sre_constants.CATEGORY_UNI_NOT_WORD"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_UNI_LINEBREAK"
  fully_qualified_name: "sre_constants.CATEGORY_UNI_LINEBREAK"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "CATEGORY_UNI_NOT_LINEBREAK"
  fully_qualified_name: "sre_constants.CATEGORY_UNI_NOT_LINEBREAK"
  type_annotation {
    pretty_printed_name: "sre_constants._NamedIntConstant"
    fully_qualified_name: "sre_constants._NamedIntConstant"
  }
}
vars {
  name: "SPECIAL_CHARS"
  fully_qualified_name: "sre_parse.SPECIAL_CHARS"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
}
vars {
  name: "REPEAT_CHARS"
  fully_qualified_name: "sre_parse.REPEAT_CHARS"
  type_annotation {
    pretty_printed_name: "builtins.str"
    fully_qualified_name: "builtins.str"
  }
}
vars {
  name: "DIGITS"
  fully_qualified_name: "sre_parse.DIGITS"
  type_annotation {
    pretty_printed_name: "builtins.frozenset[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.frozenset"
  }
}
vars {
  name: "OCTDIGITS"
  fully_qualified_name: "sre_parse.OCTDIGITS"
  type_annotation {
    pretty_printed_name: "builtins.frozenset[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.frozenset"
  }
}
vars {
  name: "HEXDIGITS"
  fully_qualified_name: "sre_parse.HEXDIGITS"
  type_annotation {
    pretty_printed_name: "builtins.frozenset[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.frozenset"
  }
}
vars {
  name: "ASCIILETTERS"
  fully_qualified_name: "sre_parse.ASCIILETTERS"
  type_annotation {
    pretty_printed_name: "builtins.frozenset[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.frozenset"
  }
}
vars {
  name: "WHITESPACE"
  fully_qualified_name: "sre_parse.WHITESPACE"
  type_annotation {
    pretty_printed_name: "builtins.frozenset[builtins.str]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    fully_qualified_name: "builtins.frozenset"
  }
}
vars {
  name: "ESCAPES"
  fully_qualified_name: "sre_parse.ESCAPES"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Tuple[sre_constants._NamedIntConstant,builtins.int]]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,builtins.int]"
      kind: TUPLE
      args {
        pretty_printed_name: "sre_constants._NamedIntConstant"
        fully_qualified_name: "sre_constants._NamedIntConstant"
      }
      args {
        pretty_printed_name: "builtins.int"
        fully_qualified_name: "builtins.int"
      }
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "CATEGORIES"
  fully_qualified_name: "sre_parse.CATEGORIES"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,Union[Tuple[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant],Tuple[sre_constants._NamedIntConstant,builtins.list[Tuple[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]]]]]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "Union[Tuple[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant],Tuple[sre_constants._NamedIntConstant,builtins.list[Tuple[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]]]]"
      kind: UNION
      args {
        pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]"
        kind: TUPLE
        args {
          pretty_printed_name: "sre_constants._NamedIntConstant"
          fully_qualified_name: "sre_constants._NamedIntConstant"
        }
        args {
          pretty_printed_name: "sre_constants._NamedIntConstant"
          fully_qualified_name: "sre_constants._NamedIntConstant"
        }
      }
      args {
        pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,builtins.list[Tuple[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]]]"
        kind: TUPLE
        args {
          pretty_printed_name: "sre_constants._NamedIntConstant"
          fully_qualified_name: "sre_constants._NamedIntConstant"
        }
        args {
          pretty_printed_name: "builtins.list[Tuple[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]]"
          args {
            pretty_printed_name: "Tuple[sre_constants._NamedIntConstant,sre_constants._NamedIntConstant]"
            kind: TUPLE
            args {
              pretty_printed_name: "sre_constants._NamedIntConstant"
              fully_qualified_name: "sre_constants._NamedIntConstant"
            }
            args {
              pretty_printed_name: "sre_constants._NamedIntConstant"
              fully_qualified_name: "sre_constants._NamedIntConstant"
            }
          }
          fully_qualified_name: "builtins.list"
        }
      }
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "FLAGS"
  fully_qualified_name: "sre_parse.FLAGS"
  type_annotation {
    pretty_printed_name: "builtins.dict[builtins.str,builtins.int]"
    args {
      pretty_printed_name: "builtins.str"
      fully_qualified_name: "builtins.str"
    }
    args {
      pretty_printed_name: "builtins.int"
      fully_qualified_name: "builtins.int"
    }
    fully_qualified_name: "builtins.dict"
  }
}
vars {
  name: "TYPE_FLAGS"
  fully_qualified_name: "sre_parse.TYPE_FLAGS"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
vars {
  name: "GLOBAL_FLAGS"
  fully_qualified_name: "sre_parse.GLOBAL_FLAGS"
  type_annotation {
    pretty_printed_name: "builtins.int"
    fully_qualified_name: "builtins.int"
  }
}
