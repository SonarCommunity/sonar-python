/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'com.google.protobuf'
}

dependencies {
    api 'org.sonarsource.sslr:sslr-core:1.23'
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'com.google.protobuf:protobuf-java:3.21.7'
    api 'org.sonarsource.analyzer-commons:sonar-regex-parsing:2.1.0.1111'
    api 'org.sonarsource.analyzer-commons:sonar-analyzer-commons:2.1.0.1111'
    testImplementation 'org.sonarsource.sslr:sslr-testing-harness:1.23'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    compileOnly 'org.sonarsource.api.plugin:sonar-plugin-api:9.11.0.290'
    testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api:9.11.0.290'
}

description = 'Python :: Frontend'

sourceSets {
    main {
        java {
            compileClasspath += srcDirs("${buildDir}/generated/source/proto/main/java")
        }

        proto {
            srcDir 'src/main/protobuf'
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.7'
    }
    generateProtoTasks {
        all().configureEach { task ->
            task.builtins {
                // Generates Python code
                python {
//                    srcDir = 'src/main/protobuf'
//                    outputSubDir = 'serializer/proto_out'
                    outputSubDir = "python/serializer/proto_out"
                }
            }
        }
    }
//    python {
//        // typeshed_serializer/serializer/proto_out
//    }
}

// Due Execution failed for task ':python-frontend:sourcesJar'.
// > Entry org/sonar/python/types/protobuf/DescriptorsProtos.java is a duplicate but no duplicate handling strategy has been set. Please refer to https://docs.gradle.org/7.6/dsl/org.gradle.api.tasks.Copy.html#org.gradle.api.tasks.Copy:duplicatesStrategy for details.
sourcesJar {
    // other possibilities: https://docs.gradle.org/7.6/javadoc/org/gradle/api/file/DuplicatesStrategy.html#EXCLUDE
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task copyPythonProtobufToTypeshed(type: Copy) {
    from "${buildDir}/generated/source/proto/main/python"
    into "${projectDir}/typeshed_serializer"
}

task runTypeshed(type:Exec) {
    workingDir 'typeshed_serializer'
    commandLine 'tox'

    inputs.dir('typeshed_serializer/resources')
    inputs.file('typeshed_serializer/serializer/__init__.py')
    inputs.file('typeshed_serializer/serializer/symbols.py')
    inputs.file('typeshed_serializer/serializer/symbols_merger.py')
    inputs.file('typeshed_serializer/serializer/typeshed_serializer.py')
    inputs.dir('typeshed_serializer/tests')
    inputs.file('typeshed_serializer/requirements.txt')
    inputs.file('typeshed_serializer/tox.ini')
    outputs.dir("${buildDir}/typeshed_serializer")
    outputs.cacheIf { true }
}

task copyTypeshedOutputToResources(type: Copy) {
    from "${buildDir}/typeshed_serializer"
    into "${projectDir}/src/main/resources"
}

tasks['copyTypeshedOutputToResources'].dependsOn 'runTypeshed'
tasks['processResources'].dependsOn 'copyTypeshedOutputToResources'
tasks['sourcesJar'].dependsOn 'copyTypeshedOutputToResources'
tasks['copyPythonProtobufToTypeshed'].dependsOn 'generateProto'
tasks['runTypeshed'].dependsOn 'copyPythonProtobufToTypeshed'

clean {
    delete 'typeshed_serializer/output'
    delete 'typeshed_serializer/.tox'
    delete 'typeshed_serializer/.mypy_cache'
    delete 'typeshed_serializer/venv'
    delete 'typeshed_serializer/.coverage'
    delete 'typeshed_serializer/cov.xml'
    delete 'typeshed_serializer/serializer/proto_out'
    delete 'typeshed_serializer/serializer/.mypy_cache'
}


task printSourceSetInformation(){

    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each {
                print "  "+it.path+"\n"
            }
            println ""
        }
    }
}
