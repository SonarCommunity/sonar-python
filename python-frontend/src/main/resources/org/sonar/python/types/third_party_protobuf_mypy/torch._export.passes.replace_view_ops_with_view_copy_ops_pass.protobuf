
=torch._export.passes.replace_view_ops_with_view_copy_ops_passò
!ReplaceViewOpsWithViewCopyOpsPass_torch._export.passes.replace_view_ops_with_view_copy_ops_pass.ReplaceViewOpsWithViewCopyOpsPass"9torch._export.pass_base._ExportPassBaseDeprecatedDoNotUse*°
call_operatormtorch._export.passes.replace_view_ops_with_view_copy_ops_pass.ReplaceViewOpsWithViewCopyOpsPass.call_operator*
self*
op*
args*

kwargs*
meta¶

is_view_opHtorch._export.passes.replace_view_ops_with_view_copy_ops_pass.is_view_op"
builtins.bool"builtins.bool*>
schema2
torch._C.FunctionSchema"torch._C.FunctionSchema“
get_view_copy_of_view_opVtorch._export.passes.replace_view_ops_with_view_copy_ops_pass.get_view_copy_of_view_op"_
!Union[torch._ops.OpOverload,None].
torch._ops.OpOverload"torch._ops.OpOverload
None*>
schema2
torch._C.FunctionSchema"torch._C.FunctionSchema*¹
__annotations__Mtorch._export.passes.replace_view_ops_with_view_copy_ops_pass.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*œ
__all__Etorch._export.passes.replace_view_ops_with_view_copy_ops_pass.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*º
%_NON_FUNCTIONAL_OPS_TO_FUNCTIONAL_OPSctorch._export.passes.replace_view_ops_with_view_copy_ops_pass._NON_FUNCTIONAL_OPS_TO_FUNCTIONAL_OPS«
:builtins.dict[torch._ops.OpOverload,torch._ops.OpOverload].
torch._ops.OpOverload"torch._ops.OpOverload.
torch._ops.OpOverload"torch._ops.OpOverload"builtins.dict*Û
_BLACK_LISTED_OPSOtorch._export.passes.replace_view_ops_with_view_copy_ops_pass._BLACK_LISTED_OPSu
)builtins.set[torch._ops.OpOverloadPacket]:
torch._ops.OpOverloadPacket"torch._ops.OpOverloadPacket"builtins.set