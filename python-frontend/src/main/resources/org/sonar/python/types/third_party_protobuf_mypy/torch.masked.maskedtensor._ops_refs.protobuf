
#torch.masked.maskedtensor._ops_refsÔ
_MaskedContiguous5torch.masked.maskedtensor._ops_refs._MaskedContiguous" torch.autograd.function.Function*n
forward=torch.masked.maskedtensor._ops_refs._MaskedContiguous.forward*
ctx*	
input0:staticmethodh*v
backward>torch.masked.maskedtensor._ops_refs._MaskedContiguous.backward*
ctx*
grad_output0:staticmethodhÈ
_MaskedToDense2torch.masked.maskedtensor._ops_refs._MaskedToDense" torch.autograd.function.Function*k
forward:torch.masked.maskedtensor._ops_refs._MaskedToDense.forward*
ctx*	
input0:staticmethodh*s
backward;torch.masked.maskedtensor._ops_refs._MaskedToDense.backward*
ctx*
grad_output0:staticmethodhÌ
_MaskedToSparse3torch.masked.maskedtensor._ops_refs._MaskedToSparse" torch.autograd.function.Function*l
forward;torch.masked.maskedtensor._ops_refs._MaskedToSparse.forward*
ctx*	
input0:staticmethodh*t
backward<torch.masked.maskedtensor._ops_refs._MaskedToSparse.backward*
ctx*
grad_output0:staticmethodhØ
_MaskedToSparseCsr6torch.masked.maskedtensor._ops_refs._MaskedToSparseCsr" torch.autograd.function.Function*o
forward>torch.masked.maskedtensor._ops_refs._MaskedToSparseCsr.forward*
ctx*	
input0:staticmethodh*w
backward?torch.masked.maskedtensor._ops_refs._MaskedToSparseCsr.backward*
ctx*
grad_output0:staticmethodhÔ
_MaskedWhere0torch.masked.maskedtensor._ops_refs._MaskedWhere" torch.autograd.function.Function*}
forward8torch.masked.maskedtensor._ops_refs._MaskedWhere.forward*
ctx*
cond*
self*	
other0:staticmethodh*q
backward9torch.masked.maskedtensor._ops_refs._MaskedWhere.backward*
ctx*
grad_output0:staticmethodh¤
_check_args_kwargs_length=torch.masked.maskedtensor._ops_refs._check_args_kwargs_length*
args*

kwargs*
error_prefix*
len_args *

len_kwargs ]
register_function_func:torch.masked.maskedtensor._ops_refs.register_function_func*
opsb
register_dispatch_func:torch.masked.maskedtensor._ops_refs.register_dispatch_func*
aten_ops*Ÿ
__annotations__3torch.masked.maskedtensor._ops_refs.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*d
__all__+torch.masked.maskedtensor._ops_refs.__all__,
builtins.list[Any]
Any"builtins.list*Û
_MASKEDTENSOR_FUNCTION_TABLE@torch.masked.maskedtensor._ops_refs._MASKEDTENSOR_FUNCTION_TABLEy
)builtins.dict[Any,functools.partial[Any]]
Any4
functools.partial[Any]
Any"functools.partial"builtins.dict*ÿ
_function_fn_apply_map:torch.masked.maskedtensor._ops_refs._function_fn_apply_map¨
qbuiltins.dict[Tuple[builtins.tuple[Any],builtins.tuple[Any],builtins.tuple[Any]],CallableType[builtins.function]]Ö
BTuple[builtins.tuple[Any],builtins.tuple[Any],builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple.
builtins.tuple[Any]
Any"builtins.tuple.
builtins.tuple[Any]
Any"builtins.tupleK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict*—
fn_map_list/torch.masked.maskedtensor._ops_refs.fn_map_listÖ
BTuple[builtins.tuple[Any],builtins.tuple[Any],builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple.
builtins.tuple[Any]
Any"builtins.tuple.
builtins.tuple[Any]
Any"builtins.tuple*…
apply_fn,torch.masked.maskedtensor._ops_refs.apply_fnK
CallableType[builtins.function]&
builtins.function"builtins.function*d
fn_map*torch.masked.maskedtensor._ops_refs.fn_map.
builtins.tuple[Any]
Any"builtins.tuple*5
fn&torch.masked.maskedtensor._ops_refs.fn
Any*µ
_MASKEDTENSOR_DISPATCH_TABLE@torch.masked.maskedtensor._ops_refs._MASKEDTENSOR_DISPATCH_TABLEÒ
Dbuiltins.dict[torch._ops.OpOverload,CallableType[builtins.function]].
torch._ops.OpOverload"torch._ops.OpOverloadK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict