
logging.configk
_RootLoggerConfiguration'logging.config._RootLoggerConfiguration"typing._TypedDictj36j37j38j39j310c
_LoggerConfiguration#logging.config._LoggerConfiguration"typing._TypedDictj36j37j38j39j310{
 _FormatterConfigurationTypedDict/logging.config._FormatterConfigurationTypedDict"typing._TypedDictj36j37j38j39j310u
_FilterConfigurationTypedDict,logging.config._FilterConfigurationTypedDict"typing._TypedDictj36j37j38j39j310i
_OptionalDictConfigArgs&logging.config._OptionalDictConfigArgs"typing._TypedDictj36j37j38j39j310Y
_DictConfigArgslogging.config._DictConfigArgs"typing._TypedDictj36j37j38j39j310é
ConvertingMixinlogging.config.ConvertingMixin"builtins.object*Ç
convert_with_key/logging.config.ConvertingMixin.convert_with_key"
Any*J
self@
logging.config.ConvertingMixin"logging.config.ConvertingMixin*
key
Any*
value
Any*-
replace
builtins.bool"builtins.bool z36z37z38z39z310*Ø
convert&logging.config.ConvertingMixin.convert"
Any*J
self@
logging.config.ConvertingMixin"logging.config.ConvertingMixin*
value
Anyz36z37z38z39z310j36j37j38j39j310‰
ConvertingDictlogging.config.ConvertingDict"builtins.dict"logging.config.ConvertingMixin*æ
__getitem__)logging.config.ConvertingDict.__getitem__"
Any*@>
logging.config.ConvertingDict"logging.config.ConvertingDict*$"
typing.Hashable"typing.Hashablez36z37z38z39z310*’
get!logging.config.ConvertingDict.get"
Any*H
self>
logging.config.ConvertingDict"logging.config.ConvertingDict*+
key"
typing.Hashable"typing.Hashable*
default
Any z36z37z38z39z310*’
pop!logging.config.ConvertingDict.pop"
Any*H
self>
logging.config.ConvertingDict"logging.config.ConvertingDict*+
key"
typing.Hashable"typing.Hashable*
default
Any z36z37z38z39z310j36j37j38j39j310∑
ConvertingListlogging.config.ConvertingList"builtins.list"logging.config.ConvertingMixin*ﬂ
pop!logging.config.ConvertingList.pop"
Any*H
self>
logging.config.ConvertingList"logging.config.ConvertingList*M
idxB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex z36z37z38z39z3102ﬂ
__getitem__)logging.config.ConvertingList.__getitem__◊
__getitem__)logging.config.ConvertingList.__getitem__"
Any*@>
logging.config.ConvertingList"logging.config.ConvertingList*DB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex0:overloadXµ
__getitem__)logging.config.ConvertingList.__getitem__"
Any*@>
logging.config.ConvertingList"logging.config.ConvertingList*" 
builtins.slice"builtins.slice0:overloadX"36"37"38"39"310j36j37j38j39j310ﬂ
ConvertingTuplelogging.config.ConvertingTuple"builtins.tuple"logging.config.ConvertingMixin2Ê
__getitem__*logging.config.ConvertingTuple.__getitem__⁄
__getitem__*logging.config.ConvertingTuple.__getitem__"
Any*B@
logging.config.ConvertingTuple"logging.config.ConvertingTuple*DB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex0:overloadX∏
__getitem__*logging.config.ConvertingTuple.__getitem__"
Any*B@
logging.config.ConvertingTuple"logging.config.ConvertingTuple*" 
builtins.slice"builtins.slice0:overloadX"36"37"38"39"310j36j37j38j39j310 
BaseConfiguratorlogging.config.BaseConfigurator"builtins.object*í
__init__(logging.config.BaseConfigurator.__init__"
None*L
selfB
logging.config.BaseConfigurator"logging.config.BaseConfigurator*Ó
config·
;Union[TypeAlias[TypedDict],builtins.dict[builtins.str,Any]]G
TypeAlias[TypedDict]
	TypedDict"logging.config._DictConfigArgsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictz36z37z38z39z310*√
resolve'logging.config.BaseConfigurator.resolve"
Any*L
selfB
logging.config.BaseConfigurator"logging.config.BaseConfigurator*#
s
builtins.str"builtins.strz36z37z38z39z310*œ
ext_convert+logging.config.BaseConfigurator.ext_convert"
Any*L
selfB
logging.config.BaseConfigurator"logging.config.BaseConfigurator*'
value
builtins.str"builtins.strz36z37z38z39z310*œ
cfg_convert+logging.config.BaseConfigurator.cfg_convert"
Any*L
selfB
logging.config.BaseConfigurator"logging.config.BaseConfigurator*'
value
builtins.str"builtins.strz36z37z38z39z310*≤
convert'logging.config.BaseConfigurator.convert"
Any*L
selfB
logging.config.BaseConfigurator"logging.config.BaseConfigurator*
value
Anyz36z37z38z39z310*ï
configure_custom0logging.config.BaseConfigurator.configure_custom"
Any*L
selfB
logging.config.BaseConfigurator"logging.config.BaseConfigurator*c
configW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictz36z37z38z39z310*¨
as_tuple(logging.config.BaseConfigurator.as_tuple"

Tuple[Any]
Any*L
selfB
logging.config.BaseConfigurator"logging.config.BaseConfigurator*z
valueo
$Union[builtins.list[Any],Tuple[Any]],
builtins.list[Any]
Any"builtins.list

Tuple[Any]
Anyz36z37z38z39z310j36j37j38j39j310rù
CONVERT_PATTERN/logging.config.BaseConfigurator.CONVERT_PATTERND
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*36*37*38*39*310ró
WORD_PATTERN,logging.config.BaseConfigurator.WORD_PATTERND
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*36*37*38*39*310rï
DOT_PATTERN+logging.config.BaseConfigurator.DOT_PATTERND
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*36*37*38*39*310rô
INDEX_PATTERN-logging.config.BaseConfigurator.INDEX_PATTERND
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*36*37*38*39*310rô
DIGIT_PATTERN-logging.config.BaseConfigurator.DIGIT_PATTERND
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*36*37*38*39*310r–
value_converters0logging.config.BaseConfigurator.value_convertersu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*36*37*38*39*310rñ
importer(logging.config.BaseConfigurator.importerK
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310”
DictConfiguratorlogging.config.DictConfigurator"logging.config.BaseConfigurator*£
	configure)logging.config.DictConfigurator.configure"
None*L
selfB
logging.config.DictConfigurator"logging.config.DictConfiguratorz36z37z38z39z310*˜
configure_formatter3logging.config.DictConfigurator.configure_formatter"Q
Union[logging.Formatter,Any]&
logging.Formatter"logging.Formatter
Any*L
selfB
logging.config.DictConfigurator"logging.config.DictConfigurator*Ù
configÁ
FTypeAlias[Union[TypeAlias[TypedDict],builtins.dict[builtins.str,Any]]]Ú
;Union[TypeAlias[TypedDict],builtins.dict[builtins.str,Any]]X
TypeAlias[TypedDict]
	TypedDict"/logging.config._FormatterConfigurationTypedDictW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"&logging.config._FormatterConfigurationz36z37z38z39z310*‚
configure_filter0logging.config.DictConfigurator.configure_filter"H
Union[logging.Filter,Any] 
logging.Filter"logging.Filter
Any*L
selfB
logging.config.DictConfigurator"logging.config.DictConfigurator*Ó
config·
FTypeAlias[Union[TypeAlias[TypedDict],builtins.dict[builtins.str,Any]]]Ô
;Union[TypeAlias[TypedDict],builtins.dict[builtins.str,Any]]U
TypeAlias[TypedDict]
	TypedDict",logging.config._FilterConfigurationTypedDictW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"#logging.config._FilterConfigurationz36z37z38z39z310*◊
add_filters+logging.config.DictConfigurator.add_filters"
None*L
selfB
logging.config.DictConfigurator"logging.config.DictConfigurator*2
filterer$
logging.Filterer"logging.Filterer*˘
filtersÎ
Qtyping.Iterable[TypeAlias[Union[logging.Filter,CallableType[builtins.function]]]]Ñ
@TypeAlias[Union[logging.Filter,CallableType[builtins.function]]]®
5Union[logging.Filter,CallableType[builtins.function]] 
logging.Filter"logging.FilterK
CallableType[builtins.function]&
builtins.function"builtins.function"logging._FilterType"typing.Iterablez36z37z38z39z310*≥
configure_handler1logging.config.DictConfigurator.configure_handler"K
Union[logging.Handler,Any]"
logging.Handler"logging.Handler
Any*L
selfB
logging.config.DictConfigurator"logging.config.DictConfigurator*∫
config≠
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"$logging.config._HandlerConfigurationz36z37z38z39z310*µ
add_handlers,logging.config.DictConfigurator.add_handlers"
None*L
selfB
logging.config.DictConfigurator"logging.config.DictConfigurator*,
logger 
logging.Logger"logging.Logger*\
handlersN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterablez36z37z38z39z310*Ù
common_logger_config4logging.config.DictConfigurator.common_logger_config"
None*L
selfB
logging.config.DictConfigurator"logging.config.DictConfigurator*,
logger 
logging.Logger"logging.Logger*X
configL
TypeAlias[TypedDict]
	TypedDict"#logging.config._LoggerConfiguration*1
incremental
builtins.bool"builtins.bool z36z37z38z39z310*Ê
configure_logger0logging.config.DictConfigurator.configure_logger"
None*L
selfB
logging.config.DictConfigurator"logging.config.DictConfigurator*&
name
builtins.str"builtins.str*X
configL
TypeAlias[TypedDict]
	TypedDict"#logging.config._LoggerConfiguration*1
incremental
builtins.bool"builtins.bool z36z37z38z39z310*∫
configure_root.logging.config.DictConfigurator.configure_root"
None*L
selfB
logging.config.DictConfigurator"logging.config.DictConfigurator*X
configL
TypeAlias[TypedDict]
	TypedDict"#logging.config._LoggerConfiguration*1
incremental
builtins.bool"builtins.bool z36z37z38z39z310j36j37j38j39j310∑

dictConfiglogging.config.dictConfig"
None*Ó
config·
;Union[TypeAlias[TypedDict],builtins.dict[builtins.str,Any]]G
TypeAlias[TypedDict]
	TypedDict"logging.config._DictConfigArgsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictz36z37z38z39z310º

fileConfiglogging.config.fileConfig"
None*Î
fnameﬂ
üUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.str],configparser.RawConfigParser]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPathB
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO<
configparser.RawConfigParser"configparser.RawConfigParser* 
defaultsπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None *>
disable_existing_loggers
builtins.bool"builtins.bool z36z37z38z39á	

fileConfiglogging.config.fileConfig"
None*Î
fnameﬂ
üUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.str],configparser.RawConfigParser]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPathB
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO<
configparser.RawConfigParser"configparser.RawConfigParser* 
defaultsπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None *>
disable_existing_loggers
builtins.bool"builtins.bool *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None z310ü
valid_identlogging.config.valid_ident":
Literal[builtins.bool]	
builtins.bool"builtins.bool*#
s
builtins.str"builtins.strz36z37z38z39z310ú
listenlogging.config.listen"$
threading.Thread"threading.Thread*(
port
builtins.int"builtins.int *ï
verifyÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None z36z37z38z39z310L
stopListeninglogging.config.stopListening"
Nonez36z37z38z39z310*ü
__annotations__logging.config.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*|
DEFAULT_LOGGING_CONFIG_PORT*logging.config.DEFAULT_LOGGING_CONFIG_PORT
builtins.int"builtins.int*36*37*38*39*310*\
RESET_ERRORlogging.config.RESET_ERROR
builtins.int"builtins.int*36*37*38*39*310*Ç

IDENTIFIERlogging.config.IDENTIFIERD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*36*37*38*39*310