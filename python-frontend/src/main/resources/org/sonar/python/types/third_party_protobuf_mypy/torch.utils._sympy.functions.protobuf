
torch.utils._sympy.functionsÅ
FloorDiv%torch.utils._sympy.functions.FloorDiv"builtins.object*J
base*torch.utils._sympy.functions.FloorDiv.base*
self0:property`*P
divisor-torch.utils._sympy.functions.FloorDiv.divisor*
self0:property`*S
	_sympystr/torch.utils._sympy.functions.FloorDiv._sympystr*
self*
printer*c
eval*torch.utils._sympy.functions.FloorDiv.eval*
cls*
base*
divisor0:classmethodprk
nargs+torch.utils._sympy.functions.FloorDiv.nargs5
Tuple[builtins.int]
builtins.int"builtins.intr\

precedence0torch.utils._sympy.functions.FloorDiv.precedence
builtins.int"builtins.intr^

is_integer0torch.utils._sympy.functions.FloorDiv.is_integer
builtins.bool"builtins.boolè
ModularIndexing,torch.utils._sympy.functions.ModularIndexing"builtins.object*w
eval1torch.utils._sympy.functions.ModularIndexing.eval*
cls*
base*
divisor*
modulus0:classmethodp*c
_eval_is_nonnegativeAtorch.utils._sympy.functions.ModularIndexing._eval_is_nonnegative*
self*]
_eval_is_positive>torch.utils._sympy.functions.ModularIndexing._eval_is_positive*
selfrr
nargs2torch.utils._sympy.functions.ModularIndexing.nargs5
Tuple[builtins.int]
builtins.int"builtins.intre

is_integer7torch.utils._sympy.functions.ModularIndexing.is_integer
builtins.bool"builtins.bool‰
Where"torch.utils._sympy.functions.Where"builtins.object*Q
_eval_is_integer3torch.utils._sympy.functions.Where._eval_is_integer*
self*Y
_eval_is_nonnegative7torch.utils._sympy.functions.Where._eval_is_nonnegative*
self*S
_eval_is_positive4torch.utils._sympy.functions.Where._eval_is_positive*
self*^
eval'torch.utils._sympy.functions.Where.eval*
cls*
c*
p*
q0:classmethodprh
nargs(torch.utils._sympy.functions.Where.nargs5
Tuple[builtins.int]
builtins.int"builtins.int®
	PythonMod&torch.utils._sympy.functions.PythonMod"builtins.object*[
eval+torch.utils._sympy.functions.PythonMod.eval*
cls*
p*
q0:classmethodp*]
_eval_is_nonnegative;torch.utils._sympy.functions.PythonMod._eval_is_nonnegative*
self*]
_eval_is_nonpositive;torch.utils._sympy.functions.PythonMod._eval_is_nonpositive*
selfrl
nargs,torch.utils._sympy.functions.PythonMod.nargs5
Tuple[builtins.int]
builtins.int"builtins.intr_

is_integer1torch.utils._sympy.functions.PythonMod.is_integer
builtins.bool"builtins.boolµ
Mod torch.utils._sympy.functions.Mod"builtins.object*U
eval%torch.utils._sympy.functions.Mod.eval*
cls*
p*
q0:classmethodprf
nargs&torch.utils._sympy.functions.Mod.nargs5
Tuple[builtins.int]
builtins.int"builtins.intrY

is_integer+torch.utils._sympy.functions.Mod.is_integer
builtins.bool"builtins.boolra
is_nonnegative/torch.utils._sympy.functions.Mod.is_nonnegative
builtins.bool"builtins.boolX
CleanDiv%torch.utils._sympy.functions.CleanDiv"%torch.utils._sympy.functions.FloorDiv€
	CeilToInt&torch.utils._sympy.functions.CeilToInt"builtins.object*Y
eval+torch.utils._sympy.functions.CeilToInt.eval*
cls*

number0:classmethodpr_

is_integer1torch.utils._sympy.functions.CeilToInt.is_integer
builtins.bool"builtins.bool„

FloorToInt'torch.utils._sympy.functions.FloorToInt"builtins.object*Z
eval,torch.utils._sympy.functions.FloorToInt.eval*
cls*

number0:classmethodpr`

is_integer2torch.utils._sympy.functions.FloorToInt.is_integer
builtins.bool"builtins.boolø
CeilDiv$torch.utils._sympy.functions.CeilDiv"builtins.object*W
__new__,torch.utils._sympy.functions.CeilDiv.__new__*
cls*
base*
divisorr]

is_integer/torch.utils._sympy.functions.CeilDiv.is_integer
builtins.bool"builtins.boolý
LShift#torch.utils._sympy.functions.LShift"builtins.object*_
eval(torch.utils._sympy.functions.LShift.eval*
cls*
base*	
shift0:classmethodpr\

is_integer.torch.utils._sympy.functions.LShift.is_integer
builtins.bool"builtins.boolý
RShift#torch.utils._sympy.functions.RShift"builtins.object*_
eval(torch.utils._sympy.functions.RShift.eval*
cls*
base*	
shift0:classmethodpr\

is_integer.torch.utils._sympy.functions.RShift.is_integer
builtins.bool"builtins.bool“
PowByNatural)torch.utils._sympy.functions.PowByNatural"builtins.object*c
eval.torch.utils._sympy.functions.PowByNatural.eval*
cls*
base*
exp0:classmethodprb

is_integer4torch.utils._sympy.functions.PowByNatural.is_integer
builtins.bool"builtins.boolÝ
FloatPow%torch.utils._sympy.functions.FloatPow"builtins.object*_
eval*torch.utils._sympy.functions.FloatPow.eval*
cls*
base*
exp0:classmethodpr^

is_integer0torch.utils._sympy.functions.FloatPow.is_integer
builtins.bool"builtins.boolrX
is_real-torch.utils._sympy.functions.FloatPow.is_real
builtins.bool"builtins.boolõ
FloatTrueDiv)torch.utils._sympy.functions.FloatTrueDiv"builtins.object*g
eval.torch.utils._sympy.functions.FloatTrueDiv.eval*
cls*
base*
divisor0:classmethodprb

is_integer4torch.utils._sympy.functions.FloatTrueDiv.is_integer
builtins.bool"builtins.boolr\
is_real1torch.utils._sympy.functions.FloatTrueDiv.is_real
builtins.bool"builtins.boolë

IntTrueDiv'torch.utils._sympy.functions.IntTrueDiv"builtins.object*e
eval,torch.utils._sympy.functions.IntTrueDiv.eval*
cls*
base*
divisor0:classmethodpr`

is_integer2torch.utils._sympy.functions.IntTrueDiv.is_integer
builtins.bool"builtins.boolrZ
is_real/torch.utils._sympy.functions.IntTrueDiv.is_real
builtins.bool"builtins.boolÞ
!IsNonOverlappingAndDenseIndicator>torch.utils._sympy.functions.IsNonOverlappingAndDenseIndicator"builtins.object*o
evalCtorch.utils._sympy.functions.IsNonOverlappingAndDenseIndicator.eval*
cls*
args0:classmethodprw

is_integerItorch.utils._sympy.functions.IsNonOverlappingAndDenseIndicator.is_integer
builtins.bool"builtins.boolê
TruncToFloat)torch.utils._sympy.functions.TruncToFloat"builtins.object*\
eval.torch.utils._sympy.functions.TruncToFloat.eval*
cls*

number0:classmethodprb

is_integer4torch.utils._sympy.functions.TruncToFloat.is_integer
builtins.bool"builtins.boolr\
is_real1torch.utils._sympy.functions.TruncToFloat.is_real
builtins.bool"builtins.bool„

TruncToInt'torch.utils._sympy.functions.TruncToInt"builtins.object*Z
eval,torch.utils._sympy.functions.TruncToInt.eval*
cls*

number0:classmethodpr`

is_integer2torch.utils._sympy.functions.TruncToInt.is_integer
builtins.bool"builtins.bool„

RoundToInt'torch.utils._sympy.functions.RoundToInt"builtins.object*Z
eval,torch.utils._sympy.functions.RoundToInt.eval*
cls*

number0:classmethodpr`

is_integer2torch.utils._sympy.functions.RoundToInt.is_integer
builtins.bool"builtins.bool÷
RoundDecimal)torch.utils._sympy.functions.RoundDecimal"builtins.object*i
eval.torch.utils._sympy.functions.RoundDecimal.eval*
cls*

number*
ndigits0:classmethodprb

is_integer4torch.utils._sympy.functions.RoundDecimal.is_integer
builtins.bool"builtins.boolr\
is_real1torch.utils._sympy.functions.RoundDecimal.is_real
builtins.bool"builtins.boolÑ
ToFloat$torch.utils._sympy.functions.ToFloat"builtins.object*W
eval)torch.utils._sympy.functions.ToFloat.eval*
cls*

number0:classmethodpr]

is_integer/torch.utils._sympy.functions.ToFloat.is_integer
builtins.bool"builtins.boolrW
is_real,torch.utils._sympy.functions.ToFloat.is_real
builtins.bool"builtins.bool–
OpaqueUnaryFn@631.torch.utils._sympy.functions.OpaqueUnaryFn@631"builtins.object*\
eval3torch.utils._sympy.functions.OpaqueUnaryFn@631.eval*
cls*
a0:classmethodprb
_torch_handler_nameBtorch.utils._sympy.functions.OpaqueUnaryFn@631._torch_handler_name
Any>
_keep_float(torch.utils._sympy.functions._keep_float*
f?
fuzzy_eq%torch.utils._sympy.functions.fuzzy_eq*
x*
yD
safe_pow%torch.utils._sympy.functions.safe_pow*
base*
expK
	_safe_pow&torch.utils._sympy.functions._safe_pow*
base*
exponentS
make_opaque_unary_fn1torch.utils._sympy.functions.make_opaque_unary_fn*
name*˜
__annotations__,torch.utils._sympy.functions.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*4
sympy"torch.utils._sympy.functions.sympy
Any*,
Storch.utils._sympy.functions.S
Any*{
__all__$torch.utils._sympy.functions.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*N
OpaqueUnaryFn_sqrt/torch.utils._sympy.functions.OpaqueUnaryFn_sqrt
Any*L
OpaqueUnaryFn_cos.torch.utils._sympy.functions.OpaqueUnaryFn_cos
Any*N
OpaqueUnaryFn_cosh/torch.utils._sympy.functions.OpaqueUnaryFn_cosh
Any*L
OpaqueUnaryFn_sin.torch.utils._sympy.functions.OpaqueUnaryFn_sin
Any*N
OpaqueUnaryFn_sinh/torch.utils._sympy.functions.OpaqueUnaryFn_sinh
Any*L
OpaqueUnaryFn_tan.torch.utils._sympy.functions.OpaqueUnaryFn_tan
Any*N
OpaqueUnaryFn_tanh/torch.utils._sympy.functions.OpaqueUnaryFn_tanh
Any*N
OpaqueUnaryFn_asin/torch.utils._sympy.functions.OpaqueUnaryFn_asin
Any*N
OpaqueUnaryFn_acos/torch.utils._sympy.functions.OpaqueUnaryFn_acos
Any*N
OpaqueUnaryFn_atan/torch.utils._sympy.functions.OpaqueUnaryFn_atan
Any*L
OpaqueUnaryFn_exp.torch.utils._sympy.functions.OpaqueUnaryFn_exp
Any*L
OpaqueUnaryFn_log.torch.utils._sympy.functions.OpaqueUnaryFn_log
Any*P
OpaqueUnaryFn_asinh0torch.utils._sympy.functions.OpaqueUnaryFn_asinh
Any