
numpy.polynomial.polynomialª

Polynomial&numpy.polynomial.polynomial.Polynomial"&numpy.polynomial._polybase.ABCPolyBaser@
domain-numpy.polynomial.polynomial.Polynomial.domain
Anyr@
window-numpy.polynomial.polynomial.Polynomial.window
AnyrH

basis_name1numpy.polynomial.polynomial.Polynomial.basis_name
AnyB
polyline$numpy.polynomial.polynomial.polyline*
off*
sclE
polyfromroots)numpy.polynomial.polynomial.polyfromroots*	
roots>
polyadd#numpy.polynomial.polynomial.polyadd*
c1*
c2>
polysub#numpy.polynomial.polynomial.polysub*
c1*
c27
polymulx$numpy.polynomial.polynomial.polymulx*
c>
polymul#numpy.polynomial.polynomial.polymul*
c1*
c2>
polydiv#numpy.polynomial.polynomial.polydiv*
c1*
c2N
polypow#numpy.polynomial.polynomial.polypow*
c*
pow*
maxpower U
polyder#numpy.polynomial.polynomial.polyder*
c*
m *	
scl *

axis j
polyint#numpy.polynomial.polynomial.polyint*
c*
m *
k *

lbnd *	
scl *

axis J
polyval#numpy.polynomial.polynomial.polyval*
x*
c*
tensor \
polyvalfromroots,numpy.polynomial.polynomial.polyvalfromroots*
x*
r*
tensor G
	polyval2d%numpy.polynomial.polynomial.polyval2d*
x*
y*
cI

polygrid2d&numpy.polynomial.polynomial.polygrid2d*
x*
y*
cN
	polyval3d%numpy.polynomial.polynomial.polyval3d*
x*
y*
z*
cP

polygrid3d&numpy.polynomial.polynomial.polygrid3d*
x*
y*
z*
cD

polyvander&numpy.polynomial.polynomial.polyvander*
x*
degO
polyvander2d(numpy.polynomial.polynomial.polyvander2d*
x*
y*
degV
polyvander3d(numpy.polynomial.polynomial.polyvander3d*
x*
y*
z*
degg
polyfit#numpy.polynomial.polynomial.polyfit*
x*
y*
deg*
rcond *

full *
w 9
	polyroots%numpy.polynomial.polynomial.polyroots*
c*—
__annotations__+numpy.polynomial.polynomial.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*z
__all__#numpy.polynomial.polynomial.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*}
polytrim$numpy.polynomial.polynomial.polytrimK
CallableType[builtins.function]&
builtins.function"builtins.function*¤

polydomain&numpy.polynomial.polynomial.polydomainí
Nnumpy.ndarray[Any,numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]]
Any‚
;numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]µ
.TypeAlias[numpy.signedinteger[TypeAlias[Any]]]u
#numpy.signedinteger[TypeAlias[Any]]9
TypeAlias[Any]
Any"numpy._typing._nbit._NBitInt"numpy.signedinteger"
numpy.int_"numpy.dtype"numpy.ndarray* 
polyzero$numpy.polynomial.polynomial.polyzeroí
Nnumpy.ndarray[Any,numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]]
Any‚
;numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]µ
.TypeAlias[numpy.signedinteger[TypeAlias[Any]]]u
#numpy.signedinteger[TypeAlias[Any]]9
TypeAlias[Any]
Any"numpy._typing._nbit._NBitInt"numpy.signedinteger"
numpy.int_"numpy.dtype"numpy.ndarray*ž
polyone#numpy.polynomial.polynomial.polyoneí
Nnumpy.ndarray[Any,numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]]
Any‚
;numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]µ
.TypeAlias[numpy.signedinteger[TypeAlias[Any]]]u
#numpy.signedinteger[TypeAlias[Any]]9
TypeAlias[Any]
Any"numpy._typing._nbit._NBitInt"numpy.signedinteger"
numpy.int_"numpy.dtype"numpy.ndarray*š
polyx!numpy.polynomial.polynomial.polyxí
Nnumpy.ndarray[Any,numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]]
Any‚
;numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]µ
.TypeAlias[numpy.signedinteger[TypeAlias[Any]]]u
#numpy.signedinteger[TypeAlias[Any]]9
TypeAlias[Any]
Any"numpy._typing._nbit._NBitInt"numpy.signedinteger"
numpy.int_"numpy.dtype"numpy.ndarray