
packaging.tags≥
Tagpackaging.tags.Tag"builtins.object*Á
__init__packaging.tags.Tag.__init__"
None*2
self(
packaging.tags.Tag"packaging.tags.Tag*-
interpreter
builtins.str"builtins.str*%
abi
builtins.str"builtins.str**
platform
builtins.str"builtins.str*ç
interpreterpackaging.tags.Tag.interpreter"
builtins.str"builtins.str*2
self(
packaging.tags.Tag"packaging.tags.Tag0:property`*}
abipackaging.tags.Tag.abi"
builtins.str"builtins.str*2
self(
packaging.tags.Tag"packaging.tags.Tag0:property`*á
platformpackaging.tags.Tag.platform"
builtins.str"builtins.str*2
self(
packaging.tags.Tag"packaging.tags.Tag0:property`*ï
__eq__packaging.tags.Tag.__eq__"
builtins.bool"builtins.bool**(
packaging.tags.Tag"packaging.tags.Tag*$"
builtins.object"builtins.object*y
__hash__packaging.tags.Tag.__hash__"
builtins.int"builtins.int*2
self(
packaging.tags.Tag"packaging.tags.Tag*o
__str__packaging.tags.Tag.__str__"
builtins.str"builtins.str**(
packaging.tags.Tag"packaging.tags.Tag*q
__repr__packaging.tags.Tag.__repr__"
builtins.str"builtins.str**(
packaging.tags.Tag"packaging.tags.Tagru
	__slots__packaging.tags.Tag.__slots__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrM
_interpreterpackaging.tags.Tag._interpreter
builtins.str"builtins.strr=
_abipackaging.tags.Tag._abi
builtins.str"builtins.strrG
	_platformpackaging.tags.Tag._platform
builtins.str"builtins.strr?
_hashpackaging.tags.Tag._hash
builtins.int"builtins.int¥
	parse_tagpackaging.tags.parse_tag"f
&builtins.frozenset[packaging.tags.Tag](
packaging.tags.Tag"packaging.tags.Tag"builtins.frozenset*%
tag
builtins.str"builtins.strˆ
_get_config_varpackaging.tags._get_config_var"o
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None*&
name
builtins.str"builtins.str**
warn
builtins.bool"builtins.bool }
_normalize_string packaging.tags._normalize_string"
builtins.str"builtins.str*(
string
builtins.str"builtins.str±
_is_threaded_cpython#packaging.tags._is_threaded_cpython"
builtins.bool"builtins.bool*T
abisJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listÆ
_abi3_appliespackaging.tags._abi3_applies"
builtins.bool"builtins.bool*Ø
python_versionö
(TypeAlias[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"packaging.tags.PythonVersion*-
	threading
builtins.bool"builtins.bool”
_cpython_abispackaging.tags._cpython_abis"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*´

py_versionö
(TypeAlias[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"packaging.tags.PythonVersion**
warn
builtins.bool"builtins.bool Â
cpython_tagspackaging.tags.cpython_tags"`
#typing.Iterator[packaging.tags.Tag](
packaging.tags.Tag"packaging.tags.Tag"typing.Iterator*ˆ
python_versionﬂ
4Union[TypeAlias[typing.Sequence[builtins.int]],None]ö
(TypeAlias[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"packaging.tags.PythonVersion
None *î
abisá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None *ô
	platformsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None **
warn
builtins.bool"builtins.bool w
_generic_abipackaging.tags._generic_abi"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list≈
generic_tagspackaging.tags.generic_tags"`
#typing.Iterator[packaging.tags.Tag](
packaging.tags.Tag"packaging.tags.Tag"typing.Iterator*W
interpreterD
Union[builtins.str,None]
builtins.str"builtins.str
None *î
abisá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None *ô
	platformsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None **
warn
builtins.bool"builtins.bool ª
_py_interpreter_range$packaging.tags._py_interpreter_range"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*´

py_versionö
(TypeAlias[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"packaging.tags.PythonVersionÅ
compatible_tagspackaging.tags.compatible_tags"`
#typing.Iterator[packaging.tags.Tag](
packaging.tags.Tag"packaging.tags.Tag"typing.Iterator*ˆ
python_versionﬂ
4Union[TypeAlias[typing.Sequence[builtins.int]],None]ö
(TypeAlias[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"packaging.tags.PythonVersion
None *W
interpreterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ô
	platformsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None õ
	_mac_archpackaging.tags._mac_arch"
builtins.str"builtins.str*&
arch
builtins.str"builtins.str*.
is_32bit
builtins.bool"builtins.bool Ó
_mac_binary_formats"packaging.tags._mac_binary_formats"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*∫
version¨
+TypeAlias[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"packaging.tags.MacVersion**
cpu_arch
builtins.str"builtins.str÷
mac_platformspackaging.tags.mac_platforms"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*Ñ
versionÙ
7Union[TypeAlias[Tuple[builtins.int,builtins.int]],None]¨
+TypeAlias[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"packaging.tags.MacVersion
None *P
archD
Union[builtins.str,None]
builtins.str"builtins.str
None ≥
_linux_platformspackaging.tags._linux_platforms"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*.
is_32bit
builtins.bool"builtins.bool á
_generic_platforms!packaging.tags._generic_platforms"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator}
platform_tagspackaging.tags.platform_tags"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.IteratorQ
interpreter_namepackaging.tags.interpreter_name"
builtins.str"builtins.strÉ
interpreter_version"packaging.tags.interpreter_version"
builtins.str"builtins.str**
warn
builtins.bool"builtins.bool ¯
_version_nodotpackaging.tags._version_nodot"
builtins.str"builtins.str*®
versionö
(TypeAlias[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"packaging.tags.PythonVersion±
sys_tagspackaging.tags.sys_tags"`
#typing.Iterator[packaging.tags.Tag](
packaging.tags.Tag"packaging.tags.Tag"typing.Iterator**
warn
builtins.bool"builtins.bool *ä
__annotations__packaging.tags.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*A
loggerpackaging.tags.logger 
logging.Logger"logging.Logger*∏
INTERPRETER_SHORT_NAMES&packaging.tags.INTERPRETER_SHORT_NAMESu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*Y
_32_BIT_INTERPRETER"packaging.tags._32_BIT_INTERPRETER
builtins.bool"builtins.bool