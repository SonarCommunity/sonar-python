
unittest.case≠
AbstractSettyping.AbstractSet"typing.Collection*Í
__contains__typing.AbstractSet.__contains__"
builtins.bool"builtins.bool*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*$"
builtins.object"builtins.object0:abstractmethod@z36z37z38z39z310*®
_hashtyping.AbstractSet._hash"
builtins.int"builtins.int*R
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSetz36z37z38z39z310*ﬁ
__le__typing.AbstractSet.__le__"
builtins.bool"builtins.bool*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSetz36z37z38z39z310*ﬁ
__lt__typing.AbstractSet.__lt__"
builtins.bool"builtins.bool*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSetz36z37z38z39z310*ﬁ
__gt__typing.AbstractSet.__gt__"
builtins.bool"builtins.bool*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSetz36z37z38z39z310*ﬁ
__ge__typing.AbstractSet.__ge__"
builtins.bool"builtins.bool*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSetz36z37z38z39z310*ä
__and__typing.AbstractSet.__and__"H
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSetz36z37z38z39z310*ÿ
__or__typing.AbstractSet.__or__"ã
1typing.AbstractSet[Union[typing._T_co,typing._T]]B
Union[typing._T_co,typing._T]
typing._T_co
	typing._T"typing.AbstractSet*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*DB
typing.AbstractSet[typing._T]
	typing._T"typing.AbstractSetz36z37z38z39z310*ä
__sub__typing.AbstractSet.__sub__"H
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSetz36z37z38z39z310*⁄
__xor__typing.AbstractSet.__xor__"ã
1typing.AbstractSet[Union[typing._T_co,typing._T]]B
Union[typing._T_co,typing._T]
typing._T_co
	typing._T"typing.AbstractSet*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*DB
typing.AbstractSet[typing._T]
	typing._T"typing.AbstractSetz36z37z38z39z310*Ò

isdisjointtyping.AbstractSet.isdisjoint"
builtins.bool"builtins.bool*R
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*;
other0
typing.Iterable[Any]
Any"typing.Iterablez36z37z38z39z310Pj36j37j38j39j310Œ
_BaseTestCaseContext"unittest.case._BaseTestCaseContext"builtins.object*Î
__init__+unittest.case._BaseTestCaseContext.__init__"
None*R
selfH
"unittest.case._BaseTestCaseContext""unittest.case._BaseTestCaseContext*?
	test_case0
unittest.case.TestCase"unittest.case.TestCasez36z37z38z39z310j36j37j38j39j310€
_LoggingWatcherunittest.case._LoggingWatcher"builtins.tuple*€
_replace&unittest.case._LoggingWatcher._replace"%
!unittest.case._LoggingWatcher._NT*0
_self%
!unittest.case._LoggingWatcher._NT*h
recordsY
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.list *X
outputJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list z36z37z38*Å
__new__%unittest.case._LoggingWatcher.__new__"%
!unittest.case._LoggingWatcher._NT*\
_clsR
'Type[unittest.case._LoggingWatcher._NT]%
!unittest.case._LoggingWatcher._NT*f
recordsY
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.list*V
outputJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listz36z37z38*«
_asdict%unittest.case._LoggingWatcher._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*0
_self%
!unittest.case._LoggingWatcher._NTz36z37z38*∂
_make#unittest.case._LoggingWatcher._make"%
!unittest.case._LoggingWatcher._NT*\
_clsR
'Type[unittest.case._LoggingWatcher._NT]%
!unittest.case._LoggingWatcher._NT*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpz36z37z38j36j37j38r£
records%unittest.case._LoggingWatcher.recordsY
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.list*36*36*37*37*38*38rí
output$unittest.case._LoggingWatcher.outputJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*36*36*37*37*38*38rû
_fields%unittest.case._LoggingWatcher._fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str*36*37*38rü
_field_types*unittest.case._LoggingWatcher._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38r•
_field_defaults-unittest.case._LoggingWatcher._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38rZ
_source%unittest.case._LoggingWatcher._source
builtins.str"builtins.str*36*37*38r•
__annotations__-unittest.case._LoggingWatcher.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38õ
_AssertLogsContext unittest.case._AssertLogsContext""unittest.case._BaseTestCaseContext*‹
__init__)unittest.case._AssertLogsContext.__init__"
None*v
selfl
2unittest.case._AssertLogsContext[unittest.case._L]
unittest.case._L" unittest.case._AssertLogsContext*?
	test_case0
unittest.case.TestCase"unittest.case.TestCase*-
logger_name
builtins.str"builtins.str*'
level
builtins.int"builtins.intz36z37z38*ò
	__enter__*unittest.case._AssertLogsContext.__enter__"‚
NTypeAlias[Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]]Ó
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"unittest.case._LoggingWatcher*nl
2unittest.case._AssertLogsContext[unittest.case._L]
unittest.case._L" unittest.case._AssertLogsContextz36z37z38*Õ
__exit__)unittest.case._AssertLogsContext.__exit__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*nl
2unittest.case._AssertLogsContext[unittest.case._L]
unittest.case._L" unittest.case._AssertLogsContext*çä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
Nonez36z37z38Pj36j37j38rk
LOGGING_FORMAT/unittest.case._AssertLogsContext.LOGGING_FORMAT
builtins.str"builtins.str*36*37*38ru
	test_case*unittest.case._AssertLogsContext.test_case0
unittest.case.TestCase"unittest.case.TestCase*36*37*38re
logger_name,unittest.case._AssertLogsContext.logger_name
builtins.str"builtins.str*36*37*38rY
level&unittest.case._AssertLogsContext.level
builtins.int"builtins.int*36*37*38rA
msg$unittest.case._AssertLogsContext.msg
None*36*37*38˛
SkipTestunittest.case.SkipTest"builtins.Exception*∞
__init__unittest.case.SkipTest.__init__"
None*:
self0
unittest.case.SkipTest"unittest.case.SkipTest*(
reason
builtins.str"builtins.strz36z37z38z39z310j36j37j38j39j310á
_SupportsAbsAndDunderGE%unittest.case._SupportsAbsAndDunderGE"_typeshed.SupportsDunderGE"typing.SupportsAbsXj36j37j38j39j310´Ò
TestCaseunittest.case.TestCase"builtins.object*∂
__init__unittest.case.TestCase.__init__"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*.

methodName
builtins.str"builtins.str z36z37z38z39z310*∂
__eq__unittest.case.TestCase.__eq__"
builtins.bool"builtins.bool*20
unittest.case.TestCase"unittest.case.TestCase*$"
builtins.object"builtins.objectz36z37z38z39z310*Ä
setUpunittest.case.TestCase.setUp"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez36z37z38z39z310*Ü
tearDownunittest.case.TestCase.tearDown"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez36z37z38z39z310*º

setUpClass!unittest.case.TestCase.setUpClass"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase0:classmethodpz36z37z38z39z310*¬
tearDownClass$unittest.case.TestCase.tearDownClass"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase0:classmethodpz36z37z38z39z310*‡
rununittest.case.TestCase.run"n
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*|
resultn
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None z36z37z38z39z310*Í
__call__unittest.case.TestCase.__call__"n
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*|
resultn
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None z36z37z38z39z310*ü
skipTestunittest.case.TestCase.skipTest"
NoReturn
*:
self0
unittest.case.TestCase"unittest.case.TestCase*
reason
Anyz36z37z38z39z310*˚
subTestunittest.case.TestCase.subTest"V
'contextlib.AbstractContextManager[None]
None"!contextlib.AbstractContextManager*:
self0
unittest.case.TestCase"unittest.case.TestCase*
msg
Any *
params
Anyz36z37z38z39z310*Ä
debugunittest.case.TestCase.debug"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez36z37z38z39z310*∑
_addSkipunittest.case.TestCase._addSkip"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*D
result8
unittest.result.TestResult"unittest.result.TestResult*?
	test_case0
unittest.case.TestCase"unittest.case.TestCase*(
reason
builtins.str"builtins.strz36z37z38z39z310*…
assertEqual"unittest.case.TestCase.assertEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z36z37z38z39z310*œ
assertNotEqual%unittest.case.TestCase.assertNotEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z36z37z38z39z310*±

assertTrue!unittest.case.TestCase.assertTrue"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr
Any*
msg
Any z36z37z38z39z310*≥
assertFalse"unittest.case.TestCase.assertFalse"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr
Any*
msg
Any z36z37z38z39z310*¯
assertIsunittest.case.TestCase.assertIs"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*-
expr1"
builtins.object"builtins.object*-
expr2"
builtins.object"builtins.object*
msg
Any z36z37z38z39z310*˛
assertIsNot"unittest.case.TestCase.assertIsNot"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*-
expr1"
builtins.object"builtins.object*-
expr2"
builtins.object"builtins.object*
msg
Any z36z37z38z39z310*œ
assertIsNone#unittest.case.TestCase.assertIsNone"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
obj"
builtins.object"builtins.object*
msg
Any z36z37z38z39z310*’
assertIsNotNone&unittest.case.TestCase.assertIsNotNone"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
obj"
builtins.object"builtins.object*
msg
Any z36z37z38z39z310*›
assertInunittest.case.TestCase.assertIn"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
member
Any*´
	containerõ
1Union[typing.Iterable[Any],typing.Container[Any]]0
typing.Iterable[Any]
Any"typing.Iterable2
typing.Container[Any]
Any"typing.Container*
msg
Any z36z37z38z39z310*„
assertNotIn"unittest.case.TestCase.assertNotIn"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
member
Any*´
	containerõ
1Union[typing.Iterable[Any],typing.Container[Any]]0
typing.Iterable[Any]
Any"typing.Iterable2
typing.Container[Any]
Any"typing.Container*
msg
Any z36z37z38z39z310*≥
assertIsInstance'unittest.case.TestCase.assertIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
obj"
builtins.object"builtins.object*ﬁ
cls‘
7TypeAlias[Union[builtins.type,builtins.tuple[Unknown]]]}
,Union[builtins.type,builtins.tuple[Unknown]]
builtins.type"builtins.type+
builtins.tuple[Unknown] "builtins.tuple"unittest.case._ClassInfo*
msg
Any z36z37z38z39*Ì
assertIsInstance'unittest.case.TestCase.assertIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
obj"
builtins.object"builtins.object*£
clsô
GTypeAlias[Union[builtins.type,types.UnionType,builtins.tuple[Unknown]]]±
<Union[builtins.type,types.UnionType,builtins.tuple[Unknown]]
builtins.type"builtins.type"
types.UnionType"types.UnionType+
builtins.tuple[Unknown] "builtins.tuple"unittest.case._ClassInfo*
msg
Any z310*π
assertNotIsInstance*unittest.case.TestCase.assertNotIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
obj"
builtins.object"builtins.object*ﬁ
cls‘
7TypeAlias[Union[builtins.type,builtins.tuple[Unknown]]]}
,Union[builtins.type,builtins.tuple[Unknown]]
builtins.type"builtins.type+
builtins.tuple[Unknown] "builtins.tuple"unittest.case._ClassInfo*
msg
Any z36z37z38z39*Û
assertNotIsInstance*unittest.case.TestCase.assertNotIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
obj"
builtins.object"builtins.object*£
clsô
GTypeAlias[Union[builtins.type,types.UnionType,builtins.tuple[Unknown]]]±
<Union[builtins.type,types.UnionType,builtins.tuple[Unknown]]
builtins.type"builtins.type"
types.UnionType"types.UnionType+
builtins.tuple[Unknown] "builtins.tuple"unittest.case._ClassInfo*
msg
Any z310*˜

assertLogs!unittest.case.TestCase.assertLogs"˘
punittest.case._AssertLogsContext[TypeAlias[Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]]]‚
NTypeAlias[Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]]Ó
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"unittest.case._LoggingWatcher" unittest.case._AssertLogsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*É
loggeru
'Union[builtins.str,logging.Logger,None]
builtins.str"builtins.str 
logging.Logger"logging.Logger
None *|
levelo
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None z36z37z38*Ù

assertLogs!unittest.case.TestCase.assertLogs"˘
punittest._log._AssertLogsContext[TypeAlias[Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]]]‚
NTypeAlias[Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]]Ó
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"unittest._log._LoggingWatcher" unittest._log._AssertLogsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*É
loggeru
'Union[builtins.str,logging.Logger,None]
builtins.str"builtins.str 
logging.Logger"logging.Logger
None *|
levelo
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None z39z310*÷
assertRegex"unittest.case.TestCase.assertRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*ñ
expected_regexÅ
.Union[typing.AnyStr,re.Pattern[typing.AnyStr]]
typing.AnyStr:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*
msg
Any z36z37z38z39z310*ﬁ
assertNotRegex%unittest.case.TestCase.assertNotRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*ò
unexpected_regexÅ
.Union[typing.AnyStr,re.Pattern[typing.AnyStr]]
typing.AnyStr:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*
msg
Any z36z37z38z39z310*•
assertCountEqual'unittest.case.TestCase.assertCountEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*;
first0
typing.Iterable[Any]
Any"typing.Iterable*<
second0
typing.Iterable[Any]
Any"typing.Iterable*
msg
Any z36z37z38z39z310*ú
addTypeEqualityFunc*unittest.case.TestCase.addTypeEqualityFunc"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*#
typeobj
	Type[Any]
Any*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.functionz36z37z38z39z310*Ö
assertMultiLineEqual+unittest.case.TestCase.assertMultiLineEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*'
first
builtins.str"builtins.str*(
second
builtins.str"builtins.str*
msg
Any z36z37z38z39z310*¬
assertSequenceEqual*unittest.case.TestCase.assertSequenceEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*:
seq10
typing.Sequence[Any]
Any"typing.Sequence*:
seq20
typing.Sequence[Any]
Any"typing.Sequence*
msg
Any *ó
seq_typeÜ
&Union[Type[typing.Sequence[Any]],None]P
Type[typing.Sequence[Any]]0
typing.Sequence[Any]
Any"typing.Sequence
None z36z37z38z39z310*ö
assertListEqual&unittest.case.TestCase.assertListEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*7
list1,
builtins.list[Any]
Any"builtins.list*7
list2,
builtins.list[Any]
Any"builtins.list*
msg
Any z36z37z38z39z310*¢
assertTupleEqual'unittest.case.TestCase.assertTupleEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*:
tuple1.
builtins.tuple[Any]
Any"builtins.tuple*:
tuple2.
builtins.tuple[Any]
Any"builtins.tuple*
msg
Any z36z37z38z39z310*¯
assertSetEqual%unittest.case.TestCase.assertSetEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*g
set1]
#typing.AbstractSet[builtins.object]"
builtins.object"builtins.object"typing.AbstractSet*g
set2]
#typing.AbstractSet[builtins.object]"
builtins.object"builtins.object"typing.AbstractSet*
msg
Any z36z37z38z39z310*Ä
assertDictEqual&unittest.case.TestCase.assertDictEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*j
d1b
#typing.Mapping[Any,builtins.object]
Any"
builtins.object"builtins.object"typing.Mapping*j
d2b
#typing.Mapping[Any,builtins.object]
Any"
builtins.object"builtins.object"typing.Mapping*
msg
Any z36z37z38z39z310*ñ
failunittest.case.TestCase.fail"
NoReturn
*:
self0
unittest.case.TestCase"unittest.case.TestCase*
msg
Any z36z37z38z39z310*¶
countTestCases%unittest.case.TestCase.countTestCases"
builtins.int"builtins.int*:
self0
unittest.case.TestCase"unittest.case.TestCasez36z37z38z39z310*»
defaultTestResult(unittest.case.TestCase.defaultTestResult"8
unittest.result.TestResult"unittest.result.TestResult*:
self0
unittest.case.TestCase"unittest.case.TestCasez36z37z38z39z310*é
idunittest.case.TestCase.id"
builtins.str"builtins.str*:
self0
unittest.case.TestCase"unittest.case.TestCasez36z37z38z39z310*“
shortDescription'unittest.case.TestCase.shortDescription"D
Union[builtins.str,None]
builtins.str"builtins.str
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez36z37z38z39z310*Ú

addCleanup!unittest.case.TestCase.addCleanup"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function*

args *
kwargs z36z37*Î

addCleanup!unittest.case.TestCase.addCleanup"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*MK
CallableType[builtins.function]&
builtins.function"builtins.function*

args *
kwargs z38z39z310*ä

doCleanups!unittest.case.TestCase.doCleanups"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez36z37z38z39z310*§
_formatMessage%unittest.case.TestCase._formatMessage"
builtins.str"builtins.str*:
self0
unittest.case.TestCase"unittest.case.TestCase*M
msgD
Union[builtins.str,None]
builtins.str"builtins.str
None*-
standardMsg
builtins.str"builtins.strz36z37z38z39z310*é
_getAssertEqualityFunc-unittest.case.TestCase._getAssertEqualityFunc"K
CallableType[builtins.function]&
builtins.function"builtins.function*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Anyz36z37z38z39z310*Î
assertDictContainsSubset/unittest.case.TestCase.assertDictContainsSubset"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*G
subset;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*K

dictionary;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*-
msg"
builtins.object"builtins.object z36z37z38z39z310*ß
addClassCleanup&unittest.case.TestCase.addClassCleanup"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase*MK
CallableType[builtins.function]&
builtins.function"builtins.function*

args *
kwargs 0:classmethodpz38z39z310*æ
doClassCleanups&unittest.case.TestCase.doClassCleanups"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase0:classmethodpz38z39z310*Œ
assertNoLogs#unittest.case.TestCase.assertNoLogs"T
&unittest._log._AssertLogsContext[None]
None" unittest._log._AssertLogsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*É
loggeru
'Union[builtins.str,logging.Logger,None]
builtins.str"builtins.str 
logging.Logger"logging.Logger
None *|
levelo
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None z3102ñ
assertGreater$unittest.case.TestCase.assertGreater£
assertGreater$unittest.case.TestCase.assertGreater"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*g
a`
,_typeshed.SupportsDunderGT[unittest.case._T]
unittest.case._T"_typeshed.SupportsDunderGT*
b
unittest.case._T*
msg
Any 0:overloadX£
assertGreater$unittest.case.TestCase.assertGreater"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
unittest.case._T*g
b`
,_typeshed.SupportsDunderLT[unittest.case._T]
unittest.case._T"_typeshed.SupportsDunderLT*
msg
Any 0:overloadX"36"37"38"39"3102¥
assertGreaterEqual)unittest.case.TestCase.assertGreaterEqual≠
assertGreaterEqual)unittest.case.TestCase.assertGreaterEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*g
a`
,_typeshed.SupportsDunderGE[unittest.case._T]
unittest.case._T"_typeshed.SupportsDunderGE*
b
unittest.case._T*
msg
Any 0:overloadX≠
assertGreaterEqual)unittest.case.TestCase.assertGreaterEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
unittest.case._T*g
b`
,_typeshed.SupportsDunderLE[unittest.case._T]
unittest.case._T"_typeshed.SupportsDunderLE*
msg
Any 0:overloadX"36"37"38"39"3102Ñ

assertLess!unittest.case.TestCase.assertLessù

assertLess!unittest.case.TestCase.assertLess"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*g
a`
,_typeshed.SupportsDunderLT[unittest.case._T]
unittest.case._T"_typeshed.SupportsDunderLT*
b
unittest.case._T*
msg
Any 0:overloadXù

assertLess!unittest.case.TestCase.assertLess"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
unittest.case._T*g
b`
,_typeshed.SupportsDunderGT[unittest.case._T]
unittest.case._T"_typeshed.SupportsDunderGT*
msg
Any 0:overloadX"36"37"38"39"3102¢
assertLessEqual&unittest.case.TestCase.assertLessEqualß
assertLessEqual&unittest.case.TestCase.assertLessEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*g
a`
,_typeshed.SupportsDunderLT[unittest.case._T]
unittest.case._T"_typeshed.SupportsDunderLT*
b
unittest.case._T*
msg
Any 0:overloadXß
assertLessEqual&unittest.case.TestCase.assertLessEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
unittest.case._T*g
b`
,_typeshed.SupportsDunderGT[unittest.case._T]
unittest.case._T"_typeshed.SupportsDunderGT*
msg
Any 0:overloadX"36"37"38"39"3102∂	
assertRaises#unittest.case.TestCase.assertRaises„
assertRaises#unittest.case.TestCase.assertRaises"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*÷
expected_exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadXÖ
assertRaises#unittest.case.TestCase.assertRaises"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˇ
expected_exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*
msg
Any 0:overloadX"36"37"38"39"3102¨
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegexô
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*÷
expected_exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*©
expected_regexî
,Union[builtins.str,re.Pattern[builtins.str]]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadXª
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˇ
expected_exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*©
expected_regexî
,Union[builtins.str,re.Pattern[builtins.str]]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*
msg
Any 0:overloadX"36"37"38"39"3102›
assertWarns"unittest.case.TestCase.assertWarnsö
assertWarns"unittest.case.TestCase.assertWarns"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*

args *
kwargs 0:overloadX˜
assertWarns"unittest.case.TestCase.assertWarns"F
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*
msg
Any 0:overloadX"36"37"38"39"3102”
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegex–
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*©
expected_regexî
,Union[builtins.str,re.Pattern[builtins.str]]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*

args *
kwargs 0:overloadX≠
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegex"F
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*©
expected_regexî
,Union[builtins.str,re.Pattern[builtins.str]]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*
msg
Any 0:overloadX"36"37"38"39"3102û
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual◊
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
unittest.case._S* 
second
unittest.case._S*
places
None*
msg
Any*Y
deltaN
%unittest.case._SupportsAbsAndDunderGE"%unittest.case._SupportsAbsAndDunderGE0:overloadX€
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
unittest.case._S* 
second
unittest.case._S*
places
None *
msg
Any *Y
deltaN
%unittest.case._SupportsAbsAndDunderGE"%unittest.case._SupportsAbsAndDunderGE0:overloadXÜ
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*—
first≈
a_typeshed.SupportsSub[unittest.case._T,typing.SupportsAbs[typing.SupportsRound[builtins.object]]]
unittest.case._T≤
9typing.SupportsAbs[typing.SupportsRound[builtins.object]]a
%typing.SupportsRound[builtins.object]"
builtins.object"builtins.object"typing.SupportsRound"typing.SupportsAbs"_typeshed.SupportsSub* 
second
unittest.case._T*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *
delta
None 0:overloadXà
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
unittest.case._T*‘
second«
b_typeshed.SupportsRSub[unittest.case._T,typing.SupportsAbs[typing.SupportsRound[builtins.object]]]
unittest.case._T≤
9typing.SupportsAbs[typing.SupportsRound[builtins.object]]a
%typing.SupportsRound[builtins.object]"
builtins.object"builtins.object"typing.SupportsRound"typing.SupportsAbs"_typeshed.SupportsRSub*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *
delta
None 0:overloadX"36"37"38"39"3102º
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual›
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
unittest.case._S* 
second
unittest.case._S*
places
None*
msg
Any*Y
deltaN
%unittest.case._SupportsAbsAndDunderGE"%unittest.case._SupportsAbsAndDunderGE0:overloadX·
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
unittest.case._S* 
second
unittest.case._S*
places
None *
msg
Any *Y
deltaN
%unittest.case._SupportsAbsAndDunderGE"%unittest.case._SupportsAbsAndDunderGE0:overloadXå
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*—
first≈
a_typeshed.SupportsSub[unittest.case._T,typing.SupportsAbs[typing.SupportsRound[builtins.object]]]
unittest.case._T≤
9typing.SupportsAbs[typing.SupportsRound[builtins.object]]a
%typing.SupportsRound[builtins.object]"
builtins.object"builtins.object"typing.SupportsRound"typing.SupportsAbs"_typeshed.SupportsSub* 
second
unittest.case._T*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *
delta
None 0:overloadXé
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
unittest.case._T*‘
second«
b_typeshed.SupportsRSub[unittest.case._T,typing.SupportsAbs[typing.SupportsRound[builtins.object]]]
unittest.case._T≤
9typing.SupportsAbs[typing.SupportsRound[builtins.object]]a
%typing.SupportsRound[builtins.object]"
builtins.object"builtins.object"typing.SupportsRound"typing.SupportsAbs"_typeshed.SupportsRSub*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *
delta
None 0:overloadX"36"37"38"39"310j36j37j38j39j310r§
failureException'unittest.case.TestCase.failureExceptionR
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException*36*37*38*39*310rf
longMessage"unittest.case.TestCase.longMessage
builtins.bool"builtins.bool*36*37*38*39*310rÑ
maxDiffunittest.case.TestCase.maxDiffD
Union[builtins.int,None]
builtins.int"builtins.int
None*36*37*38*39*310rl
_testMethodName&unittest.case.TestCase._testMethodName
builtins.str"builtins.str*36*37*38*39*310rj
_testMethodDoc%unittest.case.TestCase._testMethodDoc
builtins.str"builtins.str*36*37*38*39*310rõ
failUnlessEqual&unittest.case.TestCase.failUnlessEqualK
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310rï
assertEquals#unittest.case.TestCase.assertEqualsK
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310rì
failIfEqual"unittest.case.TestCase.failIfEqualK
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310rõ
assertNotEquals&unittest.case.TestCase.assertNotEqualsK
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310rë

failUnless!unittest.case.TestCase.failUnlessK
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310rã
assert_unittest.case.TestCase.assert_K
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310râ
failIfunittest.case.TestCase.failIfK
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310r∞
failUnlessRaises'unittest.case.TestCase.failUnlessRaises^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*36*37*38*39*310r∫
failUnlessAlmostEqual,unittest.case.TestCase.failUnlessAlmostEqual^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*36*37*38*39*310r¥
assertAlmostEquals)unittest.case.TestCase.assertAlmostEquals^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*36*37*38*39*310r≤
failIfAlmostEqual(unittest.case.TestCase.failIfAlmostEqual^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*36*37*38*39*310r∫
assertNotAlmostEquals,unittest.case.TestCase.assertNotAlmostEquals^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*36*37*38*39*310r£
assertRegexpMatches*unittest.case.TestCase.assertRegexpMatchesK
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310r©
assertNotRegexpMatches-unittest.case.TestCase.assertNotRegexpMatchesK
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310r¥
assertRaisesRegexp)unittest.case.TestCase.assertRaisesRegexp^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*36*37*38*39*310Ñ
FunctionTestCaseunittest.case.FunctionTestCase"unittest.case.TestCase*É
__init__'unittest.case.FunctionTestCase.__init__"
None*J
self@
unittest.case.FunctionTestCase"unittest.case.FunctionTestCase*Y
testFuncK
CallableType[builtins.function]&
builtins.function"builtins.function*î
setUpÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ó
tearDownÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *W
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None z36z37z38z39z310*ú
runTest&unittest.case.FunctionTestCase.runTest"
None*J
self@
unittest.case.FunctionTestCase"unittest.case.FunctionTestCasez36z37z38z39z310j36j37j38j39j310¸	
_AssertRaisesContext"unittest.case._AssertRaisesContext"builtins.object*™
	__enter__,unittest.case._AssertRaisesContext.__enter__"+
'unittest.case._AssertRaisesContext.Self*-+
'unittest.case._AssertRaisesContext.Selfz36z37z38z39z310*≥
__exit__+unittest.case._AssertRaisesContext.__exit__"
builtins.bool"builtins.bool*rp
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*çä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
Nonez36z37z38z39z310*Œ
__class_getitem__4unittest.case._AssertRaisesContext.__class_getitem__"(
types.GenericAlias"types.GenericAlias*∫
cls∞
:Type[unittest.case._AssertRaisesContext[unittest.case._E]]p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*
item
Anypz39z310Pj36j37j38j39j310rd
	exception,unittest.case._AssertRaisesContext.exception
unittest.case._E*36*37*38*39*310â

_AssertWarnsContext!unittest.case._AssertWarnsContext"builtins.object*ß
	__enter__+unittest.case._AssertWarnsContext.__enter__"*
&unittest.case._AssertWarnsContext.Self*,*
&unittest.case._AssertWarnsContext.Selfz36z37z38z39z310*Ú
__exit__*unittest.case._AssertWarnsContext.__exit__"
None*HF
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*çä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
Nonez36z37z38z39z310j36j37j38j39j310r}
warning)unittest.case._AssertWarnsContext.warning2
warnings.WarningMessage"warnings.WarningMessage*36*37*38*39*310ri
filename*unittest.case._AssertWarnsContext.filename
builtins.str"builtins.str*36*37*38*39*310re
lineno(unittest.case._AssertWarnsContext.lineno
builtins.int"builtins.int*36*37*38*39*310r∏
warnings*unittest.case._AssertWarnsContext.warningsk
&builtins.list[warnings.WarningMessage]2
warnings.WarningMessage"warnings.WarningMessage"builtins.list*36*37*38*39*310Ç
expectedFailureunittest.case.expectedFailure"
unittest.case._FT*$
	test_item
unittest.case._FTz36z37z38z39z310¶
skipunittest.case.skip"K
CallableType[builtins.function]&
builtins.function"builtins.function*(
reason
builtins.str"builtins.strz36z37z38z39z310›
skipIfunittest.case.skipIf"K
CallableType[builtins.function]&
builtins.function"builtins.function*1
	condition"
builtins.object"builtins.object*(
reason
builtins.str"builtins.strz36z37z38z39z310Â

skipUnlessunittest.case.skipUnless"K
CallableType[builtins.function]&
builtins.function"builtins.function*1
	condition"
builtins.object"builtins.object*(
reason
builtins.str"builtins.strz36z37z38z39z310≤
addModuleCleanupunittest.case.addModuleCleanup"
None*MK
CallableType[builtins.function]&
builtins.function"builtins.function*

args *
kwargs z38z39z310I
doModuleCleanupsunittest.case.doModuleCleanups"
Nonez38z39z310*û
__annotations__unittest.case.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*+
unittestunittest *36*37*38*39*310*]
DIFF_OMITTEDunittest.case.DIFF_OMITTED
builtins.str"builtins.str*36*37*38*39*310