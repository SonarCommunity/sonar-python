
torch.ao.nn.quantized.referenceÌ
Linear5torch.ao.nn.quantized.reference.modules.linear.Linear"torch.nn.modules.linear.Linear"Ftorch.ao.nn.quantized.reference.modules.utils.ReferenceQuantizedModule*º
__init__>torch.ao.nn.quantized.reference.modules.linear.Linear.__init__"
None*x
selfn
5torch.ao.nn.quantized.reference.modules.linear.Linear"5torch.ao.nn.quantized.reference.modules.linear.Linear*-
in_features
builtins.int"builtins.int*.
out_features
builtins.int"builtins.int*+
bias_
builtins.bool"builtins.bool *[
deviceM
Union[torch._C.device,None]"
torch._C.device"torch._C.device
None *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *V
	_get_name?torch.ao.nn.quantized.reference.modules.linear.Linear._get_name*
self*•
forward=torch.ao.nn.quantized.reference.modules.linear.Linear.forward",
torch._tensor.Tensor"torch._tensor.Tensor*x
selfn
5torch.ao.nn.quantized.reference.modules.linear.Linear"5torch.ao.nn.quantized.reference.modules.linear.Linear*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*é

from_float@torch.ao.nn.quantized.reference.modules.linear.Linear.from_float*
cls*
float_linear*
weight_qparams0:classmethodprt
_IS_REFERENCECtorch.ao.nn.quantized.reference.modules.linear.Linear._IS_REFERENCE
builtins.bool"builtins.boolÌ
Conv1d3torch.ao.nn.quantized.reference.modules.conv.Conv1d"4torch.ao.nn.quantized.reference.modules.conv._ConvNd"torch.nn.modules.conv.Conv1d*‘
__init__<torch.ao.nn.quantized.reference.modules.conv.Conv1d.__init__"
None*t
selfj
3torch.ao.nn.quantized.reference.modules.conv.Conv1d"3torch.ao.nn.quantized.reference.modules.conv.Conv1d*-
in_channels
builtins.int"builtins.int*.
out_channels
builtins.int"builtins.int*ë
kernel_sizeˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t*é
strideˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t *è
paddingˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t *ê
dilationˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t **
groups
builtins.int"builtins.int **
bias
builtins.bool"builtins.bool *0
padding_mode
builtins.str"builtins.str *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *ü
forward;torch.ao.nn.quantized.reference.modules.conv.Conv1d.forward",
torch._tensor.Tensor"torch._tensor.Tensor*t
selfj
3torch.ao.nn.quantized.reference.modules.conv.Conv1d"3torch.ao.nn.quantized.reference.modules.conv.Conv1d*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*T
	_get_name=torch.ao.nn.quantized.reference.modules.conv.Conv1d._get_name*
self*ä

from_float>torch.ao.nn.quantized.reference.modules.conv.Conv1d.from_float*
cls*

float_conv*
weight_qparams0:classmethodpö

Conv2d3torch.ao.nn.quantized.reference.modules.conv.Conv2d"4torch.ao.nn.quantized.reference.modules.conv._ConvNd"torch.nn.modules.conv.Conv2d*Å
__init__<torch.ao.nn.quantized.reference.modules.conv.Conv2d.__init__"
None*t
selfj
3torch.ao.nn.quantized.reference.modules.conv.Conv2d"3torch.ao.nn.quantized.reference.modules.conv.Conv2d*
in_channels
Any*
out_channels
Any*
kernel_size
Any*
stride
Any *
padding
Any *
dilation
Any *
groups
Any *
bias
Any *
padding_mode
Any *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *ü
forward;torch.ao.nn.quantized.reference.modules.conv.Conv2d.forward",
torch._tensor.Tensor"torch._tensor.Tensor*t
selfj
3torch.ao.nn.quantized.reference.modules.conv.Conv2d"3torch.ao.nn.quantized.reference.modules.conv.Conv2d*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*T
	_get_name=torch.ao.nn.quantized.reference.modules.conv.Conv2d._get_name*
self*ä

from_float>torch.ao.nn.quantized.reference.modules.conv.Conv2d.from_float*
cls*

float_conv*
weight_qparams0:classmethodpö

Conv3d3torch.ao.nn.quantized.reference.modules.conv.Conv3d"4torch.ao.nn.quantized.reference.modules.conv._ConvNd"torch.nn.modules.conv.Conv3d*Å
__init__<torch.ao.nn.quantized.reference.modules.conv.Conv3d.__init__"
None*t
selfj
3torch.ao.nn.quantized.reference.modules.conv.Conv3d"3torch.ao.nn.quantized.reference.modules.conv.Conv3d*
in_channels
Any*
out_channels
Any*
kernel_size
Any*
stride
Any *
padding
Any *
dilation
Any *
groups
Any *
bias
Any *
padding_mode
Any *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *ü
forward;torch.ao.nn.quantized.reference.modules.conv.Conv3d.forward",
torch._tensor.Tensor"torch._tensor.Tensor*t
selfj
3torch.ao.nn.quantized.reference.modules.conv.Conv3d"3torch.ao.nn.quantized.reference.modules.conv.Conv3d*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*T
	_get_name=torch.ao.nn.quantized.reference.modules.conv.Conv3d._get_name*
self*ä

from_float>torch.ao.nn.quantized.reference.modules.conv.Conv3d.from_float*
cls*

float_conv*
weight_qparams0:classmethodpå!
ConvTranspose1d<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d"=torch.ao.nn.quantized.reference.modules.conv._ConvTransposeNd"%torch.nn.modules.conv.ConvTranspose1d*â
__init__Etorch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d.__init__"
None*Ü
self|
<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d"<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d*-
in_channels
builtins.int"builtins.int*.
out_channels
builtins.int"builtins.int*ë
kernel_sizeˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t*é
strideˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t *è
paddingˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t *ñ
output_paddingˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t **
groups
builtins.int"builtins.int **
bias
builtins.bool"builtins.bool *ê
dilationˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t *0
padding_mode
builtins.str"builtins.str *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *”
forwardDtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d.forward",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d"<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*ï
output_sizeÅ
'Union[builtins.list[builtins.int],None]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None *]
	_get_nameFtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d._get_name*
self*ì

from_floatGtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d.from_float*
cls*

float_conv*
weight_qparams0:classmethodpø
ConvTranspose2d<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d"=torch.ao.nn.quantized.reference.modules.conv._ConvTransposeNd"%torch.nn.modules.conv.ConvTranspose2d*º
__init__Etorch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d.__init__"
None*Ü
self|
<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d"<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d*
in_channels
Any*
out_channels
Any*
kernel_size
Any*
stride
Any *
padding
Any *
output_padding
Any *
groups
Any *
bias
Any *
dilation
Any *
padding_mode
Any *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *”
forwardDtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d.forward",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d"<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*ï
output_sizeÅ
'Union[builtins.list[builtins.int],None]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None *]
	_get_nameFtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d._get_name*
self*ì

from_floatGtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d.from_float*
cls*

float_conv*
weight_qparams0:classmethodpø
ConvTranspose3d<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d"=torch.ao.nn.quantized.reference.modules.conv._ConvTransposeNd"%torch.nn.modules.conv.ConvTranspose3d*º
__init__Etorch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d.__init__"
None*Ü
self|
<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d"<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d*
in_channels
Any*
out_channels
Any*
kernel_size
Any*
stride
Any *
padding
Any *
output_padding
Any *
groups
Any *
bias
Any *
dilation
Any *
padding_mode
Any *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *”
forwardDtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d.forward",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d"<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*ï
output_sizeÅ
'Union[builtins.list[builtins.int],None]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None *]
	_get_nameFtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d._get_name*
self*ì

from_floatGtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d.from_float*
cls*

float_conv*
weight_qparams0:classmethodp∫
RNNCell3torch.ao.nn.quantized.reference.modules.rnn.RNNCell"7torch.ao.nn.quantized.reference.modules.rnn.RNNCellBase*·
__init__<torch.ao.nn.quantized.reference.modules.rnn.RNNCell.__init__"
None*t
selfj
3torch.ao.nn.quantized.reference.modules.rnn.RNNCell"3torch.ao.nn.quantized.reference.modules.rnn.RNNCell*,

input_size
builtins.int"builtins.int*-
hidden_size
builtins.int"builtins.int**
bias
builtins.bool"builtins.bool *0
nonlinearity
builtins.str"builtins.str *
device
Any *
dtype
Any *Æ
weight_qparams_dictí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *T
	_get_name=torch.ao.nn.quantized.reference.modules.rnn.RNNCell._get_name*
self*ã
forward;torch.ao.nn.quantized.reference.modules.rnn.RNNCell.forward",
torch._tensor.Tensor"torch._tensor.Tensor*t
selfj
3torch.ao.nn.quantized.reference.modules.rnn.RNNCell"3torch.ao.nn.quantized.reference.modules.rnn.RNNCell*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*f
hx\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *à

from_float>torch.ao.nn.quantized.reference.modules.rnn.RNNCell.from_float*
cls*
mod*
weight_qparams_dict0:classmethodprn
nonlinearity@torch.ao.nn.quantized.reference.modules.rnn.RNNCell.nonlinearity
builtins.str"builtins.str¨
LSTMCell4torch.ao.nn.quantized.reference.modules.rnn.LSTMCell"7torch.ao.nn.quantized.reference.modules.rnn.RNNCellBase*≤
__init__=torch.ao.nn.quantized.reference.modules.rnn.LSTMCell.__init__"
None*v
selfl
4torch.ao.nn.quantized.reference.modules.rnn.LSTMCell"4torch.ao.nn.quantized.reference.modules.rnn.LSTMCell*,

input_size
builtins.int"builtins.int*-
hidden_size
builtins.int"builtins.int**
bias
builtins.bool"builtins.bool *
device
Any *
dtype
Any *Æ
weight_qparams_dictí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *U
	_get_name>torch.ao.nn.quantized.reference.modules.rnn.LSTMCell._get_name*
self*ˆ
forward<torch.ao.nn.quantized.reference.modules.rnn.LSTMCell.forward"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*v
selfl
4torch.ao.nn.quantized.reference.modules.rnn.LSTMCell"4torch.ao.nn.quantized.reference.modules.rnn.LSTMCell*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*Ë
hx›
<Union[Tuple[torch._tensor.Tensor,torch._tensor.Tensor],None]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor
None *´

from_float?torch.ao.nn.quantized.reference.modules.rnn.LSTMCell.from_float*
cls*
mod*
weight_qparams_dict* 
use_precomputed_fake_quant 0:classmethodpò

GRUCell3torch.ao.nn.quantized.reference.modules.rnn.GRUCell"7torch.ao.nn.quantized.reference.modules.rnn.RNNCellBase*Ø
__init__<torch.ao.nn.quantized.reference.modules.rnn.GRUCell.__init__"
None*t
selfj
3torch.ao.nn.quantized.reference.modules.rnn.GRUCell"3torch.ao.nn.quantized.reference.modules.rnn.GRUCell*,

input_size
builtins.int"builtins.int*-
hidden_size
builtins.int"builtins.int**
bias
builtins.bool"builtins.bool *
device
Any *
dtype
Any *Æ
weight_qparams_dictí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *T
	_get_name=torch.ao.nn.quantized.reference.modules.rnn.GRUCell._get_name*
self*ã
forward;torch.ao.nn.quantized.reference.modules.rnn.GRUCell.forward",
torch._tensor.Tensor"torch._tensor.Tensor*t
selfj
3torch.ao.nn.quantized.reference.modules.rnn.GRUCell"3torch.ao.nn.quantized.reference.modules.rnn.GRUCell*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*f
hx\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *à

from_float>torch.ao.nn.quantized.reference.modules.rnn.GRUCell.from_float*
cls*
mod*
weight_qparams_dict0:classmethodp˙
LSTM0torch.ao.nn.quantized.reference.modules.rnn.LSTM"3torch.ao.nn.quantized.reference.modules.rnn.RNNBase*e
__init__9torch.ao.nn.quantized.reference.modules.rnn.LSTM.__init__*
self*
args*

kwargs*ﬂ
permute_hidden?torch.ao.nn.quantized.reference.modules.rnn.LSTM.permute_hidden"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*n
selfd
0torch.ao.nn.quantized.reference.modules.rnn.LSTM"0torch.ao.nn.quantized.reference.modules.rnn.LSTM*ô
hxê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*m
permutation\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*á
get_expected_cell_sizeGtorch.ao.nn.quantized.reference.modules.rnn.LSTM.get_expected_cell_size"ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*n
selfd
0torch.ao.nn.quantized.reference.modules.rnn.LSTM"0torch.ao.nn.quantized.reference.modules.rnn.LSTM*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*m
batch_sizes\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*ö
check_forward_argsCtorch.ao.nn.quantized.reference.modules.rnn.LSTM.check_forward_args"
Any*n
selfd
0torch.ao.nn.quantized.reference.modules.rnn.LSTM"0torch.ao.nn.quantized.reference.modules.rnn.LSTM*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*ù
hiddenê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*m
batch_sizes\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*{
get_quantized_weight_bias_dictOtorch.ao.nn.quantized.reference.modules.rnn.LSTM.get_quantized_weight_bias_dict*
self*_
get_flat_weightsAtorch.ao.nn.quantized.reference.modules.rnn.LSTM.get_flat_weights*
self*b
forward8torch.ao.nn.quantized.reference.modules.rnn.LSTM.forward*
self*	
input*
hx *Q
	_get_name:torch.ao.nn.quantized.reference.modules.rnn.LSTM._get_name*
self*Ö

from_float;torch.ao.nn.quantized.reference.modules.rnn.LSTM.from_float*
cls*
mod*
weight_qparams_dict0:classmethodpÈ
GRU/torch.ao.nn.quantized.reference.modules.rnn.GRU"3torch.ao.nn.quantized.reference.modules.rnn.RNNBase*d
__init__8torch.ao.nn.quantized.reference.modules.rnn.GRU.__init__*
self*
args*

kwargs*z
get_quantized_weight_bias_dictNtorch.ao.nn.quantized.reference.modules.rnn.GRU.get_quantized_weight_bias_dict*
self*^
get_flat_weights@torch.ao.nn.quantized.reference.modules.rnn.GRU.get_flat_weights*
self*a
forward7torch.ao.nn.quantized.reference.modules.rnn.GRU.forward*
self*	
input*
hx *P
	_get_name9torch.ao.nn.quantized.reference.modules.rnn.GRU._get_name*
self*Ñ

from_float:torch.ao.nn.quantized.reference.modules.rnn.GRU.from_float*
cls*
mod*
weight_qparams_dict0:classmethodpû
	Embedding8torch.ao.nn.quantized.reference.modules.sparse.Embedding"!torch.nn.modules.sparse.Embedding"Ftorch.ao.nn.quantized.reference.modules.utils.ReferenceQuantizedModule*–
__init__Atorch.ao.nn.quantized.reference.modules.sparse.Embedding.__init__"
None*~
selft
8torch.ao.nn.quantized.reference.modules.sparse.Embedding"8torch.ao.nn.quantized.reference.modules.sparse.Embedding*0
num_embeddings
builtins.int"builtins.int*/
embedding_dim
builtins.int"builtins.int*W
padding_idxD
Union[builtins.int,None]
builtins.int"builtins.int
None *Z
max_normJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *1
	norm_type 
builtins.float"builtins.float *8
scale_grad_by_freq
builtins.bool"builtins.bool *,
sparse
builtins.bool"builtins.bool *k
_weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *Y
	_get_nameBtorch.ao.nn.quantized.reference.modules.sparse.Embedding._get_name*
self*≤
forward@torch.ao.nn.quantized.reference.modules.sparse.Embedding.forward",
torch._tensor.Tensor"torch._tensor.Tensor*~
selft
8torch.ao.nn.quantized.reference.modules.sparse.Embedding"8torch.ao.nn.quantized.reference.modules.sparse.Embedding*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*à

from_floatCtorch.ao.nn.quantized.reference.modules.sparse.Embedding.from_float*
cls*
mod*
weight_qparams0:classmethodp≠
EmbeddingBag;torch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag"$torch.nn.modules.sparse.EmbeddingBag"Ftorch.ao.nn.quantized.reference.modules.utils.ReferenceQuantizedModule*ø
__init__Dtorch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag.__init__"
None*Ñ
selfz
;torch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag";torch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag*0
num_embeddings
builtins.int"builtins.int*/
embedding_dim
builtins.int"builtins.int*Z
max_normJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *1
	norm_type 
builtins.float"builtins.float *8
scale_grad_by_freq
builtins.bool"builtins.bool *(
mode
builtins.str"builtins.str *,
sparse
builtins.bool"builtins.bool *k
_weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *9
include_last_offset
builtins.bool"builtins.bool *W
padding_idxD
Union[builtins.int,None]
builtins.int"builtins.int
None *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *\
	_get_nameEtorch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag._get_name*
self*°
forwardCtorch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag.forward",
torch._tensor.Tensor"torch._tensor.Tensor*Ñ
selfz
;torch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag";torch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*k
offsets\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *v
per_sample_weights\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *≠

from_floatFtorch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag.from_float*
cls*
mod*
weight_qparams* 
use_precomputed_fake_quant 0:classmethodp*Ä
__path__(torch.ao.nn.quantized.reference.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*õ
__annotations__/torch.ao.nn.quantized.reference.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*~
__all__'torch.ao.nn.quantized.reference.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list