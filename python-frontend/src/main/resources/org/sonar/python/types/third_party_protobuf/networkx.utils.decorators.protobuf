
networkx.utils.decorators®
argmap networkx.utils.decorators.argmap"builtins.object*Œ
__init__)networkx.utils.decorators.argmap.__init__"
None*N
selfD
 networkx.utils.decorators.argmap" networkx.utils.decorators.argmap*
func
Any*
args
Any*1
try_finally
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*j
__call__)networkx.utils.decorators.argmap.__call__*
self*
fz36z37z38z39z310z311z312z313*h
compile(networkx.utils.decorators.argmap.compile*
self*
fz36z37z38z39z310z311z312z313*j
assemble)networkx.utils.decorators.argmap.assemble*
self*
fz36z37z38z39z310z311z312z313*|
	signature*networkx.utils.decorators.argmap.signature*
cls*
f0:classmethodpz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313y
not_implemented_for-networkx.utils.decorators.not_implemented_for*
graph_typesz36z37z38z39z310z311z312z313ž
	open_file#networkx.utils.decorators.open_file"
Any*
path_arg
Any*(
mode
builtins.str"builtins.str z36z37z38z39z310z311z312z313p
nodes_or_number)networkx.utils.decorators.nodes_or_number*

which_argsz36z37z38z39z310z311z312z313{
np_random_state)networkx.utils.decorators.np_random_state*
random_state_argumentz36z37z38z39z310z311z312z313{
py_random_state)networkx.utils.decorators.py_random_state*
random_state_argumentz36z37z38z39z310z311z312z313*¹
__annotations__)networkx.utils.decorators.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313