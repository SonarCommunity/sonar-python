
torch.distributions.dirichlet√

_Dirichlet(torch.distributions.dirichlet._Dirichlet" torch.autograd.function.Function*i
forward0torch.distributions.dirichlet._Dirichlet.forward*
ctx*
concentration0:staticmethodh*~
backward1torch.distributions.dirichlet._Dirichlet.backward*
ctx*
grad_output0:staticmethod:once_differentiableh…
	Dirichlet'torch.distributions.dirichlet.Dirichlet"0torch.distributions.exp_family.ExponentialFamily*n
__init__0torch.distributions.dirichlet.Dirichlet.__init__*
self*
concentration*
validate_args *d
expand.torch.distributions.dirichlet.Dirichlet.expand*
self*
batch_shape*
	_instance *X
rsample/torch.distributions.dirichlet.Dirichlet.rsample*
self*
sample_shape *Q
log_prob0torch.distributions.dirichlet.Dirichlet.log_prob*
self*	
value*L
mean,torch.distributions.dirichlet.Dirichlet.mean*
self0:property`*L
mode,torch.distributions.dirichlet.Dirichlet.mode*
self0:property`*T
variance0torch.distributions.dirichlet.Dirichlet.variance*
self0:property`*D
entropy/torch.distributions.dirichlet.Dirichlet.entropy*
self*b
_natural_params7torch.distributions.dirichlet.Dirichlet._natural_params*
self0:property`*[
_log_normalizer7torch.distributions.dirichlet.Dirichlet._log_normalizer*
self*
xrú
arg_constraints7torch.distributions.dirichlet.Dirichlet.arg_constraintsœ
Fbuiltins.dict[builtins.str,torch.distributions.constraints.Constraint]
builtins.str"builtins.strX
*torch.distributions.constraints.Constraint"*torch.distributions.constraints.Constraint"builtins.dictrê
support/torch.distributions.dirichlet.Dirichlet.supportT
(torch.distributions.constraints._Simplex"(torch.distributions.constraints._Simplexrb
has_rsample3torch.distributions.dirichlet.Dirichlet.has_rsample
builtins.bool"builtins.boolrO
concentration5torch.distributions.dirichlet.Dirichlet.concentration
Anys
_Dirichlet_backward1torch.distributions.dirichlet._Dirichlet_backward*
x*
concentration*
grad_output*ô
__annotations__-torch.distributions.dirichlet.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*|
__all__%torch.distributions.dirichlet.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list