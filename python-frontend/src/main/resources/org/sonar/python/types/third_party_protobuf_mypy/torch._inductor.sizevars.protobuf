
torch._inductor.sizevarsÅS
SizeVarAllocator)torch._inductor.sizevars.SizeVarAllocator"builtins.object*Y
__init__2torch._inductor.sizevars.SizeVarAllocator.__init__*
self*
	shape_env *º
simplify2torch._inductor.sizevars.SizeVarAllocator.simplify"
Any*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
expr
Any*õ
make_simplify_with_ranges_cacheItorch._inductor.sizevars.SizeVarAllocator.make_simplify_with_ranges_cache"K
CallableType[builtins.function]&
builtins.function"builtins.function*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*j
make_simplify_loops_cacheCtorch._inductor.sizevars.SizeVarAllocator.make_simplify_loops_cache*
self*Î
_simplify_with_ranges?torch._inductor.sizevars.SizeVarAllocator._simplify_with_ranges"
Any*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
expr
Any*í

var_rangesÅ
!TypeAlias[builtins.dict[Any,Any]]9
builtins.dict[Any,Any]
Any
Any"builtins.dict"torch._inductor.utils.VarRanges*∞
_simplify_loops_impl>torch._inductor.sizevars.SizeVarAllocator._simplify_loops_impl"
Any*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*<

index_vars,
builtins.list[Any]
Any"builtins.list*
sizes
Any*
index_formulas
Any*¨
is_expr_static_and_trueAtorch._inductor.sizevars.SizeVarAllocator.is_expr_static_and_true"
builtins.bool"builtins.bool*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*L
exprB
Union[Any,builtins.int]
Any
builtins.int"builtins.int*¿
statically_known_equalsAtorch._inductor.sizevars.SizeVarAllocator.statically_known_equals"
builtins.bool"builtins.bool*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
left
Any*M
rightB
Union[Any,builtins.int]
Any
builtins.int"builtins.int*Ÿ
statically_known_list_equalsFtorch._inductor.sizevars.SizeVarAllocator.statically_known_list_equals"
builtins.bool"builtins.bool*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*6
left,
builtins.list[Any]
Any"builtins.list*7
right,
builtins.list[Any]
Any"builtins.list*∫
statically_known_leq>torch._inductor.sizevars.SizeVarAllocator.statically_known_leq"
builtins.bool"builtins.bool*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
left
Any*M
rightB
Union[Any,builtins.int]
Any
builtins.int"builtins.int*∫
statically_known_geq>torch._inductor.sizevars.SizeVarAllocator.statically_known_geq"
builtins.bool"builtins.bool*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
left
Any*M
rightB
Union[Any,builtins.int]
Any
builtins.int"builtins.int*∏
statically_known_lt=torch._inductor.sizevars.SizeVarAllocator.statically_known_lt"
builtins.bool"builtins.bool*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
left
Any*M
rightB
Union[Any,builtins.int]
Any
builtins.int"builtins.int*∏
statically_known_gt=torch._inductor.sizevars.SizeVarAllocator.statically_known_gt"
builtins.bool"builtins.bool*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
left
Any*M
rightB
Union[Any,builtins.int]
Any
builtins.int"builtins.int*’
statically_known_multiple_ofFtorch._inductor.sizevars.SizeVarAllocator.statically_known_multiple_of"
builtins.bool"builtins.bool*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
	numerator
Any*S
denominatorB
Union[Any,builtins.int]
Any
builtins.int"builtins.int*ÿ
guard_equals6torch._inductor.sizevars.SizeVarAllocator.guard_equals"
Any*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
left
Any*
right
Any*”
	guard_leq3torch._inductor.sizevars.SizeVarAllocator.guard_leq"
None*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
left
Any*
right
Any*—
guard_lt2torch._inductor.sizevars.SizeVarAllocator.guard_lt"
None*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
left
Any*
right
Any*[
guarded_order7torch._inductor.sizevars.SizeVarAllocator.guarded_order*
self*
seq*˙
evaluate_expr7torch._inductor.sizevars.SizeVarAllocator.evaluate_expr"
builtins.bool"builtins.bool*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*.
left$
Union[Any,Any]
Any
Any*ÿ
evaluate_min6torch._inductor.sizevars.SizeVarAllocator.evaluate_min"
Any*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
left
Any*
right
Any*ÿ
evaluate_max6torch._inductor.sizevars.SizeVarAllocator.evaluate_max"
Any*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
left
Any*
right
Any*Î
evaluate_static_shape?torch._inductor.sizevars.SizeVarAllocator.evaluate_static_shape"
builtins.int"builtins.int*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
left
Any*¿
evaluate_static_shapes@torch._inductor.sizevars.SizeVarAllocator.evaluate_static_shapes"J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*6
left,
builtins.list[Any]
Any"builtins.list*Í
remove_precomputed_replacementsItorch._inductor.sizevars.SizeVarAllocator.remove_precomputed_replacements"
Any*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
expr
Any*Å
symbolic_hint7torch._inductor.sizevars.SizeVarAllocator.symbolic_hint"B
Union[Any,builtins.int]
Any
builtins.int"builtins.int*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
expr
Any*©
	size_hint3torch._inductor.sizevars.SizeVarAllocator.size_hint"
builtins.int"builtins.int*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
expr
Any*T
fallbackD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ö

size_hints4torch._inductor.sizevars.SizeVarAllocator.size_hints"L
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*;
exprs0
typing.Iterable[Any]
Any"typing.Iterable*T
fallbackD
Union[builtins.int,None]
builtins.int"builtins.int
None *c

_lru_cache4torch._inductor.sizevars.SizeVarAllocator._lru_cache*
self*
fn*
maxsize *d
make_stride_vars_cache@torch._inductor.sizevars.SizeVarAllocator.make_stride_vars_cache*
self*Í
_stride_vars6torch._inductor.sizevars.SizeVarAllocator._stride_vars",
builtins.list[Any]
Any"builtins.list*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
index
Any*:
vars0
typing.Sequence[Any]
Any"typing.Sequence*B
support_vars0
typing.Sequence[Any]
Any"typing.Sequence*˘

offset_var4torch._inductor.sizevars.SizeVarAllocator.offset_var"
Any*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
index
Any*6
vars,
builtins.list[Any]
Any"builtins.list*∫
stride_hints6torch._inductor.sizevars.SizeVarAllocator.stride_hints"J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
index
Any*:
vars0
typing.Sequence[Any]
Any"typing.Sequence*t
support_vars`
 Union[typing.Sequence[Any],None]0
typing.Sequence[Any]
Any"typing.Sequence
None *¿
stride_order6torch._inductor.sizevars.SizeVarAllocator.stride_order"J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
index
Any*6
vars,
builtins.list[Any]
Any"builtins.list*⁄
lookup_precomputed_sizeAtorch._inductor.sizevars.SizeVarAllocator.lookup_precomputed_size"
Any*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
expr
Any*‘
free_symbols6torch._inductor.sizevars.SizeVarAllocator.free_symbols"*
builtins.set[Any]
Any"builtins.set*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*È
combine_modular_indexing_pairsHtorch._inductor.sizevars.SizeVarAllocator.combine_modular_indexing_pairs"
Any*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
index
Any*≥
expand_floor_div:torch._inductor.sizevars.SizeVarAllocator.expand_floor_div"m
#Union[builtins.bool,Tuple[Any,Any]]
builtins.bool"builtins.bool$
Tuple[Any,Any]
Any
Any*`
selfV
)torch._inductor.sizevars.SizeVarAllocator")torch._inductor.sizevars.SizeVarAllocator*
index
AnyrI
	shape_env3torch._inductor.sizevars.SizeVarAllocator.shape_env
AnyrK

var_to_val4torch._inductor.sizevars.SizeVarAllocator.var_to_val
AnyrÅ
replacements6torch._inductor.sizevars.SizeVarAllocator.replacements9
builtins.dict[Any,Any]
Any
Any"builtins.dictrô
precomputed_replacementsBtorch._inductor.sizevars.SizeVarAllocator.precomputed_replacements9
builtins.dict[Any,Any]
Any
Any"builtins.dictr°
inv_precomputed_replacementsFtorch._inductor.sizevars.SizeVarAllocator.inv_precomputed_replacements9
builtins.dict[Any,Any]
Any
Any"builtins.dictrM
stride_vars5torch._inductor.sizevars.SizeVarAllocator.stride_vars
Anyr_
simplify_with_ranges>torch._inductor.sizevars.SizeVarAllocator.simplify_with_ranges
AnyrU
_simplify_loops9torch._inductor.sizevars.SizeVarAllocator._simplify_loops
Any≥

SimplifyIndexing)torch._inductor.sizevars.SimplifyIndexing"builtins.object*”
__init__2torch._inductor.sizevars.SimplifyIndexing.__init__"
None*`
selfV
)torch._inductor.sizevars.SimplifyIndexing")torch._inductor.sizevars.SimplifyIndexing*
inner
Any*í

var_rangesÅ
!TypeAlias[builtins.dict[Any,Any]]9
builtins.dict[Any,Any]
Any
Any"builtins.dict"torch._inductor.utils.VarRanges*›
load.torch._inductor.sizevars.SimplifyIndexing.load"
Any*`
selfV
)torch._inductor.sizevars.SimplifyIndexing")torch._inductor.sizevars.SimplifyIndexing*&
name
builtins.str"builtins.str*
index
Any*n
store/torch._inductor.sizevars.SimplifyIndexing.store*
self*
name*	
index*	
value*

mode *v
store_reduction9torch._inductor.sizevars.SimplifyIndexing.store_reduction*
self*
name*	
index*	
value*b

index_expr4torch._inductor.sizevars.SimplifyIndexing.index_expr*
self*	
index*	
dtype*{
check_bounds6torch._inductor.sizevars.SimplifyIndexing.check_bounds*
self*	
index*
size*	
lower*	
upperrT
name.torch._inductor.sizevars.SimplifyIndexing.name
builtins.str"builtins.strrç
	_simplify3torch._inductor.sizevars.SimplifyIndexing._simplifyK
CallableType[builtins.function]&
builtins.function"builtins.functionW
join_dimensions(torch._inductor.sizevars.join_dimensions"
Any*
expr
Any*î
__annotations__(torch._inductor.sizevars.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*0
sympytorch._inductor.sizevars.sympy
Any*.
Exprtorch._inductor.sizevars.Expr
Any*E
logtorch._inductor.sizevars.log 
logging.Logger"logging.Logger