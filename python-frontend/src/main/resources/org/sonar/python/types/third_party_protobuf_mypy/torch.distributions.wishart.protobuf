
torch.distributions.wishart™
Wishart#torch.distributions.wishart.Wishart"0torch.distributions.exp_family.ExponentialFamily*œ
__init__,torch.distributions.wishart.Wishart.__init__"
None*T
selfJ
#torch.distributions.wishart.Wishart"#torch.distributions.wishart.Wishart*†
df~
*Union[torch._tensor.Tensor,numbers.Number],
torch._tensor.Tensor"torch._tensor.Tensor 
numbers.Number"numbers.Number*u
covariance_matrix\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *t
precision_matrix\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *n

scale_tril\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *
validate_args
Any *`
expand*torch.distributions.wishart.Wishart.expand*
self*
batch_shape*
	_instance *W

scale_tril.torch.distributions.wishart.Wishart.scale_tril*
self0:lazy_property*e
covariance_matrix5torch.distributions.wishart.Wishart.covariance_matrix*
self0:lazy_property*c
precision_matrix4torch.distributions.wishart.Wishart.precision_matrix*
self0:lazy_property*H
mean(torch.distributions.wishart.Wishart.mean*
self0:property`*H
mode(torch.distributions.wishart.Wishart.mode*
self0:property`*P
variance,torch.distributions.wishart.Wishart.variance*
self0:property`*j
_bartlett_sampling6torch.distributions.wishart.Wishart._bartlett_sampling*
self*
sample_shape *n
rsample+torch.distributions.wishart.Wishart.rsample*
self*
sample_shape *
max_try_correction *M
log_prob,torch.distributions.wishart.Wishart.log_prob*
self*	
value*@
entropy+torch.distributions.wishart.Wishart.entropy*
self*^
_natural_params3torch.distributions.wishart.Wishart._natural_params*
self0:property`*^
_log_normalizer3torch.distributions.wishart.Wishart._log_normalizer*
self*
x*
yr˜
arg_constraints3torch.distributions.wishart.Wishart.arg_constraintsÏ
Fbuiltins.dict[builtins.str,torch.distributions.constraints.Constraint]
builtins.str"builtins.strX
*torch.distributions.constraints.Constraint"*torch.distributions.constraints.Constraint"builtins.dictrž
support+torch.distributions.wishart.Wishart.supportf
1torch.distributions.constraints._PositiveDefinite"1torch.distributions.constraints._PositiveDefiniter^
has_rsample/torch.distributions.wishart.Wishart.has_rsample
builtins.bool"builtins.boolrp
_mean_carrier_measure9torch.distributions.wishart.Wishart._mean_carrier_measure
builtins.int"builtins.intrZ
df&torch.distributions.wishart.Wishart.df,
torch._tensor.Tensor"torch._tensor.TensorrŠ
_batch_dims/torch.distributions.wishart.Wishart._batch_dimsJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listrˆ
_unbroadcasted_scale_tril=torch.distributions.wishart.Wishart._unbroadcasted_scale_tril,
torch._tensor.Tensor"torch._tensor.Tensorr|

_dist_chi2.torch.distributions.wishart.Wishart._dist_chi2>
torch.distributions.chi2.Chi2"torch.distributions.chi2.Chi2¼

_mvdigamma&torch.distributions.wishart._mvdigamma",
torch._tensor.Tensor"torch._tensor.Tensor*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*#
p
builtins.int"builtins.int£
_clamp_above_eps,torch.distributions.wishart._clamp_above_eps",
torch._tensor.Tensor"torch._tensor.Tensor*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*—
__annotations__+torch.distributions.wishart.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*z
__all__#torch.distributions.wishart.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*N
_log_2"torch.distributions.wishart._log_2 
builtins.float"builtins.float