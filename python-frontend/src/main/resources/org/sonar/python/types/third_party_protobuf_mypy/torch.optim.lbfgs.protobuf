
torch.optim.lbfgsˆ
LBFGStorch.optim.lbfgs.LBFGS"torch.optim.optimizer.Optimizer*™
__init__ torch.optim.lbfgs.LBFGS.__init__"
None*<
self2
torch.optim.lbfgs.LBFGS"torch.optim.lbfgs.LBFGS*É
paramsˆ
hTypeAlias[Union[typing.Iterable[torch._tensor.Tensor],typing.Iterable[builtins.dict[builtins.str,Any]]]]Ë
]Union[typing.Iterable[torch._tensor.Tensor],typing.Iterable[builtins.dict[builtins.str,Any]]]f
%typing.Iterable[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Iterableú
0typing.Iterable[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"typing.Iterable"torch.optim.optimizer.ParamsT**
lr 
builtins.float"builtins.float *,
max_iter
builtins.int"builtins.int *T
max_evalD
Union[builtins.int,None]
builtins.int"builtins.int
None *6
tolerance_grad 
builtins.float"builtins.float *8
tolerance_change 
builtins.float"builtins.float *0
history_size
builtins.int"builtins.int *Z
line_search_fnD
Union[builtins.str,None]
builtins.str"builtins.str
None *2
_numeltorch.optim.lbfgs.LBFGS._numel*
self*H
_gather_flat_grad)torch.optim.lbfgs.LBFGS._gather_flat_grad*
self*S
	_add_grad!torch.optim.lbfgs.LBFGS._add_grad*
self*
	step_size*

update*>
_clone_param$torch.optim.lbfgs.LBFGS._clone_param*
self*K

_set_param"torch.optim.lbfgs.LBFGS._set_param*
self*
params_data*r
_directional_evaluate-torch.optim.lbfgs.LBFGS._directional_evaluate*
self*
closure*
x*
t*
d*=
steptorch.optim.lbfgs.LBFGS.step*
self*
closure0r3
_paramstorch.optim.lbfgs.LBFGS._params
Anyr>
_numel_cache$torch.optim.lbfgs.LBFGS._numel_cache
Nonex
_cubic_interpolate$torch.optim.lbfgs._cubic_interpolate*
x1*
f1*
g1*
x2*
f2*
g2*
bounds §
_strong_wolfetorch.optim.lbfgs._strong_wolfe*
obj_func*
x*
t*
d*
f*
g*
gtd*
c1 *
c2 *
tolerance_change *
max_ls *ç
__annotations__!torch.optim.lbfgs.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*p
__all__torch.optim.lbfgs.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list