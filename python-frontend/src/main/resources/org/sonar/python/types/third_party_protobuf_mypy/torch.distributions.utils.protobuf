
torch.distributions.utilsÇ
lazy_property'torch.distributions.utils.lazy_property"builtins.object*S
__init__0torch.distributions.utils.lazy_property.__init__*
self*
wrapped*b
__get__/torch.distributions.utils.lazy_property.__get__*
self*
instance*
obj_type rC
wrapped/torch.distributions.utils.lazy_property.wrapped
Anyó
_lazy_property_and_property5torch.distributions.utils._lazy_property_and_property"'torch.distributions.utils.lazy_property"builtins.property*a
__init__>torch.distributions.utils._lazy_property_and_property.__init__*
self*
wrappedD
broadcast_all'torch.distributions.utils.broadcast_all*

values`
_standard_normal*torch.distributions.utils._standard_normal*	
shape*	
dtype*

deviceN
_sum_rightmost(torch.distributions.utils._sum_rightmost*	
value*
dimY
logits_to_probs)torch.distributions.utils.logits_to_probs*

logits*
	is_binary ?
clamp_probs%torch.distributions.utils.clamp_probs*	
probsX
probs_to_logits)torch.distributions.utils.probs_to_logits*	
probs*
	is_binary Ñ
tril_matrix_to_vec,torch.distributions.utils.tril_matrix_to_vec",
torch._tensor.Tensor"torch._tensor.Tensor*5
mat,
torch._tensor.Tensor"torch._tensor.Tensor*(
diag
builtins.int"builtins.int Ñ
vec_to_tril_matrix,torch.distributions.utils.vec_to_tril_matrix",
torch._tensor.Tensor"torch._tensor.Tensor*5
vec,
torch._tensor.Tensor"torch._tensor.Tensor*(
diag
builtins.int"builtins.int *•
__annotations__)torch.distributions.utils.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
Ftorch.nn.functional *\
euler_constant(torch.distributions.utils.euler_constant 
builtins.float"builtins.float*x
__all__!torch.distributions.utils.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list