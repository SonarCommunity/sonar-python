
,torch.ao.nn.quantized.reference.modules.conv›
_ConvNd4torch.ao.nn.quantized.reference.modules.conv._ConvNd"torch.nn.modules.conv._ConvNd"Ftorch.ao.nn.quantized.reference.modules.utils.ReferenceQuantizedModule*å

from_float?torch.ao.nn.quantized.reference.modules.conv._ConvNd.from_float*
cls*

float_conv*
weight_qparams0:staticmethodhr∞
__annotations__Dtorch.ao.nn.quantized.reference.modules.conv._ConvNd.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrs
_IS_REFERENCEBtorch.ao.nn.quantized.reference.modules.conv._ConvNd._IS_REFERENCE
builtins.bool"builtins.boolÌ
Conv1d3torch.ao.nn.quantized.reference.modules.conv.Conv1d"4torch.ao.nn.quantized.reference.modules.conv._ConvNd"torch.nn.modules.conv.Conv1d*‘
__init__<torch.ao.nn.quantized.reference.modules.conv.Conv1d.__init__"
None*t
selfj
3torch.ao.nn.quantized.reference.modules.conv.Conv1d"3torch.ao.nn.quantized.reference.modules.conv.Conv1d*-
in_channels
builtins.int"builtins.int*.
out_channels
builtins.int"builtins.int*ë
kernel_sizeˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t*é
strideˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t *è
paddingˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t *ê
dilationˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t **
groups
builtins.int"builtins.int **
bias
builtins.bool"builtins.bool *0
padding_mode
builtins.str"builtins.str *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *ü
forward;torch.ao.nn.quantized.reference.modules.conv.Conv1d.forward",
torch._tensor.Tensor"torch._tensor.Tensor*t
selfj
3torch.ao.nn.quantized.reference.modules.conv.Conv1d"3torch.ao.nn.quantized.reference.modules.conv.Conv1d*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*T
	_get_name=torch.ao.nn.quantized.reference.modules.conv.Conv1d._get_name*
self*ä

from_float>torch.ao.nn.quantized.reference.modules.conv.Conv1d.from_float*
cls*

float_conv*
weight_qparams0:classmethodpö

Conv2d3torch.ao.nn.quantized.reference.modules.conv.Conv2d"4torch.ao.nn.quantized.reference.modules.conv._ConvNd"torch.nn.modules.conv.Conv2d*Å
__init__<torch.ao.nn.quantized.reference.modules.conv.Conv2d.__init__"
None*t
selfj
3torch.ao.nn.quantized.reference.modules.conv.Conv2d"3torch.ao.nn.quantized.reference.modules.conv.Conv2d*
in_channels
Any*
out_channels
Any*
kernel_size
Any*
stride
Any *
padding
Any *
dilation
Any *
groups
Any *
bias
Any *
padding_mode
Any *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *ü
forward;torch.ao.nn.quantized.reference.modules.conv.Conv2d.forward",
torch._tensor.Tensor"torch._tensor.Tensor*t
selfj
3torch.ao.nn.quantized.reference.modules.conv.Conv2d"3torch.ao.nn.quantized.reference.modules.conv.Conv2d*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*T
	_get_name=torch.ao.nn.quantized.reference.modules.conv.Conv2d._get_name*
self*ä

from_float>torch.ao.nn.quantized.reference.modules.conv.Conv2d.from_float*
cls*

float_conv*
weight_qparams0:classmethodpö

Conv3d3torch.ao.nn.quantized.reference.modules.conv.Conv3d"4torch.ao.nn.quantized.reference.modules.conv._ConvNd"torch.nn.modules.conv.Conv3d*Å
__init__<torch.ao.nn.quantized.reference.modules.conv.Conv3d.__init__"
None*t
selfj
3torch.ao.nn.quantized.reference.modules.conv.Conv3d"3torch.ao.nn.quantized.reference.modules.conv.Conv3d*
in_channels
Any*
out_channels
Any*
kernel_size
Any*
stride
Any *
padding
Any *
dilation
Any *
groups
Any *
bias
Any *
padding_mode
Any *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *ü
forward;torch.ao.nn.quantized.reference.modules.conv.Conv3d.forward",
torch._tensor.Tensor"torch._tensor.Tensor*t
selfj
3torch.ao.nn.quantized.reference.modules.conv.Conv3d"3torch.ao.nn.quantized.reference.modules.conv.Conv3d*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*T
	_get_name=torch.ao.nn.quantized.reference.modules.conv.Conv3d._get_name*
self*ä

from_float>torch.ao.nn.quantized.reference.modules.conv.Conv3d.from_float*
cls*

float_conv*
weight_qparams0:classmethodp«
_ConvTransposeNd=torch.ao.nn.quantized.reference.modules.conv._ConvTransposeNd"4torch.ao.nn.quantized.reference.modules.conv._ConvNd"&torch.nn.modules.conv._ConvTransposeNd*ï

from_floatHtorch.ao.nn.quantized.reference.modules.conv._ConvTransposeNd.from_float*
cls*

float_conv*
weight_qparams0:staticmethodhå!
ConvTranspose1d<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d"=torch.ao.nn.quantized.reference.modules.conv._ConvTransposeNd"%torch.nn.modules.conv.ConvTranspose1d*â
__init__Etorch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d.__init__"
None*Ü
self|
<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d"<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d*-
in_channels
builtins.int"builtins.int*.
out_channels
builtins.int"builtins.int*ë
kernel_sizeˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t*é
strideˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t *è
paddingˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t *ñ
output_paddingˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t **
groups
builtins.int"builtins.int **
bias
builtins.bool"builtins.bool *ê
dilationˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t *0
padding_mode
builtins.str"builtins.str *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *”
forwardDtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d.forward",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d"<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*ï
output_sizeÅ
'Union[builtins.list[builtins.int],None]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None *]
	_get_nameFtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d._get_name*
self*ì

from_floatGtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d.from_float*
cls*

float_conv*
weight_qparams0:classmethodpø
ConvTranspose2d<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d"=torch.ao.nn.quantized.reference.modules.conv._ConvTransposeNd"%torch.nn.modules.conv.ConvTranspose2d*º
__init__Etorch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d.__init__"
None*Ü
self|
<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d"<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d*
in_channels
Any*
out_channels
Any*
kernel_size
Any*
stride
Any *
padding
Any *
output_padding
Any *
groups
Any *
bias
Any *
dilation
Any *
padding_mode
Any *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *”
forwardDtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d.forward",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d"<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*ï
output_sizeÅ
'Union[builtins.list[builtins.int],None]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None *]
	_get_nameFtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d._get_name*
self*ì

from_floatGtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d.from_float*
cls*

float_conv*
weight_qparams0:classmethodpø
ConvTranspose3d<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d"=torch.ao.nn.quantized.reference.modules.conv._ConvTransposeNd"%torch.nn.modules.conv.ConvTranspose3d*º
__init__Etorch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d.__init__"
None*Ü
self|
<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d"<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d*
in_channels
Any*
out_channels
Any*
kernel_size
Any*
stride
Any *
padding
Any *
output_padding
Any *
groups
Any *
bias
Any *
dilation
Any *
padding_mode
Any *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *”
forwardDtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d.forward",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d"<torch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*ï
output_sizeÅ
'Union[builtins.list[builtins.int],None]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None *]
	_get_nameFtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d._get_name*
self*ì

from_floatGtorch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d.from_float*
cls*

float_conv*
weight_qparams0:classmethodp*®
__annotations__<torch.ao.nn.quantized.reference.modules.conv.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
nntorch.nn *
Ftorch.nn.functional *ã
__all__4torch.ao.nn.quantized.reference.modules.conv.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list