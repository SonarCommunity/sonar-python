
3torch.ao.nn.intrinsic.quantized.modules.linear_reluµ	

LinearReLU>torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU"+torch.ao.nn.quantized.modules.linear.Linear*™
__init__Gtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU.__init__*
self*
in_features*
out_features*

bias *
dtype *Â
forwardFtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU.forward",
torch._tensor.Tensor"torch._tensor.Tensor*‹
self€
>torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU">torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*_
	_get_nameHtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU._get_name*
self*œ

from_floatItorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*·
from_referenceMtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU.from_reference*
cls*
ref_linear_relu*
output_scale*
output_zero_point0:classmethodprž
_FLOAT_MODULELtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.typeâ

LinearLeakyReLUCtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU"+torch.ao.nn.quantized.modules.linear.Linear*²
__init__Ltorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU.__init__*
self*
in_features*
out_features*
negative_slope*

bias *
dtype *Ñ
forwardKtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU.forward",
torch._tensor.Tensor"torch._tensor.Tensor*•
selfŠ
Ctorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU"Ctorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*d
	_get_nameMtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU._get_name*
self*¡

from_floatNtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*´
from_referenceRtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU.from_reference*
cls*
ref_mod*
output_scale*
output_zero_point0:classmethodpr£
_FLOAT_MODULEQtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.typerm
negative_slopeRtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU.negative_slope
Any­	

LinearTanh>torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh"+torch.ao.nn.quantized.modules.linear.Linear*™
__init__Gtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh.__init__*
self*
in_features*
out_features*

bias *
dtype *Â
forwardFtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh.forward",
torch._tensor.Tensor"torch._tensor.Tensor*‹
self€
>torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh">torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*_
	_get_nameHtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh._get_name*
self*œ

from_floatItorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*¯
from_referenceMtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh.from_reference*
cls*
ref_mod*
output_scale*
output_zero_point0:classmethodprž
_FLOAT_MODULELtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.type*¯
__annotations__Ctorch.ao.nn.intrinsic.quantized.modules.linear_relu.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
nnqtorch.ao.nn.quantized *
nnitorch.ao.nn.intrinsic *’
__all__;torch.ao.nn.intrinsic.quantized.modules.linear_relu.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list