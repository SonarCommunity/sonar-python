
torch._Cé
_Nodetorch.autograd.graph.Node"abc.ABC*û
nametorch.autograd.graph.Node.name"
builtins.str"builtins.str*@
self6
torch.autograd.graph.Node"torch.autograd.graph.Node0:abc.abstractmethod@*…
next_functions(torch.autograd.graph.Node.next_functions"¶
Ibuiltins.tuple[Tuple[Union[torch.autograd.graph.Node,None],builtins.int]]»
9Tuple[Union[torch.autograd.graph.Node,None],builtins.int]k
%Union[torch.autograd.graph.Node,None]6
torch.autograd.graph.Node"torch.autograd.graph.Node
None
builtins.int"builtins.int"builtins.tuple*@
self6
torch.autograd.graph.Node"torch.autograd.graph.Node0:property:abc.abstractmethod@`*√
metadata"torch.autograd.graph.Node.metadata"9
builtins.dict[Any,Any]
Any
Any"builtins.dict*@
self6
torch.autograd.graph.Node"torch.autograd.graph.Node0:abc.abstractmethod@*‚
_register_hook_dict-torch.autograd.graph.Node._register_hook_dict"
None*@
self6
torch.autograd.graph.Node"torch.autograd.graph.Node*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor0:abc.abstractmethod@*Ø
register_hook'torch.autograd.graph.Node.register_hook"F
!torch.utils.hooks.RemovableHandle"!torch.utils.hooks.RemovableHandle*@
self6
torch.autograd.graph.Node"torch.autograd.graph.Node*S
fnK
CallableType[builtins.function]&
builtins.function"builtins.function0:abc.abstractmethod@*µ
register_prehook*torch.autograd.graph.Node.register_prehook"F
!torch.utils.hooks.RemovableHandle"!torch.utils.hooks.RemovableHandle*@
self6
torch.autograd.graph.Node"torch.autograd.graph.Node*S
fnK
CallableType[builtins.function]&
builtins.function"builtins.function0:abc.abstractmethod@*_
__subclasshook__*torch.autograd.graph.Node.__subclasshook__*
cls*
C0:classmethodpô
_NestedSequencetorch._C._NestedSequence"builtins.object*‹
__len__ torch._C._NestedSequence.__len__"
builtins.int"builtins.int*êç
(torch._C._NestedSequence[torch._C._T_co]G
torch._C._T_co"
builtins.object"builtins.object"builtins.object"torch._C._NestedSequence*Ñ
__getitem__$torch._C._NestedSequence.__getitem__"õ
>Union[torch._C._T_co,torch._C._NestedSequence[torch._C._T_co]]G
torch._C._T_co"
builtins.object"builtins.object"builtins.objectç
(torch._C._NestedSequence[torch._C._T_co]G
torch._C._T_co"
builtins.object"builtins.object"builtins.object"torch._C._NestedSequence*êç
(torch._C._NestedSequence[torch._C._T_co]G
torch._C._T_co"
builtins.object"builtins.object"builtins.object"torch._C._NestedSequence*
builtins.int"builtins.int*é
__contains__%torch._C._NestedSequence.__contains__"
builtins.bool"builtins.bool*êç
(torch._C._NestedSequence[torch._C._T_co]G
torch._C._T_co"
builtins.object"builtins.object"builtins.object"torch._C._NestedSequence*$"
builtins.object"builtins.object*√
__iter__!torch._C._NestedSequence.__iter__"Ä
Otyping.Iterator[Union[torch._C._T_co,torch._C._NestedSequence[torch._C._T_co]]]õ
>Union[torch._C._T_co,torch._C._NestedSequence[torch._C._T_co]]G
torch._C._T_co"
builtins.object"builtins.object"builtins.objectç
(torch._C._NestedSequence[torch._C._T_co]G
torch._C._T_co"
builtins.object"builtins.object"builtins.object"torch._C._NestedSequence"typing.Iterator*êç
(torch._C._NestedSequence[torch._C._T_co]G
torch._C._T_co"
builtins.object"builtins.object"builtins.object"torch._C._NestedSequence*À
__reversed__%torch._C._NestedSequence.__reversed__"Ä
Otyping.Iterator[Union[torch._C._T_co,torch._C._NestedSequence[torch._C._T_co]]]õ
>Union[torch._C._T_co,torch._C._NestedSequence[torch._C._T_co]]G
torch._C._T_co"
builtins.object"builtins.object"builtins.objectç
(torch._C._NestedSequence[torch._C._T_co]G
torch._C._T_co"
builtins.object"builtins.object"builtins.object"torch._C._NestedSequence"typing.Iterator*êç
(torch._C._NestedSequence[torch._C._T_co]G
torch._C._T_co"
builtins.object"builtins.object"builtins.object"torch._C._NestedSequence*„
counttorch._C._NestedSequence.count"
builtins.int"builtins.int*êç
(torch._C._NestedSequence[torch._C._T_co]G
torch._C._T_co"
builtins.object"builtins.object"builtins.object"torch._C._NestedSequence*	
Any*„
indextorch._C._NestedSequence.index"
builtins.int"builtins.int*êç
(torch._C._NestedSequence[torch._C._T_co]G
torch._C._T_co"
builtins.object"builtins.object"builtins.object"torch._C._NestedSequence*	
Any8PXñ

devicetorch._C.device"builtins.object*°
__get__torch._C.device.__get__""
torch._C.device"torch._C.device*,
self"
torch._C.device"torch._C.device*
instance
Any*
owner
Any *p
	__enter__torch._C.device.__enter__""
torch._C.device"torch._C.device*$"
torch._C.device"torch._C.device*u
__exit__torch._C.device.__exit__"
None*$"
torch._C.device"torch._C.device*	
Any*	
Any*	
Any*Ü

__reduce__torch._C.device.__reduce__".
builtins.tuple[Any]
Any"builtins.tuple*,
self"
torch._C.device"torch._C.device2Ÿ
__init__torch._C.device.__init__Ù
__init__torch._C.device.__init__"
None*,
self"
torch._C.device"torch._C.device*á
device˙
;TypeAlias[Union[builtins.str,torch._C.device,builtins.int]]î
0Union[builtins.str,torch._C.device,builtins.int]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int""torch._prims_common.DeviceLikeType0:overloadXª
__init__torch._C.device.__init__"
None*,
self"
torch._C.device"torch._C.device*&
type
builtins.str"builtins.str*'
index
builtins.int"builtins.int0:overloadXr:
typetorch._C.device.type
builtins.str"builtins.strr<
indextorch._C.device.index
builtins.int"builtins.intì
Streamtorch._C.Stream"builtins.object*l
querytorch._C.Stream.query"
builtins.bool"builtins.bool*,
self"
torch._C.Stream"torch._C.Stream*b
synchronizetorch._C.Stream.synchronize"
None*,
self"
torch._C.Stream"torch._C.Stream*ç

wait_eventtorch._C.Stream.wait_event"
None*,
self"
torch._C.Stream"torch._C.Stream*+
event 
torch._C.Event"torch._C.Event*ë
wait_streamtorch._C.Stream.wait_stream"
None*,
self"
torch._C.Stream"torch._C.Stream*-
other"
torch._C.Stream"torch._C.Stream*’
record_eventtorch._C.Stream.record_event" 
torch._C.Event"torch._C.Event*,
self"
torch._C.Stream"torch._C.Stream*W
eventJ
Union[torch._C.Event,None] 
torch._C.Event"torch._C.Event
None *p
__hash__torch._C.Stream.__hash__"
builtins.int"builtins.int*,
self"
torch._C.Stream"torch._C.Stream*h
__repr__torch._C.Stream.__repr__"
builtins.str"builtins.str*$"
torch._C.Stream"torch._C.Stream*å
__eq__torch._C.Stream.__eq__"
builtins.bool"builtins.bool*$"
torch._C.Stream"torch._C.Stream*$"
builtins.object"builtins.object2ã
__new__torch._C.Stream.__new__Ü
__new__torch._C.Stream.__new__""
torch._C.Stream"torch._C.Stream*M
selfC
Type[torch._C.Stream]"
torch._C.Stream"torch._C.Stream"type*≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *,
priority
builtins.int"builtins.int 0:overloadX›
__new__torch._C.Stream.__new__""
torch._C.Stream"torch._C.Stream*M
selfC
Type[torch._C.Stream]"
torch._C.Stream"torch._C.Stream"type*+
	stream_id
builtins.int"builtins.int*.
device_index
builtins.int"builtins.int*-
device_type
builtins.int"builtins.int*,
priority
builtins.int"builtins.int 0:overloadXrD
	stream_idtorch._C.Stream.stream_id
builtins.int"builtins.intrJ
device_indextorch._C.Stream.device_index
builtins.int"builtins.intrH
device_typetorch._C.Stream.device_type
builtins.int"builtins.intrD
devicetorch._C.Stream.device"
torch._C.device"torch._C.deviceﬁ
Eventtorch._C.Event"builtins.object*›
__new__torch._C.Event.__new__" 
torch._C.Event"torch._C.Event*J
self@
Type[torch._C.Event] 
torch._C.Event"torch._C.Event"type*≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *3
enable_timing
builtins.bool"builtins.bool *.
blocking
builtins.bool"builtins.bool *2
interprocess
builtins.bool"builtins.bool *í
from_ipc_handletorch._C.Event.from_ipc_handle" 
torch._C.Event"torch._C.Event*J
self@
Type[torch._C.Event] 
torch._C.Event"torch._C.Event"type*.
device"
torch._C.device"torch._C.device*0

ipc_handle 
builtins.bytes"builtins.bytes0:classmethodp*≤
recordtorch._C.Event.record"
None**
self 
torch._C.Event"torch._C.Event*[
streamM
Union[torch._C.Stream,None]"
torch._C.Stream"torch._C.Stream
None *Æ
waittorch._C.Event.wait"
None**
self 
torch._C.Event"torch._C.Event*[
streamM
Union[torch._C.Stream,None]"
torch._C.Stream"torch._C.Stream
None *i
querytorch._C.Event.query"
builtins.bool"builtins.bool**
self 
torch._C.Event"torch._C.Event*¶
elapsed_timetorch._C.Event.elapsed_time" 
builtins.float"builtins.float**
self 
torch._C.Event"torch._C.Event*+
other 
torch._C.Event"torch._C.Event*_
synchronizetorch._C.Event.synchronize"
None**
self 
torch._C.Event"torch._C.Event*u

ipc_handletorch._C.Event.ipc_handle" 
builtins.bytes"builtins.bytes**
self 
torch._C.Event"torch._C.Event*e
__repr__torch._C.Event.__repr__"
builtins.str"builtins.str*" 
torch._C.Event"torch._C.EventrC
devicetorch._C.Event.device"
torch._C.device"torch._C.devicerA
event_idtorch._C.Event.event_id
builtins.int"builtins.intÓ
Sizetorch._C.Size"builtins.tuple*d
numeltorch._C.Size.numel"
builtins.int"builtins.int*(
self
torch._C.Size"torch._C.Size2‡
__getitem__torch._C.Size.__getitem__ñ
__getitem__torch._C.Size.__getitem__"
builtins.int"builtins.int* 
torch._C.Size"torch._C.Size*
builtins.int"builtins.int0:overloadXú
__getitem__torch._C.Size.__getitem__"
torch._C.Size"torch._C.Size* 
torch._C.Size"torch._C.Size*" 
builtins.slice"builtins.slice0:overloadX∫
dtypetorch._C.dtype"builtins.object*o
to_realtorch._C.dtype.to_real" 
torch._C.dtype"torch._C.dtype**
self 
torch._C.dtype"torch._C.dtype*u

to_complextorch._C.dtype.to_complex" 
torch._C.dtype"torch._C.dtype**
self 
torch._C.dtype"torch._C.dtyperU
is_floating_point torch._C.dtype.is_floating_point
builtins.bool"builtins.boolrG

is_complextorch._C.dtype.is_complex
builtins.bool"builtins.boolrE
	is_signedtorch._C.dtype.is_signed
builtins.bool"builtins.boolrA
itemsizetorch._C.dtype.itemsize
builtins.int"builtins.intõ
iinfotorch._C.iinfo"builtins.object*Ü
__init__torch._C.iinfo.__init__"
None**
self 
torch._C.iinfo"torch._C.iinfo*+
dtype 
torch._C.dtype"torch._C.dtyper9
bitstorch._C.iinfo.bits
builtins.int"builtins.intr7
mintorch._C.iinfo.min
builtins.int"builtins.intr7
maxtorch._C.iinfo.max
builtins.int"builtins.intr;
dtypetorch._C.iinfo.dtype
builtins.str"builtins.str‹
finfotorch._C.finfo"builtins.object2£
__init__torch._C.finfo.__init__î
__init__torch._C.finfo.__init__"
None**
self 
torch._C.finfo"torch._C.finfo*+
dtype 
torch._C.dtype"torch._C.dtype0:overloadXg
__init__torch._C.finfo.__init__"
None**
self 
torch._C.finfo"torch._C.finfo0:overloadXr9
bitstorch._C.finfo.bits
builtins.int"builtins.intr;
mintorch._C.finfo.min 
builtins.float"builtins.floatr;
maxtorch._C.finfo.max 
builtins.float"builtins.floatr;
epstorch._C.finfo.eps 
builtins.float"builtins.floatr=
tinytorch._C.finfo.tiny 
builtins.float"builtins.floatrS
smallest_normaltorch._C.finfo.smallest_normal 
builtins.float"builtins.floatrI

resolutiontorch._C.finfo.resolution 
builtins.float"builtins.floatr;
dtypetorch._C.finfo.dtype
builtins.str"builtins.str*
layouttorch._C.layout"builtins.object8
memory_formattorch._C.memory_format"builtins.object,
qschemetorch._C.qscheme"builtins.object§
_FunctionBasetorch._C._FunctionBase"builtins.objectrÑ
saved_tensors$torch._C._FunctionBase.saved_tensorsM
Tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.TensorrX
_raw_saved_tensors)torch._C._FunctionBase._raw_saved_tensors

Tuple[Any]
Anyr∂
next_functions%torch._C._FunctionBase.next_functions}
'builtins.tuple[Tuple[Any,builtins.int]]B
Tuple[Any,builtins.int]
Any
builtins.int"builtins.int"builtins.tupleru
needs_input_grad'torch._C._FunctionBase.needs_input_grad8
Tuple[builtins.bool]
builtins.bool"builtins.boolrf
metadatatorch._C._FunctionBase.metadata9
builtins.dict[Any,Any]
Any
Any"builtins.dictrq
_materialize_non_diff_grads2torch._C._FunctionBase._materialize_non_diff_grads
builtins.bool"builtins.bool‰
_LegacyVariableBasetorch._C._LegacyVariableBase"torch._tensor.Tensor*ò
__init__%torch._C._LegacyVariableBase.__init__"
None*F
self<
torch._C._LegacyVariableBase"torch._C._LegacyVariableBase*h
data\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *W
volatileG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *r
_grad_fnb
"Union[torch._C._FunctionBase,None]0
torch._C._FunctionBase"torch._C._FunctionBase
None 6
IODescriptortorch._C.IODescriptor"builtins.object6
JITExceptiontorch._C.JITException"builtins.objectÔ
Futuretorch._C.Future"builtins.object*è
__init__torch._C.Future.__init__"
None*}
selfs
torch._C.Future[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.Future*`
devicesS
builtins.list[torch._C.device]"
torch._C.device"torch._C.device"builtins.list*ª
donetorch._C.Future.done"
builtins.bool"builtins.bool*}
selfs
torch._C.Future[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.Future*‚
valuetorch._C.Future.value"C

torch._C.T"
builtins.object"builtins.object"builtins.object*}
selfs
torch._C.Future[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.Future*‡
waittorch._C.Future.wait"C

torch._C.T"
builtins.object"builtins.object"builtins.object*}
selfs
torch._C.Future[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.Future*ö
add_done_callback!torch._C.Future.add_done_callback"
None*}
selfs
torch._C.Future[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.Future*Y
callbackK
CallableType[builtins.function]&
builtins.function"builtins.function*Î
thentorch._C.Future.then"s
torch._C.Future[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.Future*}
selfs
torch._C.Future[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.Future*Y
callbackK
CallableType[builtins.function]&
builtins.function"builtins.function*Ç

set_resulttorch._C.Future.set_result"
None*}
selfs
torch._C.Future[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.Future*O
resultC

torch._C.T"
builtins.object"builtins.object"builtins.object*ò
_set_unwrap_func torch._C.Future._set_unwrap_func"
None*}
selfs
torch._C.Future[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.Future*Y
callbackK
CallableType[builtins.function]&
builtins.function"builtins.functionPê
_Awaittorch._C._Await"builtins.object*\
__init__torch._C._Await.__init__"
None*,
self"
torch._C._Await"torch._C._Await*ì
fntorch._C._Await.fn"K
CallableType[builtins.function]&
builtins.function"builtins.function*,
self"
torch._C._Await"torch._C._Await*z
argstorch._C._Await.args".
builtins.tuple[Any]
Any"builtins.tuple*,
self"
torch._C._Await"torch._C._Await*t
	is_nowaittorch._C._Await.is_nowait"
builtins.bool"builtins.bool*,
self"
torch._C._Await"torch._C._AwaitF
_MobileOptimizerTypetorch._C._MobileOptimizerType"builtins.objectB
GraphExecutorStatetorch._C.GraphExecutorState"builtins.objectó
AliasDbtorch._C.AliasDb"builtins.object*i
__str__torch._C.AliasDb.__str__"
builtins.str"builtins.str*&$
torch._C.AliasDb"torch._C.AliasDbï
_InsertPointtorch._C._InsertPoint"builtins.object*h
	__enter__torch._C._InsertPoint.__enter__"
None*0.
torch._C._InsertPoint"torch._C._InsertPoint*s
__exit__torch._C._InsertPoint.__exit__"
None*0.
torch._C._InsertPoint"torch._C._InsertPoint*
Anyõ
Usetorch._C.Use"builtins.object*o
usertorch._C.Use.user"
torch._C.Node"torch._C.Node*&
self
torch._C.Use"torch._C.Use0:property`*q
offsettorch._C.Use.offset"
builtins.int"builtins.int*&
self
torch._C.Use"torch._C.Use0:property`*ê
isAftertorch._C.Use.isAfter"
builtins.bool"builtins.bool*&
self
torch._C.Use"torch._C.Use*'
other
torch._C.Use"torch._C.UseÀ
Valuetorch._C.Value"builtins.object*m
typetorch._C.Value.type"$
torch._C.JitType"torch._C.JitType**
self 
torch._C.Value"torch._C.Value*ú
setTypetorch._C.Value.setType" 
torch._C.Value"torch._C.Value**
self 
torch._C.Value"torch._C.Value*+
t$
torch._C.JitType"torch._C.JitType*†
	setTypeAstorch._C.Value.setTypeAs" 
torch._C.Value"torch._C.Value**
self 
torch._C.Value"torch._C.Value*+
other 
torch._C.Value"torch._C.Value*ò
inferTypeFromtorch._C.Value.inferTypeFrom"
None**
self 
torch._C.Value"torch._C.Value*3
t,
torch._tensor.Tensor"torch._tensor.Tensor*o
	debugNametorch._C.Value.debugName"
builtins.str"builtins.str**
self 
torch._C.Value"torch._C.Value*â
setDebugNametorch._C.Value.setDebugName"
None**
self 
torch._C.Value"torch._C.Value*&
name
builtins.str"builtins.str*i
uniquetorch._C.Value.unique"
builtins.int"builtins.int**
self 
torch._C.Value"torch._C.Value*i
offsettorch._C.Value.offset"
builtins.int"builtins.int**
self 
torch._C.Value"torch._C.Value*g
nodetorch._C.Value.node"
torch._C.Node"torch._C.Node**
self 
torch._C.Value"torch._C.Value*ì
usestorch._C.Value.uses"J
builtins.list[torch._C.Use]
torch._C.Use"torch._C.Use"builtins.list**
self 
torch._C.Value"torch._C.Value*ò
replaceAllUsesWith!torch._C.Value.replaceAllUsesWith"
None**
self 
torch._C.Value"torch._C.Value*)
val 
torch._C.Value"torch._C.Value*‘
replaceAllUsesAfterNodeWith*torch._C.Value.replaceAllUsesAfterNodeWith"
None**
self 
torch._C.Value"torch._C.Value*(
node
torch._C.Node"torch._C.Node*)
val 
torch._C.Value"torch._C.Value*y
requires_gradtorch._C.Value.requires_grad"
builtins.bool"builtins.bool**
self 
torch._C.Value"torch._C.Value*w
requiresGradtorch._C.Value.requiresGrad"
builtins.bool"builtins.bool**
self 
torch._C.Value"torch._C.Value*¶
copyMetadatatorch._C.Value.copyMetadata" 
torch._C.Value"torch._C.Value**
self 
torch._C.Value"torch._C.Value*+
other 
torch._C.Value"torch._C.Value*
isCompleteTensortorch._C.Value.isCompleteTensor"
builtins.bool"builtins.bool**
self 
torch._C.Value"torch._C.Value*s
toIValuetorch._C.Value.toIValue""
torch._C.IValue"torch._C.IValue**
self 
torch._C.Value"torch._C.Valueç

Blocktorch._C.Block"builtins.object*°
inputstorch._C.Block.inputs"T
typing.Iterator[torch._C.Value] 
torch._C.Value"torch._C.Value"typing.Iterator**
self 
torch._C.Block"torch._C.Block*£
outputstorch._C.Block.outputs"T
typing.Iterator[torch._C.Value] 
torch._C.Value"torch._C.Value"typing.Iterator**
self 
torch._C.Block"torch._C.Block*ú
nodestorch._C.Block.nodes"Q
typing.Iterator[torch._C.Node]
torch._C.Node"torch._C.Node"typing.Iterator**
self 
torch._C.Block"torch._C.Block*q
	paramNodetorch._C.Block.paramNode"
torch._C.Node"torch._C.Node**
self 
torch._C.Block"torch._C.Block*s

returnNodetorch._C.Block.returnNode"
torch._C.Node"torch._C.Node**
self 
torch._C.Block"torch._C.Block*s

owningNodetorch._C.Block.owningNode"
torch._C.Node"torch._C.Node**
self 
torch._C.Block"torch._C.Block*¢
registerOutputtorch._C.Block.registerOutput"
builtins.int"builtins.int**
self 
torch._C.Block"torch._C.Block*'
n 
torch._C.Value"torch._C.Value*˜
addNodetorch._C.Block.addNode"
torch._C.Node"torch._C.Node**
self 
torch._C.Block"torch._C.Block*&
name
builtins.str"builtins.str*`
inputsT
typing.Sequence[torch._C.Value] 
torch._C.Value"torch._C.Value"typing.SequenceòZ
Nodetorch._C.Node"builtins.object*s
__getitem__torch._C.Node.__getitem__"
Any* 
torch._C.Node"torch._C.Node*
builtins.str"builtins.str*f
schematorch._C.Node.schema"
builtins.str"builtins.str*(
self
torch._C.Node"torch._C.Node*h
inputtorch._C.Node.input" 
torch._C.Value"torch._C.Value*(
self
torch._C.Node"torch._C.Node*û
inputstorch._C.Node.inputs"T
typing.Iterator[torch._C.Value] 
torch._C.Value"torch._C.Value"typing.Iterator*(
self
torch._C.Node"torch._C.Node*ï
inputsAttorch._C.Node.inputsAt" 
torch._C.Value"torch._C.Value*(
self
torch._C.Node"torch._C.Node*%
idx
builtins.int"builtins.int*n

inputsSizetorch._C.Node.inputsSize"
builtins.int"builtins.int*(
self
torch._C.Node"torch._C.Node*j
outputtorch._C.Node.output" 
torch._C.Value"torch._C.Value*(
self
torch._C.Node"torch._C.Node*†
outputstorch._C.Node.outputs"T
typing.Iterator[torch._C.Value] 
torch._C.Value"torch._C.Value"typing.Iterator*(
self
torch._C.Node"torch._C.Node*ó
	outputsAttorch._C.Node.outputsAt" 
torch._C.Value"torch._C.Value*(
self
torch._C.Node"torch._C.Node*%
idx
builtins.int"builtins.int*p
outputsSizetorch._C.Node.outputsSize"
builtins.int"builtins.int*(
self
torch._C.Node"torch._C.Node*Ä
hasMultipleOutputs torch._C.Node.hasMultipleOutputs"
builtins.bool"builtins.bool*(
self
torch._C.Node"torch._C.Node*ö
blockstorch._C.Node.blocks"P
builtins.list[torch._C.Block] 
torch._C.Block"torch._C.Block"builtins.list*(
self
torch._C.Node"torch._C.Node*n
addBlocktorch._C.Node.addBlock" 
torch._C.Block"torch._C.Block*(
self
torch._C.Node"torch._C.Node*p

mustBeNonetorch._C.Node.mustBeNone"
builtins.bool"builtins.bool*(
self
torch._C.Node"torch._C.Node*ï
matchestorch._C.Node.matches"
builtins.bool"builtins.bool*(
self
torch._C.Node"torch._C.Node*)
pattern
builtins.str"builtins.str*b
kindtorch._C.Node.kind"
builtins.str"builtins.str*(
self
torch._C.Node"torch._C.Node*é
kindOftorch._C.Node.kindOf"
builtins.str"builtins.str*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*ñ
addInputtorch._C.Node.addInput" 
torch._C.Value"torch._C.Value*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*À
replaceInputtorch._C.Node.replaceInput" 
torch._C.Value"torch._C.Value*(
self
torch._C.Node"torch._C.Node*#
i
builtins.int"builtins.int*.
newValue 
torch._C.Value"torch._C.Value*Ω
replaceInputWithtorch._C.Node.replaceInputWith"
None*(
self
torch._C.Node"torch._C.Node*+
from_ 
torch._C.Value"torch._C.Value*(
to 
torch._C.Value"torch._C.Value*ë
replaceAllUsesWith torch._C.Node.replaceAllUsesWith"
None*(
self
torch._C.Node"torch._C.Node*%
n
torch._C.Node"torch._C.Node*õ
insertBeforetorch._C.Node.insertBefore"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*%
n
torch._C.Node"torch._C.Node*ô
insertAftertorch._C.Node.insertAfter"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*%
n
torch._C.Node"torch._C.Node*ì
isBeforetorch._C.Node.isBefore"
builtins.bool"builtins.bool*(
self
torch._C.Node"torch._C.Node*%
n
torch._C.Node"torch._C.Node*ë
isAftertorch._C.Node.isAfter"
builtins.bool"builtins.bool*(
self
torch._C.Node"torch._C.Node*%
n
torch._C.Node"torch._C.Node*Å

moveBeforetorch._C.Node.moveBefore"
None*(
self
torch._C.Node"torch._C.Node*%
n
torch._C.Node"torch._C.Node*
	moveAftertorch._C.Node.moveAfter"
None*(
self
torch._C.Node"torch._C.Node*%
n
torch._C.Node"torch._C.Node*Å
removeInputtorch._C.Node.removeInput"
None*(
self
torch._C.Node"torch._C.Node*#
i
builtins.int"builtins.int*â
removeAllInputstorch._C.Node.removeAllInputs"
None*(
self
torch._C.Node"torch._C.Node*#
i
builtins.int"builtins.int*j
hasUsestorch._C.Node.hasUses"
builtins.bool"builtins.bool*(
self
torch._C.Node"torch._C.Node*Å
eraseOutputtorch._C.Node.eraseOutput"
None*(
self
torch._C.Node"torch._C.Node*#
i
builtins.int"builtins.int*p
	addOutputtorch._C.Node.addOutput" 
torch._C.Value"torch._C.Value*(
self
torch._C.Node"torch._C.Node*l
	scopeNametorch._C.Node.scopeName"
builtins.str"builtins.str*(
self
torch._C.Node"torch._C.Node*Ä
isNondeterministic torch._C.Node.isNondeterministic"
builtins.bool"builtins.bool*(
self
torch._C.Node"torch._C.Node*°
copyAttributestorch._C.Node.copyAttributes"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*'
rhs
torch._C.Node"torch._C.Node*ù
copyMetadatatorch._C.Node.copyMetadata"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*'
rhs
torch._C.Node"torch._C.Node*v
hasAttributestorch._C.Node.hasAttributes"
builtins.bool"builtins.bool*(
self
torch._C.Node"torch._C.Node*ú
hasAttributetorch._C.Node.hasAttribute"
builtins.bool"builtins.bool*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*¢
removeAttributetorch._C.Node.removeAttribute"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
attr
builtins.str"builtins.str*ö

namedInputtorch._C.Node.namedInput" 
torch._C.Value"torch._C.Value*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*Ä
sourceRangetorch._C.Node.sourceRange",
torch._C.SourceRange"torch._C.SourceRange*(
self
torch._C.Node"torch._C.Node*t
owningBlocktorch._C.Node.owningBlock" 
torch._C.Block"torch._C.Block*(
self
torch._C.Node"torch._C.Node*√
findNodetorch._C.Node.findNode"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
kind
builtins.str"builtins.str*-
recurse
builtins.bool"builtins.bool *˙
findAllNodestorch._C.Node.findAllNodes"M
builtins.list[torch._C.Node]
torch._C.Node"torch._C.Node"builtins.list*(
self
torch._C.Node"torch._C.Node*&
kind
builtins.str"builtins.str*-
recurse
builtins.bool"builtins.bool *~
getModuleHierarchy torch._C.Node.getModuleHierarchy"
builtins.str"builtins.str*(
self
torch._C.Node"torch._C.Node*d
prevtorch._C.Node.prev"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*T
destroytorch._C.Node.destroy"
None*(
self
torch._C.Node"torch._C.Node*§
attributeNamestorch._C.Node.attributeNames"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*(
self
torch._C.Node"torch._C.Node*à
ftorch._C.Node.f" 
builtins.float"builtins.float*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*≥
f_torch._C.Node.f_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*)
val 
builtins.float"builtins.float*∫
fstorch._C.Node.fs"P
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*Â
fs_torch._C.Node.fs_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*Y
valP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*å
ctorch._C.Node.c"$
builtins.complex"builtins.complex*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*∑
c_torch._C.Node.c_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*-
val$
builtins.complex"builtins.complex*Ñ
storch._C.Node.s"
builtins.str"builtins.str*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*Ø
s_torch._C.Node.s_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*%
val
builtins.str"builtins.str*¥
sstorch._C.Node.ss"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*ﬂ
ss_torch._C.Node.ss_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*S
valJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Ñ
itorch._C.Node.i"
builtins.int"builtins.int*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*Ø
i_torch._C.Node.i_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*%
val
builtins.int"builtins.int*à
gtorch._C.Node.g" 
torch._C.Graph"torch._C.Graph*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*≥
g_torch._C.Node.g_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*)
val 
torch._C.Graph"torch._C.Graph*∫
gstorch._C.Node.gs"P
builtins.list[torch._C.Graph] 
torch._C.Graph"torch._C.Graph"builtins.list*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*Â
gs_torch._C.Node.gs_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*Y
valP
builtins.list[torch._C.Graph] 
torch._C.Graph"torch._C.Graph"builtins.list*ê
ivaltorch._C.Node.ival""
torch._C.IValue"torch._C.IValue*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*ª
ival_torch._C.Node.ival_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*+
val"
torch._C.IValue"torch._C.IValue*î
ttorch._C.Node.t",
torch._tensor.Tensor"torch._tensor.Tensor*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*ø
t_torch._C.Node.t_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*5
val,
torch._tensor.Tensor"torch._tensor.Tensor*Ã
tstorch._C.Node.ts"b
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*˜
ts_torch._C.Node.ts_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*k
valb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*é
tytorch._C.Node.ty"$
torch._C.JitType"torch._C.JitType*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*π
ty_torch._C.Node.ty_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*-
val$
torch._C.JitType"torch._C.JitType*¬
tystorch._C.Node.tys"V
builtins.list[torch._C.JitType]$
torch._C.JitType"torch._C.JitType"builtins.list*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*Ì
tys_torch._C.Node.tys_"
torch._C.Node"torch._C.Node*(
self
torch._C.Node"torch._C.Node*&
name
builtins.str"builtins.str*_
valV
builtins.list[torch._C.JitType]$
torch._C.JitType"torch._C.JitType"builtins.list©
Graphtorch._C.Graph"builtins.object*°
inputstorch._C.Graph.inputs"T
typing.Iterator[torch._C.Value] 
torch._C.Value"torch._C.Value"typing.Iterator**
self 
torch._C.Graph"torch._C.Graph*£
outputstorch._C.Graph.outputs"T
typing.Iterator[torch._C.Value] 
torch._C.Value"torch._C.Value"typing.Iterator**
self 
torch._C.Graph"torch._C.Graph*ú
nodestorch._C.Graph.nodes"Q
typing.Iterator[torch._C.Node]
torch._C.Node"torch._C.Node"typing.Iterator**
self 
torch._C.Graph"torch._C.Graph*s

param_nodetorch._C.Graph.param_node"
torch._C.Node"torch._C.Node**
self 
torch._C.Graph"torch._C.Graph*u
return_nodetorch._C.Graph.return_node"
torch._C.Node"torch._C.Node**
self 
torch._C.Graph"torch._C.Graph*õ
addInputtorch._C.Graph.addInput" 
torch._C.Value"torch._C.Value**
self 
torch._C.Graph"torch._C.Graph*(
name
builtins.str"builtins.str *Ç

eraseInputtorch._C.Graph.eraseInput"
None**
self 
torch._C.Graph"torch._C.Graph*#
i
builtins.int"builtins.int*¢
registerOutputtorch._C.Graph.registerOutput"
builtins.int"builtins.int**
self 
torch._C.Graph"torch._C.Graph*'
n 
torch._C.Value"torch._C.Value*Ñ
eraseOutputtorch._C.Graph.eraseOutput"
None**
self 
torch._C.Graph"torch._C.Graph*#
i
builtins.int"builtins.int*’
createtorch._C.Graph.create"
torch._C.Node"torch._C.Node**
self 
torch._C.Graph"torch._C.Graph*&
name
builtins.str"builtins.str*
args
Any*-
num_outputs
builtins.int"builtins.int*ö

appendNodetorch._C.Graph.appendNode"
torch._C.Node"torch._C.Node**
self 
torch._C.Graph"torch._C.Graph*%
n
torch._C.Node"torch._C.Node*ú
prependNodetorch._C.Graph.prependNode"
torch._C.Node"torch._C.Node**
self 
torch._C.Graph"torch._C.Graph*%
n
torch._C.Node"torch._C.Node*ö

insertNodetorch._C.Graph.insertNode"
torch._C.Node"torch._C.Node**
self 
torch._C.Graph"torch._C.Graph*%
n
torch._C.Node"torch._C.Node*k
blocktorch._C.Graph.block" 
torch._C.Block"torch._C.Block**
self 
torch._C.Graph"torch._C.Graph*Q
linttorch._C.Graph.lint"
None**
self 
torch._C.Graph"torch._C.Graph*u
alias_dbtorch._C.Graph.alias_db"$
torch._C.AliasDb"torch._C.AliasDb**
self 
torch._C.Graph"torch._C.Graph*◊
setInsertPointtorch._C.Graph.setInsertPoint"
None**
self 
torch._C.Graph"torch._C.Graph*p
ni
#Union[torch._C.Block,torch._C.Node] 
torch._C.Block"torch._C.Block
torch._C.Node"torch._C.Node*Ö
insert_point_guard!torch._C.Graph.insert_point_guard".
torch._C._InsertPoint"torch._C._InsertPoint**
self 
torch._C.Graph"torch._C.Graph*p
ni
#Union[torch._C.Block,torch._C.Node] 
torch._C.Block"torch._C.Block
torch._C.Node"torch._C.Node*u
insertPointtorch._C.Graph.insertPoint"
torch._C.Node"torch._C.Node**
self 
torch._C.Graph"torch._C.Graph*≥
insertGraphtorch._C.Graph.insertGraph"P
builtins.list[torch._C.Value] 
torch._C.Value"torch._C.Value"builtins.list**
self 
torch._C.Graph"torch._C.Graph*,
callee 
torch._C.Graph"torch._C.Graph*\
inputsP
builtins.list[torch._C.Value] 
torch._C.Value"torch._C.Value"builtins.list*y
makeMultiOutputIntoTuple'torch._C.Graph.makeMultiOutputIntoTuple"
None**
self 
torch._C.Graph"torch._C.Graph*i
copytorch._C.Graph.copy" 
torch._C.Graph"torch._C.Graph**
self 
torch._C.Graph"torch._C.GraphÂ
	AliasInfotorch._C.AliasInfo"builtins.objectrG
is_writetorch._C.AliasInfo.is_write
builtins.bool"builtins.boolru

before_settorch._C.AliasInfo.before_setH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setrs
	after_settorch._C.AliasInfo.after_setH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setÆ
Argumenttorch._C.Argument"builtins.object*ä
has_default_value#torch._C.Argument.has_default_value"
builtins.bool"builtins.bool*0
self&
torch._C.Argument"torch._C.Argumentr<
nametorch._C.Argument.name
builtins.str"builtins.strrD
typetorch._C.Argument.type$
torch._C.JitType"torch._C.JitTyperX
default_valuetorch._C.Argument.default_value&
Union[Any,None]
Any
NonerJ

kwarg_onlytorch._C.Argument.kwarg_only
builtins.bool"builtins.boolrB
is_outtorch._C.Argument.is_out
builtins.bool"builtins.boolrÇ

alias_infotorch._C.Argument.alias_infoV
Union[torch._C.AliasInfo,None](
torch._C.AliasInfo"torch._C.AliasInfo
None∫
FunctionSchematorch._C.FunctionSchema"builtins.objectrâ
	arguments!torch._C.FunctionSchema.argumentsY
 builtins.list[torch._C.Argument]&
torch._C.Argument"torch._C.Argument"builtins.listrÖ
returnstorch._C.FunctionSchema.returnsY
 builtins.list[torch._C.Argument]&
torch._C.Argument"torch._C.Argument"builtins.listrB
nametorch._C.FunctionSchema.name
builtins.str"builtins.strrT
overload_name%torch._C.FunctionSchema.overload_name
builtins.str"builtins.strrP

is_mutable"torch._C.FunctionSchema.is_mutable
builtins.bool"builtins.bool…
_UpgraderEntrytorch._C._UpgraderEntry"builtins.object*à
__init__ torch._C._UpgraderEntry.__init__"
None*<
self2
torch._C._UpgraderEntry"torch._C._UpgraderEntry*3
bumped_at_version
builtins.int"builtins.int*/
upgrader_name
builtins.str"builtins.str*,

old_schema
builtins.str"builtins.strr\
bumped_at_version)torch._C._UpgraderEntry.bumped_at_version
builtins.int"builtins.intrT
upgrader_name%torch._C._UpgraderEntry.upgrader_name
builtins.str"builtins.strrN

old_schema"torch._C._UpgraderEntry.old_schema
builtins.str"builtins.strﬁ
_UpgraderRangetorch._C._UpgraderRange"builtins.objectrP
min_version#torch._C._UpgraderRange.min_version
builtins.int"builtins.intrP
max_version#torch._C._UpgraderRange.max_version
builtins.int"builtins.intú
ScriptModuleSerializertorch._C.ScriptModuleSerializer"builtins.object*Ÿ
__init__(torch._C.ScriptModuleSerializer.__init__"
None*L
selfB
torch._C.ScriptModuleSerializer"torch._C.ScriptModuleSerializer*K
export_writer8
torch._C.PyTorchFileWriter"torch._C.PyTorchFileWriter*˝
	serialize)torch._C.ScriptModuleSerializer.serialize"
None*L
selfB
torch._C.ScriptModuleSerializer"torch._C.ScriptModuleSerializer*9
model.
torch._C.ScriptModule"torch._C.ScriptModule*2
script_module_id
builtins.int"builtins.int*í
write_files+torch._C.ScriptModuleSerializer.write_files"
None*L
selfB
torch._C.ScriptModuleSerializer"torch._C.ScriptModuleSerializer*ﬁ
storage_context/torch._C.ScriptModuleSerializer.storage_context"L
$torch._C.SerializationStorageContext"$torch._C.SerializationStorageContext*L
selfB
torch._C.ScriptModuleSerializer"torch._C.ScriptModuleSerializer‰
SerializationStorageContext$torch._C.SerializationStorageContext"builtins.object*õ
__init__-torch._C.SerializationStorageContext.__init__"
None*V
selfL
$torch._C.SerializationStorageContext"$torch._C.SerializationStorageContext*
has_storage0torch._C.SerializationStorageContext.has_storage"
builtins.bool"builtins.bool*V
selfL
$torch._C.SerializationStorageContext"$torch._C.SerializationStorageContext*7
storage*
torch.types.Storage"torch.types.Storage*¸
get_or_add_storage7torch._C.SerializationStorageContext.get_or_add_storage"
builtins.int"builtins.int*V
selfL
$torch._C.SerializationStorageContext"$torch._C.SerializationStorageContext*7
storage*
torch.types.Storage"torch.types.Storageß
DeserializationStorageContext&torch._C.DeserializationStorageContext"builtins.object*°
__init__/torch._C.DeserializationStorageContext.__init__"
None*Z
selfP
&torch._C.DeserializationStorageContext"&torch._C.DeserializationStorageContext*†
get_storage2torch._C.DeserializationStorageContext.get_storage",
torch._tensor.Tensor"torch._tensor.Tensor*Z
selfP
&torch._C.DeserializationStorageContext"&torch._C.DeserializationStorageContext*&
name
builtins.str"builtins.str*+
dtype 
torch._C.dtype"torch._C.dtype*Â
has_storage2torch._C.DeserializationStorageContext.has_storage"
builtins.bool"builtins.bool*Z
selfP
&torch._C.DeserializationStorageContext"&torch._C.DeserializationStorageContext*&
name
builtins.str"builtins.str*ù
add_storage2torch._C.DeserializationStorageContext.add_storage"
builtins.int"builtins.int*Z
selfP
&torch._C.DeserializationStorageContext"&torch._C.DeserializationStorageContext*&
name
builtins.str"builtins.str*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensorì
ConcreteModuleTypeBuilder"torch._C.ConcreteModuleTypeBuilder"builtins.object*ß
__init__+torch._C.ConcreteModuleTypeBuilder.__init__"
None*R
selfH
"torch._C.ConcreteModuleTypeBuilder""torch._C.ConcreteModuleTypeBuilder*
obj
Any*O
set_module_dict2torch._C.ConcreteModuleTypeBuilder.set_module_dict*
self*O
set_module_list2torch._C.ConcreteModuleTypeBuilder.set_module_list*
self*U
set_parameter_list5torch._C.ConcreteModuleTypeBuilder.set_parameter_list*
self*U
set_parameter_dict5torch._C.ConcreteModuleTypeBuilder.set_parameter_dict*
self*—
add_attribute0torch._C.ConcreteModuleTypeBuilder.add_attribute"
Any*R
selfH
"torch._C.ConcreteModuleTypeBuilder""torch._C.ConcreteModuleTypeBuilder*&
name
builtins.str"builtins.str*,
ty$
torch._C.JitType"torch._C.JitType*,
is_param
builtins.bool"builtins.bool*-
	is_buffer
builtins.bool"builtins.bool*Ü

add_module-torch._C.ConcreteModuleTypeBuilder.add_module"
Any*R
selfH
"torch._C.ConcreteModuleTypeBuilder""torch._C.ConcreteModuleTypeBuilder*&
name
builtins.str"builtins.str*D
meta:
torch._C.ConcreteModuleType"torch._C.ConcreteModuleType*ÿ
add_constant/torch._C.ConcreteModuleTypeBuilder.add_constant"
Any*R
selfH
"torch._C.ConcreteModuleTypeBuilder""torch._C.ConcreteModuleTypeBuilder*&
name
builtins.str"builtins.str*
value
Any*¥
add_overload/torch._C.ConcreteModuleTypeBuilder.add_overload"
Any*R
selfH
"torch._C.ConcreteModuleTypeBuilder""torch._C.ConcreteModuleTypeBuilder*-
method_name
builtins.str"builtins.str*g
overloaded_method_namesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*É
add_builtin_function7torch._C.ConcreteModuleTypeBuilder.add_builtin_function"
Any*R
selfH
"torch._C.ConcreteModuleTypeBuilder""torch._C.ConcreteModuleTypeBuilder*&
name
builtins.str"builtins.str*-
symbol_name
builtins.str"builtins.str*Ü
add_failed_attribute7torch._C.ConcreteModuleTypeBuilder.add_failed_attribute"
Any*R
selfH
"torch._C.ConcreteModuleTypeBuilder""torch._C.ConcreteModuleTypeBuilder*&
name
builtins.str"builtins.str*0
failure_reason
builtins.str"builtins.str*›
add_function_attribute9torch._C.ConcreteModuleTypeBuilder.add_function_attribute"
Any*R
selfH
"torch._C.ConcreteModuleTypeBuilder""torch._C.ConcreteModuleTypeBuilder*&
name
builtins.str"builtins.str*,
ty$
torch._C.JitType"torch._C.JitType*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*÷
add_ignored_attribute8torch._C.ConcreteModuleTypeBuilder.add_ignored_attribute"
Any*R
selfH
"torch._C.ConcreteModuleTypeBuilder""torch._C.ConcreteModuleTypeBuilder*&
name
builtins.str"builtins.str*á
add_ignored_attributes9torch._C.ConcreteModuleTypeBuilder.add_ignored_attributes"
Any*R
selfH
"torch._C.ConcreteModuleTypeBuilder""torch._C.ConcreteModuleTypeBuilder*U
namesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*˚
add_forward_hook3torch._C.ConcreteModuleTypeBuilder.add_forward_hook"
Any*R
selfH
"torch._C.ConcreteModuleTypeBuilder""torch._C.ConcreteModuleTypeBuilder*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.function*á
add_forward_pre_hook7torch._C.ConcreteModuleTypeBuilder.add_forward_pre_hook"
Any*R
selfH
"torch._C.ConcreteModuleTypeBuilder""torch._C.ConcreteModuleTypeBuilder*Y
pre_hookK
CallableType[builtins.function]&
builtins.function"builtins.function≥
ConcreteModuleTypetorch._C.ConcreteModuleType"builtins.object*Ÿ
get_constants)torch._C.ConcreteModuleType.get_constants"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*D
self:
torch._C.ConcreteModuleType"torch._C.ConcreteModuleType*Ÿ
equals"torch._C.ConcreteModuleType.equals"
builtins.bool"builtins.bool*D
self:
torch._C.ConcreteModuleType"torch._C.ConcreteModuleType*E
other:
torch._C.ConcreteModuleType"torch._C.ConcreteModuleType*∂
from_jit_type)torch._C.ConcreteModuleType.from_jit_type":
torch._C.ConcreteModuleType"torch._C.ConcreteModuleType*,
ty$
torch._C.JitType"torch._C.JitType0:staticmethodh˘
	CallStacktorch._C.CallStack"builtins.object*∆
__init__torch._C.CallStack.__init__"
None*2
self(
torch._C.CallStack"torch._C.CallStack*&
name
builtins.str"builtins.str*7
range,
torch._C.SourceRange"torch._C.SourceRange≥
ErrorReporttorch._C.ErrorReport"builtins.object*§
__init__torch._C.ErrorReport.__init__"
None*6
self,
torch._C.ErrorReport"torch._C.ErrorReport*7
range,
torch._C.SourceRange"torch._C.SourceRange*w
whattorch._C.ErrorReport.what"
builtins.str"builtins.str*6
self,
torch._C.ErrorReport"torch._C.ErrorReport*]

call_stacktorch._C.ErrorReport.call_stack"
builtins.str"builtins.str0:staticmethodhŒ
CompilationUnittorch._C.CompilationUnit"builtins.object*—
__init__!torch._C.CompilationUnit.__init__"
None*>
self4
torch._C.CompilationUnit"torch._C.CompilationUnit*(
lang
builtins.str"builtins.str *.

_frames_up
builtins.int"builtins.int *Ó
find_function&torch._C.CompilationUnit.find_function"M
 torch._C.ScriptFunction[Any,Any]
Any
Any"torch._C.ScriptFunction*>
self4
torch._C.CompilationUnit"torch._C.CompilationUnit*&
name
builtins.str"builtins.str*⁄
__getattr__$torch._C.CompilationUnit.__getattr__"M
 torch._C.ScriptFunction[Any,Any]
Any
Any"torch._C.ScriptFunction*64
torch._C.CompilationUnit"torch._C.CompilationUnit*
builtins.str"builtins.str*Û
definetorch._C.CompilationUnit.define"
Any*>
self4
torch._C.CompilationUnit"torch._C.CompilationUnit*(
script
builtins.str"builtins.str*§
rcbò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch._C.ResolutionCallback *.

_frames_up
builtins.int"builtins.int *—
get_interface&torch._C.CompilationUnit.get_interface"0
torch._C.InterfaceType"torch._C.InterfaceType*>
self4
torch._C.CompilationUnit"torch._C.CompilationUnit*&
name
builtins.str"builtins.str*â
get_functions&torch._C.CompilationUnit.get_functions"è
/builtins.list[torch._C.ScriptFunction[Any,Any]]M
 torch._C.ScriptFunction[Any,Any]
Any
Any"torch._C.ScriptFunction"builtins.list*>
self4
torch._C.CompilationUnit"torch._C.CompilationUnit*”
create_function(torch._C.CompilationUnit.create_function"M
 torch._C.ScriptFunction[Any,Any]
Any
Any"torch._C.ScriptFunction*>
self4
torch._C.CompilationUnit"torch._C.CompilationUnit*&
name
builtins.str"builtins.str*+
graph 
torch._C.Graph"torch._C.Graph*2
shouldMangle
builtins.bool"builtins.bool *¡
	get_class"torch._C.CompilationUnit.get_class"(
torch._C.ClassType"torch._C.ClassType*>
self4
torch._C.CompilationUnit"torch._C.CompilationUnit*&
name
builtins.str"builtins.str‡
ScriptObjecttorch._C.ScriptObject"builtins.object*ß
setattrtorch._C.ScriptObject.setattr"
Any*8
self.
torch._C.ScriptObject"torch._C.ScriptObject*&
name
builtins.str"builtins.str*
value
AnyŸ
ScriptModuletorch._C.ScriptModule"torch._C.ScriptObject*∫
_method_names#torch._C.ScriptModule._method_names"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*8
self.
torch._C.ScriptModule"torch._C.ScriptModule*›
_get_method!torch._C.ScriptModule._get_method"I
torch._C.ScriptMethod[Any,Any]
Any
Any"torch._C.ScriptMethod*8
self.
torch._C.ScriptModule"torch._C.ScriptModule*&
name
builtins.str"builtins.str»
LiteScriptModuletorch._C.LiteScriptModule"builtins.object*C
__call__"torch._C.LiteScriptModule.__call__*
self*	
input*Æ
find_method%torch._C.LiteScriptModule.find_method"
Any*@
self6
torch._C.LiteScriptModule"torch._C.LiteScriptModule*-
method_name
builtins.str"builtins.str*Œ
forward!torch._C.LiteScriptModule.forward"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*@
self6
torch._C.LiteScriptModule"torch._C.LiteScriptModule*
input
Any*¿

run_method$torch._C.LiteScriptModule.run_method"
Any*@
self6
torch._C.LiteScriptModule"torch._C.LiteScriptModule*-
method_name
builtins.str"builtins.str*
input
Any≥
ScriptFunctiontorch._C.ScriptFunction"builtins.object*æ
__call__ torch._C.ScriptFunction.__call__"K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object*®
selfù
3torch._C.ScriptFunction[Unknown,torch._C.ReturnVal] K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object"torch._C.ScriptFunction*

args *
kwargs *ï
savetorch._C.ScriptFunction.save"
None*®
selfù
3torch._C.ScriptFunction[Unknown,torch._C.ReturnVal] K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object"torch._C.ScriptFunction**
filename
builtins.str"builtins.str*ç
_extra_files{
*builtins.dict[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes"builtins.dict*ï
save_to_buffer&torch._C.ScriptFunction.save_to_buffer" 
builtins.bytes"builtins.bytes*®
selfù
3torch._C.ScriptFunction[Unknown,torch._C.ReturnVal] K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object"torch._C.ScriptFunction*ç
_extra_files{
*builtins.dict[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes"builtins.dict*Å
graphtorch._C.ScriptFunction.graph" 
torch._C.Graph"torch._C.Graph*®
selfù
3torch._C.ScriptFunction[Unknown,torch._C.ReturnVal] K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object"torch._C.ScriptFunction0:property`*É
inlined_graph%torch._C.ScriptFunction.inlined_graph" 
torch._C.Graph"torch._C.Graph*®
selfù
3torch._C.ScriptFunction[Unknown,torch._C.ReturnVal] K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object"torch._C.ScriptFunction*á
schematorch._C.ScriptFunction.schema"2
torch._C.FunctionSchema"torch._C.FunctionSchema*®
selfù
3torch._C.ScriptFunction[Unknown,torch._C.ReturnVal] K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object"torch._C.ScriptFunction*Ì
codetorch._C.ScriptFunction.code"
builtins.str"builtins.str*®
selfù
3torch._C.ScriptFunction[Unknown,torch._C.ReturnVal] K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object"torch._C.ScriptFunction*Ì
nametorch._C.ScriptFunction.name"
builtins.str"builtins.str*®
selfù
3torch._C.ScriptFunction[Unknown,torch._C.ReturnVal] K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object"torch._C.ScriptFunction*è
qualified_name&torch._C.ScriptFunction.qualified_name"
builtins.str"builtins.str*®
selfù
3torch._C.ScriptFunction[Unknown,torch._C.ReturnVal] K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object"torch._C.ScriptFunction0:property`Pø
ScriptMethodtorch._C.ScriptMethod"builtins.object*∏
__call__torch._C.ScriptMethod.__call__"K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object*§
selfô
1torch._C.ScriptMethod[Unknown,torch._C.ReturnVal] K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object"torch._C.ScriptMethod*

args *
kwargs *â
ownertorch._C.ScriptMethod.owner".
torch._C.ScriptModule"torch._C.ScriptModule*§
selfô
1torch._C.ScriptMethod[Unknown,torch._C.ReturnVal] K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object"torch._C.ScriptMethod0:property`*ı
nametorch._C.ScriptMethod.name"
builtins.str"builtins.str*§
selfô
1torch._C.ScriptMethod[Unknown,torch._C.ReturnVal] K
torch._C.ReturnVal"
builtins.object"builtins.object"builtins.object"torch._C.ScriptMethod0:property`PrF
graphtorch._C.ScriptMethod.graph 
torch._C.Graph"torch._C.Graph›

ScriptDicttorch._C.ScriptDict"builtins.object*ÿ
__init__torch._C.ScriptDict.__init__"
None*÷
selfÀ
*torch._C.ScriptDict[torch._C.K,torch._C.T]C

torch._C.K"
builtins.object"builtins.object"builtins.objectC

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptDict* 
dictø
$builtins.dict[torch._C.K,torch._C.T]C

torch._C.K"
builtins.object"builtins.object"builtins.objectC

torch._C.T"
builtins.object"builtins.object"builtins.object"builtins.dict*ï
__len__torch._C.ScriptDict.__len__"
builtins.int"builtins.int*ŒÀ
*torch._C.ScriptDict[torch._C.K,torch._C.T]C

torch._C.K"
builtins.object"builtins.object"builtins.objectC

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptDict*Ë
__contains__ torch._C.ScriptDict.__contains__"
builtins.bool"builtins.bool*ŒÀ
*torch._C.ScriptDict[torch._C.K,torch._C.T]C

torch._C.K"
builtins.object"builtins.object"builtins.objectC

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptDict*EC

torch._C.K"
builtins.object"builtins.object"builtins.object*ã
__getitem__torch._C.ScriptDict.__getitem__"C

torch._C.T"
builtins.object"builtins.object"builtins.object*ŒÀ
*torch._C.ScriptDict[torch._C.K,torch._C.T]C

torch._C.K"
builtins.object"builtins.object"builtins.objectC

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptDict*EC

torch._C.K"
builtins.object"builtins.object"builtins.object*ó
__setitem__torch._C.ScriptDict.__setitem__"
None*ŒÀ
*torch._C.ScriptDict[torch._C.K,torch._C.T]C

torch._C.K"
builtins.object"builtins.object"builtins.objectC

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptDict*EC

torch._C.K"
builtins.object"builtins.object"builtins.object*EC

torch._C.T"
builtins.object"builtins.object"builtins.object*–
__delitem__torch._C.ScriptDict.__delitem__"
None*ŒÀ
*torch._C.ScriptDict[torch._C.K,torch._C.T]C

torch._C.K"
builtins.object"builtins.object"builtins.objectC

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptDict*EC

torch._C.K"
builtins.object"builtins.object"builtins.object*Ó
__iter__torch._C.ScriptDict.__iter__"s
typing.Iterator[torch._C.K]C

torch._C.K"
builtins.object"builtins.object"builtins.object"typing.Iterator*ŒÀ
*torch._C.ScriptDict[torch._C.K,torch._C.T]C

torch._C.K"
builtins.object"builtins.object"builtins.objectC

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptDict*Î
itemstorch._C.ScriptDict.items"Ì
-typing.Iterator[Tuple[torch._C.K,torch._C.T]]™
Tuple[torch._C.K,torch._C.T]C

torch._C.K"
builtins.object"builtins.object"builtins.objectC

torch._C.T"
builtins.object"builtins.object"builtins.object"typing.Iterator*÷
selfÀ
*torch._C.ScriptDict[torch._C.K,torch._C.T]C

torch._C.K"
builtins.object"builtins.object"builtins.objectC

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptDict*Ó
keystorch._C.ScriptDict.keys"s
typing.Iterator[torch._C.K]C

torch._C.K"
builtins.object"builtins.object"builtins.object"typing.Iterator*÷
selfÀ
*torch._C.ScriptDict[torch._C.K,torch._C.T]C

torch._C.K"
builtins.object"builtins.object"builtins.objectC

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptDictPç'

ScriptListtorch._C.ScriptList"builtins.object*µ
__init__torch._C.ScriptList.__init__"
None*Ö
self{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*y
listo
builtins.list[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"builtins.list*√
__len__torch._C.ScriptList.__len__"
builtins.int"builtins.int*}{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*ñ
__contains__ torch._C.ScriptList.__contains__"
builtins.bool"builtins.bool*}{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*EC

torch._C.T"
builtins.object"builtins.object"builtins.object*◊
__delitem__torch._C.ScriptList.__delitem__"
None*}{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*
builtins.int"builtins.int*ú
__iter__torch._C.ScriptList.__iter__"s
typing.Iterator[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"typing.Iterator*}{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*ò
counttorch._C.ScriptList.count"
builtins.int"builtins.int*Ö
self{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*N
valueC

torch._C.T"
builtins.object"builtins.object"builtins.object*Ü
removetorch._C.ScriptList.remove"
None*Ö
self{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*N
valueC

torch._C.T"
builtins.object"builtins.object"builtins.object*Ü
appendtorch._C.ScriptList.append"
None*Ö
self{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*N
valueC

torch._C.T"
builtins.object"builtins.object"builtins.object*¥
cleartorch._C.ScriptList.clear"
None*Ö
self{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList2∞
__getitem__torch._C.ScriptList.__getitem__†
__getitem__torch._C.ScriptList.__getitem__"C

torch._C.T"
builtins.object"builtins.object"builtins.object*}{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*
builtins.int"builtins.int0:overloadX‹
__getitem__torch._C.ScriptList.__getitem__"{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*}{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*" 
builtins.slice"builtins.slice0:overloadX2º
__setitem__torch._C.ScriptList.__setitem__¨
__setitem__torch._C.ScriptList.__setitem__"
None*}{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*
builtins.int"builtins.int*EC

torch._C.T"
builtins.object"builtins.object"builtins.object0:overloadX‹
__setitem__torch._C.ScriptList.__setitem__"
None*}{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*" 
builtins.slice"builtins.slice*qo
builtins.list[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"builtins.list0:overloadX2∞
extendtorch._C.ScriptList.extend¡
extendtorch._C.ScriptList.extend"
None*Ö
self{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*{
valueso
builtins.list[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"builtins.list0:overloadX≈
extendtorch._C.ScriptList.extend"
None*Ö
self{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*
valuess
typing.Iterable[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"typing.Iterable0:overloadX2Ω
poptorch._C.ScriptList.pop˘
poptorch._C.ScriptList.pop"C

torch._C.T"
builtins.object"builtins.object"builtins.object*Ö
self{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList0:overloadX†
poptorch._C.ScriptList.pop"C

torch._C.T"
builtins.object"builtins.object"builtins.object*Ö
self{
torch._C.ScriptList[torch._C.T]C

torch._C.T"
builtins.object"builtins.object"builtins.object"torch._C.ScriptList*%
idx
builtins.int"builtins.int0:overloadXPÆ

ModuleDicttorch._C.ModuleDict"builtins.object*°
__init__torch._C.ModuleDict.__init__"
None*4
self*
torch._C.ModuleDict"torch._C.ModuleDict*7
mod.
torch._C.ScriptModule"torch._C.ScriptModule*’
itemstorch._C.ModuleDict.items"{
&builtins.list[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.list*4
self*
torch._C.ModuleDict"torch._C.ModuleDictÂ
ParameterDicttorch._C.ParameterDict"builtins.object*™
__init__torch._C.ParameterDict.__init__"
None*:
self0
torch._C.ParameterDict"torch._C.ParameterDict*7
mod.
torch._C.ScriptModule"torch._C.ScriptModule÷

BufferDicttorch._C.BufferDict"builtins.object*°
__init__torch._C.BufferDict.__init__"
None*4
self*
torch._C.BufferDict"torch._C.BufferDict*7
mod.
torch._C.ScriptModule"torch._C.ScriptModule*
Moduletorch._C.Module"builtins.objectÿ
_LinalgBackendtorch._C._LinalgBackend"builtins.objectr^
Defaulttorch._C._LinalgBackend.Default2
torch._C._LinalgBackend"torch._C._LinalgBackendr`
Cusolver torch._C._LinalgBackend.Cusolver2
torch._C._LinalgBackend"torch._C._LinalgBackendrZ
Magmatorch._C._LinalgBackend.Magma2
torch._C._LinalgBackend"torch._C._LinalgBackend:
BatchNormBackendtorch._C.BatchNormBackend"	enum.EnumHÍ
_BlasBackendtorch._C._BlasBackend"builtins.objectrV
Cublastorch._C._BlasBackend.Cublas.
torch._C._BlasBackend"torch._C._BlasBackendrZ
Cublaslttorch._C._BlasBackend.Cublaslt.
torch._C._BlasBackend"torch._C._BlasBackend0
ConvBackendtorch._C.ConvBackend"	enum.EnumHì
Tagtorch._C.Tag"	enum.EnumHr7
coretorch._C.Tag.core
builtins.int"builtins.intrY
data_dependent_output"torch._C.Tag.data_dependent_output
builtins.int"builtins.intrW
dynamic_output_shape!torch._C.Tag.dynamic_output_shape
builtins.int"builtins.intrA
	generatedtorch._C.Tag.generated
builtins.int"builtins.intrG
inplace_viewtorch._C.Tag.inplace_view
builtins.int"builtins.intr_
needs_fixed_stride_order%torch._C.Tag.needs_fixed_stride_order
builtins.int"builtins.intr_
nondeterministic_bitwise%torch._C.Tag.nondeterministic_bitwise
builtins.int"builtins.intr]
nondeterministic_seeded$torch._C.Tag.nondeterministic_seeded
builtins.int"builtins.intrA
	pointwisetorch._C.Tag.pointwise
builtins.int"builtins.intrQ
pt2_compliant_tagtorch._C.Tag.pt2_compliant_tag
builtins.int"builtins.intrA
	view_copytorch._C.Tag.view_copy
builtins.int"builtins.int˝
_DisableTorchDispatchtorch._C._DisableTorchDispatch"builtins.object*=
__init__'torch._C._DisableTorchDispatch.__init__*
self*7
	__enter__(torch._C._DisableTorchDispatch.__enter__* *;
__exit__'torch._C._DisableTorchDispatch.__exit__* * * * ¯
_EnableTorchFunctiontorch._C._EnableTorchFunction"builtins.object*<
__init__&torch._C._EnableTorchFunction.__init__*
self*6
	__enter__'torch._C._EnableTorchFunction.__enter__* *:
__exit__&torch._C._EnableTorchFunction.__exit__* * * * á
_EnablePythonDispatcher torch._C._EnablePythonDispatcher"builtins.object*?
__init__)torch._C._EnablePythonDispatcher.__init__*
self*9
	__enter__*torch._C._EnablePythonDispatcher.__enter__* *=
__exit__)torch._C._EnablePythonDispatcher.__exit__* * * * å
_DisablePythonDispatcher!torch._C._DisablePythonDispatcher"builtins.object*@
__init__*torch._C._DisablePythonDispatcher.__init__*
self*:
	__enter__+torch._C._DisablePythonDispatcher.__enter__* *>
__exit__*torch._C._DisablePythonDispatcher.__exit__* * * * Ó
_EnablePreDispatchtorch._C._EnablePreDispatch"builtins.object*:
__init__$torch._C._EnablePreDispatch.__init__*
self*4
	__enter__%torch._C._EnablePreDispatch.__enter__* *8
__exit__$torch._C._EnablePreDispatch.__exit__* * * * È
_DisableFuncTorchtorch._C._DisableFuncTorch"builtins.object*9
__init__#torch._C._DisableFuncTorch.__init__*
self*3
	__enter__$torch._C._DisableFuncTorch.__enter__* *7
__exit__#torch._C._DisableFuncTorch.__exit__* * * * ‰
_DisableAutocasttorch._C._DisableAutocast"builtins.object*8
__init__"torch._C._DisableAutocast.__init__*
self*2
	__enter__#torch._C._DisableAutocast.__enter__* *6
__exit__"torch._C._DisableAutocast.__exit__* * * * ∆
_InferenceModetorch._C._InferenceMode"builtins.object*°
__init__ torch._C._InferenceMode.__init__"
None*<
self2
torch._C._InferenceMode"torch._C._InferenceMode*+
enabled
builtins.bool"builtins.bool*0
	__enter__!torch._C._InferenceMode.__enter__* *4
__exit__ torch._C._InferenceMode.__exit__* * * * 2

LoggerBasetorch._C.LoggerBase"builtins.object6

NoopLoggertorch._C.NoopLogger"torch._C.LoggerBase<
LockingLoggertorch._C.LockingLogger"torch._C.LoggerBaseæ
AggregationTypetorch._C.AggregationType"	enum.EnumHrA
SUMtorch._C.AggregationType.SUM
builtins.int"builtins.intrA
AVGtorch._C.AggregationType.AVG
builtins.int"builtins.intˇ
	FileChecktorch._C.FileCheck"builtins.object*ä
runtorch._C.FileCheck.run"
None*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*Æ
checktorch._C.FileCheck.check"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*∂
	check_nottorch._C.FileCheck.check_not"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*∏

check_sametorch._C.FileCheck.check_same"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*∏

check_nexttorch._C.FileCheck.check_next"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*í
check_counttorch._C.FileCheck.check_count"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*'
count
builtins.int"builtins.int*-
exactly
builtins.bool"builtins.bool *∂
	check_dagtorch._C.FileCheck.check_dag"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*‘
check_source_highlighted+torch._C.FileCheck.check_source_highlighted"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*∫
check_regextorch._C.FileCheck.check_regex"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.strŒ
PyTorchFileReadertorch._C.PyTorchFileReader"builtins.object*¡

get_record%torch._C.PyTorchFileReader.get_record" 
builtins.bytes"builtins.bytes*B
self8
torch._C.PyTorchFileReader"torch._C.PyTorchFileReader*&
name
builtins.str"builtins.str*°
serialization_id+torch._C.PyTorchFileReader.serialization_id"
builtins.str"builtins.str*B
self8
torch._C.PyTorchFileReader"torch._C.PyTorchFileReader2£
__init__#torch._C.PyTorchFileReader.__init__≥
__init__#torch._C.PyTorchFileReader.__init__"
None*B
self8
torch._C.PyTorchFileReader"torch._C.PyTorchFileReader*&
name
builtins.str"builtins.str0:overloadXª
__init__#torch._C.PyTorchFileReader.__init__"
None*B
self8
torch._C.PyTorchFileReader"torch._C.PyTorchFileReader*.
buffer"
typing.BinaryIO"typing.BinaryIO0:overloadX›
PyTorchFileWritertorch._C.PyTorchFileWriter"builtins.object*â
write_record'torch._C.PyTorchFileWriter.write_record"
None*B
self8
torch._C.PyTorchFileWriter"torch._C.PyTorchFileWriter*&
name
builtins.str"builtins.str*±
data¶
6Union[torch.types.Storage,builtins.bytes,builtins.int]*
torch.types.Storage"torch.types.Storage 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*&
size
builtins.int"builtins.int*è
write_end_of_file,torch._C.PyTorchFileWriter.write_end_of_file"
None*B
self8
torch._C.PyTorchFileWriter"torch._C.PyTorchFileWriter*∂
set_min_version*torch._C.PyTorchFileWriter.set_min_version"
None*B
self8
torch._C.PyTorchFileWriter"torch._C.PyTorchFileWriter*)
version
builtins.int"builtins.int*›
get_all_written_records2torch._C.PyTorchFileWriter.get_all_written_records"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*B
self8
torch._C.PyTorchFileWriter"torch._C.PyTorchFileWriter*ô
archive_name'torch._C.PyTorchFileWriter.archive_name"
builtins.str"builtins.str*B
self8
torch._C.PyTorchFileWriter"torch._C.PyTorchFileWriter*°
serialization_id+torch._C.PyTorchFileWriter.serialization_id"
builtins.str"builtins.str*B
self8
torch._C.PyTorchFileWriter"torch._C.PyTorchFileWriter2£
__init__#torch._C.PyTorchFileWriter.__init__≥
__init__#torch._C.PyTorchFileWriter.__init__"
None*B
self8
torch._C.PyTorchFileWriter"torch._C.PyTorchFileWriter*&
name
builtins.str"builtins.str0:overloadXª
__init__#torch._C.PyTorchFileWriter.__init__"
None*B
self8
torch._C.PyTorchFileWriter"torch._C.PyTorchFileWriter*.
buffer"
typing.BinaryIO"typing.BinaryIO0:overloadXÒ
	Generatortorch._C.Generator"builtins.object*ö
__init__torch._C.Generator.__init__"
None*2
self(
torch._C.Generator"torch._C.Generator*≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *∆

__reduce__torch._C.Generator.__reduce__"‰
xTuple[Type[torch._C.Generator],Tuple[torch._C.device],Tuple[builtins.int,Union[builtins.int,None],torch._tensor.Tensor]]L
Type[torch._C.Generator](
torch._C.Generator"torch._C.Generator"type>
Tuple[torch._C.device]"
torch._C.device"torch._C.device◊
ATuple[builtins.int,Union[builtins.int,None],torch._tensor.Tensor]
builtins.int"builtins.intD
Union[builtins.int,None]
builtins.int"builtins.int
None,
torch._tensor.Tensor"torch._tensor.Tensor*2
self(
torch._C.Generator"torch._C.Generator*”
__setstate__torch._C.Generator.__setstate__"
None*2
self(
torch._C.Generator"torch._C.Generator*„
state◊
ATuple[builtins.int,Union[builtins.int,None],torch._tensor.Tensor]
builtins.int"builtins.intD
Union[builtins.int,None]
builtins.int"builtins.int
None,
torch._tensor.Tensor"torch._tensor.Tensor*ã
	get_statetorch._C.Generator.get_state",
torch._tensor.Tensor"torch._tensor.Tensor*2
self(
torch._C.Generator"torch._C.Generator*≈
	set_statetorch._C.Generator.set_state"(
torch._C.Generator"torch._C.Generator*2
self(
torch._C.Generator"torch._C.Generator*<

_new_state,
torch._tensor.Tensor"torch._tensor.Tensor*ã
clone_statetorch._C.Generator.clone_state"(
torch._C.Generator"torch._C.Generator*2
self(
torch._C.Generator"torch._C.Generator*õ
graphsafe_get_state&torch._C.Generator.graphsafe_get_state"(
torch._C.Generator"torch._C.Generator*2
self(
torch._C.Generator"torch._C.Generator*’
graphsafe_set_state&torch._C.Generator.graphsafe_set_state"(
torch._C.Generator"torch._C.Generator*2
self(
torch._C.Generator"torch._C.Generator*8

_new_state(
torch._C.Generator"torch._C.Generator*≥

set_offsettorch._C.Generator.set_offset"(
torch._C.Generator"torch._C.Generator*2
self(
torch._C.Generator"torch._C.Generator*(
offset
builtins.int"builtins.int*}

get_offsettorch._C.Generator.get_offset"
builtins.int"builtins.int*2
self(
torch._C.Generator"torch._C.Generator*≥
manual_seedtorch._C.Generator.manual_seed"(
torch._C.Generator"torch._C.Generator*2
self(
torch._C.Generator"torch._C.Generator*&
seed
builtins.int"builtins.int*q
seedtorch._C.Generator.seed"
builtins.int"builtins.int*2
self(
torch._C.Generator"torch._C.Generator*Å
initial_seedtorch._C.Generator.initial_seed"
builtins.int"builtins.int*2
self(
torch._C.Generator"torch._C.GeneratorrG
devicetorch._C.Generator.device"
torch._C.device"torch._C.device§
_DispatchOperatorHandle torch._C._DispatchOperatorHandle"builtins.object*µ
schema'torch._C._DispatchOperatorHandle.schema"2
torch._C.FunctionSchema"torch._C.FunctionSchema*N
selfD
 torch._C._DispatchOperatorHandle" torch._C._DispatchOperatorHandle*ù
debug&torch._C._DispatchOperatorHandle.debug"
builtins.str"builtins.str*N
selfD
 torch._C._DispatchOperatorHandle" torch._C._DispatchOperatorHandle›
_DispatchModuletorch._C._DispatchModule"builtins.object*
def_torch._C._DispatchModule.def_"4
torch._C._DispatchModule"torch._C._DispatchModule*>
self4
torch._C._DispatchModule"torch._C._DispatchModule*(
schema
builtins.str"builtins.str*)
alias
builtins.str"builtins.str *—

def_legacy#torch._C._DispatchModule.def_legacy"4
torch._C._DispatchModule"torch._C._DispatchModule*>
self4
torch._C._DispatchModule"torch._C._DispatchModule*(
schema
builtins.str"builtins.str*™
def_name_t_t%torch._C._DispatchModule.def_name_t_t"4
torch._C._DispatchModule"torch._C._DispatchModule*>
self4
torch._C._DispatchModule"torch._C._DispatchModule*&
name
builtins.str"builtins.str**
dispatch
builtins.str"builtins.str*)
debug
builtins.str"builtins.str *Ÿ
def_schema_t_t'torch._C._DispatchModule.def_schema_t_t"4
torch._C._DispatchModule"torch._C._DispatchModule*>
self4
torch._C._DispatchModule"torch._C._DispatchModule*(
schema
builtins.str"builtins.str**
dispatch
builtins.str"builtins.str*'
alias
builtins.str"builtins.str*)
debug
builtins.str"builtins.str *¢
impl_t_t!torch._C._DispatchModule.impl_t_t"4
torch._C._DispatchModule"torch._C._DispatchModule*>
self4
torch._C._DispatchModule"torch._C._DispatchModule*&
name
builtins.str"builtins.str**
dispatch
builtins.str"builtins.str*)
debug
builtins.str"builtins.str *∆
impltorch._C._DispatchModule.impl"4
torch._C._DispatchModule"torch._C._DispatchModule*>
self4
torch._C._DispatchModule"torch._C._DispatchModule*&
name
builtins.str"builtins.str**
dispatch
builtins.str"builtins.str*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*Ù
definetorch._C._DispatchModule.define"4
torch._C._DispatchModule"torch._C._DispatchModule*>
self4
torch._C._DispatchModule"torch._C._DispatchModule*(
schema
builtins.str"builtins.str*)
alias
builtins.str"builtins.str *È
fallback_fallthrough-torch._C._DispatchModule.fallback_fallthrough"4
torch._C._DispatchModule"torch._C._DispatchModule*>
self4
torch._C._DispatchModule"torch._C._DispatchModule*,
dispatch
builtins.str"builtins.str Æk
DispatchKeytorch._C.DispatchKey"	enum.EnumHrY
	Undefinedtorch._C.DispatchKey.Undefined,
torch._C.DispatchKey"torch._C.DispatchKeyrO
FPGAtorch._C.DispatchKey.FPGA,
torch._C.DispatchKey"torch._C.DispatchKeyrO
MAIAtorch._C.DispatchKey.MAIA,
torch._C.DispatchKey"torch._C.DispatchKeyrS
Vulkantorch._C.DispatchKey.Vulkan,
torch._C.DispatchKey"torch._C.DispatchKeyrQ
Metaltorch._C.DispatchKey.Metal,
torch._C.DispatchKey"torch._C.DispatchKeyrS
MKLDNNtorch._C.DispatchKey.MKLDNN,
torch._C.DispatchKey"torch._C.DispatchKeyrS
OpenGLtorch._C.DispatchKey.OpenGL,
torch._C.DispatchKey"torch._C.DispatchKeyrS
OpenCLtorch._C.DispatchKey.OpenCL,
torch._C.DispatchKey"torch._C.DispatchKeyrQ
IDEEPtorch._C.DispatchKey.IDEEP,
torch._C.DispatchKey"torch._C.DispatchKeyrc
CustomRNGKeyId#torch._C.DispatchKey.CustomRNGKeyId,
torch._C.DispatchKey"torch._C.DispatchKeyrY
	MkldnnCPUtorch._C.DispatchKey.MkldnnCPU,
torch._C.DispatchKey"torch._C.DispatchKeyrS
Sparsetorch._C.DispatchKey.Sparse,
torch._C.DispatchKey"torch._C.DispatchKeyrY
	SparseCsrtorch._C.DispatchKey.SparseCsr,
torch._C.DispatchKey"torch._C.DispatchKeyr_
NestedTensor!torch._C.DispatchKey.NestedTensor,
torch._C.DispatchKey"torch._C.DispatchKeyrQ
Densetorch._C.DispatchKey.Dense,
torch._C.DispatchKey"torch._C.DispatchKeyri
PythonTLSSnapshot&torch._C.DispatchKey.PythonTLSSnapshot,
torch._C.DispatchKey"torch._C.DispatchKeyr]
PreDispatch torch._C.DispatchKey.PreDispatch,
torch._C.DispatchKey"torch._C.DispatchKeyrg
PythonDispatcher%torch._C.DispatchKey.PythonDispatcher,
torch._C.DispatchKey"torch._C.DispatchKeyrS
Pythontorch._C.DispatchKey.Python,
torch._C.DispatchKey"torch._C.DispatchKeyrÅ
FuncTorchDynamicLayerBackMode2torch._C.DispatchKey.FuncTorchDynamicLayerBackMode,
torch._C.DispatchKey"torch._C.DispatchKeyr[

ZeroTensortorch._C.DispatchKey.ZeroTensor,
torch._C.DispatchKey"torch._C.DispatchKeyrY
	Conjugatetorch._C.DispatchKey.Conjugate,
torch._C.DispatchKey"torch._C.DispatchKeyrW
Negativetorch._C.DispatchKey.Negative,
torch._C.DispatchKey"torch._C.DispatchKeyra
BackendSelect"torch._C.DispatchKey.BackendSelect,
torch._C.DispatchKey"torch._C.DispatchKeyrQ
Namedtorch._C.DispatchKey.Named,
torch._C.DispatchKey"torch._C.DispatchKeyra
AutogradOther"torch._C.DispatchKey.AutogradOther,
torch._C.DispatchKey"torch._C.DispatchKeyrq
AutogradFunctionality*torch._C.DispatchKey.AutogradFunctionality,
torch._C.DispatchKey"torch._C.DispatchKeyro
AutogradNestedTensor)torch._C.DispatchKey.AutogradNestedTensor,
torch._C.DispatchKey"torch._C.DispatchKeyrS
Tracertorch._C.DispatchKey.Tracer,
torch._C.DispatchKey"torch._C.DispatchKeyrW
Autocasttorch._C.DispatchKey.Autocast,
torch._C.DispatchKey"torch._C.DispatchKeyr]
AutocastCPU torch._C.DispatchKey.AutocastCPU,
torch._C.DispatchKey"torch._C.DispatchKeyr_
AutocastCUDA!torch._C.DispatchKey.AutocastCUDA,
torch._C.DispatchKey"torch._C.DispatchKeyrU
Batchedtorch._C.DispatchKey.Batched,
torch._C.DispatchKey"torch._C.DispatchKeyrW
VmapModetorch._C.DispatchKey.VmapMode,
torch._C.DispatchKey"torch._C.DispatchKeyro
FuncTorchGradWrapper)torch._C.DispatchKey.FuncTorchGradWrapper,
torch._C.DispatchKey"torch._C.DispatchKeyrg
FuncTorchBatched%torch._C.DispatchKey.FuncTorchBatched,
torch._C.DispatchKey"torch._C.DispatchKeyrm
BatchedNestedTensor(torch._C.DispatchKey.BatchedNestedTensor,
torch._C.DispatchKey"torch._C.DispatchKeyri
FuncTorchVmapMode&torch._C.DispatchKey.FuncTorchVmapMode,
torch._C.DispatchKey"torch._C.DispatchKeyrÉ
FuncTorchDynamicLayerFrontMode3torch._C.DispatchKey.FuncTorchDynamicLayerFrontMode,
torch._C.DispatchKey"torch._C.DispatchKeyra
Functionalize"torch._C.DispatchKey.Functionalize,
torch._C.DispatchKey"torch._C.DispatchKeyr}
TESTING_ONLY_GenericWrapper0torch._C.DispatchKey.TESTING_ONLY_GenericWrapper,
torch._C.DispatchKey"torch._C.DispatchKeyrw
TESTING_ONLY_GenericMode-torch._C.DispatchKey.TESTING_ONLY_GenericMode,
torch._C.DispatchKey"torch._C.DispatchKeyre
ADInplaceOrView$torch._C.DispatchKey.ADInplaceOrView,
torch._C.DispatchKey"torch._C.DispatchKeyrW
Autogradtorch._C.DispatchKey.Autograd,
torch._C.DispatchKey"torch._C.DispatchKeyry
CompositeImplicitAutograd.torch._C.DispatchKey.CompositeImplicitAutograd,
torch._C.DispatchKey"torch._C.DispatchKeyrë
%CompositeImplicitAutogradNestedTensor:torch._C.DispatchKey.CompositeImplicitAutogradNestedTensor,
torch._C.DispatchKey"torch._C.DispatchKeyry
CompositeExplicitAutograd.torch._C.DispatchKey.CompositeExplicitAutograd,
torch._C.DispatchKey"torch._C.DispatchKeyrì
&CompositeExplicitAutogradNonFunctional;torch._C.DispatchKey.CompositeExplicitAutogradNonFunctional,
torch._C.DispatchKey"torch._C.DispatchKeyrÅ
FuncTorchBatchedDecomposition2torch._C.DispatchKey.FuncTorchBatchedDecomposition,
torch._C.DispatchKey"torch._C.DispatchKeyrM
CPUtorch._C.DispatchKey.CPU,
torch._C.DispatchKey"torch._C.DispatchKeyrO
CUDAtorch._C.DispatchKey.CUDA,
torch._C.DispatchKey"torch._C.DispatchKeyrM
HIPtorch._C.DispatchKey.HIP,
torch._C.DispatchKey"torch._C.DispatchKeyrM
XLAtorch._C.DispatchKey.XLA,
torch._C.DispatchKey"torch._C.DispatchKeyrO
MTIAtorch._C.DispatchKey.MTIA,
torch._C.DispatchKey"torch._C.DispatchKeyrM
MPStorch._C.DispatchKey.MPS,
torch._C.DispatchKey"torch._C.DispatchKeyrM
IPUtorch._C.DispatchKey.IPU,
torch._C.DispatchKey"torch._C.DispatchKeyrM
XPUtorch._C.DispatchKey.XPU,
torch._C.DispatchKey"torch._C.DispatchKeyrM
HPUtorch._C.DispatchKey.HPU,
torch._C.DispatchKey"torch._C.DispatchKeyrK
VEtorch._C.DispatchKey.VE,
torch._C.DispatchKey"torch._C.DispatchKeyrO
Lazytorch._C.DispatchKey.Lazy,
torch._C.DispatchKey"torch._C.DispatchKeyrO
Metatorch._C.DispatchKey.Meta,
torch._C.DispatchKey"torch._C.DispatchKeyr]
PrivateUse1 torch._C.DispatchKey.PrivateUse1,
torch._C.DispatchKey"torch._C.DispatchKeyr]
PrivateUse2 torch._C.DispatchKey.PrivateUse2,
torch._C.DispatchKey"torch._C.DispatchKeyr]
PrivateUse3 torch._C.DispatchKey.PrivateUse3,
torch._C.DispatchKey"torch._C.DispatchKeyr_
QuantizedCPU!torch._C.DispatchKey.QuantizedCPU,
torch._C.DispatchKey"torch._C.DispatchKeyra
QuantizedCUDA"torch._C.DispatchKey.QuantizedCUDA,
torch._C.DispatchKey"torch._C.DispatchKeyr_
QuantizedHIP!torch._C.DispatchKey.QuantizedHIP,
torch._C.DispatchKey"torch._C.DispatchKeyr_
QuantizedXLA!torch._C.DispatchKey.QuantizedXLA,
torch._C.DispatchKey"torch._C.DispatchKeyra
QuantizedMTIA"torch._C.DispatchKey.QuantizedMTIA,
torch._C.DispatchKey"torch._C.DispatchKeyr_
QuantizedMPS!torch._C.DispatchKey.QuantizedMPS,
torch._C.DispatchKey"torch._C.DispatchKeyr_
QuantizedIPU!torch._C.DispatchKey.QuantizedIPU,
torch._C.DispatchKey"torch._C.DispatchKeyr_
QuantizedXPU!torch._C.DispatchKey.QuantizedXPU,
torch._C.DispatchKey"torch._C.DispatchKeyr_
QuantizedHPU!torch._C.DispatchKey.QuantizedHPU,
torch._C.DispatchKey"torch._C.DispatchKeyr]
QuantizedVE torch._C.DispatchKey.QuantizedVE,
torch._C.DispatchKey"torch._C.DispatchKeyra
QuantizedLazy"torch._C.DispatchKey.QuantizedLazy,
torch._C.DispatchKey"torch._C.DispatchKeyra
QuantizedMeta"torch._C.DispatchKey.QuantizedMeta,
torch._C.DispatchKey"torch._C.DispatchKeyro
QuantizedPrivateUse1)torch._C.DispatchKey.QuantizedPrivateUse1,
torch._C.DispatchKey"torch._C.DispatchKeyro
QuantizedPrivateUse2)torch._C.DispatchKey.QuantizedPrivateUse2,
torch._C.DispatchKey"torch._C.DispatchKeyro
QuantizedPrivateUse3)torch._C.DispatchKey.QuantizedPrivateUse3,
torch._C.DispatchKey"torch._C.DispatchKeyrY
	SparseCPUtorch._C.DispatchKey.SparseCPU,
torch._C.DispatchKey"torch._C.DispatchKeyr[

SparseCUDAtorch._C.DispatchKey.SparseCUDA,
torch._C.DispatchKey"torch._C.DispatchKeyrY
	SparseHIPtorch._C.DispatchKey.SparseHIP,
torch._C.DispatchKey"torch._C.DispatchKeyrY
	SparseXLAtorch._C.DispatchKey.SparseXLA,
torch._C.DispatchKey"torch._C.DispatchKeyr[

SparseMTIAtorch._C.DispatchKey.SparseMTIA,
torch._C.DispatchKey"torch._C.DispatchKeyrY
	SparseMPStorch._C.DispatchKey.SparseMPS,
torch._C.DispatchKey"torch._C.DispatchKeyrY
	SparseIPUtorch._C.DispatchKey.SparseIPU,
torch._C.DispatchKey"torch._C.DispatchKeyrY
	SparseXPUtorch._C.DispatchKey.SparseXPU,
torch._C.DispatchKey"torch._C.DispatchKeyrY
	SparseHPUtorch._C.DispatchKey.SparseHPU,
torch._C.DispatchKey"torch._C.DispatchKeyrW
SparseVEtorch._C.DispatchKey.SparseVE,
torch._C.DispatchKey"torch._C.DispatchKeyr[

SparseLazytorch._C.DispatchKey.SparseLazy,
torch._C.DispatchKey"torch._C.DispatchKeyr[

SparseMetatorch._C.DispatchKey.SparseMeta,
torch._C.DispatchKey"torch._C.DispatchKeyri
SparsePrivateUse1&torch._C.DispatchKey.SparsePrivateUse1,
torch._C.DispatchKey"torch._C.DispatchKeyri
SparsePrivateUse2&torch._C.DispatchKey.SparsePrivateUse2,
torch._C.DispatchKey"torch._C.DispatchKeyri
SparsePrivateUse3&torch._C.DispatchKey.SparsePrivateUse3,
torch._C.DispatchKey"torch._C.DispatchKeyr_
SparseCsrCPU!torch._C.DispatchKey.SparseCsrCPU,
torch._C.DispatchKey"torch._C.DispatchKeyra
SparseCsrCUDA"torch._C.DispatchKey.SparseCsrCUDA,
torch._C.DispatchKey"torch._C.DispatchKeyr_
SparseCsrHIP!torch._C.DispatchKey.SparseCsrHIP,
torch._C.DispatchKey"torch._C.DispatchKeyr_
SparseCsrXLA!torch._C.DispatchKey.SparseCsrXLA,
torch._C.DispatchKey"torch._C.DispatchKeyra
SparseCsrMTIA"torch._C.DispatchKey.SparseCsrMTIA,
torch._C.DispatchKey"torch._C.DispatchKeyr_
SparseCsrMPS!torch._C.DispatchKey.SparseCsrMPS,
torch._C.DispatchKey"torch._C.DispatchKeyr_
SparseCsrIPU!torch._C.DispatchKey.SparseCsrIPU,
torch._C.DispatchKey"torch._C.DispatchKeyr_
SparseCsrXPU!torch._C.DispatchKey.SparseCsrXPU,
torch._C.DispatchKey"torch._C.DispatchKeyr_
SparseCsrHPU!torch._C.DispatchKey.SparseCsrHPU,
torch._C.DispatchKey"torch._C.DispatchKeyr]
SparseCsrVE torch._C.DispatchKey.SparseCsrVE,
torch._C.DispatchKey"torch._C.DispatchKeyra
SparseCsrLazy"torch._C.DispatchKey.SparseCsrLazy,
torch._C.DispatchKey"torch._C.DispatchKeyra
SparseCsrMeta"torch._C.DispatchKey.SparseCsrMeta,
torch._C.DispatchKey"torch._C.DispatchKeyro
SparseCsrPrivateUse1)torch._C.DispatchKey.SparseCsrPrivateUse1,
torch._C.DispatchKey"torch._C.DispatchKeyro
SparseCsrPrivateUse2)torch._C.DispatchKey.SparseCsrPrivateUse2,
torch._C.DispatchKey"torch._C.DispatchKeyro
SparseCsrPrivateUse3)torch._C.DispatchKey.SparseCsrPrivateUse3,
torch._C.DispatchKey"torch._C.DispatchKeyre
NestedTensorCPU$torch._C.DispatchKey.NestedTensorCPU,
torch._C.DispatchKey"torch._C.DispatchKeyrg
NestedTensorCUDA%torch._C.DispatchKey.NestedTensorCUDA,
torch._C.DispatchKey"torch._C.DispatchKeyre
NestedTensorHIP$torch._C.DispatchKey.NestedTensorHIP,
torch._C.DispatchKey"torch._C.DispatchKeyre
NestedTensorXLA$torch._C.DispatchKey.NestedTensorXLA,
torch._C.DispatchKey"torch._C.DispatchKeyrg
NestedTensorMTIA%torch._C.DispatchKey.NestedTensorMTIA,
torch._C.DispatchKey"torch._C.DispatchKeyre
NestedTensorMPS$torch._C.DispatchKey.NestedTensorMPS,
torch._C.DispatchKey"torch._C.DispatchKeyre
NestedTensorIPU$torch._C.DispatchKey.NestedTensorIPU,
torch._C.DispatchKey"torch._C.DispatchKeyre
NestedTensorXPU$torch._C.DispatchKey.NestedTensorXPU,
torch._C.DispatchKey"torch._C.DispatchKeyre
NestedTensorHPU$torch._C.DispatchKey.NestedTensorHPU,
torch._C.DispatchKey"torch._C.DispatchKeyrc
NestedTensorVE#torch._C.DispatchKey.NestedTensorVE,
torch._C.DispatchKey"torch._C.DispatchKeyrg
NestedTensorLazy%torch._C.DispatchKey.NestedTensorLazy,
torch._C.DispatchKey"torch._C.DispatchKeyrg
NestedTensorMeta%torch._C.DispatchKey.NestedTensorMeta,
torch._C.DispatchKey"torch._C.DispatchKeyru
NestedTensorPrivateUse1,torch._C.DispatchKey.NestedTensorPrivateUse1,
torch._C.DispatchKey"torch._C.DispatchKeyru
NestedTensorPrivateUse2,torch._C.DispatchKey.NestedTensorPrivateUse2,
torch._C.DispatchKey"torch._C.DispatchKeyru
NestedTensorPrivateUse3,torch._C.DispatchKey.NestedTensorPrivateUse3,
torch._C.DispatchKey"torch._C.DispatchKeyr]
AutogradCPU torch._C.DispatchKey.AutogradCPU,
torch._C.DispatchKey"torch._C.DispatchKeyr_
AutogradCUDA!torch._C.DispatchKey.AutogradCUDA,
torch._C.DispatchKey"torch._C.DispatchKeyr]
AutogradHIP torch._C.DispatchKey.AutogradHIP,
torch._C.DispatchKey"torch._C.DispatchKeyr]
AutogradXLA torch._C.DispatchKey.AutogradXLA,
torch._C.DispatchKey"torch._C.DispatchKeyr_
AutogradMTIA!torch._C.DispatchKey.AutogradMTIA,
torch._C.DispatchKey"torch._C.DispatchKeyr]
AutogradMPS torch._C.DispatchKey.AutogradMPS,
torch._C.DispatchKey"torch._C.DispatchKeyr]
AutogradIPU torch._C.DispatchKey.AutogradIPU,
torch._C.DispatchKey"torch._C.DispatchKeyr]
AutogradXPU torch._C.DispatchKey.AutogradXPU,
torch._C.DispatchKey"torch._C.DispatchKeyr]
AutogradHPU torch._C.DispatchKey.AutogradHPU,
torch._C.DispatchKey"torch._C.DispatchKeyr[

AutogradVEtorch._C.DispatchKey.AutogradVE,
torch._C.DispatchKey"torch._C.DispatchKeyr_
AutogradLazy!torch._C.DispatchKey.AutogradLazy,
torch._C.DispatchKey"torch._C.DispatchKeyr_
AutogradMeta!torch._C.DispatchKey.AutogradMeta,
torch._C.DispatchKey"torch._C.DispatchKeyrm
AutogradPrivateUse1(torch._C.DispatchKey.AutogradPrivateUse1,
torch._C.DispatchKey"torch._C.DispatchKeyrm
AutogradPrivateUse2(torch._C.DispatchKey.AutogradPrivateUse2,
torch._C.DispatchKey"torch._C.DispatchKeyrm
AutogradPrivateUse3(torch._C.DispatchKey.AutogradPrivateUse3,
torch._C.DispatchKey"torch._C.DispatchKeyæ
DispatchKeySettorch._C.DispatchKeySet"builtins.object*´
__init__ torch._C.DispatchKeySet.__init__"
None*<
self2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*5
key,
torch._C.DispatchKey"torch._C.DispatchKey*»
__or__torch._C.DispatchKeySet.__or__"2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*42
torch._C.DispatchKeySet"torch._C.DispatchKeySet*42
torch._C.DispatchKeySet"torch._C.DispatchKeySet* 
__sub__torch._C.DispatchKeySet.__sub__"2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*42
torch._C.DispatchKeySet"torch._C.DispatchKeySet*42
torch._C.DispatchKeySet"torch._C.DispatchKeySet* 
__and__torch._C.DispatchKeySet.__and__"2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*42
torch._C.DispatchKeySet"torch._C.DispatchKeySet*42
torch._C.DispatchKeySet"torch._C.DispatchKeySet*≤
highestPriorityTypeId-torch._C.DispatchKeySet.highestPriorityTypeId",
torch._C.DispatchKey"torch._C.DispatchKey*<
self2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*÷
hastorch._C.DispatchKeySet.has"
builtins.bool"builtins.bool*<
self2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*”
kÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkey*Í
addtorch._C.DispatchKeySet.add"2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*<
self2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*”
kÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkey*
removetorch._C.DispatchKeySet.remove"2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*<
self2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*”
kÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkey*Ä
__repr__ torch._C.DispatchKeySet.__repr__"
builtins.str"builtins.str*42
torch._C.DispatchKeySet"torch._C.DispatchKeySetü
_ExcludeDispatchKeyGuard!torch._C._ExcludeDispatchKeyGuard"builtins.object*“
__init__*torch._C._ExcludeDispatchKeyGuard.__init__"
None*P
selfF
!torch._C._ExcludeDispatchKeyGuard"!torch._C._ExcludeDispatchKeyGuard*>
keyset2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*:
	__enter__+torch._C._ExcludeDispatchKeyGuard.__enter__* *>
__exit__*torch._C._ExcludeDispatchKeyGuard.__exit__* * * * î
_IncludeDispatchKeyGuard!torch._C._IncludeDispatchKeyGuard"builtins.object*«
__init__*torch._C._IncludeDispatchKeyGuard.__init__"
None*P
selfF
!torch._C._IncludeDispatchKeyGuard"!torch._C._IncludeDispatchKeyGuard*3
k,
torch._C.DispatchKey"torch._C.DispatchKey*:
	__enter__+torch._C._IncludeDispatchKeyGuard.__enter__* *>
__exit__*torch._C._IncludeDispatchKeyGuard.__exit__* * * * ”
_ForceDispatchKeyGuardtorch._C._ForceDispatchKeyGuard"builtins.object*é
__init__(torch._C._ForceDispatchKeyGuard.__init__"
None*L
selfB
torch._C._ForceDispatchKeyGuard"torch._C._ForceDispatchKeyGuard*?
include2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*?
exclude2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*8
	__enter__)torch._C._ForceDispatchKeyGuard.__enter__* *<
__exit__(torch._C._ForceDispatchKeyGuard.__exit__* * * * ë
_PreserveDispatchKeyGuard"torch._C._PreserveDispatchKeyGuard"builtins.object*A
__init__+torch._C._PreserveDispatchKeyGuard.__init__*
self*;
	__enter__,torch._C._PreserveDispatchKeyGuard.__enter__* *?
__exit__+torch._C._PreserveDispatchKeyGuard.__exit__* * * * ñ
_AutoDispatchBelowAutograd#torch._C._AutoDispatchBelowAutograd"builtins.object*B
__init__,torch._C._AutoDispatchBelowAutograd.__init__*
self*<
	__enter__-torch._C._AutoDispatchBelowAutograd.__enter__* *@
__exit__,torch._C._AutoDispatchBelowAutograd.__exit__* * * * π
!_AutoDispatchBelowADInplaceOrView*torch._C._AutoDispatchBelowADInplaceOrView"builtins.object*I
__init__3torch._C._AutoDispatchBelowADInplaceOrView.__init__*
self*C
	__enter__4torch._C._AutoDispatchBelowADInplaceOrView.__enter__* *G
__exit__3torch._C._AutoDispatchBelowADInplaceOrView.__exit__* * * * ü
_TorchDispatchModeKeytorch._C._TorchDispatchModeKey"	enum.EnumHrm
FAKE#torch._C._TorchDispatchModeKey.FAKE@
torch._C._TorchDispatchModeKey"torch._C._TorchDispatchModeKeyro
PROXY$torch._C._TorchDispatchModeKey.PROXY@
torch._C._TorchDispatchModeKey"torch._C._TorchDispatchModeKeyry

FUNCTIONAL)torch._C._TorchDispatchModeKey.FUNCTIONAL@
torch._C._TorchDispatchModeKey"torch._C._TorchDispatchModeKey÷
_SetExcludeDispatchKeyGuard$torch._C._SetExcludeDispatchKeyGuard"builtins.object*˝
__init__-torch._C._SetExcludeDispatchKeyGuard.__init__"
None*V
selfL
$torch._C._SetExcludeDispatchKeyGuard"$torch._C._SetExcludeDispatchKeyGuard*3
k,
torch._C.DispatchKey"torch._C.DispatchKey*+
enabled
builtins.bool"builtins.bool*=
	__enter__.torch._C._SetExcludeDispatchKeyGuard.__enter__* *A
__exit__-torch._C._SetExcludeDispatchKeyGuard.__exit__* * * * ë
BenchmarkConfigtorch._C.BenchmarkConfig"builtins.objectra
num_calling_threads,torch._C.BenchmarkConfig.num_calling_threads
builtins.int"builtins.intr_
num_worker_threads+torch._C.BenchmarkConfig.num_worker_threads
builtins.int"builtins.intr[
num_warmup_iters)torch._C.BenchmarkConfig.num_warmup_iters
builtins.int"builtins.intrM
	num_iters"torch._C.BenchmarkConfig.num_iters
builtins.int"builtins.intrc
profiler_output_path-torch._C.BenchmarkConfig.profiler_output_path
builtins.str"builtins.strà
BenchmarkExecutionStats torch._C.BenchmarkExecutionStats"builtins.objectrc
latency_avg_ms/torch._C.BenchmarkExecutionStats.latency_avg_ms 
builtins.float"builtins.floatrU
	num_iters*torch._C.BenchmarkExecutionStats.num_iters
builtins.int"builtins.int¬
ThroughputBenchmarktorch._C.ThroughputBenchmark"builtins.object*ò
__init__%torch._C.ThroughputBenchmark.__init__"
None*F
self<
torch._C.ThroughputBenchmark"torch._C.ThroughputBenchmark*
module
Any*≠
	add_input&torch._C.ThroughputBenchmark.add_input"
None*F
self<
torch._C.ThroughputBenchmark"torch._C.ThroughputBenchmark*
args
Any*
kwargs
Any*™
run_once%torch._C.ThroughputBenchmark.run_once"
Any*F
self<
torch._C.ThroughputBenchmark"torch._C.ThroughputBenchmark*
args
Any*
kwargs
Any*É
	benchmark&torch._C.ThroughputBenchmark.benchmark"D
 torch._C.BenchmarkExecutionStats" torch._C.BenchmarkExecutionStats*F
self<
torch._C.ThroughputBenchmark"torch._C.ThroughputBenchmark*@
config4
torch._C.BenchmarkConfig"torch._C.BenchmarkConfig4
StorageBasetorch._C.StorageBase"builtins.object;
DoubleTensortorch._C.DoubleTensor"torch._tensor.Tensor9
FloatTensortorch._C.FloatTensor"torch._tensor.Tensor?
BFloat16Tensortorch._C.BFloat16Tensor"torch._tensor.Tensor7

LongTensortorch._C.LongTensor"torch._tensor.Tensor5
	IntTensortorch._C.IntTensor"torch._tensor.Tensor9
ShortTensortorch._C.ShortTensor"torch._tensor.Tensor7

HalfTensortorch._C.HalfTensor"torch._tensor.Tensor7

CharTensortorch._C.CharTensor"torch._tensor.Tensor7

ByteTensortorch._C.ByteTensor"torch._tensor.Tensor7

BoolTensortorch._C.BoolTensor"torch._tensor.Tensorﬂ
_ImperativeEnginetorch._C._ImperativeEngine"builtins.object*‰
queue_callback)torch._C._ImperativeEngine.queue_callback"
None*B
self8
torch._C._ImperativeEngine"torch._C._ImperativeEngine*Y
callbackK
CallableType[builtins.function]&
builtins.function"builtins.function*â
run_backward'torch._C._ImperativeEngine.run_backward"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*B
self8
torch._C._ImperativeEngine"torch._C._ImperativeEngine*
args
Any*
kwargs
Any*©
is_checkpoint_valid.torch._C._ImperativeEngine.is_checkpoint_valid"
builtins.bool"builtins.bool*B
self8
torch._C._ImperativeEngine"torch._C._ImperativeEngine2
_TensorMetatorch._C._TensorMeta"builtins.type¨á

TensorBasetorch._C.TensorBase"builtins.object*˚
_view_func_unsafe%torch._C.TensorBase._view_func_unsafe"
Any*4
self*
torch._C.TensorBase"torch._C.TensorBase*:
new_base,
torch._tensor.Tensor"torch._tensor.Tensor*†
symint_visitor_fnÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *†
tensor_visitor_fnÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *Ç
__abs__torch._C.TensorBase.__abs__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*ç
__add__torch._C.TensorBase.__add__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*~
__bool__torch._C.TensorBase.__bool__"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç
__complex__torch._C.TensorBase.__complex__"$
builtins.complex"builtins.complex*,*
torch._C.TensorBase"torch._C.TensorBase*û
__div__torch._C.TensorBase.__div__",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*
other
Any*ã
__eq__torch._C.TensorBase.__eq__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*z
	__float__torch._C.TensorBase.__float__" 
builtins.float"builtins.float*,*
torch._C.TensorBase"torch._C.TensorBase*ó
__floordiv__ torch._C.TensorBase.__floordiv__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*ã
__ge__torch._C.TensorBase.__ge__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*¿
__getitem__torch._C.TensorBase.__getitem__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*≥∞
·Union[typing.SupportsIndex,None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor,torch._C._NestedSequence[Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]],builtins.tuple[Union[typing.SupportsIndex,None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor,torch._C._NestedSequence[Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]]]]],
typing.SupportsIndex"typing.SupportsIndex
None
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.slice"builtins.slice&
builtins.ellipsis"builtins.ellipsis,
torch._tensor.Tensor"torch._tensor.Tensorµ
vtorch._C._NestedSequence[Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]]†
\Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]
None
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.slice"builtins.slice&
builtins.ellipsis"builtins.ellipsis,
torch._tensor.Tensor"torch._tensor.Tensor"torch._C._NestedSequence°	
¯builtins.tuple[Union[typing.SupportsIndex,None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor,torch._C._NestedSequence[Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]]]]ì
ËUnion[typing.SupportsIndex,None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor,torch._C._NestedSequence[Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]]],
typing.SupportsIndex"typing.SupportsIndex
None
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.slice"builtins.slice&
builtins.ellipsis"builtins.ellipsis,
torch._tensor.Tensor"torch._tensor.Tensorµ
vtorch._C._NestedSequence[Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]]†
\Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]
None
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.slice"builtins.slice&
builtins.ellipsis"builtins.ellipsis,
torch._tensor.Tensor"torch._tensor.Tensor"torch._C._NestedSequence"builtins.tuple*ã
__gt__torch._C.TensorBase.__gt__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*è
__iadd__torch._C.TensorBase.__iadd__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*è
__idiv__torch._C.TensorBase.__idiv__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*ô
__ifloordiv__!torch._C.TensorBase.__ifloordiv__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*è
__imod__torch._C.TensorBase.__imod__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*è
__imul__torch._C.TensorBase.__imul__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*~
	__index__torch._C.TensorBase.__index__"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*r
__int__torch._C.TensorBase.__int__"
builtins.int"builtins.int*,*
torch._C.TensorBase"torch._C.TensorBase*à

__invert__torch._C.TensorBase.__invert__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*è
__isub__torch._C.TensorBase.__isub__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*ã
__le__torch._C.TensorBase.__le__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*t
__long__torch._C.TensorBase.__long__"
builtins.int"builtins.int*,*
torch._C.TensorBase"torch._C.TensorBase*ã
__lt__torch._C.TensorBase.__lt__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*ì

__matmul__torch._C.TensorBase.__matmul__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*ç
__mod__torch._C.TensorBase.__mod__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*ç
__mul__torch._C.TensorBase.__mul__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*ã
__ne__torch._C.TensorBase.__ne__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*Ç
__neg__torch._C.TensorBase.__neg__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*¡
__new__torch._C.TensorBase.__new__"]
torch._C.TensorBase.Self*
torch._C.TensorBase"torch._C.TensorBase"torch._C.TensorBase*ë
clsá
Type[torch._C.TensorBase.Self]]
torch._C.TensorBase.Self*
torch._C.TensorBase"torch._C.TensorBase"torch._C.TensorBase"type*
args
Any*
kwargs
Any*Ñ
__nonzero__torch._C.TensorBase.__nonzero__"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*ç
__pow__torch._C.TensorBase.__pow__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*è
__radd__torch._C.TensorBase.__radd__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*è
__rand__torch._C.TensorBase.__rand__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*ô
__rfloordiv__!torch._C.TensorBase.__rfloordiv__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*è
__rmul__torch._C.TensorBase.__rmul__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*ç
__ror__torch._C.TensorBase.__ror__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*è
__rpow__torch._C.TensorBase.__rpow__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*è
__rsub__torch._C.TensorBase.__rsub__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*ó
__rtruediv__ torch._C.TensorBase.__rtruediv__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*è
__rxor__torch._C.TensorBase.__rxor__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*ò
__setitem__torch._C.TensorBase.__setitem__"
None*,*
torch._C.TensorBase"torch._C.TensorBase*≥∞
·Union[typing.SupportsIndex,None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor,torch._C._NestedSequence[Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]],builtins.tuple[Union[typing.SupportsIndex,None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor,torch._C._NestedSequence[Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]]]]],
typing.SupportsIndex"typing.SupportsIndex
None
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.slice"builtins.slice&
builtins.ellipsis"builtins.ellipsis,
torch._tensor.Tensor"torch._tensor.Tensorµ
vtorch._C._NestedSequence[Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]]†
\Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]
None
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.slice"builtins.slice&
builtins.ellipsis"builtins.ellipsis,
torch._tensor.Tensor"torch._tensor.Tensor"torch._C._NestedSequence°	
¯builtins.tuple[Union[typing.SupportsIndex,None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor,torch._C._NestedSequence[Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]]]]ì
ËUnion[typing.SupportsIndex,None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor,torch._C._NestedSequence[Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]]],
typing.SupportsIndex"typing.SupportsIndex
None
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.slice"builtins.slice&
builtins.ellipsis"builtins.ellipsis,
torch._tensor.Tensor"torch._tensor.Tensorµ
vtorch._C._NestedSequence[Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]]†
\Union[None,builtins.bool,builtins.int,builtins.slice,builtins.ellipsis,torch._tensor.Tensor]
None
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.slice"builtins.slice&
builtins.ellipsis"builtins.ellipsis,
torch._tensor.Tensor"torch._tensor.Tensor"torch._C._NestedSequence"builtins.tuple*˘ˆ
WUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number*ç
__sub__torch._C.TensorBase.__sub__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*ï
__truediv__torch._C.TensorBase.__truediv__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any*≥
_addmm_activation%torch._C.TensorBase._addmm_activation",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mat1,
torch._tensor.Tensor"torch._tensor.Tensor*6
mat2,
torch._tensor.Tensor"torch._tensor.Tensor*˜
betaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *.
use_gelu
builtins.bool"builtins.bool *ï
_autocast_to_full_precision/torch._C.TensorBase._autocast_to_full_precision",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*0
cuda_enabled
builtins.bool"builtins.bool*/
cpu_enabled
builtins.bool"builtins.bool*˛
_autocast_to_reduced_precision2torch._C.TensorBase._autocast_to_reduced_precision",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*0
cuda_enabled
builtins.bool"builtins.bool*/
cpu_enabled
builtins.bool"builtins.bool*0

cuda_dtype 
torch._C.dtype"torch._C.dtype*/
	cpu_dtype 
torch._C.dtype"torch._C.dtype*¡
_coalesced_torch._C.TensorBase._coalesced_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*-
	coalesced
builtins.bool"builtins.bool*Ü
_conjtorch._C.TensorBase._conj",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ò
_conj_physical"torch._C.TensorBase._conj_physical",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*v
_dimItorch._C.TensorBase._dimI"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*v
_dimVtorch._C.TensorBase._dimV"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
_indicestorch._C.TensorBase._indices",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*î
_is_all_true torch._C.TensorBase._is_all_true",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*î
_is_any_true torch._C.TensorBase._is_any_true",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*~
_is_viewtorch._C.TensorBase._is_view"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
_is_zerotensor"torch._C.TensorBase._is_zerotensor"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*í
_lazy_clonetorch._C.TensorBase._lazy_clone",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*‹
_make_subclass"torch._C.TensorBase._make_subclass"R

torch._C.S,
torch._tensor.Tensor"torch._tensor.Tensor"torch._tensor.Tensor*w
clsn
Type[torch._C.S]R

torch._C.S,
torch._tensor.Tensor"torch._tensor.Tensor"torch._tensor.Tensor"type*6
data,
torch._tensor.Tensor"torch._tensor.Tensor*2
require_grad
builtins.bool"builtins.bool *6
dispatch_strides
builtins.bool"builtins.bool *5
dispatch_device
builtins.bool"builtins.bool *l
device_for_backend_keysM
Union[torch._C.device,None]"
torch._C.device"torch._C.device
None 0:staticmethodh*é
	_neg_viewtorch._C.TensorBase._neg_view",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*¢
_nested_tensor_size'torch._C.TensorBase._nested_tensor_size",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*∏
_nested_tensor_storage_offsets2torch._C.TensorBase._nested_tensor_storage_offsets",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*®
_nested_tensor_strides*torch._C.TensorBase._nested_tensor_strides",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*t
_nnztorch._C.TensorBase._nnz"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*ú
_sparse_mask_projection+torch._C.TensorBase._sparse_mask_projection",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mask,
torch._tensor.Tensor"torch._tensor.Tensor*8
accumulate_matches
builtins.bool"builtins.bool *√
	_to_densetorch._C.TensorBase._to_dense",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *Z
masked_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *ê
_to_sparse_bsc"torch._C.TensorBase._to_sparse_bsc",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*û
	blocksizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*U
	dense_dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *ê
_to_sparse_bsr"torch._C.TensorBase._to_sparse_bsr",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*û
	blocksizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*U
	dense_dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ô
_to_sparse_csc"torch._C.TensorBase._to_sparse_csc",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*U
	dense_dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ô
_to_sparse_csr"torch._C.TensorBase._to_sparse_csr",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*U
	dense_dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *ä
_valuestorch._C.TensorBase._values",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç
abstorch._C.TensorBase.abs",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
abs_torch._C.TensorBase.abs_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
absolutetorch._C.TensorBase.absolute",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*é
	absolute_torch._C.TensorBase.absolute_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
acostorch._C.TensorBase.acos",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
acos_torch._C.TensorBase.acos_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
acoshtorch._C.TensorBase.acosh",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
acosh_torch._C.TensorBase.acosh_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*é	
addtorch._C.TensorBase.add",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ñ
otherä
ÑUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,torch.SymInt,torch.SymFloat],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
torch.SymInt"torch.SymInt 
torch.SymFloat"torch.SymFloat*á
alpha˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None *g
out\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *ß
add_torch._C.TensorBase.add_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ñ
otherä
ÑUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,torch.SymInt,torch.SymFloat],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
torch.SymInt"torch.SymInt 
torch.SymFloat"torch.SymFloat*á
alpha˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None *Ò
addbmmtorch._C.TensorBase.addbmm",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
batch1,
torch._tensor.Tensor"torch._tensor.Tensor*8
batch2,
torch._tensor.Tensor"torch._tensor.Tensor*˜
betaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *Û
addbmm_torch._C.TensorBase.addbmm_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
batch1,
torch._tensor.Tensor"torch._tensor.Tensor*8
batch2,
torch._tensor.Tensor"torch._tensor.Tensor*˜
betaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *˚
addcdivtorch._C.TensorBase.addcdiv",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*9
tensor1,
torch._tensor.Tensor"torch._tensor.Tensor*9
tensor2,
torch._tensor.Tensor"torch._tensor.Tensor*¯
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *˝
addcdiv_torch._C.TensorBase.addcdiv_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*9
tensor1,
torch._tensor.Tensor"torch._tensor.Tensor*9
tensor2,
torch._tensor.Tensor"torch._tensor.Tensor*¯
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *˚
addcmultorch._C.TensorBase.addcmul",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*9
tensor1,
torch._tensor.Tensor"torch._tensor.Tensor*9
tensor2,
torch._tensor.Tensor"torch._tensor.Tensor*¯
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *˝
addcmul_torch._C.TensorBase.addcmul_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*9
tensor1,
torch._tensor.Tensor"torch._tensor.Tensor*9
tensor2,
torch._tensor.Tensor"torch._tensor.Tensor*¯
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *Î
addmmtorch._C.TensorBase.addmm",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mat1,
torch._tensor.Tensor"torch._tensor.Tensor*6
mat2,
torch._tensor.Tensor"torch._tensor.Tensor*˜
betaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *Ì
addmm_torch._C.TensorBase.addmm_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mat1,
torch._tensor.Tensor"torch._tensor.Tensor*6
mat2,
torch._tensor.Tensor"torch._tensor.Tensor*˜
betaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *È
addmvtorch._C.TensorBase.addmv",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
mat,
torch._tensor.Tensor"torch._tensor.Tensor*5
vec,
torch._tensor.Tensor"torch._tensor.Tensor*˜
betaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *Î
addmv_torch._C.TensorBase.addmv_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
mat,
torch._tensor.Tensor"torch._tensor.Tensor*5
vec,
torch._tensor.Tensor"torch._tensor.Tensor*˜
betaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *È
addrtorch._C.TensorBase.addr",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
vec1,
torch._tensor.Tensor"torch._tensor.Tensor*6
vec2,
torch._tensor.Tensor"torch._tensor.Tensor*˜
betaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *Î
addr_torch._C.TensorBase.addr_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
vec1,
torch._tensor.Tensor"torch._tensor.Tensor*6
vec2,
torch._tensor.Tensor"torch._tensor.Tensor*˜
betaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *ä
adjointtorch._C.TensorBase.adjoint",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*≈
align_astorch._C.TensorBase.align_as",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*ƒ
allclosetorch._C.TensorBase.allclose"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*,
rtol 
builtins.float"builtins.float *,
atol 
builtins.float"builtins.float */
	equal_nan
builtins.bool"builtins.bool *–
amaxtorch._C.TensorBase.amax",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ö
dimé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *-
keepdim
builtins.bool"builtins.bool *–
amintorch._C.TensorBase.amin",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ö
dimé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *-
keepdim
builtins.bool"builtins.bool *Õ
aminmaxtorch._C.TensorBase.aminmax"Ó
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.aminmax*4
self*
torch._C.TensorBase"torch._C.TensorBase*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
keepdim
builtins.bool"builtins.bool *Ü
angletorch._C.TensorBase.angle",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*„
apply_torch._C.TensorBase.apply_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*à
arccostorch._C.TensorBase.arccos",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
arccos_torch._C.TensorBase.arccos_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
arccoshtorch._C.TensorBase.arccosh",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
arccosh_torch._C.TensorBase.arccosh_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
arcsintorch._C.TensorBase.arcsin",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
arcsin_torch._C.TensorBase.arcsin_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
arcsinhtorch._C.TensorBase.arcsinh",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
arcsinh_torch._C.TensorBase.arcsinh_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
arctantorch._C.TensorBase.arctan",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*√
arctan2torch._C.TensorBase.arctan2",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*≈
arctan2_torch._C.TensorBase.arctan2_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*ä
arctan_torch._C.TensorBase.arctan_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
arctanhtorch._C.TensorBase.arctanh",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
arctanh_torch._C.TensorBase.arctanh_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
argmaxtorch._C.TensorBase.argmax",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
keepdim
builtins.bool"builtins.bool *à
argmintorch._C.TensorBase.argmin",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
keepdim
builtins.bool"builtins.bool *å
argwheretorch._C.TensorBase.argwhere",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç

as_stridedtorch._C.TensorBase.as_strided",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*≥
stride¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*Ö
storage_offseto
%Union[builtins.int,torch.SymInt,None]
builtins.int"builtins.int
torch.SymInt"torch.SymInt
None *Ñ
as_strided_torch._C.TensorBase.as_strided_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*≥
stride¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*Ö
storage_offseto
%Union[builtins.int,torch.SymInt,None]
builtins.int"builtins.int
torch.SymInt"torch.SymInt
None *…
as_strided_scatter&torch._C.TensorBase.as_strided_scatter",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
src,
torch._tensor.Tensor"torch._tensor.Tensor*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*≥
stride¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*Ö
storage_offseto
%Union[builtins.int,torch.SymInt,None]
builtins.int"builtins.int
torch.SymInt"torch.SymInt
None *±
as_subclasstorch._C.TensorBase.as_subclass"R

torch._C.S,
torch._tensor.Tensor"torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*w
clsn
Type[torch._C.S]R

torch._C.S,
torch._tensor.Tensor"torch._tensor.Tensor"torch._tensor.Tensor"type*Ñ
asintorch._C.TensorBase.asin",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
asin_torch._C.TensorBase.asin_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
asinhtorch._C.TensorBase.asinh",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
asinh_torch._C.TensorBase.asinh_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
atantorch._C.TensorBase.atan",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ø
atan2torch._C.TensorBase.atan2",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*¡
atan2_torch._C.TensorBase.atan2_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Ü
atan_torch._C.TensorBase.atan_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
atanhtorch._C.TensorBase.atanh",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
atanh_torch._C.TensorBase.atanh_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Û
baddbmmtorch._C.TensorBase.baddbmm",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
batch1,
torch._tensor.Tensor"torch._tensor.Tensor*8
batch2,
torch._tensor.Tensor"torch._tensor.Tensor*˜
betaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *ı
baddbmm_torch._C.TensorBase.baddbmm_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
batch1,
torch._tensor.Tensor"torch._tensor.Tensor*8
batch2,
torch._tensor.Tensor"torch._tensor.Tensor*˜
betaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *å
bfloat16torch._C.TensorBase.bfloat16",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*®
bincounttorch._C.TensorBase.bincount",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*k
weights\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *-
	minlength
builtins.int"builtins.int *í
bitwise_nottorch._C.TensorBase.bitwise_not",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*î
bitwise_not_ torch._C.TensorBase.bitwise_not_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*∫
bmmtorch._C.TensorBase.bmm",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mat2,
torch._tensor.Tensor"torch._tensor.Tensor*Ñ
booltorch._C.TensorBase.bool",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
bytetorch._C.TensorBase.byte",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*“
cauchy_torch._C.TensorBase.cauchy_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*.
median 
builtins.float"builtins.float *-
sigma 
builtins.float"builtins.float *g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None *î
ccol_indices torch._C.TensorBase.ccol_indices",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
ceiltorch._C.TensorBase.ceil",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
ceil_torch._C.TensorBase.ceil_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˇ
chalftorch._C.TensorBase.chalf",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*w
memory_formatb
"Union[torch._C.memory_format,None]0
torch._C.memory_format"torch._C.memory_format
None *Ñ
chartorch._C.TensorBase.char",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*π
choleskytorch._C.TensorBase.cholesky",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*+
upper
builtins.bool"builtins.bool *…
cholesky_inverse$torch._C.TensorBase.cholesky_inverse",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*+
upper
builtins.bool"builtins.bool *ˇ
cholesky_solve"torch._C.TensorBase.cholesky_solve",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
input2,
torch._tensor.Tensor"torch._tensor.Tensor*+
upper
builtins.bool"builtins.bool *ë
chunktorch._C.TensorBase.chunk"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*(
chunks
builtins.int"builtins.int*'
dim
builtins.int"builtins.int *ˇ
clonetorch._C.TensorBase.clone",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*w
memory_formatb
"Union[torch._C.memory_format,None]0
torch._C.memory_format"torch._C.memory_format
None *å
coalescetorch._C.TensorBase.coalesce",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*í
col_indicestorch._C.TensorBase.col_indices",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
conjtorch._C.TensorBase.conj",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ñ
conj_physical!torch._C.TensorBase.conj_physical",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ò
conj_physical_"torch._C.TensorBase.conj_physical_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Æ

contiguoustorch._C.TensorBase.contiguous",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*
memory_format
Any *Ò
copy_torch._C.TensorBase.copy_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
src,
torch._tensor.Tensor"torch._tensor.Tensor*2
non_blocking
builtins.bool"builtins.bool *å
corrcoeftorch._C.TensorBase.corrcoef",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç
costorch._C.TensorBase.cos",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
cos_torch._C.TensorBase.cos_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
coshtorch._C.TensorBase.cosh",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
cosh_torch._C.TensorBase.cosh_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*é
covtorch._C.TensorBase.cov",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*.

correction
builtins.int"builtins.int *l
fweights\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *l
aweights\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *…
cputorch._C.TensorBase.cpu",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*E
memory_format0
torch._C.memory_format"torch._C.memory_format *ê
crosstorch._C.TensorBase.cross",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *î
crow_indices torch._C.TensorBase.crow_indices",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*¥
cudatorch._C.TensorBase.cuda",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*≤
device£
5Union[torch._C.device,builtins.int,builtins.str,None]"
torch._C.device"torch._C.device
builtins.int"builtins.int
builtins.str"builtins.str
None *2
non_blocking
builtins.bool"builtins.bool *E
memory_format0
torch._C.memory_format"torch._C.memory_format *|
data_ptrtorch._C.TensorBase.data_ptr"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
deg2radtorch._C.TensorBase.deg2rad",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
deg2rad_torch._C.TensorBase.deg2rad_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*~
	dense_dimtorch._C.TensorBase.dense_dim"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*ê

dequantizetorch._C.TensorBase.dequantize",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç
dettorch._C.TensorBase.det",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
detachtorch._C.TensorBase.detach",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
detach_torch._C.TensorBase.detach_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*≤
diagtorch._C.TensorBase.diag",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*,
diagonal
builtins.int"builtins.int *ê

diag_embedtorch._C.TensorBase.diag_embed",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase**
offset
builtins.int"builtins.int *(
dim1
builtins.int"builtins.int *(
dim2
builtins.int"builtins.int *∏
diagflattorch._C.TensorBase.diagflat",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase**
offset
builtins.int"builtins.int *”
diagonal_scatter$torch._C.TensorBase.diagonal_scatter",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
src,
torch._tensor.Tensor"torch._tensor.Tensor**
offset
builtins.int"builtins.int *(
dim1
builtins.int"builtins.int *(
dim2
builtins.int"builtins.int *≠
difftorch._C.TensorBase.diff",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
n
builtins.int"builtins.int *'
dim
builtins.int"builtins.int *k
prepend\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *j
append\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *ä
digammatorch._C.TensorBase.digamma",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
digamma_torch._C.TensorBase.digamma_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*r
dimtorch._C.TensorBase.dim"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*¥
disttorch._C.TensorBase.dist",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Ù
pÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *‚
divtorch._C.TensorBase.div",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç
otherˆ
WUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number*Y
rounding_modeD
Union[builtins.str,None]
builtins.str"builtins.str
None *‰
div_torch._C.TensorBase.div_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç
otherˆ
WUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number*Y
rounding_modeD
Union[builtins.str,None]
builtins.str"builtins.str
None *º
dottorch._C.TensorBase.dot",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*à
doubletorch._C.TensorBase.double",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
element_size torch._C.TensorBase.element_size"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
equaltorch._C.TensorBase.equal"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Ç
erftorch._C.TensorBase.erf",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
erf_torch._C.TensorBase.erf_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
erfctorch._C.TensorBase.erfc",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
erfc_torch._C.TensorBase.erfc_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
erfinvtorch._C.TensorBase.erfinv",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
erfinv_torch._C.TensorBase.erfinv_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç
exptorch._C.TensorBase.exp",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
exp2torch._C.TensorBase.exp2",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
exp2_torch._C.TensorBase.exp2_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
exp_torch._C.TensorBase.exp_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*«
	expand_astorch._C.TensorBase.expand_as",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Ü
expm1torch._C.TensorBase.expm1",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
expm1_torch._C.TensorBase.expm1_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*¨
exponential_ torch._C.TensorBase.exponential_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*-
lambd 
builtins.float"builtins.float *g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None *¬
fill_diagonal_"torch._C.TensorBase.fill_diagonal_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*˚

fill_valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex**
wrap
builtins.bool"builtins.bool *Ç
fixtorch._C.TensorBase.fix",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
fix_torch._C.TensorBase.fix_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
fliplrtorch._C.TensorBase.fliplr",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
flipudtorch._C.TensorBase.flipud",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
floattorch._C.TensorBase.float",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
floortorch._C.TensorBase.floor",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
floor_torch._C.TensorBase.floor_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ﬁ
floor_divide torch._C.TensorBase.floor_divide",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ﬁ
other“
sUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],torch.SymInt,torch.SymFloat],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number
torch.SymInt"torch.SymInt 
torch.SymFloat"torch.SymFloat*g
out\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *˜
floor_divide_!torch._C.TensorBase.floor_divide_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ﬁ
other“
sUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],torch.SymInt,torch.SymFloat],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number
torch.SymInt"torch.SymInt 
torch.SymFloat"torch.SymFloat*Ω
fmaxtorch._C.TensorBase.fmax",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Ω
fmintorch._C.TensorBase.fmin",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Ñ
fractorch._C.TensorBase.frac",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
frac_torch._C.TensorBase.frac_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*«
frexptorch._C.TensorBase.frexp"Ï
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.frexp*4
self*
torch._C.TensorBase"torch._C.TensorBase*ª
gcdtorch._C.TensorBase.gcd",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Ω
gcd_torch._C.TensorBase.gcd_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*¢

geometric_torch._C.TensorBase.geometric_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
p 
builtins.float"builtins.float*g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None *«
geqrftorch._C.TensorBase.geqrf"Ï
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.geqrf*4
self*
torch._C.TensorBase"torch._C.TensorBase*∫
gertorch._C.TensorBase.ger",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
vec2,
torch._tensor.Tensor"torch._tensor.Tensor*Ä

get_devicetorch._C.TensorBase.get_device"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
halftorch._C.TensorBase.half",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ã

hardshrinktorch._C.TensorBase.hardshrink",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*¯
lambdÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *Ä
	has_namestorch._C.TensorBase.has_names"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*»
	heavisidetorch._C.TensorBase.heaviside",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
values,
torch._tensor.Tensor"torch._tensor.Tensor* 

heaviside_torch._C.TensorBase.heaviside_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
values,
torch._tensor.Tensor"torch._tensor.Tensor*¢
histctorch._C.TensorBase.histc",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*(
bins
builtins.int"builtins.int *ˆ
minÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *ˆ
maxÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *ø
hypottorch._C.TensorBase.hypot",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*¡
hypot_torch._C.TensorBase.hypot_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Ä
i0torch._C.TensorBase.i0",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç
i0_torch._C.TensorBase.i0_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*¡
igammatorch._C.TensorBase.igamma",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*√
igamma_torch._C.TensorBase.igamma_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*√
igammactorch._C.TensorBase.igammac",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*≈
igammac_torch._C.TensorBase.igammac_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*•

index_add_torch._C.TensorBase.index_add_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor*¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *∑
	index_puttorch._C.TensorBase.index_put",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*∫
indices¨
TUnion[builtins.tuple[torch._tensor.Tensor],builtins.list[torch._tensor.Tensor],None]d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tupleb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list
None*8
values,
torch._tensor.Tensor"torch._tensor.Tensor*0

accumulate
builtins.bool"builtins.bool *π

index_put_torch._C.TensorBase.index_put_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*∫
indices¨
TUnion[builtins.tuple[torch._tensor.Tensor],builtins.list[torch._tensor.Tensor],None]d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tupleb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list
None*8
values,
torch._tensor.Tensor"torch._tensor.Tensor*0

accumulate
builtins.bool"builtins.bool *å
index_reduce torch._C.TensorBase.index_reduce",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor*(
reduce
builtins.str"builtins.str*2
include_self
builtins.bool"builtins.bool *é
index_reduce_!torch._C.TensorBase.index_reduce_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor*(
reduce
builtins.str"builtins.str*2
include_self
builtins.bool"builtins.bool *ä
indicestorch._C.TensorBase.indices",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ø
innertorch._C.TensorBase.inner",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Ç
inttorch._C.TensorBase.int",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
int_reprtorch._C.TensorBase.int_repr",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
inversetorch._C.TensorBase.inverse",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
is_coalesced torch._C.TensorBase.is_coalesced"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç

is_complextorch._C.TensorBase.is_complex"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*|
is_conjtorch._C.TensorBase.is_conj"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*¶
is_contiguous!torch._C.TensorBase.is_contiguous"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*
memory_format
Any *ä
is_distributed"torch._C.TensorBase.is_distributed"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*ê
is_floating_point%torch._C.TensorBase.is_floating_point"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
is_inference torch._C.TensorBase.is_inference"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*z
is_negtorch._C.TensorBase.is_neg"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç

is_nonzerotorch._C.TensorBase.is_nonzero"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*µ
	is_pinnedtorch._C.TensorBase.is_pinned"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *ø
is_same_size torch._C.TensorBase.is_same_size"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*∫
	is_set_totorch._C.TensorBase.is_set_to"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*Ä
	is_signedtorch._C.TensorBase.is_signed"
builtins.bool"builtins.bool*4
self*
torch._C.TensorBase"torch._C.TensorBase*–
isclosetorch._C.TensorBase.isclose",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*,
rtol 
builtins.float"builtins.float *,
atol 
builtins.float"builtins.float */
	equal_nan
builtins.bool"builtins.bool *å
isfinitetorch._C.TensorBase.isfinite",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
isinftorch._C.TensorBase.isinf",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
isnantorch._C.TensorBase.isnan",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
isneginftorch._C.TensorBase.isneginf",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
isposinftorch._C.TensorBase.isposinf",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
isrealtorch._C.TensorBase.isreal",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*é
istfttorch._C.TensorBase.istft",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
n_fft
builtins.int"builtins.int*V

hop_lengthD
Union[builtins.int,None]
builtins.int"builtins.int
None *V

win_lengthD
Union[builtins.int,None]
builtins.int"builtins.int
None *j
window\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *,
center
builtins.bool"builtins.bool *0

normalized
builtins.bool"builtins.bool *W
onesidedG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *R
lengthD
Union[builtins.int,None]
builtins.int"builtins.int
None *4
return_complex
builtins.bool"builtins.bool *√
itemtorch._C.TensorBase.item"Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ω
krontorch._C.TensorBase.kron",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*ª
lcmtorch._C.TensorBase.lcm",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Ω
lcm_torch._C.TensorBase.lcm_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*ø
ldexptorch._C.TensorBase.ldexp",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*¡
ldexp_torch._C.TensorBase.ldexp_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*à
lgammatorch._C.TensorBase.lgamma",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
lgamma_torch._C.TensorBase.lgamma_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç
logtorch._C.TensorBase.log",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
log10torch._C.TensorBase.log10",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
log10_torch._C.TensorBase.log10_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
log1ptorch._C.TensorBase.log1p",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
log1p_torch._C.TensorBase.log1p_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
log2torch._C.TensorBase.log2",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
log2_torch._C.TensorBase.log2_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
log_torch._C.TensorBase.log_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*÷
log_normal_torch._C.TensorBase.log_normal_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*,
mean 
builtins.float"builtins.float *+
std 
builtins.float"builtins.float *g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None *«
	logaddexptorch._C.TensorBase.logaddexp",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*…

logaddexp2torch._C.TensorBase.logaddexp2",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*à
logdettorch._C.TensorBase.logdet",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*À
logical_andtorch._C.TensorBase.logical_and",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Õ
logical_and_ torch._C.TensorBase.logical_and_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*í
logical_nottorch._C.TensorBase.logical_not",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*î
logical_not_ torch._C.TensorBase.logical_not_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*…

logical_ortorch._C.TensorBase.logical_or",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*À
logical_or_torch._C.TensorBase.logical_or_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*À
logical_xortorch._C.TensorBase.logical_xor",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Õ
logical_xor_ torch._C.TensorBase.logical_xor_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*›
logittorch._C.TensorBase.logit",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*U
epsJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *ﬂ
logit_torch._C.TensorBase.logit_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*U
epsJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *Ñ
longtorch._C.TensorBase.long",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
lu_solvetorch._C.TensorBase.lu_solve",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*9
LU_data,
torch._tensor.Tensor"torch._tensor.Tensor*;
	LU_pivots,
torch._tensor.Tensor"torch._tensor.Tensor*À
map2_torch._C.TensorBase.map2_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.Tensor*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*ô
map_torch._C.TensorBase.map_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*ä
masked_scatter"torch._C.TensorBase.masked_scatter",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mask,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor*å
masked_scatter_#torch._C.TensorBase.masked_scatter_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mask,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor*Œ
masked_select!torch._C.TensorBase.masked_select",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mask,
torch._tensor.Tensor"torch._tensor.Tensor*¡
matmultorch._C.TensorBase.matmul",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*ê

matrix_exptorch._C.TensorBase.matrix_exp",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*π
matrix_power torch._C.TensorBase.matrix_power",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*#
n
builtins.int"builtins.int*√
maximumtorch._C.TensorBase.maximum",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*√
minimumtorch._C.TensorBase.minimum",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*∏
mmtorch._C.TensorBase.mm",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mat2,
torch._tensor.Tensor"torch._tensor.Tensor*Ü
msorttorch._C.TensorBase.msort",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
multorch._C.TensorBase.mul",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ñ
otherä
ÑUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,torch.SymInt,torch.SymFloat],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
torch.SymInt"torch.SymInt 
torch.SymFloat"torch.SymFloat*g
out\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *ù
mul_torch._C.TensorBase.mul_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ñ
otherä
ÑUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,torch.SymInt,torch.SymFloat],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
torch.SymInt"torch.SymInt 
torch.SymFloat"torch.SymFloat*›
multinomialtorch._C.TensorBase.multinomial",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*-
num_samples
builtins.int"builtins.int*1
replacement
builtins.bool"builtins.bool *g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None *∑
mvtorch._C.TensorBase.mv",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
vec,
torch._tensor.Tensor"torch._tensor.Tensor*±
mvlgammatorch._C.TensorBase.mvlgamma",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*#
p
builtins.int"builtins.int*≥
	mvlgamma_torch._C.TensorBase.mvlgamma_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*#
p
builtins.int"builtins.int*õ

nan_to_numtorch._C.TensorBase.nan_to_num",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*U
nanJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *X
posinfJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *X
neginfJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *ù
nan_to_num_torch._C.TensorBase.nan_to_num_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*U
nanJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *X
posinfJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *X
neginfJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *æ
nanmeantorch._C.TensorBase.nanmean",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*©
dimù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *-
keepdim
builtins.bool"builtins.bool *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *º
nansumtorch._C.TensorBase.nansum",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*©
dimù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *-
keepdim
builtins.bool"builtins.bool *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *î
narrow_copytorch._C.TensorBase.narrow_copy",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*k
start`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt*l
length`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt*Ä

ndimensiontorch._C.TensorBase.ndimension"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç
negtorch._C.TensorBase.neg",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
neg_torch._C.TensorBase.neg_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
negativetorch._C.TensorBase.negative",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*é
	negative_torch._C.TensorBase.negative_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*|
nelementtorch._C.TensorBase.nelement"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*¨
new_empty_strided%torch._C.TensorBase.new_empty_strided",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*≥
stride¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *[
layoutM
Union[torch._C.layout,None]"
torch._C.layout"torch._C.layout
None *≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *Y

pin_memoryG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *‚	
new_fulltorch._C.TensorBase.new_full",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*˚

fill_valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *[
layoutM
Union[torch._C.layout,None]"
torch._C.layout"torch._C.layout
None *≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *Y

pin_memoryG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *ò

new_tensortorch._C.TensorBase.new_tensor",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*
data
Any*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *3
requires_grad
builtins.bool"builtins.bool *0

pin_memory
builtins.bool"builtins.bool *«
	nextaftertorch._C.TensorBase.nextafter",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*…

nextafter_torch._C.TensorBase.nextafter_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*
nonzero_static"torch._C.TensorBase.nonzero_static",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
size
builtins.int"builtins.int*.

fill_value
builtins.int"builtins.int *Œ
normal_torch._C.TensorBase.normal_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*,
mean 
builtins.float"builtins.float *+
std 
builtins.float"builtins.float *g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None *v
numeltorch._C.TensorBase.numel"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*¿
numpytorch._C.TensorBase.numpy"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*4
self*
torch._C.TensorBase"torch._C.TensorBase*+
force
builtins.bool"builtins.bool *¿
orgqrtorch._C.TensorBase.orgqr",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
input2,
torch._tensor.Tensor"torch._tensor.Tensor*◊
ormqrtorch._C.TensorBase.ormqr",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
input2,
torch._tensor.Tensor"torch._tensor.Tensor*8
input3,
torch._tensor.Tensor"torch._tensor.Tensor**
left
builtins.bool"builtins.bool */
	transpose
builtins.bool"builtins.bool *æ
outertorch._C.TensorBase.outer",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
vec2,
torch._tensor.Tensor"torch._tensor.Tensor*≈

pin_memorytorch._C.TensorBase.pin_memory",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *ª
pinversetorch._C.TensorBase.pinverse",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*-
rcond 
builtins.float"builtins.float *≥
	polygammatorch._C.TensorBase.polygamma",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*#
n
builtins.int"builtins.int*µ

polygamma_torch._C.TensorBase.polygamma_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*#
n
builtins.int"builtins.int*å
positivetorch._C.TensorBase.positive",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*¿
prelutorch._C.TensorBase.prelu",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*ß
puttorch._C.TensorBase.put",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor*0

accumulate
builtins.bool"builtins.bool *©
put_torch._C.TensorBase.put_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor*0

accumulate
builtins.bool"builtins.bool *ê
q_per_channel_axis&torch._C.TensorBase.q_per_channel_axis"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*§
q_per_channel_scales(torch._C.TensorBase.q_per_channel_scales",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Æ
q_per_channel_zero_points-torch._C.TensorBase.q_per_channel_zero_points",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*~
q_scaletorch._C.TensorBase.q_scale" 
builtins.float"builtins.float*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
q_zero_point torch._C.TensorBase.q_zero_point"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*Í
qrtorch._C.TensorBase.qr"È
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.qr*4
self*
torch._C.TensorBase"torch._C.TensorBase**
some
builtins.bool"builtins.bool *Ç
qschemetorch._C.TensorBase.qscheme"$
torch._C.qscheme"torch._C.qscheme*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
rad2degtorch._C.TensorBase.rad2deg",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
rad2deg_torch._C.TensorBase.rad2deg_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
raveltorch._C.TensorBase.ravel",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ê

reciprocaltorch._C.TensorBase.reciprocal",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*í
reciprocal_torch._C.TensorBase.reciprocal_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ù
record_stream!torch._C.TensorBase.record_stream"
None*4
self*
torch._C.TensorBase"torch._C.TensorBase*)
s"
torch._C.Stream"torch._C.Stream*Ò
refine_names torch._C.TensorBase.refine_names",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*⁄
namesŒ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence*Ñ
relutorch._C.TensorBase.relu",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
relu_torch._C.TensorBase.relu_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ω
renametorch._C.TensorBase.rename",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*≤
names¶
GUnion[typing.Sequence[Union[builtins.str,builtins.ellipsis,None]],None]Œ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence
None*ø
rename_torch._C.TensorBase.rename_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*≤
names¶
GUnion[typing.Sequence[Union[builtins.str,builtins.ellipsis,None]],None]Œ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence
None*ü
renormtorch._C.TensorBase.renorm",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ú
pÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex*%
dim
builtins.int"builtins.int*¯
maxnormÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex*°
renorm_torch._C.TensorBase.renorm_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ú
pÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex*%
dim
builtins.int"builtins.int*¯
maxnormÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex*ƒ
requires_grad_"torch._C.TensorBase.requires_grad_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase**
mode
builtins.bool"builtins.bool *…

reshape_astorch._C.TensorBase.reshape_as",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*…

resize_as_torch._C.TensorBase.resize_as_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*>
the_template,
torch._tensor.Tensor"torch._tensor.Tensor*w
memory_formatb
"Union[torch._C.memory_format,None]0
torch._C.memory_format"torch._C.memory_format
None *ﬁ
resize_as_sparse_%torch._C.TensorBase.resize_as_sparse_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*>
the_template,
torch._tensor.Tensor"torch._tensor.Tensor*î
resolve_conj torch._C.TensorBase.resolve_conj",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*í
resolve_negtorch._C.TensorBase.resolve_neg",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*n
retain_gradtorch._C.TensorBase.retain_grad"
None*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ì
rolltorch._C.TensorBase.roll",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*»
shiftsª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*õ
dimsé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *∫
rot90torch._C.TensorBase.rot90",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
k
builtins.int"builtins.int *ä
dims˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *í
row_indicestorch._C.TensorBase.row_indices",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
rsqrttorch._C.TensorBase.rsqrt",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
rsqrt_torch._C.TensorBase.rsqrt_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*´
scatter_add_ torch._C.TensorBase.scatter_add_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*5
src,
torch._tensor.Tensor"torch._tensor.Tensor*ç
scatter_reduce"torch._C.TensorBase.scatter_reduce",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*5
src,
torch._tensor.Tensor"torch._tensor.Tensor*(
reduce
builtins.str"builtins.str*2
include_self
builtins.bool"builtins.bool *è
scatter_reduce_#torch._C.TensorBase.scatter_reduce_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*5
src,
torch._tensor.Tensor"torch._tensor.Tensor*(
reduce
builtins.str"builtins.str*2
include_self
builtins.bool"builtins.bool *„
select_scatter"torch._C.TensorBase.select_scatter",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
src,
torch._tensor.Tensor"torch._tensor.Tensor*%
dim
builtins.int"builtins.int*k
index`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt*Ç
sgntorch._C.TensorBase.sgn",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
sgn_torch._C.TensorBase.sgn_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
shorttorch._C.TensorBase.short",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
sigmoidtorch._C.TensorBase.sigmoid",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*å
sigmoid_torch._C.TensorBase.sigmoid_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
signtorch._C.TensorBase.sign",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
sign_torch._C.TensorBase.sign_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
signbittorch._C.TensorBase.signbit",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ç
sintorch._C.TensorBase.sin",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
sin_torch._C.TensorBase.sin_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
sinctorch._C.TensorBase.sinc",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
sinc_torch._C.TensorBase.sinc_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
sinhtorch._C.TensorBase.sinh",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
sinh_torch._C.TensorBase.sinh_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ﬁ
slice_inverse!torch._C.TensorBase.slice_inverse",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
src,
torch._tensor.Tensor"torch._tensor.Tensor*'
dim
builtins.int"builtins.int *|
starto
%Union[builtins.int,torch.SymInt,None]
builtins.int"builtins.int
torch.SymInt"torch.SymInt
None *z
endo
%Union[builtins.int,torch.SymInt,None]
builtins.int"builtins.int
torch.SymInt"torch.SymInt
None *l
step`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt *ﬁ
slice_scatter!torch._C.TensorBase.slice_scatter",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
src,
torch._tensor.Tensor"torch._tensor.Tensor*'
dim
builtins.int"builtins.int *|
starto
%Union[builtins.int,torch.SymInt,None]
builtins.int"builtins.int
torch.SymInt"torch.SymInt
None *z
endo
%Union[builtins.int,torch.SymInt,None]
builtins.int"builtins.int
torch.SymInt"torch.SymInt
None *l
step`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt *Õ
slogdettorch._C.TensorBase.slogdet"Ó
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.slogdet*4
self*
torch._C.TensorBase"torch._C.TensorBase*∫
smmtorch._C.TensorBase.smm",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mat2,
torch._tensor.Tensor"torch._tensor.Tensor*Ä

sparse_dimtorch._C.TensorBase.sparse_dim"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase* 
sparse_masktorch._C.TensorBase.sparse_mask",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mask,
torch._tensor.Tensor"torch._tensor.Tensor*˛
sparse_resize_"torch._C.TensorBase.sparse_resize_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*,

sparse_dim
builtins.int"builtins.int*+
	dense_dim
builtins.int"builtins.int*í
sparse_resize_and_clear_,torch._C.TensorBase.sparse_resize_and_clear_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*,

sparse_dim
builtins.int"builtins.int*+
	dense_dim
builtins.int"builtins.int*∏
split_with_sizes$torch._C.TensorBase.split_with_sizes"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*∏
split_sizes¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*'
dim
builtins.int"builtins.int *Ñ
sqrttorch._C.TensorBase.sqrt",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
sqrt_torch._C.TensorBase.sqrt_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
squaretorch._C.TensorBase.square",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
square_torch._C.TensorBase.square_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ò
sspaddmmtorch._C.TensorBase.sspaddmm",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mat1,
torch._tensor.Tensor"torch._tensor.Tensor*6
mat2,
torch._tensor.Tensor"torch._tensor.Tensor*˜
betaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *™
untyped_storage#torch._C.TensorBase.untyped_storage"<
torch.storage.UntypedStorage"torch.storage.UntypedStorage*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
storage_offset"torch._C.TensorBase.storage_offset"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*í
storage_type torch._C.TensorBase.storage_type"*
torch.types.Storage"torch.types.Storage*4
self*
torch._C.TensorBase"torch._C.TensorBase*é	
subtorch._C.TensorBase.sub",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ñ
otherä
ÑUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,torch.SymInt,torch.SymFloat],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
torch.SymInt"torch.SymInt 
torch.SymFloat"torch.SymFloat*á
alpha˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None *g
out\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *ß
sub_torch._C.TensorBase.sub_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ñ
otherä
ÑUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,torch.SymInt,torch.SymFloat],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
torch.SymInt"torch.SymInt 
torch.SymFloat"torch.SymFloat*á
alpha˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None *˜
svdtorch._C.TensorBase.svd"¬
PTypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor,torch._tensor.Tensor]]”
ETuple[torch._tensor.Tensor,torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.svd*4
self*
torch._C.TensorBase"torch._C.TensorBase**
some
builtins.bool"builtins.bool *0

compute_uv
builtins.bool"builtins.bool *ﬁ
swapaxestorch._C.TensorBase.swapaxes",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
axis0
builtins.int"builtins.int*'
axis1
builtins.int"builtins.int*‡
	swapaxes_torch._C.TensorBase.swapaxes_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
axis0
builtins.int"builtins.int*'
axis1
builtins.int"builtins.int*‹
swapdimstorch._C.TensorBase.swapdims",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
dim0
builtins.int"builtins.int*&
dim1
builtins.int"builtins.int*ﬁ
	swapdims_torch._C.TensorBase.swapdims_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
dim0
builtins.int"builtins.int*&
dim1
builtins.int"builtins.int*~
ttorch._C.TensorBase.t",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ä
t_torch._C.TensorBase.t_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ω
taketorch._C.TensorBase.take",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*§
take_along_dim"torch._C.TensorBase.take_along_dim",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*9
indices,
torch._tensor.Tensor"torch._tensor.Tensor*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
tantorch._C.TensorBase.tan",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
tan_torch._C.TensorBase.tan_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ñ
tanhtorch._C.TensorBase.tanh",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ü
tanh_torch._C.TensorBase.tanh_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*¡
to_densetorch._C.TensorBase.to_dense",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *Z
masked_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Á
	to_mkldnntorch._C.TensorBase.to_mkldnn",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *÷
to_padded_tensor$torch._C.TensorBase.to_padded_tensor",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*-
padding 
builtins.float"builtins.float*à
output_sizeÙ
=Union[typing.Sequence[Union[builtins.int,torch.SymInt]],None]¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence
None *é
to_sparse_bsc!torch._C.TensorBase.to_sparse_bsc",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*û
	blocksizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*U
	dense_dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *é
to_sparse_bsr!torch._C.TensorBase.to_sparse_bsr",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*û
	blocksizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*U
	dense_dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ì
to_sparse_csc!torch._C.TensorBase.to_sparse_csc",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*U
	dense_dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ì
to_sparse_csr!torch._C.TensorBase.to_sparse_csr",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*U
	dense_dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *à
tolisttorch._C.TensorBase.tolist",
builtins.list[Any]
Any"builtins.list*4
self*
torch._C.TensorBase"torch._C.TensorBase*≥
topktorch._C.TensorBase.topk"Î
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.topk*4
self*
torch._C.TensorBase"torch._C.TensorBase*g
k`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt*'
dim
builtins.int"builtins.int *-
largest
builtins.bool"builtins.bool *,
sorted
builtins.bool"builtins.bool *Ü
tracetorch._C.TensorBase.trace",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*‡

transpose_torch._C.TensorBase.transpose_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
dim0
builtins.int"builtins.int*&
dim1
builtins.int"builtins.int*∞
triangular_solve$torch._C.TensorBase.triangular_solve"˜
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"#torch.return_types.triangular_solve*4
self*
torch._C.TensorBase"torch._C.TensorBase*3
A,
torch._tensor.Tensor"torch._tensor.Tensor*+
upper
builtins.bool"builtins.bool */
	transpose
builtins.bool"builtins.bool *3
unitriangular
builtins.bool"builtins.bool *≤
triltorch._C.TensorBase.tril",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*,
diagonal
builtins.int"builtins.int *¥
tril_torch._C.TensorBase.tril_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*,
diagonal
builtins.int"builtins.int *≤
triutorch._C.TensorBase.triu",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*,
diagonal
builtins.int"builtins.int *¥
triu_torch._C.TensorBase.triu_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*,
diagonal
builtins.int"builtins.int *‹
true_dividetorch._C.TensorBase.true_divide",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ﬁ
other“
sUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],torch.SymInt,torch.SymFloat],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number
torch.SymInt"torch.SymInt 
torch.SymFloat"torch.SymFloat*g
out\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *ı
true_divide_ torch._C.TensorBase.true_divide_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ﬁ
other“
sUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],torch.SymInt,torch.SymFloat],
torch._tensor.Tensor"torch._tensor.TensorÍ
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number
torch.SymInt"torch.SymInt 
torch.SymFloat"torch.SymFloat*Ü
trunctorch._C.TensorBase.trunc",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
trunc_torch._C.TensorBase.trunc_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*√
type_astorch._C.TensorBase.type_as",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*Ö
unfoldtorch._C.TensorBase.unfold",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*+
	dimension
builtins.int"builtins.int*&
size
builtins.int"builtins.int*&
step
builtins.int"builtins.int*–
uniform_torch._C.TensorBase.uniform_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*-
from_ 
builtins.float"builtins.float **
to 
builtins.float"builtins.float *g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None *ü
unsafe_chunk torch._C.TensorBase.unsafe_chunk"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*(
chunks
builtins.int"builtins.int*'
dim
builtins.int"builtins.int *Á
unsafe_split torch._C.TensorBase.unsafe_split"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*p

split_size`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt*'
dim
builtins.int"builtins.int *∆
unsafe_split_with_sizes+torch._C.TensorBase.unsafe_split_with_sizes"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*∏
split_sizes¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*'
dim
builtins.int"builtins.int *µ
	unsqueezetorch._C.TensorBase.unsqueeze",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*∑

unsqueeze_torch._C.TensorBase.unsqueeze_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*à
valuestorch._C.TensorBase.values",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ω
vdottorch._C.TensorBase.vdot",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*√
view_astorch._C.TensorBase.view_as",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*≤
xputorch._C.TensorBase.xpu",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*≤
device£
5Union[torch._C.device,builtins.int,builtins.str,None]"
torch._C.device"torch._C.device
builtins.int"builtins.int
builtins.str"builtins.str
None *2
non_blocking
builtins.bool"builtins.bool *E
memory_format0
torch._C.memory_format"torch._C.memory_format *Ü
zero_torch._C.TensorBase.zero_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase2ä
__and__torch._C.TensorBase.__and__¿
__and__torch._C.TensorBase.__and__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*.,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXÄ
__and__torch._C.TensorBase.__and__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*ÌÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadXõ
__and__torch._C.TensorBase.__and__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any0:overloadX2í
__iand__torch._C.TensorBase.__iand__¬
__iand__torch._C.TensorBase.__iand__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*.,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXÇ
__iand__torch._C.TensorBase.__iand__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*ÌÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadXù
__iand__torch._C.TensorBase.__iand__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any0:overloadX2™
__ilshift__torch._C.TensorBase.__ilshift__»
__ilshift__torch._C.TensorBase.__ilshift__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*.,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXà
__ilshift__torch._C.TensorBase.__ilshift__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*ÌÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX£
__ilshift__torch._C.TensorBase.__ilshift__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any0:overloadX2Ü
__init__torch._C.TensorBase.__init__æ
__init__torch._C.TensorBase.__init__"
None*4
self*
torch._C.TensorBase"torch._C.TensorBase*
args
Any*≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None 0:overloadXØ
__init__torch._C.TensorBase.__init__"
None*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
storage*
torch.types.Storage"torch.types.Storage0:overloadXØ
__init__torch._C.TensorBase.__init__"
None*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX∂
__init__torch._C.TensorBase.__init__"
None*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None 0:overloadX2ä
__ior__torch._C.TensorBase.__ior__¿
__ior__torch._C.TensorBase.__ior__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*.,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXÄ
__ior__torch._C.TensorBase.__ior__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*ÌÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadXõ
__ior__torch._C.TensorBase.__ior__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any0:overloadX2™
__irshift__torch._C.TensorBase.__irshift__»
__irshift__torch._C.TensorBase.__irshift__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*.,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXà
__irshift__torch._C.TensorBase.__irshift__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*ÌÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX£
__irshift__torch._C.TensorBase.__irshift__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any0:overloadX2í
__ixor__torch._C.TensorBase.__ixor__¬
__ixor__torch._C.TensorBase.__ixor__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*.,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXÇ
__ixor__torch._C.TensorBase.__ixor__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*ÌÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadXù
__ixor__torch._C.TensorBase.__ixor__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any0:overloadX2¢

__lshift__torch._C.TensorBase.__lshift__∆

__lshift__torch._C.TensorBase.__lshift__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*.,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXÜ

__lshift__torch._C.TensorBase.__lshift__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*ÌÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX°

__lshift__torch._C.TensorBase.__lshift__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any0:overloadX2Ç
__or__torch._C.TensorBase.__or__æ
__or__torch._C.TensorBase.__or__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*.,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX˛
__or__torch._C.TensorBase.__or__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*ÌÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadXô
__or__torch._C.TensorBase.__or__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any0:overloadX2¢

__rshift__torch._C.TensorBase.__rshift__∆

__rshift__torch._C.TensorBase.__rshift__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*.,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXÜ

__rshift__torch._C.TensorBase.__rshift__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*ÌÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX°

__rshift__torch._C.TensorBase.__rshift__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any0:overloadX2ä
__xor__torch._C.TensorBase.__xor__¿
__xor__torch._C.TensorBase.__xor__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*.,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXÄ
__xor__torch._C.TensorBase.__xor__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*ÌÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadXõ
__xor__torch._C.TensorBase.__xor__",
torch._tensor.Tensor"torch._tensor.Tensor*,*
torch._C.TensorBase"torch._C.TensorBase*	
Any0:overloadX2Ç	

_to_sparsetorch._C.TensorBase._to_sparseÑ

_to_sparsetorch._C.TensorBase._to_sparse",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*[
layoutM
Union[torch._C.layout,None]"
torch._C.layout"torch._C.layout
None *Ø
	blocksizeù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *U
	dense_dimD
Union[builtins.int,None]
builtins.int"builtins.int
None 0:overloadXÃ

_to_sparsetorch._C.TensorBase._to_sparse",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*,

sparse_dim
builtins.int"builtins.int0:overloadX2Ã
align_totorch._C.TensorBase.align_toß
align_totorch._C.TensorBase.align_to",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*⁄
orderŒ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence*.
ellipsis_idx
builtins.int"builtins.int0:overloadX˜
align_totorch._C.TensorBase.align_to",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*⁄
namesŒ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence0:overloadX2—	
alltorch._C.TensorBase.allê
alltorch._C.TensorBase.all",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase0:overloadXË
alltorch._C.TensorBase.all",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*¶
dimö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None *-
keepdim
builtins.bool"builtins.bool 0:overloadXÊ
alltorch._C.TensorBase.all",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*-
keepdim
builtins.bool"builtins.bool 0:overloadX…
alltorch._C.TensorBase.all",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*-
keepdim
builtins.bool"builtins.bool 0:overloadX2—	
anytorch._C.TensorBase.anyê
anytorch._C.TensorBase.any",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase0:overloadXË
anytorch._C.TensorBase.any",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*¶
dimö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None *-
keepdim
builtins.bool"builtins.bool 0:overloadXÊ
anytorch._C.TensorBase.any",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*-
keepdim
builtins.bool"builtins.bool 0:overloadX…
anytorch._C.TensorBase.any",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*-
keepdim
builtins.bool"builtins.bool 0:overloadX2ï
argsorttorch._C.TensorBase.argsortü
argsorttorch._C.TensorBase.argsort",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase**
stable
builtins.bool"builtins.bool*'
dim
builtins.int"builtins.int *0

descending
builtins.bool"builtins.bool 0:overloadXÛ
argsorttorch._C.TensorBase.argsort",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
dim
builtins.int"builtins.int *0

descending
builtins.bool"builtins.bool 0:overloadX‘
argsorttorch._C.TensorBase.argsort",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*0

descending
builtins.bool"builtins.bool 0:overloadX2„
	bernoullitorch._C.TensorBase.bernoulliÖ
	bernoullitorch._C.TensorBase.bernoulli",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None 0:overloadXÆ
	bernoullitorch._C.TensorBase.bernoulli",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
p 
builtins.float"builtins.float*g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None 0:overloadX2†

bernoulli_torch._C.TensorBase.bernoulli_º

bernoulli_torch._C.TensorBase.bernoulli_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*3
p,
torch._tensor.Tensor"torch._tensor.Tensor*g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None 0:overloadX≤

bernoulli_torch._C.TensorBase.bernoulli_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*)
p 
builtins.float"builtins.float *g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None 0:overloadX2¶
bitwise_andtorch._C.TensorBase.bitwise_andŸ
bitwise_andtorch._C.TensorBase.bitwise_and",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXô
bitwise_andtorch._C.TensorBase.bitwise_and",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2¨
bitwise_and_ torch._C.TensorBase.bitwise_and_€
bitwise_and_ torch._C.TensorBase.bitwise_and_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXõ
bitwise_and_ torch._C.TensorBase.bitwise_and_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2–
bitwise_left_shift&torch._C.TensorBase.bitwise_left_shiftÁ
bitwise_left_shift&torch._C.TensorBase.bitwise_left_shift",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXß
bitwise_left_shift&torch._C.TensorBase.bitwise_left_shift",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2÷
bitwise_left_shift_'torch._C.TensorBase.bitwise_left_shift_È
bitwise_left_shift_'torch._C.TensorBase.bitwise_left_shift_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX©
bitwise_left_shift_'torch._C.TensorBase.bitwise_left_shift_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2†

bitwise_ortorch._C.TensorBase.bitwise_or◊

bitwise_ortorch._C.TensorBase.bitwise_or",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXó

bitwise_ortorch._C.TensorBase.bitwise_or",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2¶
bitwise_or_torch._C.TensorBase.bitwise_or_Ÿ
bitwise_or_torch._C.TensorBase.bitwise_or_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXô
bitwise_or_torch._C.TensorBase.bitwise_or_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2÷
bitwise_right_shift'torch._C.TensorBase.bitwise_right_shiftÈ
bitwise_right_shift'torch._C.TensorBase.bitwise_right_shift",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX©
bitwise_right_shift'torch._C.TensorBase.bitwise_right_shift",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2‹
bitwise_right_shift_(torch._C.TensorBase.bitwise_right_shift_Î
bitwise_right_shift_(torch._C.TensorBase.bitwise_right_shift_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX´
bitwise_right_shift_(torch._C.TensorBase.bitwise_right_shift_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2¶
bitwise_xortorch._C.TensorBase.bitwise_xorŸ
bitwise_xortorch._C.TensorBase.bitwise_xor",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXô
bitwise_xortorch._C.TensorBase.bitwise_xor",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2¨
bitwise_xor_ torch._C.TensorBase.bitwise_xor_€
bitwise_xor_ torch._C.TensorBase.bitwise_xor_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXõ
bitwise_xor_ torch._C.TensorBase.bitwise_xor_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2÷
broadcast_to torch._C.TensorBase.broadcast_to÷
broadcast_to torch._C.TensorBase.broadcast_to",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence0:overloadX 
broadcast_to torch._C.TensorBase.broadcast_to",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
size
builtins.int"builtins.int0:overloadX2≤

clamptorch._C.TensorBase.clampÊ
clamptorch._C.TensorBase.clamp",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*g
min\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *g
max\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None 0:overloadX§
clamptorch._C.TensorBase.clamp",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ö
min˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None *Ö
max˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None 0:overloadX2∏

clamp_torch._C.TensorBase.clamp_Ë
clamp_torch._C.TensorBase.clamp_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*g
min\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *g
max\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None 0:overloadX¶
clamp_torch._C.TensorBase.clamp_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ö
min˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None *Ö
max˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None 0:overloadX2ñ
	clamp_maxtorch._C.TensorBase.clamp_max”
	clamp_maxtorch._C.TensorBase.clamp_max",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
max,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXì
	clamp_maxtorch._C.TensorBase.clamp_max",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ù
maxÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ú

clamp_max_torch._C.TensorBase.clamp_max_’

clamp_max_torch._C.TensorBase.clamp_max_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
max,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXï

clamp_max_torch._C.TensorBase.clamp_max_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ù
maxÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ñ
	clamp_mintorch._C.TensorBase.clamp_min”
	clamp_mintorch._C.TensorBase.clamp_min",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
min,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXì
	clamp_mintorch._C.TensorBase.clamp_min",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ù
minÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ú

clamp_min_torch._C.TensorBase.clamp_min_’

clamp_min_torch._C.TensorBase.clamp_min_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
min,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXï

clamp_min_torch._C.TensorBase.clamp_min_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ù
minÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2¨

cliptorch._C.TensorBase.clip‰
cliptorch._C.TensorBase.clip",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*g
min\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *g
max\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None 0:overloadX¢
cliptorch._C.TensorBase.clip",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ö
min˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None *Ö
max˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None 0:overloadX2≤

clip_torch._C.TensorBase.clip_Ê
clip_torch._C.TensorBase.clip_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*g
min\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *g
max\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None 0:overloadX§
clip_torch._C.TensorBase.clip_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ö
min˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None *Ö
max˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None 0:overloadX2î
copysigntorch._C.TensorBase.copysign”
copysigntorch._C.TensorBase.copysign",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXì
copysigntorch._C.TensorBase.copysign",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ö
	copysign_torch._C.TensorBase.copysign_’
	copysign_torch._C.TensorBase.copysign_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXï
	copysign_torch._C.TensorBase.copysign_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2©
count_nonzero!torch._C.TensorBase.count_nonzeroı
count_nonzero!torch._C.TensorBase.count_nonzero",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None 0:overloadXÆ
count_nonzero!torch._C.TensorBase.count_nonzero",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size0:overloadXÀ
count_nonzero!torch._C.TensorBase.count_nonzero",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int0:overloadX2ã
cummaxtorch._C.TensorBase.cummaxˇ
cummaxtorch._C.TensorBase.cummax"Ì
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.cummax*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int0:overloadX‚
cummaxtorch._C.TensorBase.cummax"Ì
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.cummax*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None0:overloadX2ã
cummintorch._C.TensorBase.cumminˇ
cummintorch._C.TensorBase.cummin"Ì
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.cummin*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int0:overloadX‚
cummintorch._C.TensorBase.cummin"Ì
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.cummin*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None0:overloadX2ø
cumprodtorch._C.TensorBase.cumprodò
cumprodtorch._C.TensorBase.cumprod",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX˚
cumprodtorch._C.TensorBase.cumprod",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX2≈
cumprod_torch._C.TensorBase.cumprod_ö
cumprod_torch._C.TensorBase.cumprod_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX˝
cumprod_torch._C.TensorBase.cumprod_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX2π
cumsumtorch._C.TensorBase.cumsumñ
cumsumtorch._C.TensorBase.cumsum",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX˘
cumsumtorch._C.TensorBase.cumsum",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX2ø
cumsum_torch._C.TensorBase.cumsum_ò
cumsum_torch._C.TensorBase.cumsum_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX˚
cumsum_torch._C.TensorBase.cumsum_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX2±
diagonaltorch._C.TensorBase.diagonalÈ
diagonaltorch._C.TensorBase.diagonal",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
outdim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*à
dim1~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*à
dim2~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None**
offset
builtins.int"builtins.int 0:overloadXö
diagonaltorch._C.TensorBase.diagonal",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase**
offset
builtins.int"builtins.int *(
dim1
builtins.int"builtins.int *(
dim2
builtins.int"builtins.int 0:overloadX2û
dividetorch._C.TensorBase.divideœ
dividetorch._C.TensorBase.divide",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX®
dividetorch._C.TensorBase.divide",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*W
rounding_modeD
Union[builtins.str,None]
builtins.str"builtins.str
None0:overloadXË
dividetorch._C.TensorBase.divide",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex*W
rounding_modeD
Union[builtins.str,None]
builtins.str"builtins.str
None0:overloadXè
dividetorch._C.TensorBase.divide",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2®
divide_torch._C.TensorBase.divide_—
divide_torch._C.TensorBase.divide_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX™
divide_torch._C.TensorBase.divide_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*W
rounding_modeD
Union[builtins.str,None]
builtins.str"builtins.str
None0:overloadXÍ
divide_torch._C.TensorBase.divide_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex*W
rounding_modeD
Union[builtins.str,None]
builtins.str"builtins.str
None0:overloadXë
divide_torch._C.TensorBase.divide_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2¸
dsplittorch._C.TensorBase.dsplit˙
dsplittorch._C.TensorBase.dsplit"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase**
sections
builtins.int"builtins.int0:overloadX‹
dsplittorch._C.TensorBase.dsplit"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*ã
indices˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size0:overloadX˘
dsplittorch._C.TensorBase.dsplit"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*)
indices
builtins.int"builtins.int0:overloadX2
eqtorch._C.TensorBase.eq«
eqtorch._C.TensorBase.eq",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXá
eqtorch._C.TensorBase.eq",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ˆ
eq_torch._C.TensorBase.eq_…
eq_torch._C.TensorBase.eq_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXâ
eq_torch._C.TensorBase.eq_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2í
expandtorch._C.TensorBase.expand˙
expandtorch._C.TensorBase.expand",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*.
implicit
builtins.bool"builtins.bool 0:overloadXÓ
expandtorch._C.TensorBase.expand",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
size
builtins.int"builtins.int*.
implicit
builtins.bool"builtins.bool 0:overloadX2Ç
fill_torch._C.TensorBase.fill_Õ
fill_torch._C.TensorBase.fill_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
value,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXç
fill_torch._C.TensorBase.fill_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2Í
flattentorch._C.TensorBase.flattenÙ
flattentorch._C.TensorBase.flatten",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*-
	start_dim
builtins.int"builtins.int *+
end_dim
builtins.int"builtins.int 0:overloadX˛
flattentorch._C.TensorBase.flatten",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*+
	start_dim
builtins.int"builtins.int*)
end_dim
builtins.int"builtins.int*ã
out_dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None0:overloadXƒ
flattentorch._C.TensorBase.flatten",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ç
	start_dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*ã
end_dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*ã
out_dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None0:overloadXÇ
flattentorch._C.TensorBase.flatten",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*Ÿ
dimsŒ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence*ã
out_dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None0:overloadX2˝
fliptorch._C.TensorBase.flipù
fliptorch._C.TensorBase.flip",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
dims˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size0:overloadX∫
fliptorch._C.TensorBase.flip",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
dims
builtins.int"builtins.int0:overloadX2¨
float_powertorch._C.TensorBase.float_power‹
float_powertorch._C.TensorBase.float_power",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*:
exponent,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXú
float_powertorch._C.TensorBase.float_power",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*˘
exponentÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2≤
float_power_ torch._C.TensorBase.float_power_ﬁ
float_power_ torch._C.TensorBase.float_power_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*:
exponent,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXû
float_power_ torch._C.TensorBase.float_power_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*˘
exponentÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2¸
fmodtorch._C.TensorBase.fmodÀ
fmodtorch._C.TensorBase.fmod",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXã
fmodtorch._C.TensorBase.fmod",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2Ç
fmod_torch._C.TensorBase.fmod_Õ
fmod_torch._C.TensorBase.fmod_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXç
fmod_torch._C.TensorBase.fmod_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ﬂ
gathertorch._C.TensorBase.gather©
gathertorch._C.TensorBase.gather",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*1
sparse_grad
builtins.bool"builtins.bool 0:overloadXå
gathertorch._C.TensorBase.gather",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*1
sparse_grad
builtins.bool"builtins.bool 0:overloadX2
getorch._C.TensorBase.ge«
getorch._C.TensorBase.ge",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXá
getorch._C.TensorBase.ge",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ˆ
ge_torch._C.TensorBase.ge_…
ge_torch._C.TensorBase.ge_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXâ
ge_torch._C.TensorBase.ge_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2é
greatertorch._C.TensorBase.greater—
greatertorch._C.TensorBase.greater",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXë
greatertorch._C.TensorBase.greater",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2î
greater_torch._C.TensorBase.greater_”
greater_torch._C.TensorBase.greater_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXì
greater_torch._C.TensorBase.greater_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2≤
greater_equal!torch._C.TensorBase.greater_equal›
greater_equal!torch._C.TensorBase.greater_equal",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXù
greater_equal!torch._C.TensorBase.greater_equal",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2∏
greater_equal_"torch._C.TensorBase.greater_equal_ﬂ
greater_equal_"torch._C.TensorBase.greater_equal_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXü
greater_equal_"torch._C.TensorBase.greater_equal_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2
gttorch._C.TensorBase.gt«
gttorch._C.TensorBase.gt",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXá
gttorch._C.TensorBase.gt",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ˆ
gt_torch._C.TensorBase.gt_…
gt_torch._C.TensorBase.gt_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXâ
gt_torch._C.TensorBase.gt_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2™

	histogramtorch._C.TensorBase.histogram¥
	histogramtorch._C.TensorBase.histogram"
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.histogram*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
bins,
torch._tensor.Tensor"torch._tensor.Tensor*j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *-
density
builtins.bool"builtins.bool 0:overloadX∆
	histogramtorch._C.TensorBase.histogram"
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.histogram*4
self*
torch._C.TensorBase"torch._C.TensorBase*(
bins
builtins.int"builtins.int *ù
rangeè
+Union[typing.Sequence[builtins.float],None]T
typing.Sequence[builtins.float] 
builtins.float"builtins.float"typing.Sequence
None *j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *-
density
builtins.bool"builtins.bool 0:overloadX2¸
hsplittorch._C.TensorBase.hsplit˙
hsplittorch._C.TensorBase.hsplit"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase**
sections
builtins.int"builtins.int0:overloadX‹
hsplittorch._C.TensorBase.hsplit"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*ã
indices˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size0:overloadX˘
hsplittorch._C.TensorBase.hsplit"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*)
indices
builtins.int"builtins.int0:overloadX2ı
	index_addtorch._C.TensorBase.index_add±
	index_addtorch._C.TensorBase.index_add",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor*¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex 0:overloadXî
	index_addtorch._C.TensorBase.index_add",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor*¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex 0:overloadX2Ö

index_copytorch._C.TensorBase.index_copy∏

index_copytorch._C.TensorBase.index_copy",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXõ

index_copytorch._C.TensorBase.index_copy",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX2ã
index_copy_torch._C.TensorBase.index_copy_∫
index_copy_torch._C.TensorBase.index_copy_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXù
index_copy_torch._C.TensorBase.index_copy_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*8
source,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX2⁄

index_filltorch._C.TensorBase.index_fill∑

index_filltorch._C.TensorBase.index_fill",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*7
value,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXö

index_filltorch._C.TensorBase.index_fill",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*7
value,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX˜

index_filltorch._C.TensorBase.index_fill",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*ˆ
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX⁄

index_filltorch._C.TensorBase.index_fill",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*ˆ
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2‰
index_fill_torch._C.TensorBase.index_fill_π
index_fill_torch._C.TensorBase.index_fill_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*7
value,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXú
index_fill_torch._C.TensorBase.index_fill_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*7
value,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX˘
index_fill_torch._C.TensorBase.index_fill_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*ˆ
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX‹
index_fill_torch._C.TensorBase.index_fill_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*ˆ
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ù
index_select torch._C.TensorBase.index_selectÇ
index_select torch._C.TensorBase.index_select",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXÂ
index_select torch._C.TensorBase.index_select",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*7
index,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX2≈
kthvaluetorch._C.TensorBase.kthvalue€
kthvaluetorch._C.TensorBase.kthvalue"Ô
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.kthvalue*4
self*
torch._C.TensorBase"torch._C.TensorBase*#
k
builtins.int"builtins.int*'
dim
builtins.int"builtins.int *-
keepdim
builtins.bool"builtins.bool 0:overloadXº
kthvaluetorch._C.TensorBase.kthvalue"Ô
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.kthvalue*4
self*
torch._C.TensorBase"torch._C.TensorBase*#
k
builtins.int"builtins.int*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*-
keepdim
builtins.bool"builtins.bool 0:overloadX2
letorch._C.TensorBase.le«
letorch._C.TensorBase.le",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXá
letorch._C.TensorBase.le",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ˆ
le_torch._C.TensorBase.le_…
le_torch._C.TensorBase.le_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXâ
le_torch._C.TensorBase.le_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2Ï
lerptorch._C.TensorBase.lerpÉ
lerptorch._C.TensorBase.lerp",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
end,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX√
lerptorch._C.TensorBase.lerp",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
end,
torch._tensor.Tensor"torch._tensor.Tensor*˜
weightÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2Ú
lerp_torch._C.TensorBase.lerp_Ö
lerp_torch._C.TensorBase.lerp_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
end,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX≈
lerp_torch._C.TensorBase.lerp_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*5
end,
torch._tensor.Tensor"torch._tensor.Tensor*˜
weightÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2¸
lesstorch._C.TensorBase.lessÀ
lesstorch._C.TensorBase.less",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXã
lesstorch._C.TensorBase.less",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2Ç
less_torch._C.TensorBase.less_Õ
less_torch._C.TensorBase.less_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXç
less_torch._C.TensorBase.less_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2†

less_equaltorch._C.TensorBase.less_equal◊

less_equaltorch._C.TensorBase.less_equal",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXó

less_equaltorch._C.TensorBase.less_equal",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2¶
less_equal_torch._C.TensorBase.less_equal_Ÿ
less_equal_torch._C.TensorBase.less_equal_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXô
less_equal_torch._C.TensorBase.less_equal_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2◊
log_softmaxtorch._C.TensorBase.log_softmax†
log_softmaxtorch._C.TensorBase.log_softmax",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadXÉ
log_softmaxtorch._C.TensorBase.log_softmax",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX2´
logcumsumexp torch._C.TensorBase.logcumsumexp…
logcumsumexp torch._C.TensorBase.logcumsumexp",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int0:overloadX¨
logcumsumexp torch._C.TensorBase.logcumsumexp",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None0:overloadX2º	
	logsumexptorch._C.TensorBase.logsumexpÊ
	logsumexptorch._C.TensorBase.logsumexp",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ò
dimé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*-
keepdim
builtins.bool"builtins.bool 0:overloadX¶
	logsumexptorch._C.TensorBase.logsumexp",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ÿ
dimŒ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence*-
keepdim
builtins.bool"builtins.bool 0:overloadX2
lttorch._C.TensorBase.lt«
lttorch._C.TensorBase.lt",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXá
lttorch._C.TensorBase.lt",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ˆ
lt_torch._C.TensorBase.lt_…
lt_torch._C.TensorBase.lt_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXâ
lt_torch._C.TensorBase.lt_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ñ
masked_filltorch._C.TensorBase.masked_fillë
masked_filltorch._C.TensorBase.masked_fill",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mask,
torch._tensor.Tensor"torch._tensor.Tensor*7
value,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX—
masked_filltorch._C.TensorBase.masked_fill",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mask,
torch._tensor.Tensor"torch._tensor.Tensor*ˆ
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ú
masked_fill_ torch._C.TensorBase.masked_fill_ì
masked_fill_ torch._C.TensorBase.masked_fill_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mask,
torch._tensor.Tensor"torch._tensor.Tensor*7
value,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX”
masked_fill_ torch._C.TensorBase.masked_fill_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*6
mask,
torch._tensor.Tensor"torch._tensor.Tensor*ˆ
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2∞

maxtorch._C.TensorBase.maxê
maxtorch._C.TensorBase.max",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase0:overloadX…
maxtorch._C.TensorBase.max",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX•
maxtorch._C.TensorBase.max"Í
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.max*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*-
keepdim
builtins.bool"builtins.bool 0:overloadXà
maxtorch._C.TensorBase.max"Í
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.max*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*-
keepdim
builtins.bool"builtins.bool 0:overloadX2Õ
meantorch._C.TensorBase.meanÎ
meantorch._C.TensorBase.mean",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadXƒ
meantorch._C.TensorBase.mean",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ß
dimù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None*-
keepdim
builtins.bool"builtins.bool *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadXı
meantorch._C.TensorBase.mean",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ÿ
dimŒ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence*-
keepdim
builtins.bool"builtins.bool *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX2Ç	
mediantorch._C.TensorBase.medianñ
mediantorch._C.TensorBase.median",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase0:overloadXÆ
mediantorch._C.TensorBase.median"Ì
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.median*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*-
keepdim
builtins.bool"builtins.bool 0:overloadXë
mediantorch._C.TensorBase.median"Ì
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.median*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*-
keepdim
builtins.bool"builtins.bool 0:overloadX2∞

mintorch._C.TensorBase.minê
mintorch._C.TensorBase.min",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase0:overloadX…
mintorch._C.TensorBase.min",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX•
mintorch._C.TensorBase.min"Í
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.min*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*-
keepdim
builtins.bool"builtins.bool 0:overloadXà
mintorch._C.TensorBase.min"Í
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.min*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*-
keepdim
builtins.bool"builtins.bool 0:overloadX2€
modetorch._C.TensorBase.mode™
modetorch._C.TensorBase.mode"Î
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.mode*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
dim
builtins.int"builtins.int *-
keepdim
builtins.bool"builtins.bool 0:overloadXã
modetorch._C.TensorBase.mode"Î
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.mode*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*-
keepdim
builtins.bool"builtins.bool 0:overloadX2⁄	
moveaxistorch._C.TensorBase.moveaxisÛ
moveaxistorch._C.TensorBase.moveaxis",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*(
source
builtins.int"builtins.int*-
destination
builtins.int"builtins.int0:overloadXπ
moveaxistorch._C.TensorBase.moveaxis",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
source˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*è
destination˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size0:overloadX2‘	
movedimtorch._C.TensorBase.movedimÒ
movedimtorch._C.TensorBase.movedim",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*(
source
builtins.int"builtins.int*-
destination
builtins.int"builtins.int0:overloadX∑
movedimtorch._C.TensorBase.movedim",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ä
source˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*è
destination˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size0:overloadX2î
multiplytorch._C.TensorBase.multiply”
multiplytorch._C.TensorBase.multiply",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXì
multiplytorch._C.TensorBase.multiply",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ö
	multiply_torch._C.TensorBase.multiply_’
	multiply_torch._C.TensorBase.multiply_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXï
	multiply_torch._C.TensorBase.multiply_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2†	
	nanmediantorch._C.TensorBase.nanmedianú
	nanmediantorch._C.TensorBase.nanmedian",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase0:overloadX∑
	nanmediantorch._C.TensorBase.nanmedian"
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.nanmedian*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*-
keepdim
builtins.bool"builtins.bool 0:overloadXö
	nanmediantorch._C.TensorBase.nanmedian"
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.nanmedian*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*-
keepdim
builtins.bool"builtins.bool 0:overloadX2∏
nanquantiletorch._C.TensorBase.nanquantileà
nanquantiletorch._C.TensorBase.nanquantile",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*3
q,
torch._tensor.Tensor"torch._tensor.Tensor*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
keepdim
builtins.bool"builtins.bool *1
interpolation
builtins.str"builtins.str 0:overloadX¸
nanquantiletorch._C.TensorBase.nanquantile",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
q 
builtins.float"builtins.float*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
keepdim
builtins.bool"builtins.bool *1
interpolation
builtins.str"builtins.str 0:overloadX2¶
narrowtorch._C.TensorBase.narrow‰
narrowtorch._C.TensorBase.narrow",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
start,
torch._tensor.Tensor"torch._tensor.Tensor*l
length`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt0:overloadXò
narrowtorch._C.TensorBase.narrow",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*k
start`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt*l
length`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt0:overloadX2
netorch._C.TensorBase.ne«
netorch._C.TensorBase.ne",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXá
netorch._C.TensorBase.ne",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2ˆ
ne_torch._C.TensorBase.ne_…
ne_torch._C.TensorBase.ne_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXâ
ne_torch._C.TensorBase.ne_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2
newtorch._C.TensorBase.newª
newtorch._C.TensorBase.new"]
torch._C.TensorBase.Self*
torch._C.TensorBase"torch._C.TensorBase"torch._C.TensorBase*f
cls]
torch._C.TensorBase.Self*
torch._C.TensorBase"torch._C.TensorBase"torch._C.TensorBase*
args
Any*≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None 0:overloadX¨
newtorch._C.TensorBase.new"]
torch._C.TensorBase.Self*
torch._C.TensorBase"torch._C.TensorBase"torch._C.TensorBase*f
cls]
torch._C.TensorBase.Self*
torch._C.TensorBase"torch._C.TensorBase"torch._C.TensorBase*7
storage*
torch.types.Storage"torch.types.Storage0:overloadX¨
newtorch._C.TensorBase.new"]
torch._C.TensorBase.Self*
torch._C.TensorBase"torch._C.TensorBase"torch._C.TensorBase*f
cls]
torch._C.TensorBase.Self*
torch._C.TensorBase"torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX≥
newtorch._C.TensorBase.new"]
torch._C.TensorBase.Self*
torch._C.TensorBase"torch._C.TensorBase"torch._C.TensorBase*f
cls]
torch._C.TensorBase.Self*
torch._C.TensorBase"torch._C.TensorBase"torch._C.TensorBase*à
size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None 0:overloadX2å
	new_emptytorch._C.TensorBase.new_emptyÙ
	new_emptytorch._C.TensorBase.new_empty",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *[
layoutM
Union[torch._C.layout,None]"
torch._C.layout"torch._C.layout
None *≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *Y

pin_memoryG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None 0:overloadXË
	new_emptytorch._C.TensorBase.new_empty",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
size
builtins.int"builtins.int*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *[
layoutM
Union[torch._C.layout,None]"
torch._C.layout"torch._C.layout
None *≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *Y

pin_memoryG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None 0:overloadX2£
new_onestorch._C.TensorBase.new_onesö
new_onestorch._C.TensorBase.new_ones",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *3
requires_grad
builtins.bool"builtins.bool *0

pin_memory
builtins.bool"builtins.bool 0:overloadXÚ
new_onestorch._C.TensorBase.new_ones",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *[
layoutM
Union[torch._C.layout,None]"
torch._C.layout"torch._C.layout
None *≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *Y

pin_memoryG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None 0:overloadXÊ
new_onestorch._C.TensorBase.new_ones",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
size
builtins.int"builtins.int*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *[
layoutM
Union[torch._C.layout,None]"
torch._C.layout"torch._C.layout
None *≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *Y

pin_memoryG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None 0:overloadX2å
	new_zerostorch._C.TensorBase.new_zerosÙ
	new_zerostorch._C.TensorBase.new_zeros",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *[
layoutM
Union[torch._C.layout,None]"
torch._C.layout"torch._C.layout
None *≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *Y

pin_memoryG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None 0:overloadXË
	new_zerostorch._C.TensorBase.new_zeros",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
size
builtins.int"builtins.int*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *[
layoutM
Union[torch._C.layout,None]"
torch._C.layout"torch._C.layout
None *≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *Y

pin_memoryG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None 0:overloadX2™
nonzerotorch._C.TensorBase.nonzero‰
nonzerotorch._C.TensorBase.nonzero",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*J
as_tuple:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadXö
nonzerotorch._C.TensorBase.nonzero"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*H
as_tuple:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX2ö
	not_equaltorch._C.TensorBase.not_equal’
	not_equaltorch._C.TensorBase.not_equal",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXï
	not_equaltorch._C.TensorBase.not_equal",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2†

not_equal_torch._C.TensorBase.not_equal_◊

not_equal_torch._C.TensorBase.not_equal_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXó

not_equal_torch._C.TensorBase.not_equal_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2è
permutetorch._C.TensorBase.permute£
permutetorch._C.TensorBase.permute",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
dims˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size0:overloadX¿
permutetorch._C.TensorBase.permute",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
dims
builtins.int"builtins.int0:overloadX2¸
powtorch._C.TensorBase.powÃ
powtorch._C.TensorBase.pow",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*:
exponent,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXå
powtorch._C.TensorBase.pow",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*˘
exponentÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2Ç
pow_torch._C.TensorBase.pow_Œ
pow_torch._C.TensorBase.pow_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*:
exponent,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXé
pow_torch._C.TensorBase.pow_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*˘
exponentÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2˘
prodtorch._C.TensorBase.prodÎ
prodtorch._C.TensorBase.prod",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX¡
prodtorch._C.TensorBase.prod",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*-
keepdim
builtins.bool"builtins.bool *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX§
prodtorch._C.TensorBase.prod",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*-
keepdim
builtins.bool"builtins.bool *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX2¶
quantiletorch._C.TensorBase.quantileÇ
quantiletorch._C.TensorBase.quantile",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*3
q,
torch._tensor.Tensor"torch._tensor.Tensor*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
keepdim
builtins.bool"builtins.bool *1
interpolation
builtins.str"builtins.str 0:overloadXˆ
quantiletorch._C.TensorBase.quantile",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
q 
builtins.float"builtins.float*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
keepdim
builtins.bool"builtins.bool *1
interpolation
builtins.str"builtins.str 0:overloadX2œ
random_torch._C.TensorBase.random_Å
random_torch._C.TensorBase.random_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None 0:overloadX¯
random_torch._C.TensorBase.random_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
from_
builtins.int"builtins.int*L
toD
Union[builtins.int,None]
builtins.int"builtins.int
None*g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None 0:overloadXß
random_torch._C.TensorBase.random_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*$
to
builtins.int"builtins.int*g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None 0:overloadX2ö
	remaindertorch._C.TensorBase.remainder’
	remaindertorch._C.TensorBase.remainder",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXï
	remaindertorch._C.TensorBase.remainder",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2†

remainder_torch._C.TensorBase.remainder_◊

remainder_torch._C.TensorBase.remainder_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXó

remainder_torch._C.TensorBase.remainder_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2∏
repeattorch._C.TensorBase.repeatÕ
repeattorch._C.TensorBase.repeat",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*¥
repeats¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence0:overloadX¡
repeattorch._C.TensorBase.repeat",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*)
repeats
builtins.int"builtins.int0:overloadX2Ó
repeat_interleave%torch._C.TensorBase.repeat_interleaveΩ
repeat_interleave%torch._C.TensorBase.repeat_interleave",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*9
repeats,
torch._tensor.Tensor"torch._tensor.Tensor*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
output_sizeo
%Union[builtins.int,torch.SymInt,None]
builtins.int"builtins.int
torch.SymInt"torch.SymInt
None 0:overloadXÒ
repeat_interleave%torch._C.TensorBase.repeat_interleave",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*m
repeats`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
output_sizeo
%Union[builtins.int,torch.SymInt,None]
builtins.int"builtins.int
torch.SymInt"torch.SymInt
None 0:overloadX2∫
reshapetorch._C.TensorBase.reshapeÕ
reshapetorch._C.TensorBase.reshape",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*≤
shape¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence0:overloadX¡
reshapetorch._C.TensorBase.reshape",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
shape
builtins.int"builtins.int0:overloadX2™
resize_torch._C.TensorBase.resize_≈
resize_torch._C.TensorBase.resize_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*w
memory_formatb
"Union[torch._C.memory_format,None]0
torch._C.memory_format"torch._C.memory_format
None 0:overloadXπ
resize_torch._C.TensorBase.resize_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
size
builtins.int"builtins.int*w
memory_formatb
"Union[torch._C.memory_format,None]0
torch._C.memory_format"torch._C.memory_format
None 0:overloadX2¸
roundtorch._C.TensorBase.roundî
roundtorch._C.TensorBase.round",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase0:overloadX¿
roundtorch._C.TensorBase.round",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase**
decimals
builtins.int"builtins.int0:overloadX2Ç
round_torch._C.TensorBase.round_ñ
round_torch._C.TensorBase.round_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase0:overloadX¬
round_torch._C.TensorBase.round_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase**
decimals
builtins.int"builtins.int0:overloadX2≤
scattertorch._C.TensorBase.scatterØ
scattertorch._C.TensorBase.scatter",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*5
src,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXŸ
scattertorch._C.TensorBase.scatter",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*5
src,
torch._tensor.Tensor"torch._tensor.Tensor*(
reduce
builtins.str"builtins.str0:overloadXõ
scattertorch._C.TensorBase.scatter",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*ˆ
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex*(
reduce
builtins.str"builtins.str0:overloadXí
scattertorch._C.TensorBase.scatter",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*5
src,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXÒ
scattertorch._C.TensorBase.scatter",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*ˆ
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX‘
scattertorch._C.TensorBase.scatter",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*ˆ
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2–
scatter_torch._C.TensorBase.scatter_±
scatter_torch._C.TensorBase.scatter_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*5
src,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX€
scatter_torch._C.TensorBase.scatter_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*5
src,
torch._tensor.Tensor"torch._tensor.Tensor*(
reduce
builtins.str"builtins.str0:overloadXù
scatter_torch._C.TensorBase.scatter_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*ˆ
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex*(
reduce
builtins.str"builtins.str0:overloadXÛ
scatter_torch._C.TensorBase.scatter_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*ˆ
valueÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2Ö
scatter_addtorch._C.TensorBase.scatter_add∑
scatter_addtorch._C.TensorBase.scatter_add",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*5
src,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXö
scatter_addtorch._C.TensorBase.scatter_add",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*5
src,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX2ù
selecttorch._C.TensorBase.select™
selecttorch._C.TensorBase.select",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*k
index`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt0:overloadX…
selecttorch._C.TensorBase.select",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*'
index
builtins.int"builtins.int0:overloadX2¢
set_torch._C.TensorBase.set_ﬂ	
set_torch._C.TensorBase.set_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
storage˙
RUnion[torch.types.Storage,torch.storage.TypedStorage,torch.storage.UntypedStorage]*
torch.types.Storage"torch.types.Storage8
torch.storage.TypedStorage"torch.storage.TypedStorage<
torch.storage.UntypedStorage"torch.storage.UntypedStorage*(
offset
builtins.int"builtins.int*à
size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*ä
stride˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size0:overloadXù
set_torch._C.TensorBase.set_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
storage˙
RUnion[torch.types.Storage,torch.storage.TypedStorage,torch.storage.UntypedStorage]*
torch.types.Storage"torch.types.Storage8
torch.storage.TypedStorage"torch.storage.TypedStorage<
torch.storage.UntypedStorage"torch.storage.UntypedStorage0:overloadX2Ë
sizetorch._C.TensorBase.sizeô
sizetorch._C.TensorBase.size"
torch._C.Size"torch._C.Size*4
self*
torch._C.TensorBase"torch._C.TensorBase*
dim
None 0:overloadX©
sizetorch._C.TensorBase.size"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int0:overloadX2ø
softmaxtorch._C.TensorBase.softmaxò
softmaxtorch._C.TensorBase.softmax",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX˚
softmaxtorch._C.TensorBase.softmax",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX2Ã
sorttorch._C.TensorBase.sortÇ
sorttorch._C.TensorBase.sort"Î
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.sort*4
self*
torch._C.TensorBase"torch._C.TensorBase*S
stableG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*'
dim
builtins.int"builtins.int *0

descending
builtins.bool"builtins.bool 0:overloadX≠
sorttorch._C.TensorBase.sort"Î
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.sort*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
dim
builtins.int"builtins.int *0

descending
builtins.bool"builtins.bool 0:overloadX„
sorttorch._C.TensorBase.sort"Î
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.sort*4
self*
torch._C.TensorBase"torch._C.TensorBase*S
stableG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*0

descending
builtins.bool"builtins.bool 0:overloadXé
sorttorch._C.TensorBase.sort"Î
;TypeAlias[Tuple[torch._tensor.Tensor,torch._tensor.Tensor]]ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor"torch.return_types.sort*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*0

descending
builtins.bool"builtins.bool 0:overloadX2¢
splittorch._C.TensorBase.split•
splittorch._C.TensorBase.split"f
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*4
self*
torch._C.TensorBase"torch._C.TensorBase*,

split_size
builtins.int"builtins.int*'
dim
builtins.int"builtins.int 0:overloadX’
splittorch._C.TensorBase.split"f
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*4
self*
torch._C.TensorBase"torch._C.TensorBase*\

split_sizeL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*'
dim
builtins.int"builtins.int 0:overloadX2è
squeezetorch._C.TensorBase.squeezeò
squeezetorch._C.TensorBase.squeeze",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase0:overloadXø
squeezetorch._C.TensorBase.squeeze",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int0:overloadX¢
squeezetorch._C.TensorBase.squeeze",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size0:overloadXø
squeezetorch._C.TensorBase.squeeze",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int0:overloadX¢
squeezetorch._C.TensorBase.squeeze",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None0:overloadX2õ
squeeze_torch._C.TensorBase.squeeze_ö
squeeze_torch._C.TensorBase.squeeze_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase0:overloadX¡
squeeze_torch._C.TensorBase.squeeze_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int0:overloadX§
squeeze_torch._C.TensorBase.squeeze_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size0:overloadX¡
squeeze_torch._C.TensorBase.squeeze_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int0:overloadX§
squeeze_torch._C.TensorBase.squeeze_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None0:overloadX2Û
stdtorch._C.TensorBase.stdô
stdtorch._C.TensorBase.std",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ß
dimù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None*.
unbiased
builtins.bool"builtins.bool *-
keepdim
builtins.bool"builtins.bool 0:overloadX˙
stdtorch._C.TensorBase.std",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*©
dimù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *å

correction˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None *-
keepdim
builtins.bool"builtins.bool 0:overloadX¿
stdtorch._C.TensorBase.std",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*.
unbiased
builtins.bool"builtins.bool 0:overloadX 
stdtorch._C.TensorBase.std",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ÿ
dimŒ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence*.
unbiased
builtins.bool"builtins.bool *-
keepdim
builtins.bool"builtins.bool 0:overloadX©
stdtorch._C.TensorBase.std",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ÿ
dimŒ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence*å

correction˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None *-
keepdim
builtins.bool"builtins.bool 0:overloadX2¢
stridetorch._C.TensorBase.strideÀ
stridetorch._C.TensorBase.stride"L
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*
dim
None 0:overloadX≠
stridetorch._C.TensorBase.stride"
builtins.int"builtins.int*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int0:overloadX2ä
subtracttorch._C.TensorBase.subtractŒ
subtracttorch._C.TensorBase.subtract",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex 0:overloadXé
subtracttorch._C.TensorBase.subtract",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex*¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex 0:overloadX2ê
	subtract_torch._C.TensorBase.subtract_–
	subtract_torch._C.TensorBase.subtract_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex 0:overloadXê
	subtract_torch._C.TensorBase.subtract_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex*¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex 0:overloadX2≈
sumtorch._C.TensorBase.sumÈ
sumtorch._C.TensorBase.sum",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX¬
sumtorch._C.TensorBase.sum",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ß
dimù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None*-
keepdim
builtins.bool"builtins.bool *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadXÛ
sumtorch._C.TensorBase.sum",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ÿ
dimŒ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence*-
keepdim
builtins.bool"builtins.bool *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None 0:overloadX2–
sum_to_sizetorch._C.TensorBase.sum_to_size‘
sum_to_sizetorch._C.TensorBase.sum_to_size",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence0:overloadX»
sum_to_sizetorch._C.TensorBase.sum_to_size",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
size
builtins.int"builtins.int0:overloadX2∑	
tensor_split torch._C.TensorBase.tensor_split∫
tensor_split torch._C.TensorBase.tensor_split"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*¥
indices¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*'
dim
builtins.int"builtins.int 0:overloadX—
tensor_split torch._C.TensorBase.tensor_split"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*L
tensor_indices_or_sections,
torch._tensor.Tensor"torch._tensor.Tensor*'
dim
builtins.int"builtins.int 0:overloadXÛ
tensor_split torch._C.TensorBase.tensor_split"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*n
sections`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt*'
dim
builtins.int"builtins.int 0:overloadX2¶
tiletorch._C.TensorBase.tile∆
tiletorch._C.TensorBase.tile",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
dims¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence0:overloadX∫
tiletorch._C.TensorBase.tile",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
dims
builtins.int"builtins.int0:overloadX2Œ
totorch._C.TensorBase.toî
totorch._C.TensorBase.to",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*+
dtype 
torch._C.dtype"torch._C.dtype*2
non_blocking
builtins.bool"builtins.bool **
copy
builtins.bool"builtins.bool *w
memory_formatb
"Union[torch._C.memory_format,None]0
torch._C.memory_format"torch._C.memory_format
None 0:overloadXı
totorch._C.TensorBase.to",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *2
non_blocking
builtins.bool"builtins.bool **
copy
builtins.bool"builtins.bool *w
memory_formatb
"Union[torch._C.memory_format,None]0
torch._C.memory_format"torch._C.memory_format
None 0:overloadX†
totorch._C.TensorBase.to",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor*2
non_blocking
builtins.bool"builtins.bool **
copy
builtins.bool"builtins.bool *w
memory_formatb
"Union[torch._C.memory_format,None]0
torch._C.memory_format"torch._C.memory_format
None 0:overloadX2¸
	to_sparsetorch._C.TensorBase.to_sparseÇ
	to_sparsetorch._C.TensorBase.to_sparse",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*[
layoutM
Union[torch._C.layout,None]"
torch._C.layout"torch._C.layout
None *Ø
	blocksizeù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *U
	dense_dimD
Union[builtins.int,None]
builtins.int"builtins.int
None 0:overloadX 
	to_sparsetorch._C.TensorBase.to_sparse",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*,

sparse_dim
builtins.int"builtins.int0:overloadX2Œ
	transposetorch._C.TensorBase.transposeÏ
	transposetorch._C.TensorBase.transpose",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
dim0
builtins.int"builtins.int*&
dim1
builtins.int"builtins.int0:overloadX≤
	transposetorch._C.TensorBase.transpose",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*à
dim0~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*à
dim1~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None0:overloadX2¨
typetorch._C.TensorBase.typeÕ
typetorch._C.TensorBase.type"
builtins.str"builtins.str*4
self*
torch._C.TensorBase"torch._C.TensorBase*
dtype
None *2
non_blocking
builtins.bool"builtins.bool 0:overloadXπ
typetorch._C.TensorBase.type",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*q
dtypef
"Union[builtins.str,torch._C.dtype]
builtins.str"builtins.str 
torch._C.dtype"torch._C.dtype*2
non_blocking
builtins.bool"builtins.bool 0:overloadX2˘
unbindtorch._C.TensorBase.unbind˜
unbindtorch._C.TensorBase.unbind"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*'
dim
builtins.int"builtins.int 0:overloadXÿ
unbindtorch._C.TensorBase.unbind"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None0:overloadX2‡
	unflattentorch._C.TensorBase.unflatten∏
	unflattentorch._C.TensorBase.unflatten",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*á
dim~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None*≤
sizes¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence*⁄
namesŒ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence0:overloadX¯
	unflattentorch._C.TensorBase.unflatten",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*%
dim
builtins.int"builtins.int*≤
sizes¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence0:overloadX2Û
vartorch._C.TensorBase.varô
vartorch._C.TensorBase.var",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ß
dimù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None*.
unbiased
builtins.bool"builtins.bool *-
keepdim
builtins.bool"builtins.bool 0:overloadX˙
vartorch._C.TensorBase.var",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*©
dimù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *å

correction˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None *-
keepdim
builtins.bool"builtins.bool 0:overloadX¿
vartorch._C.TensorBase.var",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*.
unbiased
builtins.bool"builtins.bool 0:overloadX 
vartorch._C.TensorBase.var",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ÿ
dimŒ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence*.
unbiased
builtins.bool"builtins.bool *-
keepdim
builtins.bool"builtins.bool 0:overloadX©
vartorch._C.TensorBase.var",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ÿ
dimŒ
;typing.Sequence[Union[builtins.str,builtins.ellipsis,None]]~
*Union[builtins.str,builtins.ellipsis,None]
builtins.str"builtins.str&
builtins.ellipsis"builtins.ellipsis
None"typing.Sequence*å

correction˘
XUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex,None]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex
None *-
keepdim
builtins.bool"builtins.bool 0:overloadX2Ë
viewtorch._C.TensorBase.viewø
viewtorch._C.TensorBase.view",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*+
dtype 
torch._C.dtype"torch._C.dtype0:overloadX∆
viewtorch._C.TensorBase.view",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*±
size¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence0:overloadX∫
viewtorch._C.TensorBase.view",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*&
size
builtins.int"builtins.int0:overloadX2¸
vsplittorch._C.TensorBase.vsplit˙
vsplittorch._C.TensorBase.vsplit"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase**
sections
builtins.int"builtins.int0:overloadX‹
vsplittorch._C.TensorBase.vsplit"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*ã
indices˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size0:overloadX˘
vsplittorch._C.TensorBase.vsplit"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*4
self*
torch._C.TensorBase"torch._C.TensorBase*)
indices
builtins.int"builtins.int0:overloadX2¸
wheretorch._C.TensorBase.whereä
wheretorch._C.TensorBase.where",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*;
	condition,
torch._tensor.Tensor"torch._tensor.Tensor*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadX 
wheretorch._C.TensorBase.where",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*;
	condition,
torch._tensor.Tensor"torch._tensor.Tensor*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2Ç
xlogytorch._C.TensorBase.xlogyÕ
xlogytorch._C.TensorBase.xlogy",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXç
xlogytorch._C.TensorBase.xlogy",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX2à
xlogy_torch._C.TensorBase.xlogy_œ
xlogy_torch._C.TensorBase.xlogy_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*7
other,
torch._tensor.Tensor"torch._tensor.Tensor0:overloadXè
xlogy_torch._C.TensorBase.xlogy_",
torch._tensor.Tensor"torch._tensor.Tensor*4
self*
torch._C.TensorBase"torch._C.TensorBase*ˆ
otherÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex0:overloadX@btorch._C._TensorMetarR
requires_grad!torch._C.TensorBase.requires_grad
builtins.bool"builtins.boolrP
retains_grad torch._C.TensorBase.retains_grad
builtins.bool"builtins.boolrB
shapetorch._C.TensorBase.shape
torch._C.Size"torch._C.SizerN
datatorch._C.TensorBase.data,
torch._tensor.Tensor"torch._tensor.Tensorrn
namestorch._C.TensorBase.namesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrH
devicetorch._C.TensorBase.device"
torch._C.device"torch._C.devicerD
dtypetorch._C.TensorBase.dtype 
torch._C.dtype"torch._C.dtyperH
layouttorch._C.TensorBase.layout"
torch._C.layout"torch._C.layoutrN
realtorch._C.TensorBase.real,
torch._tensor.Tensor"torch._tensor.TensorrN
imagtorch._C.TensorBase.imag,
torch._tensor.Tensor"torch._tensor.TensorrH
Ttorch._C.TensorBase.T,
torch._tensor.Tensor"torch._tensor.TensorrH
Htorch._C.TensorBase.H,
torch._tensor.Tensor"torch._tensor.TensorrJ
mTtorch._C.TensorBase.mT,
torch._tensor.Tensor"torch._tensor.TensorrJ
mHtorch._C.TensorBase.mH,
torch._tensor.Tensor"torch._tensor.Tensorr>
ndimtorch._C.TensorBase.ndim
builtins.int"builtins.intrH
	output_nrtorch._C.TensorBase.output_nr
builtins.int"builtins.intrF
_versiontorch._C.TensorBase._version
builtins.int"builtins.intrÄ
_basetorch._C.TensorBase._base\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
NonerB
_cdatatorch._C.TensorBase._cdata
builtins.int"builtins.intrì
grad_fntorch._C.TensorBase.grad_fnk
%Union[torch.autograd.graph.Node,None]6
torch.autograd.graph.Node"torch.autograd.graph.Node
Noner1
_grad_fntorch._C.TensorBase._grad_fn
AnyrÄ
_gradtorch._C.TensorBase._grad\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
Noner~
gradtorch._C.TensorBase.grad\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
Noner»
_backward_hooks#torch._C.TensorBase._backward_hooksè
GUnion[builtins.dict[builtins.int,CallableType[builtins.function]],None]∑
;builtins.dict[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict
NonerB
nbytestorch._C.TensorBase.nbytes
builtins.int"builtins.intrF
itemsizetorch._C.TensorBase.itemsize
builtins.int"builtins.intrn
_has_symbolic_sizes_strides/torch._C.TensorBase._has_symbolic_sizes_strides
builtins.bool"builtins.boolrD
is_cputorch._C.TensorBase.is_cpu
builtins.bool"builtins.boolrF
is_cudatorch._C.TensorBase.is_cuda
builtins.bool"builtins.boolrD
is_iputorch._C.TensorBase.is_ipu
builtins.bool"builtins.boolrF
is_leaftorch._C.TensorBase.is_leaf
builtins.bool"builtins.boolrF
is_maiatorch._C.TensorBase.is_maia
builtins.bool"builtins.boolrF
is_metatorch._C.TensorBase.is_meta
builtins.bool"builtins.boolrJ
	is_mkldnntorch._C.TensorBase.is_mkldnn
builtins.bool"builtins.boolrD
is_mpstorch._C.TensorBase.is_mps
builtins.bool"builtins.boolrF
is_mtiatorch._C.TensorBase.is_mtia
builtins.bool"builtins.boolrJ
	is_nestedtorch._C.TensorBase.is_nested
builtins.bool"builtins.boolrP
is_quantized torch._C.TensorBase.is_quantized
builtins.bool"builtins.boolrJ
	is_sparsetorch._C.TensorBase.is_sparse
builtins.bool"builtins.boolrR
is_sparse_csr!torch._C.TensorBase.is_sparse_csr
builtins.bool"builtins.boolrJ
	is_vulkantorch._C.TensorBase.is_vulkan
builtins.bool"builtins.boolb
"_cuda_CUDAAllocator_AllocatorState+torch._C._cuda_CUDAAllocator_AllocatorState"builtins.objectD
_cuda_CUDAAllocatortorch._C._cuda_CUDAAllocator"builtins.objectì
_CudaDevicePropertiestorch._C._CudaDeviceProperties"builtins.objectrI
name#torch._C._CudaDeviceProperties.name
builtins.str"builtins.strrK
major$torch._C._CudaDeviceProperties.major
builtins.int"builtins.intrK
minor$torch._C._CudaDeviceProperties.minor
builtins.int"builtins.intrk
multi_processor_count4torch._C._CudaDeviceProperties.multi_processor_count
builtins.int"builtins.intrY
total_memory+torch._C._CudaDeviceProperties.total_memory
builtins.int"builtins.intr[
is_integrated,torch._C._CudaDeviceProperties.is_integrated
builtins.int"builtins.intre
is_multi_gpu_board1torch._C._CudaDeviceProperties.is_multi_gpu_board
builtins.int"builtins.intr
max_threads_per_multi_processor>torch._C._CudaDeviceProperties.max_threads_per_multi_processor
builtins.int"builtins.intrW
gcnArchName*torch._C._CudaDeviceProperties.gcnArchName
builtins.str"builtins.strØ
_SDPAParamstorch._C._SDPAParams"builtins.object*ﬂ
__init__torch._C._SDPAParams.__init__"
None*6
self,
torch._C._SDPAParams"torch._C._SDPAParams*7
query,
torch._tensor.Tensor"torch._tensor.Tensor*5
key,
torch._tensor.Tensor"torch._tensor.Tensor*7
value,
torch._tensor.Tensor"torch._tensor.Tensor*k
	attn_mask\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*-
dropout 
builtins.float"builtins.float*-
	is_causal
builtins.bool"builtins.boolrQ
querytorch._C._SDPAParams.query,
torch._tensor.Tensor"torch._tensor.TensorrM
keytorch._C._SDPAParams.key,
torch._tensor.Tensor"torch._tensor.TensorrQ
valuetorch._C._SDPAParams.value,
torch._tensor.Tensor"torch._tensor.Tensorrâ
	attn_masktorch._C._SDPAParams.attn_mask\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
NonerI
dropouttorch._C._SDPAParams.dropout 
builtins.float"builtins.floatrK
	is_causaltorch._C._SDPAParams.is_causal
builtins.bool"builtins.bool¡
_SDPBackendtorch._C._SDPBackend"	enum.EnumHrA
ERRORtorch._C._SDPBackend.ERROR
builtins.int"builtins.intr?
MATHtorch._C._SDPBackend.MATH
builtins.int"builtins.intrU
FLASH_ATTENTION$torch._C._SDPBackend.FLASH_ATTENTION
builtins.int"builtins.intr]
EFFICIENT_ATTENTION(torch._C._SDPBackend.EFFICIENT_ATTENTION
builtins.int"builtins.intrU
CUDNN_ATTENTION$torch._C._SDPBackend.CUDNN_ATTENTION
builtins.int"builtins.intñ
_CudaStreamBasetorch._C._CudaStreamBase"torch._C.Stream*ä
__new__ torch._C._CudaStreamBase.__new__"4
torch._C._CudaStreamBase"torch._C._CudaStreamBase*h
self^
Type[torch._C._CudaStreamBase]4
torch._C._CudaStreamBase"torch._C._CudaStreamBase"type*,
priority
builtins.int"builtins.int *-
	stream_id
builtins.int"builtins.int *0
device_index
builtins.int"builtins.int *.

stream_ptr
builtins.int"builtins.int *á
querytorch._C._CudaStreamBase.query"
builtins.bool"builtins.bool*>
self4
torch._C._CudaStreamBase"torch._C._CudaStreamBase*}
synchronize$torch._C._CudaStreamBase.synchronize"
None*>
self4
torch._C._CudaStreamBase"torch._C._CudaStreamBase*€
priority_range'torch._C._CudaStreamBase.priority_range"`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*>
self4
torch._C._CudaStreamBase"torch._C._CudaStreamBaserM
	stream_id"torch._C._CudaStreamBase.stream_id
builtins.int"builtins.intrS
device_index%torch._C._CudaStreamBase.device_index
builtins.int"builtins.intrQ
device_type$torch._C._CudaStreamBase.device_type
builtins.int"builtins.intrM
devicetorch._C._CudaStreamBase.device"
torch._C.device"torch._C.devicerQ
cuda_stream$torch._C._CudaStreamBase.cuda_stream
builtins.int"builtins.intrK
priority!torch._C._CudaStreamBase.priority
builtins.int"builtins.int‘
_CudaEventBasetorch._C._CudaEventBase"builtins.object*›
__new__torch._C._CudaEventBase.__new__"2
torch._C._CudaEventBase"torch._C._CudaEventBase*d
cls[
Type[torch._C._CudaEventBase]2
torch._C._CudaEventBase"torch._C._CudaEventBase"type*3
enable_timing
builtins.bool"builtins.bool *.
blocking
builtins.bool"builtins.bool *2
interprocess
builtins.bool"builtins.bool *«
from_ipc_handle'torch._C._CudaEventBase.from_ipc_handle"2
torch._C._CudaEventBase"torch._C._CudaEventBase*d
cls[
Type[torch._C._CudaEventBase]2
torch._C._CudaEventBase"torch._C._CudaEventBase"type*.
device"
torch._C.device"torch._C.device*0

ipc_handle 
builtins.bytes"builtins.bytes0:classmethodp*≤
recordtorch._C._CudaEventBase.record"
None*<
self2
torch._C._CudaEventBase"torch._C._CudaEventBase*@
stream4
torch._C._CudaStreamBase"torch._C._CudaStreamBase*Æ
waittorch._C._CudaEventBase.wait"
None*<
self2
torch._C._CudaEventBase"torch._C._CudaEventBase*@
stream4
torch._C._CudaStreamBase"torch._C._CudaStreamBase*Ñ
querytorch._C._CudaEventBase.query"
builtins.bool"builtins.bool*<
self2
torch._C._CudaEventBase"torch._C._CudaEventBase*”
elapsed_time$torch._C._CudaEventBase.elapsed_time" 
builtins.float"builtins.float*<
self2
torch._C._CudaEventBase"torch._C._CudaEventBase*=
other2
torch._C._CudaEventBase"torch._C._CudaEventBase*z
synchronize#torch._C._CudaEventBase.synchronize"
None*<
self2
torch._C._CudaEventBase"torch._C._CudaEventBase*ê

ipc_handle"torch._C._CudaEventBase.ipc_handle" 
builtins.bytes"builtins.bytes*<
self2
torch._C._CudaEventBase"torch._C._CudaEventBaserL
devicetorch._C._CudaEventBase.device"
torch._C.device"torch._C.devicerN

cuda_event"torch._C._CudaEventBase.cuda_event
builtins.int"builtins.intº


_CUDAGraphtorch._C._CUDAGraph"builtins.object*÷
capture_begin!torch._C._CUDAGraph.capture_begin"
None*4
self*
torch._C._CUDAGraph"torch._C._CUDAGraph*©
poolú
,Union[Tuple[builtins.int,builtins.int],None]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
None *6
capture_error_mode
builtins.str"builtins.str *n
capture_endtorch._C._CUDAGraph.capture_end"
None*4
self*
torch._C._CUDAGraph"torch._C._CUDAGraph*†
register_generator_state,torch._C._CUDAGraph.register_generator_state"
None*4
self*
torch._C._CUDAGraph"torch._C._CUDAGraph*
	Generator
Any*d
replaytorch._C._CUDAGraph.replay"
None*4
self*
torch._C._CUDAGraph"torch._C._CUDAGraph*b
resettorch._C._CUDAGraph.reset"
None*4
self*
torch._C._CUDAGraph"torch._C._CUDAGraph*∏
pooltorch._C._CUDAGraph.pool"`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*4
self*
torch._C._CUDAGraph"torch._C._CUDAGraph*z
enable_debug_mode%torch._C._CUDAGraph.enable_debug_mode"
None*4
self*
torch._C._CUDAGraph"torch._C._CUDAGraph*ö

debug_dumptorch._C._CUDAGraph.debug_dump"
None*4
self*
torch._C._CUDAGraph"torch._C._CUDAGraph*,

debug_path
builtins.str"builtins.strë
_XpuDevicePropertiestorch._C._XpuDeviceProperties"builtins.objectrH
name"torch._C._XpuDeviceProperties.name
builtins.str"builtins.strrZ
platform_name+torch._C._XpuDeviceProperties.platform_name
builtins.str"builtins.strrL
vendor$torch._C._XpuDeviceProperties.vendor
builtins.str"builtins.strr\
driver_version,torch._C._XpuDeviceProperties.driver_version
builtins.str"builtins.strrN
version%torch._C._XpuDeviceProperties.version
builtins.str"builtins.strrX
total_memory*torch._C._XpuDeviceProperties.total_memory
builtins.int"builtins.intrb
max_compute_units/torch._C._XpuDeviceProperties.max_compute_units
builtins.int"builtins.intrX
gpu_eu_count*torch._C._XpuDeviceProperties.gpu_eu_count
builtins.int"builtins.intrd
gpu_subslice_count0torch._C._XpuDeviceProperties.gpu_subslice_count
builtins.int"builtins.intrf
max_work_group_size1torch._C._XpuDeviceProperties.max_work_group_size
builtins.int"builtins.intrd
max_num_sub_groups0torch._C._XpuDeviceProperties.max_num_sub_groups
builtins.int"builtins.intrå
sub_group_sizes-torch._C._XpuDeviceProperties.sub_group_sizesJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listrR
has_fp16&torch._C._XpuDeviceProperties.has_fp16
builtins.bool"builtins.boolrR
has_fp64&torch._C._XpuDeviceProperties.has_fp64
builtins.bool"builtins.boolrZ
has_atomic64*torch._C._XpuDeviceProperties.has_atomic64
builtins.bool"builtins.boolrH
type"torch._C._XpuDeviceProperties.type
builtins.str"builtins.strû

_XpuStreamBasetorch._C._XpuStreamBase"torch._C.Stream*Ñ
__new__torch._C._XpuStreamBase.__new__"2
torch._C._XpuStreamBase"torch._C._XpuStreamBase*d
cls[
Type[torch._C._XpuStreamBase]2
torch._C._XpuStreamBase"torch._C._XpuStreamBase"type*,
priority
builtins.int"builtins.int *-
	stream_id
builtins.int"builtins.int *0
device_index
builtins.int"builtins.int */
device_type
builtins.int"builtins.int *Ñ
querytorch._C._XpuStreamBase.query"
builtins.bool"builtins.bool*<
self2
torch._C._XpuStreamBase"torch._C._XpuStreamBase*z
synchronize#torch._C._XpuStreamBase.synchronize"
None*<
self2
torch._C._XpuStreamBase"torch._C._XpuStreamBase*z
priority_range&torch._C._XpuStreamBase.priority_range".
builtins.tuple[Any]
Any"builtins.tuple0:staticmethodhrL
	stream_id!torch._C._XpuStreamBase.stream_id
builtins.int"builtins.intrR
device_index$torch._C._XpuStreamBase.device_index
builtins.int"builtins.intrP
device_type#torch._C._XpuStreamBase.device_type
builtins.int"builtins.intrL
devicetorch._C._XpuStreamBase.device"
torch._C.device"torch._C.devicerN

sycl_queue"torch._C._XpuStreamBase.sycl_queue
builtins.int"builtins.intrJ
priority torch._C._XpuStreamBase.priority
builtins.int"builtins.intÚ	
_XpuEventBasetorch._C._XpuEventBase"builtins.object*Û
__new__torch._C._XpuEventBase.__new__"0
torch._C._XpuEventBase"torch._C._XpuEventBase*a
clsX
Type[torch._C._XpuEventBase]0
torch._C._XpuEventBase"torch._C._XpuEventBase"type*3
enable_timing
builtins.bool"builtins.bool *´
recordtorch._C._XpuEventBase.record"
None*:
self0
torch._C._XpuEventBase"torch._C._XpuEventBase*<
stream0
torch._C._XpuEventBase"torch._C._XpuEventBase*©
waittorch._C._XpuEventBase.wait"
None*:
self0
torch._C._XpuEventBase"torch._C._XpuEventBase*>
stream2
torch._C._XpuStreamBase"torch._C._XpuStreamBase*Å
querytorch._C._XpuEventBase.query"
builtins.bool"builtins.bool*:
self0
torch._C._XpuEventBase"torch._C._XpuEventBase*Œ
elapsed_time#torch._C._XpuEventBase.elapsed_time" 
builtins.float"builtins.float*:
self0
torch._C._XpuEventBase"torch._C._XpuEventBase*;
other0
torch._C._XpuEventBase"torch._C._XpuEventBase*w
synchronize"torch._C._XpuEventBase.synchronize"
None*:
self0
torch._C._XpuEventBase"torch._C._XpuEventBaserK
devicetorch._C._XpuEventBase.device"
torch._C.device"torch._C.devicerM

sycl_event!torch._C._XpuEventBase.sycl_event
builtins.int"builtins.int˝
TracingStatetorch._C.TracingState"builtins.object*†

push_scope torch._C.TracingState.push_scope"
None*8
self.
torch._C.TracingState"torch._C.TracingState*,

scope_name
builtins.str"builtins.str*p
	pop_scopetorch._C.TracingState.pop_scope"
None*8
self.
torch._C.TracingState"torch._C.TracingState*å
current_scope#torch._C.TracingState.current_scope"
builtins.str"builtins.str*8
self.
torch._C.TracingState"torch._C.TracingState*ù
	set_graphtorch._C.TracingState.set_graph"
None*8
self.
torch._C.TracingState"torch._C.TracingState*+
graph 
torch._C.Graph"torch._C.Graph*Ä
graphtorch._C.TracingState.graph" 
torch._C.Graph"torch._C.Graph*8
self.
torch._C.TracingState"torch._C.TracingState*
IValuetorch._C.IValue"builtins.object†

JitTypetorch._C.JitType"builtins.object*¨
isSubtypeOftorch._C.JitType.isSubtypeOf"
builtins.bool"builtins.bool*.
self$
torch._C.JitType"torch._C.JitType*/
other$
torch._C.JitType"torch._C.JitType*¨

with_dtypetorch._C.JitType.with_dtype"$
torch._C.JitType"torch._C.JitType*.
self$
torch._C.JitType"torch._C.JitType*+
dtype 
torch._C.dtype"torch._C.dtype*ã

with_sizestorch._C.JitType.with_sizes"$
torch._C.JitType"torch._C.JitType*.
self$
torch._C.JitType"torch._C.JitType*â
sizes~
'builtins.list[Union[builtins.int,None]]D
Union[builtins.int,None]
builtins.int"builtins.int
None"builtins.list*k
kindtorch._C.JitType.kind"
builtins.str"builtins.str*.
self$
torch._C.JitType"torch._C.JitType*ü

scalarTypetorch._C.JitType.scalarType"D
Union[builtins.str,None]
builtins.str"builtins.str
None*.
self$
torch._C.JitType"torch._C.JitType*á
getElementTypetorch._C.JitType.getElementType"$
torch._C.JitType"torch._C.JitType*.
self$
torch._C.JitType"torch._C.JitType*õ
dtypetorch._C.JitType.dtype"J
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None*.
self$
torch._C.JitType"torch._C.JitTyperO
annotation_strtorch._C.JitType.annotation_str
builtins.str"builtins.str®
InferredTypetorch._C.InferredType"builtins.object*Â
__init__torch._C.InferredType.__init__"
None*8
self.
torch._C.InferredType"torch._C.InferredType*u
argl
$Union[torch._C.JitType,builtins.str]$
torch._C.JitType"torch._C.JitType
builtins.str"builtins.str*Ç
typetorch._C.InferredType.type"$
torch._C.JitType"torch._C.JitType*8
self.
torch._C.InferredType"torch._C.InferredType*Ç
successtorch._C.InferredType.success"
builtins.bool"builtins.bool*8
self.
torch._C.InferredType"torch._C.InferredType*~
reasontorch._C.InferredType.reason"
builtins.str"builtins.str*8
self.
torch._C.InferredType"torch._C.InferredTypeÇ
AnyTypetorch._C.AnyType"torch._C.JitType*S
gettorch._C.AnyType.get"$
torch._C.AnyType"torch._C.AnyType0:staticmethodhá
NoneTypetorch._C.NoneType"torch._C.JitType*V
gettorch._C.NoneType.get"&
torch._C.NoneType"torch._C.NoneType0:staticmethodhá
BoolTypetorch._C.BoolType"torch._C.JitType*V
gettorch._C.BoolType.get"&
torch._C.BoolType"torch._C.BoolType0:staticmethodhå
	FloatTypetorch._C.FloatType"torch._C.JitType*Y
gettorch._C.FloatType.get"(
torch._C.FloatType"torch._C.FloatType0:staticmethodhñ
ComplexTypetorch._C.ComplexType"torch._C.JitType*_
gettorch._C.ComplexType.get",
torch._C.ComplexType"torch._C.ComplexType0:staticmethodhÇ
IntTypetorch._C.IntType"torch._C.JitType*S
gettorch._C.IntType.get"$
torch._C.IntType"torch._C.IntType0:staticmethodhë

SymIntTypetorch._C.SymIntType"torch._C.JitType*\
gettorch._C.SymIntType.get"*
torch._C.SymIntType"torch._C.SymIntType0:staticmethodhñ
SymBoolTypetorch._C.SymBoolType"torch._C.JitType*_
gettorch._C.SymBoolType.get",
torch._C.SymBoolType"torch._C.SymBoolType0:staticmethodhë

NumberTypetorch._C.NumberType"torch._C.JitType*\
gettorch._C.NumberType.get"*
torch._C.NumberType"torch._C.NumberType0:staticmethodhë

StringTypetorch._C.StringType"torch._C.JitType*\
gettorch._C.StringType.get"*
torch._C.StringType"torch._C.StringType0:staticmethodh†
DeviceObjTypetorch._C.DeviceObjType"torch._C.JitType*e
gettorch._C.DeviceObjType.get"0
torch._C.DeviceObjType"torch._C.DeviceObjType0:staticmethodh•
_GeneratorTypetorch._C._GeneratorType"torch._C.JitType*h
gettorch._C._GeneratorType.get"2
torch._C._GeneratorType"torch._C._GeneratorType0:staticmethodh†
StreamObjTypetorch._C.StreamObjType"torch._C.JitType*e
gettorch._C.StreamObjType.get"0
torch._C.StreamObjType"torch._C.StreamObjType0:staticmethodh®
ListTypetorch._C.ListType"torch._C.JitType*è
__init__torch._C.ListType.__init__"
None*0
self&
torch._C.ListType"torch._C.ListType*+
a$
torch._C.JitType"torch._C.JitType*ä
getElementType torch._C.ListType.getElementType"$
torch._C.JitType"torch._C.JitType*0
self&
torch._C.ListType"torch._C.ListType*\
ofIntstorch._C.ListType.ofInts"&
torch._C.ListType"torch._C.ListType0:staticmethodh*b
	ofTensorstorch._C.ListType.ofTensors"&
torch._C.ListType"torch._C.ListType0:staticmethodh*`
ofFloatstorch._C.ListType.ofFloats"&
torch._C.ListType"torch._C.ListType0:staticmethodh*p
ofComplexDoubles"torch._C.ListType.ofComplexDoubles"&
torch._C.ListType"torch._C.ListType0:staticmethodh*^
ofBoolstorch._C.ListType.ofBools"&
torch._C.ListType"torch._C.ListType0:staticmethodh*b
	ofStringstorch._C.ListType.ofStrings"&
torch._C.ListType"torch._C.ListType0:staticmethodhÇ
DictTypetorch._C.DictType"torch._C.JitType*¬
__init__torch._C.DictType.__init__"
None*0
self&
torch._C.DictType"torch._C.DictType*-
key$
torch._C.JitType"torch._C.JitType*/
value$
torch._C.JitType"torch._C.JitType*Ç

getKeyTypetorch._C.DictType.getKeyType"$
torch._C.JitType"torch._C.JitType*0
self&
torch._C.DictType"torch._C.DictType*Ü
getValueTypetorch._C.DictType.getValueType"$
torch._C.JitType"torch._C.JitType*0
self&
torch._C.DictType"torch._C.DictTypeË
	TupleTypetorch._C.TupleType"torch._C.JitType*˛
__init__torch._C.TupleType.__init__"
None*2
self(
torch._C.TupleType"torch._C.TupleType*ñ
aé
+builtins.list[Union[torch._C.JitType,None]]P
Union[torch._C.JitType,None]$
torch._C.JitType"torch._C.JitType
None"builtins.list*≥
elementstorch._C.TupleType.elements"V
builtins.list[torch._C.JitType]$
torch._C.JitType"torch._C.JitType"builtins.list*2
self(
torch._C.TupleType"torch._C.TupleType¯
	UnionTypetorch._C.UnionType"torch._C.JitType*ƒ
__init__torch._C.UnionType.__init__"
None*2
self(
torch._C.UnionType"torch._C.UnionType*]
aV
builtins.list[torch._C.JitType]$
torch._C.JitType"torch._C.JitType"builtins.listÀ
	ClassTypetorch._C.ClassType"torch._C.JitType*ó
__init__torch._C.ClassType.__init__"
None*2
self(
torch._C.ClassType"torch._C.ClassType*0
qualified_name
builtins.str"builtins.strú
InterfaceTypetorch._C.InterfaceType"torch._C.JitType*£
__init__torch._C.InterfaceType.__init__"
None*:
self0
torch._C.InterfaceType"torch._C.InterfaceType*0
qualified_name
builtins.str"builtins.str*¯
	getMethod torch._C.InterfaceType.getMethod"e
#Union[torch._C.FunctionSchema,None]2
torch._C.FunctionSchema"torch._C.FunctionSchema
None*:
self0
torch._C.InterfaceType"torch._C.InterfaceType*&
name
builtins.str"builtins.str*ø
getMethodNames%torch._C.InterfaceType.getMethodNames"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*:
self0
torch._C.InterfaceType"torch._C.InterfaceTypeò
OptionalTypetorch._C.OptionalType"torch._C.JitType*Ò
__init__torch._C.OptionalType.__init__"
None*ç
selfÇ
!torch._C.OptionalType[torch._C.R]F

torch._C.R$
torch._C.JitType"torch._C.JitType"torch._C.JitType"torch._C.OptionalType*+
a$
torch._C.JitType"torch._C.JitType*Ï
getElementType$torch._C.OptionalType.getElementType"$
torch._C.JitType"torch._C.JitType*ç
selfÇ
!torch._C.OptionalType[torch._C.R]F

torch._C.R$
torch._C.JitType"torch._C.JitType"torch._C.JitType"torch._C.OptionalType*z
ofTensortorch._C.OptionalType.ofTensor"<
torch._C.OptionalType[Any]
Any"torch._C.OptionalType0:staticmethodhPﬁ

FutureTypetorch._C.FutureType"torch._C.JitType*ï
__init__torch._C.FutureType.__init__"
None*4
self*
torch._C.FutureType"torch._C.FutureType*+
a$
torch._C.JitType"torch._C.JitType*ê
getElementType"torch._C.FutureType.getElementType"$
torch._C.JitType"torch._C.JitType*4
self*
torch._C.FutureType"torch._C.FutureType÷
	AwaitTypetorch._C.AwaitType"torch._C.JitType*í
__init__torch._C.AwaitType.__init__"
None*2
self(
torch._C.AwaitType"torch._C.AwaitType*+
a$
torch._C.JitType"torch._C.JitType*ç
getElementType!torch._C.AwaitType.getElementType"$
torch._C.JitType"torch._C.JitType*2
self(
torch._C.AwaitType"torch._C.AwaitType¡
RRefTypetorch._C.RRefType"torch._C.JitType*è
__init__torch._C.RRefType.__init__"
None*0
self&
torch._C.RRefType"torch._C.RRefType*+
a$
torch._C.JitType"torch._C.JitType¡
EnumTypetorch._C.EnumType"torch._C.JitType*è
__init__torch._C.EnumType.__init__"
None*0
self&
torch._C.EnumType"torch._C.EnumType*0
qualified_name
builtins.str"builtins.str*4

value_type$
torch._C.JitType"torch._C.JitType*C
enum_names_values,
builtins.list[Any]
Any"builtins.list¸

TensorTypetorch._C.TensorType"torch._C.JitType*µ
gettorch._C.TensorType.get"*
torch._C.TensorType"torch._C.TensorType*X
clsO
Type[torch._C.TensorType]*
torch._C.TensorType"torch._C.TensorType"type0:classmethodp*≈
getInferredtorch._C.TensorType.getInferred"*
torch._C.TensorType"torch._C.TensorType*X
clsO
Type[torch._C.TensorType]*
torch._C.TensorType"torch._C.TensorType"type0:classmethodp*ﬁ

with_sizestorch._C.TensorType.with_sizes"*
torch._C.TensorType"torch._C.TensorType*4
self*
torch._C.TensorType"torch._C.TensorType*Õ
other¡
3Union[builtins.list[Union[builtins.int,None]],None]~
'builtins.list[Union[builtins.int,None]]D
Union[builtins.int,None]
builtins.int"builtins.int
None"builtins.list
None*‹
sizestorch._C.TensorType.sizes"Å
'Union[builtins.list[builtins.int],None]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None*4
self*
torch._C.TensorType"torch._C.TensorType*™
varyingSizes torch._C.TensorType.varyingSizes"¡
3Union[builtins.list[Union[builtins.int,None]],None]~
'builtins.list[Union[builtins.int,None]]D
Union[builtins.int,None]
builtins.int"builtins.int
None"builtins.list
None*4
self*
torch._C.TensorType"torch._C.TensorType*‡
stridestorch._C.TensorType.strides"Å
'Union[builtins.list[builtins.int],None]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None*4
self*
torch._C.TensorType"torch._C.TensorType*©
devicetorch._C.TensorType.device"M
Union[torch._C.device,None]"
torch._C.device"torch._C.device
None*4
self*
torch._C.TensorType"torch._C.TensorType*r
dimtorch._C.TensorType.dim"
builtins.int"builtins.int*4
self*
torch._C.TensorType"torch._C.TensorType*§
dtypetorch._C.TensorType.dtype"J
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None*4
self*
torch._C.TensorType"torch._C.TensorType*Ø
create_from_tensor&torch._C.TensorType.create_from_tensor"*
torch._C.TensorType"torch._C.TensorType*3
t,
torch._tensor.Tensor"torch._tensor.Tensor0:staticmethodh4
SourceRangetorch._C.SourceRange"builtins.object.
TreeViewtorch._C.TreeView"builtins.objectü
Identtorch._C.Ident"torch._C.TreeView*s
nametorch._C.Ident.name"
builtins.str"builtins.str**
self 
torch._C.Ident"torch._C.Ident0:property`0
ClassDeftorch._C.ClassDef"torch._C.TreeViewã
Deftorch._C.Def"torch._C.TreeView*c
nametorch._C.Def.name" 
torch._C.Ident"torch._C.Ident*&
self
torch._C.Def"torch._C.Def(
Decltorch._C.Decl"torch._C.TreeViewD
OutOfMemoryErrortorch._C.OutOfMemoryError"builtins.RuntimeError8

_DistErrortorch._C._DistError"builtins.RuntimeErrorF
_DistBackendErrortorch._C._DistBackendError"builtins.RuntimeErrorB
_DistStoreErrortorch._C._DistStoreError"builtins.RuntimeErrorF
_DistNetworkErrortorch._C._DistNetworkError"builtins.RuntimeError@
CapturedTracebacktorch._C.CapturedTraceback"builtins.object5
DisableTorchFunctiontorch._C.DisableTorchFunctionE
DisableTorchFunctionSubclass%torch._C.DisableTorchFunctionSubclassÀ
_jit_set_num_profiled_runs#torch._C._jit_set_num_profiled_runs"˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*á
num˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._sizeo
forktorch._C.fork"0
torch._C.Future[Any]
Any"torch._C.Future*
args
Any*
kwargs
AnyY
waittorch._C.wait"
Any*9
fut0
torch._C.Future[Any]
Any"torch._C.Futurem

_awaitabletorch._C._awaitable""
torch._C._Await"torch._C._Await*
args
Any*
kwargs
Any`
_awaitable_waittorch._C._awaitable_wait"
Any**
aw"
torch._C._Await"torch._C._Awaitc
_awaitable_nowaittorch._C._awaitable_nowait""
torch._C._Await"torch._C._Await*
x
AnyÃ
_collect_alltorch._C._collect_all"0
torch._C.Future[Any]
Any"torch._C.Future*s
futuresf
#builtins.list[torch._C.Future[Any]]0
torch._C.Future[Any]
Any"torch._C.Future"builtins.listê
'_set_print_stack_traces_on_fatal_signal0torch._C._set_print_stack_traces_on_fatal_signal"
None*)
print
builtins.bool"builtins.bool¥
unify_type_listtorch._C.unify_type_list"$
torch._C.JitType"torch._C.JitType*a
typesV
builtins.list[torch._C.JitType]$
torch._C.JitType"torch._C.JitType"builtins.listÎ
_freeze_moduletorch._C._freeze_module".
torch._C.ScriptModule"torch._C.ScriptModule*:
module.
torch._C.ScriptModule"torch._C.ScriptModule*a
preserved_attrsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *7
freeze_interfaces
builtins.bool"builtins.bool *8
preserveParameters
builtins.bool"builtins.bool ¢
_jit_pass_optimize_frozen_graph(torch._C._jit_pass_optimize_frozen_graph"
None*
Graph
Any*7
optimize_numerics
builtins.bool"builtins.bool Ü
 _jit_pass_optimize_for_inference)torch._C._jit_pass_optimize_for_inference"
None*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*_
other_methodsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list }
_jit_pass_fold_frozen_conv_bn&torch._C._jit_pass_fold_frozen_conv_bn"
Any*+
graph 
torch._C.Graph"torch._C.Graphç
%_jit_pass_fold_frozen_conv_add_or_sub.torch._C._jit_pass_fold_frozen_conv_add_or_sub"
Any*+
graph 
torch._C.Graph"torch._C.Graphç
%_jit_pass_fold_frozen_conv_mul_or_div.torch._C._jit_pass_fold_frozen_conv_mul_or_div"
Any*+
graph 
torch._C.Graph"torch._C.Graphâ
#_jit_pass_fuse_frozen_conv_add_relu,torch._C._jit_pass_fuse_frozen_conv_add_relu"
Any*+
graph 
torch._C.Graph"torch._C.Graph
_jit_pass_concat_frozen_linear'torch._C._jit_pass_concat_frozen_linear"
Any*+
graph 
torch._C.Graph"torch._C.Graphè
&_jit_pass_convert_frozen_ops_to_mkldnn/torch._C._jit_pass_convert_frozen_ops_to_mkldnn"
Any*+
graph 
torch._C.Graph"torch._C.GraphÖ
!_jit_pass_transpose_frozen_linear*torch._C._jit_pass_transpose_frozen_linear"
Any*+
graph 
torch._C.Graph"torch._C.Graphî
_jit_pass_remove_dropout!torch._C._jit_pass_remove_dropout"
Any*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModuleC
_is_tracingtorch._C._is_tracing"
builtins.bool"builtins.bool?
	_jit_inittorch._C._jit_init"
builtins.bool"builtins.boolí
_jit_flattentorch._C._jit_flatten"ÿ
@Tuple[builtins.list[torch._tensor.Tensor],torch._C.IODescriptor]b
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list.
torch._C.IODescriptor"torch._C.IODescriptor*
arg
Any⁄
_jit_unflattentorch._C._jit_unflatten"
Any*l
varsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*8
desc.
torch._C.IODescriptor"torch._C.IODescriptoræ
_jit_get_operationtorch._C._jit_get_operation"ﬂ
BTuple[CallableType[builtins.function],builtins.list[builtins.str]]K
CallableType[builtins.function]&
builtins.function"builtins.functionJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*)
op_name
builtins.str"builtins.str¬
_get_operation_overload torch._C._get_operation_overload"•
YTuple[CallableType[builtins.function],CallableType[builtins.function],builtins.list[Any]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function,
builtins.list[Any]
Any"builtins.list*)
op_name
builtins.str"builtins.str*2
op_overload_name
builtins.str"builtins.str≥
_get_schematorch._C._get_schema"2
torch._C.FunctionSchema"torch._C.FunctionSchema*)
op_name
builtins.str"builtins.str*/
overload_name
builtins.str"builtins.strÄ
_jit_pass_optimize_for_mobile&torch._C._jit_pass_optimize_for_mobile"@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*ó
optimization_blocklist{
+builtins.set[torch._C._MobileOptimizerType]>
torch._C._MobileOptimizerType"torch._C._MobileOptimizerType"builtins.set*å
preserved_methodsu
builtins.list[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"builtins.listÍ
_clone_module_with_class!torch._C._clone_module_with_class"@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*ä
ignored_methodsu
builtins.list[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"builtins.list*ç
ignored_attributesu
builtins.list[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"builtins.listé
$_jit_pass_vulkan_optimize_for_mobile-torch._C._jit_pass_vulkan_optimize_for_mobile"@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*ó
optimization_blocklist{
+builtins.set[torch._C._MobileOptimizerType]>
torch._C._MobileOptimizerType"torch._C._MobileOptimizerType"builtins.set*å
preserved_methodsu
builtins.list[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"builtins.listÚ
#_jit_pass_metal_optimize_for_mobile,torch._C._jit_pass_metal_optimize_for_mobile"@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*å
preserved_methodsu
builtins.list[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"builtins.listK
_jit_pass_inlinetorch._C._jit_pass_inline"
None*
Graph
Anyg
_jit_pass_constant_propagation'torch._C._jit_pass_constant_propagation"
None*
Graph
Anyq
#_jit_pass_propagate_shapes_on_graph,torch._C._jit_pass_propagate_shapes_on_graph"
None*
Graph
Any∑
&_jit_register_decomposition_for_schema/torch._C._jit_register_decomposition_for_schema"
None*>
schema2
torch._C.FunctionSchema"torch._C.FunctionSchema*
Graph
Anyw
&_jit_erase_non_input_shape_information/torch._C._jit_erase_non_input_shape_information"
None*
Graph
Any‹
_jit_get_schemas_for_operator&torch._C._jit_get_schemas_for_operator"k
&builtins.list[torch._C.FunctionSchema]2
torch._C.FunctionSchema"torch._C.FunctionSchema"builtins.list*&
name
builtins.str"builtins.str¢
_jit_get_all_schemastorch._C._jit_get_all_schemas"k
&builtins.list[torch._C.FunctionSchema]2
torch._C.FunctionSchema"torch._C.FunctionSchema"builtins.listÊ
_jit_check_alias_annotation$torch._C._jit_check_alias_annotation"
Any*'
g 
torch._C.Graph"torch._C.Graph*8
args.
builtins.tuple[Any]
Any"builtins.tuple*5
unqualified_op_name
builtins.str"builtins.strU
_jit_can_fuse_on_cputorch._C._jit_can_fuse_on_cpu"
builtins.bool"builtins.boolU
_jit_can_fuse_on_gputorch._C._jit_can_fuse_on_gpu"
builtins.bool"builtins.boolc
_jit_can_fuse_on_cpu_legacy$torch._C._jit_can_fuse_on_cpu_legacy"
builtins.bool"builtins.boolm
 _debug_get_fusion_group_inlining)torch._C._debug_get_fusion_group_inlining"
builtins.bool"builtins.boolÇ
 _debug_set_fusion_group_inlining)torch._C._debug_set_fusion_group_inlining"
Any**
enable
builtins.bool"builtins.bool]
_jit_texpr_fuser_enabled!torch._C._jit_texpr_fuser_enabled"
builtins.bool"builtins.boolU
_jit_nvfuser_enabledtorch._C._jit_nvfuser_enabled"
builtins.bool"builtins.boolO
_jit_llga_enabledtorch._C._jit_llga_enabled"
builtins.bool"builtins.booll
_jit_set_llga_enabledtorch._C._jit_set_llga_enabled"
Any**
enable
builtins.bool"builtins.boolG
_llvm_enabledtorch._C._llvm_enabled"
builtins.bool"builtins.bool~
_jit_override_can_fuse_on_cpu&torch._C._jit_override_can_fuse_on_cpu"
Any*,
override
builtins.bool"builtins.bool~
_jit_override_can_fuse_on_gpu&torch._C._jit_override_can_fuse_on_gpu"
Any*,
override
builtins.bool"builtins.boolå
$_jit_override_can_fuse_on_cpu_legacy-torch._C._jit_override_can_fuse_on_cpu_legacy"
Any*,
override
builtins.bool"builtins.boolà
"_jit_set_symbolic_shapes_test_mode+torch._C._jit_set_symbolic_shapes_test_mode"
Any*,
override
builtins.bool"builtins.booly
&_jit_symbolic_shapes_test_mode_enabled/torch._C._jit_symbolic_shapes_test_mode_enabled"
builtins.bool"builtins.boolz
_jit_set_texpr_fuser_enabled%torch._C._jit_set_texpr_fuser_enabled"
Any**
enable
builtins.bool"builtins.bool~
_jit_set_te_must_use_llvm_cpu&torch._C._jit_set_te_must_use_llvm_cpu"
Any*,
use_llvm
builtins.bool"builtins.boolâ
_jit_set_nvfuser_enabled!torch._C._jit_set_nvfuser_enabled"
builtins.bool"builtins.bool**
enable
builtins.bool"builtins.boolx
_jit_cat_wo_conditionals!torch._C._jit_cat_wo_conditionals"
Any*0
optimize_cat
builtins.bool"builtins.boolo
_jit_opt_conditionalstorch._C._jit_opt_conditionals"
Any*-
	opt_conds
builtins.bool"builtins.bool®
_jit_pass_canonicalizetorch._C._jit_pass_canonicalize"
Any*+
graph 
torch._C.Graph"torch._C.Graph*7
keep_unique_names
builtins.bool"builtins.bool Ö
!_jit_pass_erase_shape_information*torch._C._jit_pass_erase_shape_information"
Any*+
graph 
torch._C.Graph"torch._C.Graphé
_jit_pass_fold_convbntorch._C._jit_pass_fold_convbn"
Any*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModuleç
_jit_pass_insert_observers#torch._C._jit_pass_insert_observers"
Any*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*-
method_name
builtins.str"builtins.str*i
qconfig_dictW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*+
inplace
builtins.bool"builtins.bool*,

quant_type
builtins.int"builtins.int’
_jit_pass_insert_quant_dequant'torch._C._jit_pass_insert_quant_dequant"
Any*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*-
method_name
builtins.str"builtins.str*+
inplace
builtins.bool"builtins.bool*)
debug
builtins.bool"builtins.bool*,

quant_type
builtins.int"builtins.int˜
/_jit_pass_insert_quant_dequant_for_ondevice_ptq8torch._C._jit_pass_insert_quant_dequant_for_ondevice_ptq"
Any*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*-
method_name
builtins.str"builtins.str*+
inplace
builtins.bool"builtins.bool*)
debug
builtins.bool"builtins.bool*,

quant_type
builtins.int"builtins.intß
_jit_pass_quant_finalize!torch._C._jit_pass_quant_finalize"
Any*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*,

quant_type
builtins.int"builtins.int*c
preserved_attrsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequenceì
)_jit_pass_quant_finalize_for_ondevice_ptq2torch._C._jit_pass_quant_finalize_for_ondevice_ptq"
Any*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*,

quant_type
builtins.int"builtins.int*-
method_name
builtins.str"builtins.strª
1_jit_pass_insert_observer_method_for_ondevice_ptq:torch._C._jit_pass_insert_observer_method_for_ondevice_ptq"
Any*L
module@
torch.jit._script.ScriptModule"torch.jit._script.ScriptModule*-
method_name
builtins.str"builtins.str*i
qconfig_dictW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*+
inplace
builtins.bool"builtins.bool*,

quant_type
builtins.int"builtins.intó
_jit_set_profiling_executor$torch._C._jit_set_profiling_executor"
builtins.bool"builtins.bool*2
profiling_flag
builtins.bool"builtins.boolè
_jit_set_profiling_mode torch._C._jit_set_profiling_mode"
builtins.bool"builtins.bool*2
profiling_flag
builtins.bool"builtins.boolñ
_jit_set_fusion_strategy!torch._C._jit_set_fusion_strategy"¢
/builtins.list[Tuple[builtins.str,builtins.int]]`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.list*±
strategy¢
/builtins.list[Tuple[builtins.str,builtins.int]]`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.listu
_jit_try_infer_typetorch._C._jit_try_infer_type".
torch._C.InferredType"torch._C.InferredType*
obj
Anyá
_jit_get_trigger_valuetorch._C._jit_get_trigger_value"
builtins.int"builtins.int*.
trigger_name
builtins.str"builtins.strØ
(_maybe_call_torch_function_for_op_packet1torch._C._maybe_call_torch_function_for_op_packet"
Any*
op_overload_packet
Any*
args
Any*
kwargs
Any·
&_check_schema_allow_fake_script_object/torch._C._check_schema_allow_fake_script_object"
builtins.bool"builtins.bool*>
schema2
torch._C.FunctionSchema"torch._C.FunctionSchema*
args
Any*
kwargs
AnyÎ
_create_function_from_graph$torch._C._create_function_from_graph"M
 torch._C.ScriptFunction[Any,Any]
Any
Any"torch._C.ScriptFunction**
qualname
builtins.str"builtins.str*+
graph 
torch._C.Graph"torch._C.Graphè
%_debug_set_autodiff_subgraph_inlining.torch._C._debug_set_autodiff_subgraph_inlining"
None*,
disabled
builtins.bool"builtins.bool√
_ivalue_tags_matchtorch._C._ivalue_tags_match"
builtins.bool"builtins.bool*7
lhs.
torch._C.ScriptModule"torch._C.ScriptModule*7
rhs.
torch._C.ScriptModule"torch._C.ScriptModuleÜ
_jit_assert_is_instance torch._C._jit_assert_is_instance"
Any*
obj
Any*.
type$
torch._C.JitType"torch._C.JitTypeI
_jit_clear_class_registry"torch._C._jit_clear_class_registry"
NoneÛ
_jit_set_emit_hookstorch._C._jit_set_emit_hooks"
None*ó

ModuleHookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*ô
FunctionHookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
Noneö
_jit_get_emit_hookstorch._C._jit_get_emit_hooks"‰
FTuple[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.functionÛ
_load_for_lite_interpreter#torch._C._load_for_lite_interpreter"
Any*n
filename`
 Union[builtins.str,pathlib.Path]
builtins.str"builtins.str
pathlib.Path"pathlib.Path*∂
map_location£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
NoneÀ
&_load_for_lite_interpreter_from_buffer/torch._C._load_for_lite_interpreter_from_buffer"
Any*.
buffer"
typing.BinaryIO"typing.BinaryIO*∂
map_location£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
NoneÑ
_export_operator_listtorch._C._export_operator_list"
Any*B
module6
torch._C.LiteScriptModule"torch._C.LiteScriptModule≈
_quantize_ondevice_ptq_dynamic'torch._C._quantize_ondevice_ptq_dynamic"
Any*B
module6
torch._C.LiteScriptModule"torch._C.LiteScriptModule*-
method_name
builtins.str"builtins.str—
_get_model_bytecode_version$torch._C._get_model_bytecode_version"
builtins.int"builtins.int*n
filename`
 Union[builtins.str,pathlib.Path]
builtins.str"builtins.str
pathlib.Path"pathlib.Path©
'_get_model_bytecode_version_from_buffer0torch._C._get_model_bytecode_version_from_buffer"
builtins.int"builtins.int*.
buffer"
typing.BinaryIO"typing.BinaryIO⁄
_backport_for_mobiletorch._C._backport_for_mobile"
None*t
filename_input`
 Union[builtins.str,pathlib.Path]
builtins.str"builtins.str
pathlib.Path"pathlib.Path*u
filename_output`
 Union[builtins.str,pathlib.Path]
builtins.str"builtins.str
pathlib.Path"pathlib.Path*,

to_version
builtins.int"builtins.int¨
 _backport_for_mobile_from_buffer)torch._C._backport_for_mobile_from_buffer"
None*.
buffer"
typing.BinaryIO"typing.BinaryIO*u
filename_output`
 Union[builtins.str,pathlib.Path]
builtins.str"builtins.str
pathlib.Path"pathlib.Path*,

to_version
builtins.int"builtins.intè
_backport_for_mobile_to_buffer'torch._C._backport_for_mobile_to_buffer" 
builtins.bytes"builtins.bytes*t
filename_input`
 Union[builtins.str,pathlib.Path]
builtins.str"builtins.str
pathlib.Path"pathlib.Path*,

to_version
builtins.int"builtins.int·
*_backport_for_mobile_from_buffer_to_buffer3torch._C._backport_for_mobile_from_buffer_to_buffer" 
builtins.bytes"builtins.bytes*.
buffer"
typing.BinaryIO"typing.BinaryIO*,

to_version
builtins.int"builtins.int¥
_get_model_ops_and_info torch._C._get_model_ops_and_info"
Any*n
filename`
 Union[builtins.str,pathlib.Path]
builtins.str"builtins.str
pathlib.Path"pathlib.Pathå
#_get_model_ops_and_info_from_buffer,torch._C._get_model_ops_and_info_from_buffer"
Any*.
buffer"
typing.BinaryIO"typing.BinaryIO»
!_get_mobile_model_contained_types*torch._C._get_mobile_model_contained_types"
Any*n
filename`
 Union[builtins.str,pathlib.Path]
builtins.str"builtins.str
pathlib.Path"pathlib.Path†
-_get_mobile_model_contained_types_from_buffer6torch._C._get_mobile_model_contained_types_from_buffer"
Any*.
buffer"
typing.BinaryIO"typing.BinaryIOó
_logging_set_loggertorch._C._logging_set_logger"*
torch._C.LoggerBase"torch._C.LoggerBase*6
logger*
torch._C.LoggerBase"torch._C.LoggerBaseæ
_get_graph_executor_optimize%torch._C._get_graph_executor_optimize"
builtins.bool"builtins.bool*W
optimizeG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None |
_set_graph_executor_optimize%torch._C._set_graph_executor_optimize"
Any*,
optimize
builtins.bool"builtins.bool≥
_export_opnamestorch._C._export_opnames"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*:
module.
torch._C.ScriptModule"torch._C.ScriptModule§
_create_function_from_trace$torch._C._create_function_from_trace"˙
?Tuple[torch._C.Graph,TypeAlias[builtins.list[torch._C.IValue]]] 
torch._C.Graph"torch._C.Graphí
)TypeAlias[builtins.list[torch._C.IValue]]S
builtins.list[torch._C.IValue]"
torch._C.IValue"torch._C.IValue"builtins.list"torch._C.Stack**
qualname
builtins.str"builtins.str*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*?
input_tuple.
builtins.tuple[Any]
Any"builtins.tuple*^
var_lookup_fnK
CallableType[builtins.function]&
builtins.function"builtins.function**
strict
builtins.bool"builtins.bool*2
force_outplace
builtins.bool"builtins.bool*^
argument_namesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list‡
%_create_function_from_trace_with_dict.torch._C._create_function_from_trace_with_dict"˙
?Tuple[torch._C.Graph,TypeAlias[builtins.list[torch._C.IValue]]] 
torch._C.Graph"torch._C.Graphí
)TypeAlias[builtins.list[torch._C.IValue]]S
builtins.list[torch._C.IValue]"
torch._C.IValue"torch._C.IValue"builtins.list"torch._C.Stack**
qualname
builtins.str"builtins.str*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*g

input_dictW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*^
var_lookup_fnK
CallableType[builtins.function]&
builtins.function"builtins.function**
strict
builtins.bool"builtins.bool*2
force_outplace
builtins.bool"builtins.bool*^
argument_namesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listi
_jit_is_script_objecttorch._C._jit_is_script_object"
builtins.bool"builtins.bool*
obj
Anyk
_last_executed_optimized_graph'torch._C._last_executed_optimized_graph" 
torch._C.Graph"torch._C.Graph|
parse_type_commenttorch._C.parse_type_comment"
torch._C.Decl"torch._C.Decl*)
comment
builtins.str"builtins.strY
_get_upgraders_map_size torch._C._get_upgraders_map_size"
builtins.int"builtins.int¥
_get_upgraders_entry_map!torch._C._get_upgraders_entry_map"u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict™
_dump_upgraders_maptorch._C._dump_upgraders_map"u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict÷
_test_only_populate_upgraders&torch._C._test_only_populate_upgraders"
None*Ç
contentu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict“
_test_only_remove_upgraders$torch._C._test_only_remove_upgraders"
None*Ç
contentu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict¯
merge_type_from_type_comment%torch._C.merge_type_from_type_comment"
torch._C.Decl"torch._C.Decl*(
decl
torch._C.Decl"torch._C.Decl*8
type_annotation_decl
torch._C.Decl"torch._C.Decl*-
	is_method
builtins.bool"builtins.bool¶
parse_irtorch._C.parse_ir" 
torch._C.Graph"torch._C.Graph*'
input
builtins.str"builtins.str*<
parse_tensor_constants
builtins.bool"builtins.bool É
parse_schematorch._C.parse_schema"2
torch._C.FunctionSchema"torch._C.FunctionSchema*(
schema
builtins.str"builtins.strx

get_devicetorch._C.get_device"
builtins.int"builtins.int*7
input,
torch._tensor.Tensor"torch._tensor.Tensor’
_resolve_type_from_object"torch._C._resolve_type_from_object"$
torch._C.JitType"torch._C.JitType*
obj
Any*7
range,
torch._C.SourceRange"torch._C.SourceRange*¢
rcbò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch._C.ResolutionCallbackõ
_create_module_with_type!torch._C._create_module_with_type".
torch._C.ScriptModule"torch._C.ScriptModule*,
ty$
torch._C.JitType"torch._C.JitTypeü
_create_object_with_type!torch._C._create_object_with_type".
torch._C.ScriptObject"torch._C.ScriptObject*0
ty(
torch._C.ClassType"torch._C.ClassTypew
_run_emit_module_hooktorch._C._run_emit_module_hook"
Any*5
m.
torch._C.ScriptModule"torch._C.ScriptModule˛
_replace_overloaded_method_decl(torch._C._replace_overloaded_method_decl"
torch._C.Def"torch._C.Def*1
overload_decl
torch._C.Decl"torch._C.Decl*4
implementation_def
torch._C.Def"torch._C.Def**
new_name
builtins.str"builtins.strx
_jit_pass_lower_all_tuples#torch._C._jit_pass_lower_all_tuples"
None*+
graph 
torch._C.Graph"torch._C.GraphÌ
&_jit_pass_onnx_set_dynamic_input_shape/torch._C._jit_pass_onnx_set_dynamic_input_shape"
None*+
graph 
torch._C.Graph"torch._C.Graph*˝
dynamic_axesÍ
Dbuiltins.dict[builtins.str,builtins.dict[builtins.int,builtins.str]]
builtins.str"builtins.stru
(builtins.dict[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"builtins.dict"builtins.dict*[
input_namesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listŸ
)_jit_pass_onnx_graph_shape_type_inference2torch._C._jit_pass_onnx_graph_shape_type_inference"
None*+
graph 
torch._C.Graph"torch._C.Graph*è
params_dict~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict*/
opset_version
builtins.int"builtins.intÕ
"_jit_pass_onnx_assign_output_shape+torch._C._jit_pass_onnx_assign_output_shape"
None*+
graph 
torch._C.Graph"torch._C.Graph*o
tensorsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*8
desc.
torch._C.IODescriptor"torch._C.IODescriptor*8
onnx_shape_inference
builtins.bool"builtins.bool*-
	is_script
builtins.bool"builtins.bool*/
opset_version
builtins.int"builtins.intá
*_jit_pass_onnx_remove_inplace_ops_for_onnx3torch._C._jit_pass_onnx_remove_inplace_ops_for_onnx"
None*+
graph 
torch._C.Graph"torch._C.Graph*m
module_
!Union[torch._C.ScriptModule,None].
torch._C.ScriptModule"torch._C.ScriptModule
None |
_jit_pass_remove_inplace_ops%torch._C._jit_pass_remove_inplace_ops"
None*+
graph 
torch._C.Graph"torch._C.Graphê
&_jit_pass_canonicalize_graph_fuser_ops/torch._C._jit_pass_canonicalize_graph_fuser_ops"
None*+
graph 
torch._C.Graph"torch._C.Graphß
_jit_pass_peepholetorch._C._jit_pass_peephole"
None*+
graph 
torch._C.Graph"torch._C.Graph*=
disable_shape_peepholes
builtins.bool"builtins.bool î
(_jit_pass_onnx_autograd_function_process1torch._C._jit_pass_onnx_autograd_function_process"
None*+
graph 
torch._C.Graph"torch._C.Graphl
_jit_pass_fuse_addmmtorch._C._jit_pass_fuse_addmm"
None*+
graph 
torch._C.Graph"torch._C.Graphv
_jit_pass_onnx_preprocess"torch._C._jit_pass_onnx_preprocess"
None*+
graph 
torch._C.Graph"torch._C.Graphä
#_jit_pass_prepare_division_for_onnx,torch._C._jit_pass_prepare_division_for_onnx"
None*+
graph 
torch._C.Graph"torch._C.Graphz
_jit_pass_onnx_remove_print$torch._C._jit_pass_onnx_remove_print"
None*+
graph 
torch._C.Graph"torch._C.GraphÑ
 _jit_pass_onnx_preprocess_caffe2)torch._C._jit_pass_onnx_preprocess_caffe2"
None*+
graph 
torch._C.Graph"torch._C.Graph≈
'_jit_pass_onnx_unpack_quantized_weights0torch._C._jit_pass_onnx_unpack_quantized_weights"~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict*+
graph 
torch._C.Graph"torch._C.Graph*é

paramsDict~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict**
caffe2
builtins.bool"builtins.bool°
+_jit_pass_onnx_quantization_insert_permutes4torch._C._jit_pass_onnx_quantization_insert_permutes"~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict*+
graph 
torch._C.Graph"torch._C.Graph*é

paramsDict~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict˙
,_jit_pass_custom_pattern_based_rewrite_graph5torch._C._jit_pass_custom_pattern_based_rewrite_graph"
None*)
pattern
builtins.str"builtins.str*1
fused_node_name
builtins.str"builtins.str*+
graph 
torch._C.Graph"torch._C.GraphŒ
_jit_onnx_list_model_parameters(torch._C._jit_onnx_list_model_parameters"ƒ
;Tuple[torch._C.ScriptModule,builtins.list[torch._C.IValue]].
torch._C.ScriptModule"torch._C.ScriptModuleS
builtins.list[torch._C.IValue]"
torch._C.IValue"torch._C.IValue"builtins.list*:
module.
torch._C.ScriptModule"torch._C.ScriptModule|
_jit_pass_erase_number_types%torch._C._jit_pass_erase_number_types"
None*+
graph 
torch._C.Graph"torch._C.Graphj
_jit_pass_onnx_linttorch._C._jit_pass_onnx_lint"
None*+
graph 
torch._C.Graph"torch._C.Graph÷
_jit_pass_onnxtorch._C._jit_pass_onnx" 
torch._C.Graph"torch._C.Graph*+
graph 
torch._C.Graph"torch._C.Graph*\
_jit_pass_onnxH
"torch._C._onnx.OperatorExportTypes""torch._C._onnx.OperatorExportTypesÚ
#_jit_pass_onnx_scalar_type_analysis,torch._C._jit_pass_onnx_scalar_type_analysis"
None*+
graph 
torch._C.Graph"torch._C.Graph*5
lowprecision_cast
builtins.bool"builtins.bool*/
opset_version
builtins.int"builtins.intŸ
_jit_pass_onnx_peephole torch._C._jit_pass_onnx_peephole"
None*+
graph 
torch._C.Graph"torch._C.Graph*/
opset_version
builtins.int"builtins.int*4
fixed_batch_size
builtins.bool"builtins.bool¨
4_jit_pass_dce_allow_deleting_nodes_with_side_effects=torch._C._jit_pass_dce_allow_deleting_nodes_with_side_effects"
None*+
graph 
torch._C.Graph"torch._C.Graphå
$_jit_pass_onnx_function_substitution-torch._C._jit_pass_onnx_function_substitution"
None*+
graph 
torch._C.Graph"torch._C.Graphß
"_jit_pass_onnx_function_extraction+torch._C._jit_pass_onnx_function_extraction"Ì
Ebuiltins.dict[torch._C.Node,builtins.dict[builtins.str,builtins.str]]
torch._C.Node"torch._C.Nodeu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict"builtins.dict*+
graph 
torch._C.Graph"torch._C.Graph*Z
module_namesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set*[
param_namesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list[
"_jit_pass_onnx_clear_scope_records+torch._C._jit_pass_onnx_clear_scope_records"
None˜
%_jit_pass_onnx_track_scope_attributes.torch._C._jit_pass_onnx_track_scope_attributes"
None*+
graph 
torch._C.Graph"torch._C.Graph*g

onnx_attrsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict]
_jit_is_onnx_log_enabled!torch._C._jit_is_onnx_log_enabled"
builtins.bool"builtins.boolv
_jit_set_onnx_log_enabled"torch._C._jit_set_onnx_log_enabled"
None*+
enabled
builtins.bool"builtins.boolÑ
_jit_set_onnx_log_output_stream(torch._C._jit_set_onnx_log_output_stream"
None*-
stream_name
builtins.str"builtins.strD
_jit_onnx_logtorch._C._jit_onnx_log"
None*
args
Any¡
_jit_pass_lower_graphtorch._C._jit_pass_lower_graph"Ø
4Tuple[torch._C.Graph,builtins.list[torch._C.IValue]] 
torch._C.Graph"torch._C.GraphS
builtins.list[torch._C.IValue]"
torch._C.IValue"torch._C.IValue"builtins.list*+
graph 
torch._C.Graph"torch._C.Graph*)
m"
torch._C.Module"torch._C.Modulex
_jit_pass_inline_fork_wait#torch._C._jit_pass_inline_fork_wait"
None*+
graph 
torch._C.Graph"torch._C.Graph»
'_jit_pass_onnx_deduplicate_initializers0torch._C._jit_pass_onnx_deduplicate_initializers"~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict*+
graph 
torch._C.Graph"torch._C.Graph*è
params_dict~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict*,
is_train
builtins.bool"builtins.boolÉ
_jit_pass_onnx_eval_peephole%torch._C._jit_pass_onnx_eval_peephole"~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict*+
graph 
torch._C.Graph"torch._C.Graph*é

paramsDict~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict¥
_jit_pass_onnx_constant_fold%torch._C._jit_pass_onnx_constant_fold"~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict*+
graph 
torch._C.Graph"torch._C.Graph*é

paramsDict~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict*/
opset_version
builtins.int"builtins.intï
%_jit_pass_onnx_eliminate_unused_items.torch._C._jit_pass_onnx_eliminate_unused_items"~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict*+
graph 
torch._C.Graph"torch._C.Graph*é

paramsDict~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dictú
,_jit_pass_onnx_cast_all_constant_to_floating5torch._C._jit_pass_onnx_cast_all_constant_to_floating"
None*+
graph 
torch._C.Graph"torch._C.GraphÙ
%_jit_pass_filter_non_tensor_arguments.torch._C._jit_pass_filter_non_tensor_arguments"ç
0builtins.dict[builtins.str,torch._tensor.Tensor]
builtins.str"builtins.str,
torch._tensor.Tensor"torch._tensor.Tensor"builtins.dict*ä
params~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dictä
#_jit_decay_packed_param_input_types,torch._C._jit_decay_packed_param_input_types"
None*+
graph 
torch._C.Graph"torch._C.Graph–
(_jit_pass_onnx_node_shape_type_inference1torch._C._jit_pass_onnx_node_shape_type_inference"
None*%
n
torch._C.Node"torch._C.Node*é

paramsDict~
+builtins.dict[builtins.str,torch._C.IValue]
builtins.str"builtins.str"
torch._C.IValue"torch._C.IValue"builtins.dict*/
opset_version
builtins.int"builtins.intÚ
'_jit_onnx_convert_pattern_from_subblock0torch._C._jit_onnx_convert_pattern_from_subblock"P
builtins.list[torch._C.Value] 
torch._C.Value"torch._C.Value"builtins.list*+
block 
torch._C.Block"torch._C.Block*%
n
torch._C.Node"torch._C.Node*ã
envÅ
,builtins.dict[torch._C.Value,torch._C.Value] 
torch._C.Value"torch._C.Value 
torch._C.Value"torch._C.Value"builtins.dict*a
values_in_envN
builtins.set[torch._C.Value] 
torch._C.Value"torch._C.Value"builtins.set¢
_jit_pass_onnx_blocktorch._C._jit_pass_onnx_block"Å
,builtins.dict[torch._C.Value,torch._C.Value] 
torch._C.Value"torch._C.Value 
torch._C.Value"torch._C.Value"builtins.dict*/
	old_block 
torch._C.Block"torch._C.Block*/
	new_block 
torch._C.Block"torch._C.Block*b
operator_export_typeH
"torch._C._onnx.OperatorExportTypes""torch._C._onnx.OperatorExportTypes*ã
envÅ
,builtins.dict[torch._C.Value,torch._C.Value] 
torch._C.Value"torch._C.Value 
torch._C.Value"torch._C.Value"builtins.dict*a
values_in_envN
builtins.set[torch._C.Value] 
torch._C.Value"torch._C.Value"builtins.set*0
is_sub_block
builtins.bool"builtins.boolÆ
5_jit_pass_onnx_assign_scoped_names_for_node_and_value>torch._C._jit_pass_onnx_assign_scoped_names_for_node_and_value"
None*+
graph 
torch._C.Graph"torch._C.GraphÅ
%_jit_pass_fixup_onnx_controlflow_node.torch._C._jit_pass_fixup_onnx_controlflow_node"P
builtins.list[torch._C.Value] 
torch._C.Value"torch._C.Value"builtins.list*%
n
torch._C.Node"torch._C.Node*/
opset_version
builtins.int"builtins.int 
 _jit_onnx_create_full_scope_name)torch._C._jit_onnx_create_full_scope_name"
builtins.str"builtins.str*,

class_name
builtins.str"builtins.str*/
variable_name
builtins.str"builtins.stræ
_compile_graph_to_code_table%torch._C._compile_graph_to_code_table""
torch._C.IValue"torch._C.IValue*&
name
builtins.str"builtins.str*+
graph 
torch._C.Graph"torch._C.Graphº
_generate_upgraders_graph"torch._C._generate_upgraders_graph"{
*builtins.dict[builtins.str,torch._C.Graph]
builtins.str"builtins.str 
torch._C.Graph"torch._C.Graph"builtins.dictô
-_calculate_package_version_based_on_upgraders6torch._C._calculate_package_version_based_on_upgraders"
Any*'
val
builtins.bool"builtins.boole
_get_version_calculator_flag%torch._C._get_version_calculator_flag"
builtins.bool"builtins.boolÉ
_jit_script_interface_compile&torch._C._jit_script_interface_compile"
Any*&
name
builtins.str"builtins.str*5
	class_def&
torch._C.ClassDef"torch._C.ClassDef*¢
rcbò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch._C.ResolutionCallback*-
	is_module
builtins.bool"builtins.boolñ
_jit_script_compile_overload%torch._C._jit_script_compile_overload"
Any**
qualname
builtins.str"builtins.str*1
overload_decl
torch._C.Decl"torch._C.Decl*4
implementation_def
torch._C.Def"torch._C.Def*¢
rcbò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch._C.ResolutionCallback*t
implementation_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
	signature
Any£
_jit_script_compiletorch._C._jit_script_compile"
Any*+
	qual_name
builtins.str"builtins.str*,

definition
torch._C.Def"torch._C.Def*¢
rcbò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch._C.ResolutionCallback*e
defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictß
_jit_script_class_compile"torch._C._jit_script_class_compile"
Any*+
	qual_name
builtins.str"builtins.str*6

definition&
torch._C.ClassDef"torch._C.ClassDef*“
defaults√
;builtins.dict[builtins.str,builtins.dict[builtins.str,Any]]
builtins.str"builtins.strW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"builtins.dict*¢
rcbò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch._C.ResolutionCallbackt
_parse_source_deftorch._C._parse_source_def"
torch._C.Def"torch._C.Def*%
src
builtins.str"builtins.strÆ
import_ir_moduletorch._C.import_ir_module".
torch._C.ScriptModule"torch._C.ScriptModule*<
cu4
torch._C.CompilationUnit"torch._C.CompilationUnit*n
filename`
 Union[builtins.str,pathlib.Path]
builtins.str"builtins.str
pathlib.Path"pathlib.Path*∂
map_location£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None*h
extra_filesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÜ
import_ir_module_from_buffer%torch._C.import_ir_module_from_buffer".
torch._C.ScriptModule"torch._C.ScriptModule*<
cu4
torch._C.CompilationUnit"torch._C.CompilationUnit*.
buffer"
typing.BinaryIO"typing.BinaryIO*∂
map_location£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None*h
extra_filesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict∆
_import_ir_module_from_package'torch._C._import_ir_module_from_package".
torch._C.ScriptModule"torch._C.ScriptModule*<
cu4
torch._C.CompilationUnit"torch._C.CompilationUnit*D
reader8
torch._C.PyTorchFileReader"torch._C.PyTorchFileReader*e
storage_contextP
&torch._C.DeserializationStorageContext"&torch._C.DeserializationStorageContext*∂
map_location£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None*'
ts_id
builtins.str"builtins.strˆ
_assign_output_shapestorch._C._assign_output_shapes" 
torch._C.Graph"torch._C.Graph*+
graph 
torch._C.Graph"torch._C.Graph*n
inputsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.listb
_check_onnx_prototorch._C._check_onnx_proto"
None*'
proto
builtins.str"builtins.str“
"_propagate_and_assign_input_shapes+torch._C._propagate_and_assign_input_shapes" 
torch._C.Graph"torch._C.Graph*+
graph 
torch._C.Graph"torch._C.Graph*p
inputsd
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*`
param_count_listJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*-
	with_grad
builtins.bool"builtins.bool*-
	propagate
builtins.bool"builtins.bool]
_get_max_operator_version"torch._C._get_max_operator_version"
builtins.int"builtins.int†
_get_operator_version_map"torch._C._get_operator_version_map"ﬁ
Bbuiltins.dict[builtins.str,builtins.list[torch._C._UpgraderEntry]]
builtins.str"builtins.strk
&builtins.list[torch._C._UpgraderEntry]2
torch._C._UpgraderEntry"torch._C._UpgraderEntry"builtins.list"builtins.dict 
_get_upgrader_rangestorch._C._get_upgrader_ranges"k
&builtins.list[torch._C._UpgraderRange]2
torch._C._UpgraderRange"torch._C._UpgraderRange"builtins.list*&
name
builtins.str"builtins.str≈
"_test_only_add_entry_to_op_version+torch._C._test_only_add_entry_to_op_version"
None*)
op_name
builtins.str"builtins.str*=
entry2
torch._C._UpgraderEntry"torch._C._UpgraderEntryå
%_test_only_remove_entry_to_op_version.torch._C._test_only_remove_entry_to_op_version"
None*)
op_name
builtins.str"builtins.strg
_initExtensiontorch._C._initExtension"
None*2
shm_manager_path
builtins.str"builtins.strI
_autograd_inittorch._C._autograd_init"
builtins.bool"builtins.bool·
_add_docstrtorch._C._add_docstr"C

torch._C.T"
builtins.object"builtins.object"builtins.object*L
objC

torch._C.T"
builtins.object"builtins.object"builtins.object*)
doc_obj
builtins.str"builtins.strÉ
_init_namestorch._C._init_names"
None*T
argK
typing.Sequence[Type[Any]]
	Type[Any]
Any"type"typing.SequenceM
_has_distributedtorch._C._has_distributed"
builtins.bool"builtins.boolZ
_set_default_tensor_type!torch._C._set_default_tensor_type"
None*
type
Anyd
_set_default_dtypetorch._C._set_default_dtype"
None*'
d 
torch._C.dtype"torch._C.dtypeó
_infer_sizetorch._C._infer_size"
torch._C.Size"torch._C.Size*(
arg1
torch._C.Size"torch._C.Size*(
arg2
torch._C.Size"torch._C.SizeQ
_crash_if_csrc_asantorch._C._crash_if_csrc_asan"
builtins.int"builtins.intS
_crash_if_csrc_ubsantorch._C._crash_if_csrc_ubsan"
builtins.int"builtins.intQ
_crash_if_aten_asantorch._C._crash_if_aten_asan"
builtins.int"builtins.intC
_show_configtorch._C._show_config"
builtins.str"builtins.str?

_cxx_flagstorch._C._cxx_flags"
builtins.str"builtins.strG
_parallel_infotorch._C._parallel_info"
builtins.str"builtins.strQ
_get_cpu_capabilitytorch._C._get_cpu_capability"
builtins.str"builtins.str|
_set_backcompat_broadcast_warn'torch._C._set_backcompat_broadcast_warn"
None*'
arg
builtins.bool"builtins.booli
_get_backcompat_broadcast_warn'torch._C._get_backcompat_broadcast_warn"
builtins.bool"builtins.boolx
_set_backcompat_keepdim_warn%torch._C._set_backcompat_keepdim_warn"
None*'
arg
builtins.bool"builtins.boole
_get_backcompat_keepdim_warn%torch._C._get_backcompat_keepdim_warn"
builtins.bool"builtins.boolG
get_num_threadtorch._C.get_num_thread"
builtins.int"builtins.inta
set_num_threadstorch._C.set_num_threads"
None**
nthreads
builtins.int"builtins.intY
get_num_interop_threads torch._C.get_num_interop_threads"
builtins.int"builtins.intq
set_num_interop_threads torch._C.set_num_interop_threads"
None**
nthreads
builtins.int"builtins.intQ
_get_cudnn_enabledtorch._C._get_cudnn_enabled"
builtins.bool"builtins.boold
_set_cudnn_enabledtorch._C._set_cudnn_enabled"
None*'
arg
builtins.bool"builtins.boolY
_get_flash_sdp_enabledtorch._C._get_flash_sdp_enabled"
builtins.bool"builtins.boold
_set_sdp_use_flashtorch._C._set_sdp_use_flash"
None*'
arg
builtins.bool"builtins.booli
_get_mem_efficient_sdp_enabled'torch._C._get_mem_efficient_sdp_enabled"
builtins.bool"builtins.boolt
_set_sdp_use_mem_efficient#torch._C._set_sdp_use_mem_efficient"
None*'
arg
builtins.bool"builtins.boolW
_get_math_sdp_enabledtorch._C._get_math_sdp_enabled"
builtins.bool"builtins.boolb
_set_sdp_use_mathtorch._C._set_sdp_use_math"
None*'
arg
builtins.bool"builtins.boolY
_get_cudnn_sdp_enabledtorch._C._get_cudnn_sdp_enabled"
builtins.bool"builtins.boold
_set_sdp_use_cudnntorch._C._set_sdp_use_cudnn"
None*'
arg
builtins.bool"builtins.boolS
_get_mkldnn_enabledtorch._C._get_mkldnn_enabled"
builtins.bool"builtins.boolf
_set_mkldnn_enabledtorch._C._set_mkldnn_enabled"
None*'
arg
builtins.bool"builtins.boolU
_get_cudnn_benchmarktorch._C._get_cudnn_benchmark"
builtins.bool"builtins.boolh
_set_cudnn_benchmarktorch._C._set_cudnn_benchmark"
None*'
arg
builtins.bool"builtins.bool]
_get_cudnn_deterministic!torch._C._get_cudnn_deterministic"
builtins.bool"builtins.boolp
_set_cudnn_deterministic!torch._C._set_cudnn_deterministic"
None*'
arg
builtins.bool"builtins.boolg
_get_deterministic_algorithms&torch._C._get_deterministic_algorithms"
builtins.bool"builtins.bool{
'_get_deterministic_algorithms_warn_only0torch._C._get_deterministic_algorithms_warn_only"
builtins.bool"builtins.bool¨
_set_deterministic_algorithms&torch._C._set_deterministic_algorithms"
None*(
mode
builtins.bool"builtins.bool*/
	warn_only
builtins.bool"builtins.bool Ö
,_get_deterministic_fill_uninitialized_memory5torch._C._get_deterministic_fill_uninitialized_memory"
builtins.bool"builtins.boolò
,_set_deterministic_fill_uninitialized_memory5torch._C._set_deterministic_fill_uninitialized_memory"
None*'
arg
builtins.bool"builtins.boolS
_get_nnpack_enabledtorch._C._get_nnpack_enabled"
builtins.bool"builtins.boolf
_set_nnpack_enabledtorch._C._set_nnpack_enabled"
None*'
arg
builtins.bool"builtins.boolK
_get_warnAlwaystorch._C._get_warnAlways"
builtins.bool"builtins.bool^
_set_warnAlwaystorch._C._set_warnAlways"
None*'
arg
builtins.bool"builtins.boolW
_get_cudnn_allow_tf32torch._C._get_cudnn_allow_tf32"
builtins.bool"builtins.boolj
_set_cudnn_allow_tf32torch._C._set_cudnn_allow_tf32"
None*'
arg
builtins.bool"builtins.boolY
_get_cublas_allow_tf32torch._C._get_cublas_allow_tf32"
builtins.bool"builtins.booll
_set_cublas_allow_tf32torch._C._set_cublas_allow_tf32"
None*'
arg
builtins.bool"builtins.boole
_get_float32_matmul_precision&torch._C._get_float32_matmul_precision"
builtins.str"builtins.strx
_set_float32_matmul_precision&torch._C._set_float32_matmul_precision"
None*%
arg
builtins.str"builtins.strë
2_get_cublas_allow_fp16_reduced_precision_reduction;torch._C._get_cublas_allow_fp16_reduced_precision_reduction"
builtins.bool"builtins.bool§
2_set_cublas_allow_fp16_reduced_precision_reduction;torch._C._set_cublas_allow_fp16_reduced_precision_reduction"
None*'
arg
builtins.bool"builtins.boolë
2_get_cublas_allow_bf16_reduced_precision_reduction;torch._C._get_cublas_allow_bf16_reduced_precision_reduction"
builtins.bool"builtins.bool§
2_set_cublas_allow_bf16_reduced_precision_reduction;torch._C._set_cublas_allow_bf16_reduced_precision_reduction"
None*'
arg
builtins.bool"builtins.boolà
	_set_conjtorch._C._set_conj"
None*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*(
conj
builtins.bool"builtins.boolÖ
_set_negtorch._C._set_neg"
None*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*'
neg
builtins.bool"builtins.boolä
!_set_meta_in_tls_dispatch_include*torch._C._set_meta_in_tls_dispatch_include"
None*/
meta_in_tls
builtins.bool"builtins.boolg
_meta_in_tls_dispatch_include&torch._C._meta_in_tls_dispatch_include"
builtins.bool"builtins.boolr
_stash_obj_in_tlstorch._C._stash_obj_in_tls"
None*%
key
builtins.str"builtins.str*
arg
Any[
_get_obj_in_tlstorch._C._get_obj_in_tls"
Any*%
key
builtins.str"builtins.strp
_is_key_in_tlstorch._C._is_key_in_tls"
builtins.bool"builtins.bool*%
key
builtins.str"builtins.str°
_select_batch_norm_backend#torch._C._select_batch_norm_backend"6
torch._C.BatchNormBackend"torch._C.BatchNormBackend*
args
Any*
kwargs
Anyã
_select_conv_backendtorch._C._select_conv_backend",
torch._C.ConvBackend"torch._C.ConvBackend*
args
Any*
kwargs
Any∑
%_conv_determine_backend_memory_format.torch._C._conv_determine_backend_memory_format"0
torch._C.memory_format"torch._C.memory_format*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*9
backend,
torch._C.ConvBackend"torch._C.ConvBackendz
_has_storagetorch._C._has_storage"
builtins.bool"builtins.bool*3
x,
torch._tensor.Tensor"torch._tensor.TensorÖ
$_construct_storage_from_data_pointer-torch._C._construct_storage_from_data_pointer"*
torch.types.Storage"torch.types.Storage**
data_ptr
builtins.int"builtins.int*.
device"
torch._C.device"torch._C.device*&
size
builtins.int"builtins.intö
 _should_allow_numbers_as_tensors)torch._C._should_allow_numbers_as_tensors"
builtins.bool"builtins.bool*+
	func_name
builtins.str"builtins.str‘
"_group_tensors_by_device_and_dtype+torch._C._group_tensors_by_device_and_dtype"¿
ñbuiltins.dict[Tuple[torch._C.device,torch._C.dtype],Tuple[builtins.list[builtins.list[Union[torch._tensor.Tensor,None]]],builtins.list[builtins.int]]]o
%Tuple[torch._C.device,torch._C.dtype]"
torch._C.device"torch._C.device 
torch._C.dtype"torch._C.dtype§
aTuple[builtins.list[builtins.list[Union[torch._tensor.Tensor,None]]],builtins.list[builtins.int]]
>builtins.list[builtins.list[Union[torch._tensor.Tensor,None]]]û
/builtins.list[Union[torch._tensor.Tensor,None]]\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None"builtins.list"builtins.listJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list"builtins.dict*â
nested_tensorlists
>builtins.list[builtins.list[Union[torch._tensor.Tensor,None]]]û
/builtins.list[Union[torch._tensor.Tensor,None]]\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None"builtins.list"builtins.list*2
with_indices
builtins.bool"builtins.bool b

_to_dlpacktorch._C._to_dlpack"
Any*6
data,
torch._tensor.Tensor"torch._tensor.Tensorf
_from_dlpacktorch._C._from_dlpack",
torch._tensor.Tensor"torch._tensor.Tensor*
data
AnyΩ
_get_cpp_backtracetorch._C._get_cpp_backtrace"
builtins.str"builtins.str*0
frames_to_skip
builtins.int"builtins.int*:
maximum_number_of_frames
builtins.int"builtins.intz
set_flush_denormaltorch._C.set_flush_denormal"
builtins.bool"builtins.bool*'
arg
builtins.bool"builtins.boolQ
get_default_dtypetorch._C.get_default_dtype" 
torch._C.dtype"torch._C.dtypeQ
_get_default_devicetorch._C._get_default_device"
builtins.str"builtins.strC
_get_qenginetorch._C._get_qengine"
builtins.int"builtins.intZ
_set_qenginetorch._C._set_qengine"
None*)
qengine
builtins.int"builtins.int
_supported_qenginestorch._C._supported_qengines"J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listS
_is_xnnpack_enabledtorch._C._is_xnnpack_enabled"
builtins.bool"builtins.boolk
_check_sparse_tensor_invariants(torch._C._check_sparse_tensor_invariants"
builtins.bool"builtins.boolÜ
#_set_check_sparse_tensor_invariants,torch._C._set_check_sparse_tensor_invariants"
None*'
arg
builtins.bool"builtins.boolY
!_set_default_mobile_cpu_allocator*torch._C._set_default_mobile_cpu_allocator"
None]
#_unset_default_mobile_cpu_allocator,torch._C._unset_default_mobile_cpu_allocator"
Nonea
_is_torch_function_enabled#torch._C._is_torch_function_enabled"
builtins.bool"builtins.boolè
_has_torch_functiontorch._C._has_torch_function"
builtins.bool"builtins.bool*:
args0
typing.Iterable[Any]
Any"typing.Iterableq
_has_torch_function_unary"torch._C._has_torch_function_unary"
builtins.bool"builtins.bool*
Any
Anyx
_has_torch_function_variadic%torch._C._has_torch_function_variadic"
builtins.bool"builtins.bool*
args
Anya
_vmapmode_increment_nesting$torch._C._vmapmode_increment_nesting"
builtins.int"builtins.inta
_vmapmode_decrement_nesting$torch._C._vmapmode_decrement_nesting"
builtins.int"builtins.intO
_log_api_usage_oncetorch._C._log_api_usage_once"
None*
str
Any¯
_log_api_usage_metadata torch._C._log_api_usage_metadata"
None*'
event
builtins.str"builtins.str*á
metadata_mapu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dictO
	_demangletorch._C._demangle"
builtins.str"builtins.str*
str
AnyÄ
_disabled_torch_function_impl&torch._C._disabled_torch_function_impl"
Any*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*V
typesK
typing.Iterable[Type[Any]]
	Type[Any]
Any"type"typing.Iterable*8
args.
builtins.tuple[Any]
Any"builtins.tuple*E
kwargs9
builtins.dict[Any,Any]
Any
Any"builtins.dictÄ
_disabled_torch_dispatch_impl&torch._C._disabled_torch_dispatch_impl"
Any*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*V
typesK
typing.Iterable[Type[Any]]
	Type[Any]
Any"type"typing.Iterable*8
args.
builtins.tuple[Any]
Any"builtins.tuple*E
kwargs9
builtins.dict[Any,Any]
Any
Any"builtins.dict{
_get_linalg_preferred_backend&torch._C._get_linalg_preferred_backend"2
torch._C._LinalgBackend"torch._C._LinalgBackendç
_set_linalg_preferred_backend&torch._C._set_linalg_preferred_backend"
Any*;
arg2
torch._C._LinalgBackend"torch._C._LinalgBackends
_get_blas_preferred_backend$torch._C._get_blas_preferred_backend".
torch._C._BlasBackend"torch._C._BlasBackendÖ
_set_blas_preferred_backend$torch._C._set_blas_preferred_backend"
Any*7
arg.
torch._C._BlasBackend"torch._C._BlasBackende
_valgrind_supported_platform%torch._C._valgrind_supported_platform"
builtins.bool"builtins.bool7
_valgrind_toggletorch._C._valgrind_toggle"
NoneU
_valgrind_toggle_and_dump_stats(torch._C._valgrind_toggle_and_dump_stats"
Nonef
_set_grad_enabledtorch._C._set_grad_enabled"
None*+
enabled
builtins.bool"builtins.boolK
is_grad_enabledtorch._C.is_grad_enabled"
builtins.bool"builtins.booln
_set_fwd_grad_enabledtorch._C._set_fwd_grad_enabled"
None*+
enabled
builtins.bool"builtins.boolU
_is_fwd_grad_enabledtorch._C._is_fwd_grad_enabled"
builtins.bool"builtins.bool_
is_inference_mode_enabled"torch._C.is_inference_mode_enabled"
builtins.bool"builtins.booló
set_autocast_dtypetorch._C.set_autocast_dtype"
None*-
device_type
builtins.str"builtins.str*+
dtype 
torch._C.dtype"torch._C.dtypeÇ
get_autocast_dtypetorch._C.get_autocast_dtype" 
torch._C.dtype"torch._C.dtype*-
device_type
builtins.str"builtins.str?
clear_autocast_cachetorch._C.clear_autocast_cache"
Nonet
set_autocast_cpu_enabled!torch._C.set_autocast_cpu_enabled"
None*+
enabled
builtins.bool"builtins.bool[
is_autocast_cpu_enabled torch._C.is_autocast_cpu_enabled"
builtins.bool"builtins.bool]
_is_any_autocast_enabled!torch._C._is_any_autocast_enabled"
builtins.bool"builtins.boolà
_is_autocast_availabletorch._C._is_autocast_available"
builtins.bool"builtins.bool*-
device_type
builtins.str"builtins.strp
set_autocast_cpu_dtypetorch._C.set_autocast_cpu_dtype"
None*+
dtype 
torch._C.dtype"torch._C.dtypep
set_autocast_gpu_dtypetorch._C.set_autocast_gpu_dtype"
None*+
dtype 
torch._C.dtype"torch._C.dtype[
get_autocast_cpu_dtypetorch._C.get_autocast_cpu_dtype" 
torch._C.dtype"torch._C.dtype[
get_autocast_gpu_dtypetorch._C.get_autocast_gpu_dtype" 
torch._C.dtype"torch._C.dtype_
autocast_increment_nesting#torch._C.autocast_increment_nesting"
builtins.int"builtins.int_
autocast_decrement_nesting#torch._C.autocast_decrement_nesting"
builtins.int"builtins.int_
is_autocast_cache_enabled"torch._C.is_autocast_cache_enabled"
builtins.bool"builtins.boolx
set_autocast_cache_enabled#torch._C.set_autocast_cache_enabled"
None*+
enabled
builtins.bool"builtins.boolu
_increment_versiontorch._C._increment_version"
None*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensorõ
set_anomaly_enabledtorch._C.set_anomaly_enabled"
None*+
enabled
builtins.bool"builtins.bool*/
	check_nan
builtins.bool"builtins.bool Q
is_anomaly_enabledtorch._C.is_anomaly_enabled"
builtins.bool"builtins.boole
is_anomaly_check_nan_enabled%torch._C.is_anomaly_check_nan_enabled"
builtins.bool"builtins.boola
_is_multithreading_enabled#torch._C._is_multithreading_enabled"
builtins.bool"builtins.boolz
_set_multithreading_enabled$torch._C._set_multithreading_enabled"
None*+
enabled
builtins.bool"builtins.boolt
_set_view_replay_enabled!torch._C._set_view_replay_enabled"
None*+
enabled
builtins.bool"builtins.bool[
_is_view_replay_enabled torch._C._is_view_replay_enabled"
builtins.bool"builtins.boolM
_enter_dual_leveltorch._C._enter_dual_level"
builtins.int"builtins.int`
_exit_dual_leveltorch._C._exit_dual_level"
None*'
level
builtins.int"builtins.intÌ

_make_dualtorch._C._make_dual",
torch._tensor.Tensor"torch._tensor.Tensor*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*9
tangent,
torch._tensor.Tensor"torch._tensor.Tensor*'
level
builtins.int"builtins.int∂
_unpack_dualtorch._C._unpack_dual",
torch._tensor.Tensor"torch._tensor.Tensor*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*'
level
builtins.int"builtins.intt
__set_forward_AD_enabled!torch._C.__set_forward_AD_enabled"
None*+
enabled
builtins.bool"builtins.bool[
__is_forward_AD_enabled torch._C.__is_forward_AD_enabled"
builtins.bool"builtins.boolˇ
_register_default_hooks torch._C._register_default_hooks"
None*Z
	pack_hookK
CallableType[builtins.function]&
builtins.function"builtins.function*\
unpack_hookK
CallableType[builtins.function]&
builtins.function"builtins.function?
_reset_default_hookstorch._C._reset_default_hooks"
Nonek
_is_torch_function_mode_enabled(torch._C._is_torch_function_mode_enabled"
builtins.bool"builtins.boolY
_set_torch_function_mode!torch._C._set_torch_function_mode"
None*
cls
Anyc
_push_on_torch_function_stack&torch._C._push_on_torch_function_stack"
None*
cls
AnyH
_pop_torch_function_stack"torch._C._pop_torch_function_stack"
Anyi
_get_function_stack_attorch._C._get_function_stack_at"
Any*%
idx
builtins.int"builtins.int]
_len_torch_function_stack"torch._C._len_torch_function_stack"
builtins.int"builtins.intY
_set_torch_dispatch_mode!torch._C._set_torch_dispatch_mode"
None*
cls
Anyº
_push_on_torch_dispatch_stack&torch._C._push_on_torch_dispatch_stack"
None*i
cls`
.torch.utils._python_dispatch.TorchDispatchMode".torch.utils._python_dispatch.TorchDispatchMode’
_pop_torch_dispatch_stack"torch._C._pop_torch_dispatch_stack"
Any*ä
mode_keyz
*Union[torch._C._TorchDispatchModeKey,None]@
torch._C._TorchDispatchModeKey"torch._C._TorchDispatchModeKey
None ≈
_get_dispatch_modetorch._C._get_dispatch_mode"
Any*à
mode_keyz
*Union[torch._C._TorchDispatchModeKey,None]@
torch._C._TorchDispatchModeKey"torch._C._TorchDispatchModeKey
NoneÆ
_unset_dispatch_modetorch._C._unset_dispatch_mode"™
:Union[torch.utils._python_dispatch.TorchDispatchMode,None]`
.torch.utils._python_dispatch.TorchDispatchMode".torch.utils._python_dispatch.TorchDispatchMode
None*J
mode@
torch._C._TorchDispatchModeKey"torch._C._TorchDispatchModeKeyß
_set_dispatch_modetorch._C._set_dispatch_mode"
None*j
mode`
.torch.utils._python_dispatch.TorchDispatchMode".torch.utils._python_dispatch.TorchDispatchModei
_get_dispatch_stack_attorch._C._get_dispatch_stack_at"
Any*%
idx
builtins.int"builtins.int]
_len_torch_dispatch_stack"torch._C._len_torch_dispatch_stack"
builtins.int"builtins.int=
_activate_gpu_tracetorch._C._activate_gpu_trace"
Noneu
_set_autograd_fallback_mode$torch._C._set_autograd_fallback_mode"
None*&
mode
builtins.str"builtins.stra
_get_autograd_fallback_mode$torch._C._get_autograd_fallback_mode"
builtins.str"builtins.strk
_jit_get_inline_everything_mode(torch._C._jit_get_inline_everything_mode"
builtins.bool"builtins.boolÇ
_jit_set_inline_everything_mode(torch._C._jit_set_inline_everything_mode"
None*+
enabled
builtins.bool"builtins.boolY
_jit_get_logging_option torch._C._jit_get_logging_option"
builtins.str"builtins.stro
_jit_set_logging_option torch._C._jit_set_logging_option"
None*(
option
builtins.str"builtins.strt
_jit_set_logging_stream torch._C._jit_set_logging_stream"
None*-
stream_name
builtins.str"builtins.str[
_jit_pass_csetorch._C._jit_pass_cse"
builtins.bool"builtins.bool*
Graph
AnyE
_jit_pass_dcetorch._C._jit_pass_dce"
None*
Graph
AnyG
_jit_pass_linttorch._C._jit_pass_lint"
None*
Graph
Any¶
 _get_custom_class_python_wrapper)torch._C._get_custom_class_python_wrapper"
Any*&
name
builtins.str"builtins.str*&
attr
builtins.str"builtins.strx
_rename_privateuse1_backend$torch._C._rename_privateuse1_backend"
None*)
backend
builtins.str"builtins.stre
_get_privateuse1_backend_name&torch._C._get_privateuse1_backend_name"
builtins.str"builtins.str£
_dispatch_librarytorch._C._dispatch_library"4
torch._C._DispatchModule"torch._C._DispatchModule*&
kind
builtins.str"builtins.str*&
name
builtins.str"builtins.str**
dispatch
builtins.str"builtins.str*(
file
builtins.str"builtins.str *
linenum
Any o
_dispatch_dumptorch._C._dispatch_dump"
builtins.str"builtins.str*&
name
builtins.str"builtins.str{
_dispatch_dump_tabletorch._C._dispatch_dump_table"
builtins.str"builtins.str*&
name
builtins.str"builtins.strs
_dispatch_check_invariants#torch._C._dispatch_check_invariants"
None*&
name
builtins.str"builtins.strS
_dispatch_check_all_invariants'torch._C._dispatch_check_all_invariants"
None∏
_dispatch_call_boxedtorch._C._dispatch_call_boxed"
Any*P
handleD
 torch._C._DispatchOperatorHandle" torch._C._DispatchOperatorHandle*
args
Any*
kwargs
AnyË
_dispatch_find_schema_or_throw'torch._C._dispatch_find_schema_or_throw"D
 torch._C._DispatchOperatorHandle" torch._C._DispatchOperatorHandle*&
name
builtins.str"builtins.str*/
overload_name
builtins.str"builtins.strä
#_dispatch_set_report_error_callback,torch._C._dispatch_set_report_error_callback"
None*P
handleD
 torch._C._DispatchOperatorHandle" torch._C._DispatchOperatorHandle*Y
callbackK
CallableType[builtins.function]&
builtins.function"builtins.function}
_dispatch_has_kerneltorch._C._dispatch_has_kernel"
builtins.bool"builtins.bool*&
name
builtins.str"builtins.str¸
%_dispatch_has_kernel_for_dispatch_key.torch._C._dispatch_has_kernel_for_dispatch_key"
builtins.bool"builtins.bool*&
name
builtins.str"builtins.str*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkeyÒ
)_dispatch_has_kernel_for_any_dispatch_key2torch._C._dispatch_has_kernel_for_any_dispatch_key"
builtins.bool"builtins.bool*&
name
builtins.str"builtins.str*H
dispatch_key_set2
torch._C.DispatchKeySet"torch._C.DispatchKeySetí
0_dispatch_kernel_for_dispatch_key_is_fallthrough9torch._C._dispatch_kernel_for_dispatch_key_is_fallthrough"
builtins.bool"builtins.bool*&
name
builtins.str"builtins.str*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkeyé
._dispatch_has_computed_kernel_for_dispatch_key7torch._C._dispatch_has_computed_kernel_for_dispatch_key"
builtins.bool"builtins.bool*&
name
builtins.str"builtins.str*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkeyì
_dispatch_find_dangling_impls&torch._C._dispatch_find_dangling_impls"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listç
_dispatch_get_all_op_names#torch._C._dispatch_get_all_op_names"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listÎ
'_dispatch_tls_set_dispatch_key_excluded0torch._C._dispatch_tls_set_dispatch_key_excluded"
None*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkey*'
val
builtins.bool"builtins.bool÷
&_dispatch_tls_is_dispatch_key_excluded/torch._C._dispatch_tls_is_dispatch_key_excluded"
builtins.bool"builtins.bool*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkeyÎ
'_dispatch_tls_set_dispatch_key_included0torch._C._dispatch_tls_set_dispatch_key_included"
None*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkey*'
val
builtins.bool"builtins.bool÷
&_dispatch_tls_is_dispatch_key_included/torch._C._dispatch_tls_is_dispatch_key_included"
builtins.bool"builtins.bool*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkey£
_dispatch_isTensorSubclassLike'torch._C._dispatch_isTensorSubclassLike"
builtins.bool"builtins.bool*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor¨
_dispatch_key_nametorch._C._dispatch_key_name"
builtins.str"builtins.str*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkeyä
_dispatch_key_for_device!torch._C._dispatch_key_for_device"
builtins.str"builtins.str*-
device_type
builtins.str"builtins.str∏
_parse_dispatch_keytorch._C._parse_dispatch_key"\
 Union[torch._C.DispatchKey,None],
torch._C.DispatchKey"torch._C.DispatchKey
None*%
key
builtins.str"builtins.stræ
_dispatch_key_parsetorch._C._dispatch_key_parse",
torch._C.DispatchKey"torch._C.DispatchKey*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkeyW
_dispatch_num_backendstorch._C._dispatch_num_backends"
builtins.int"builtins.int†
_dispatch_pystubtorch._C._dispatch_pystub"ú
,Union[Tuple[builtins.str,builtins.str],None]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
None*&
name
builtins.str"builtins.str**
overload
builtins.str"builtins.str∂
_dispatch_is_alias_keytorch._C._dispatch_is_alias_key"
builtins.bool"builtins.bool*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkeyä
_functionality_to_backend_keys'torch._C._functionality_to_backend_keys"b
#builtins.list[torch._C.DispatchKey],
torch._C.DispatchKey"torch._C.DispatchKey"builtins.list*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkeyu
$_functionalization_reapply_views_tls-torch._C._functionalization_reapply_views_tls"
builtins.bool"builtins.boolY
_only_lift_cpu_tensorstorch._C._only_lift_cpu_tensors"
builtins.bool"builtins.boolv
_set_only_lift_cpu_tensors#torch._C._set_only_lift_cpu_tensors"
None*)
value
builtins.bool"builtins.boolç
_set_throw_on_mutable_data_ptr'torch._C._set_throw_on_mutable_data_ptr"
None*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor°
(_set_warn_deprecated_on_mutable_data_ptr1torch._C._set_warn_deprecated_on_mutable_data_ptr"
None*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor∆
_dispatch_has_backend_fallback'torch._C._dispatch_has_backend_fallback"
builtins.bool"builtins.bool*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkeyÕ
_dispatch_keyset_full_after$torch._C._dispatch_keyset_full_after"2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*”
tÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkeyk
_dispatch_keyset_fulltorch._C._dispatch_keyset_full"2
torch._C.DispatchKeySet"torch._C.DispatchKeySetü
_dispatch_keyset_to_string#torch._C._dispatch_keyset_to_string"
builtins.str"builtins.str*>
keyset2
torch._C.DispatchKeySet"torch._C.DispatchKeySetÚ
*_dispatch_get_backend_keyset_from_autograd3torch._C._dispatch_get_backend_keyset_from_autograd"2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*⁄
dispatchÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkeyó
_dispatch_keystorch._C._dispatch_keys"2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor
_dispatch_tls_local_exclude_set(torch._C._dispatch_tls_local_exclude_set"2
torch._C.DispatchKeySet"torch._C.DispatchKeySet
_dispatch_tls_local_include_set(torch._C._dispatch_tls_local_include_set"2
torch._C.DispatchKeySet"torch._C.DispatchKeySetß
_dispatch_is_included_in_alias'torch._C._dispatch_is_included_in_alias"
builtins.bool"builtins.bool*‹

dispatch_aÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkey*‹

dispatch_bÀ
3TypeAlias[Union[builtins.str,torch._C.DispatchKey]]x
(Union[builtins.str,torch._C.DispatchKey]
builtins.str"builtins.str,
torch._C.DispatchKey"torch._C.DispatchKey"torch.types._dispatchkeyß
_propagate_xla_datatorch._C._propagate_xla_data"
None*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*3
b,
torch._tensor.Tensor"torch._tensor.Tensorì
	_replace_torch._C._replace_"
None*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*3
b,
torch._tensor.Tensor"torch._tensor.Tensorh
_commit_updatetorch._C._commit_update"
None*3
a,
torch._tensor.Tensor"torch._tensor.Tensor•
._dispatch_print_registrations_for_dispatch_key7torch._C._dispatch_print_registrations_for_dispatch_key"
None*0
dispatch_key
builtins.str"builtins.str „
,_dispatch_get_registrations_for_dispatch_key5torch._C._dispatch_get_registrations_for_dispatch_key"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*0
dispatch_key
builtins.str"builtins.str m
 _are_functorch_transforms_active)torch._C._are_functorch_transforms_active"
builtins.bool"builtins.boolw
_set_python_dispatchertorch._C._set_python_dispatcher"
None*2

dispatcher"
builtins.object"builtins.objectò
_get_nested_inttorch._C._get_nested_int"
torch.SymInt"torch.SymInt*$
id
builtins.int"builtins.int*'
coeff
builtins.int"builtins.ints
_get_constant_bool_symnode#torch._C._get_constant_bool_symnode"
Any*'
val
builtins.bool"builtins.boolA
_multiprocessing_inittorch._C._multiprocessing_init"
Nonei
_accelerator_hooks_device_count(torch._C._accelerator_hooks_device_count"
builtins.int"builtins.intë
%_accelerator_hooks_set_current_device.torch._C._accelerator_hooks_set_current_device"
None*.
device_index
builtins.int"builtins.intu
%_accelerator_hooks_get_current_device.torch._C._accelerator_hooks_get_current_device"
builtins.int"builtins.intü
"_accelerator_hooks_exchange_device+torch._C._accelerator_hooks_exchange_device"
builtins.int"builtins.int*.
device_index
builtins.int"builtins.int´
(_accelerator_hooks_maybe_exchange_device1torch._C._accelerator_hooks_maybe_exchange_device"
builtins.int"builtins.int*.
device_index
builtins.int"builtins.int~
_get_acceleratortorch._C._get_accelerator""
torch._C.device"torch._C.device*+
check
builtins.bool"builtins.bool +

_mtia_inittorch._C._mtia_init"
NoneG
_mtia_isBuilttorch._C._mtia_isBuilt"
builtins.bool"builtins.boolO
_mtia_isInBadForktorch._C._mtia_isInBadFork"
builtins.bool"builtins.boolE
_mtia_deviceSynchronize torch._C._mtia_deviceSynchronize"
Noneá
_mtia_getCurrentStreamtorch._C._mtia_getCurrentStream""
torch._C.Stream"torch._C.Stream*(
device
builtins.int"builtins.ints
_mtia_setCurrentStreamtorch._C._mtia_setCurrentStream"
None*.
stream"
torch._C.Stream"torch._C.Streamá
_mtia_getDefaultStreamtorch._C._mtia_getDefaultStream""
torch._C.Stream"torch._C.Stream*(
device
builtins.int"builtins.intC
_mps_deviceSynchronizetorch._C._mps_deviceSynchronize"
Nonek
_mps_get_default_generator#torch._C._mps_get_default_generator"(
torch._C.Generator"torch._C.Generator5
_mps_emptyCachetorch._C._mps_emptyCache"
Nones
_mps_setMemoryFractiontorch._C._mps_setMemoryFraction"
None*.
fraction 
builtins.float"builtins.floata
_mps_currentAllocatedMemory$torch._C._mps_currentAllocatedMemory"
builtins.int"builtins.int_
_mps_driverAllocatedMemory#torch._C._mps_driverAllocatedMemory"
builtins.int"builtins.intO
_mps_is_availabletorch._C._mps_is_available"
builtins.bool"builtins.bool±
_mps_is_on_macos_or_newer"torch._C._mps_is_on_macos_or_newer"
builtins.bool"builtins.bool*'
major
builtins.int"builtins.int*'
minor
builtins.int"builtins.intß
_mps_profilerStartTrace torch._C._mps_profilerStartTrace"
None*&
mode
builtins.str"builtins.str*8
wait_until_completed
builtins.bool"builtins.boolC
_mps_profilerStopTracetorch._C._mps_profilerStopTrace"
NoneÄ
_mps_acquireEventtorch._C._mps_acquireEvent"
builtins.int"builtins.int*1
enable_timing
builtins.bool"builtins.boole
_mps_releaseEventtorch._C._mps_releaseEvent"
None**
event_id
builtins.int"builtins.intc
_mps_recordEventtorch._C._mps_recordEvent"
None**
event_id
builtins.int"builtins.inte
_mps_waitForEventtorch._C._mps_waitForEvent"
None**
event_id
builtins.int"builtins.intm
_mps_synchronizeEventtorch._C._mps_synchronizeEvent"
None**
event_id
builtins.int"builtins.intw
_mps_queryEventtorch._C._mps_queryEvent"
builtins.bool"builtins.bool**
event_id
builtins.int"builtins.int¡
_mps_elapsedTimeOfEvents!torch._C._mps_elapsedTimeOfEvents" 
builtins.float"builtins.float*0
start_event_id
builtins.int"builtins.int*.
end_event_id
builtins.int"builtins.intì
_cuda_getCurrentStreamtorch._C._cuda_getCurrentStream".
builtins.tuple[Any]
Any"builtins.tuple*(
device
builtins.int"builtins.intá
_cuda_getCurrentRawStream"torch._C._cuda_getCurrentRawStream"
builtins.int"builtins.int*(
device
builtins.int"builtins.intì
_cuda_getDefaultStreamtorch._C._cuda_getDefaultStream".
builtins.tuple[Any]
Any"builtins.tuple*(
device
builtins.int"builtins.int_
_cuda_getCurrentBlasHandle#torch._C._cuda_getCurrentBlasHandle"
builtins.int"builtins.intM
_cuda_clearCublasWorkspaces$torch._C._cuda_clearCublasWorkspaces"
None_
_cuda_setDevicetorch._C._cuda_setDevice"
None*(
device
builtins.int"builtins.int}
_cuda_exchangeDevicetorch._C._cuda_exchangeDevice"
builtins.int"builtins.int*(
device
builtins.int"builtins.intá
_cuda_maybeExchangeDevice"torch._C._cuda_maybeExchangeDevice"
builtins.int"builtins.int*(
device
builtins.int"builtins.intI
_cuda_getDevicetorch._C._cuda_getDevice"
builtins.int"builtins.intS
_cuda_getDeviceCounttorch._C._cuda_getDeviceCount"
builtins.int"builtins.intª
_cuda_set_sync_debug_mode"torch._C._cuda_set_sync_debug_mode"
None*p

warn_level`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str]
_cuda_get_sync_debug_mode"torch._C._cuda_get_sync_debug_mode"
builtins.int"builtins.intW
_cuda_sleeptorch._C._cuda_sleep"
None*(
cycles
builtins.int"builtins.int9
_cuda_synchronizetorch._C._cuda_synchronize"
None9
_cuda_ipc_collecttorch._C._cuda_ipc_collect"
Nonew
_cuda_getArchFlagstorch._C._cuda_getArchFlags"D
Union[builtins.str,None]
builtins.str"builtins.str
None+

_cuda_inittorch._C._cuda_init"
None¡
_cuda_setStreamtorch._C._cuda_setStream"
None*+
	stream_id
builtins.int"builtins.int*.
device_index
builtins.int"builtins.int*-
device_type
builtins.int"builtins.int[
_cuda_getCompiledVersion!torch._C._cuda_getCompiledVersion"
builtins.int"builtins.intY
_cuda_cudaHostAllocator torch._C._cuda_cudaHostAllocator"
builtins.int"builtins.int 
$_cuda_cudaCachingAllocator_raw_alloc-torch._C._cuda_cudaCachingAllocator_raw_alloc"
builtins.int"builtins.int*&
size
builtins.int"builtins.int*-
cuda_stream
builtins.int"builtins.intà
%_cuda_cudaCachingAllocator_raw_delete.torch._C._cuda_cudaCachingAllocator_raw_delete"
None*%
ptr
builtins.int"builtins.int†
1_cuda_cudaCachingAllocator_set_allocator_settings:torch._C._cuda_cudaCachingAllocator_set_allocator_settings"
None*%
env
builtins.str"builtins.strˇ
&_cuda_beginAllocateCurrentStreamToPool/torch._C._cuda_beginAllocateCurrentStreamToPool"
None*(
device
builtins.int"builtins.int*p

mempool_id`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int˚
$_cuda_endAllocateCurrentStreamToPool-torch._C._cuda_endAllocateCurrentStreamToPool"
None*(
device
builtins.int"builtins.int*p

mempool_id`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int’
_cuda_releasePooltorch._C._cuda_releasePool"
None*(
device
builtins.int"builtins.int*p

mempool_id`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int–
_cuda_checkPoolLiveAllocations'torch._C._cuda_checkPoolLiveAllocations"
builtins.bool"builtins.bool*(
device
builtins.int"builtins.int*p

mempool_id`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*I
expected_live_allocations*
builtins.set[Any]
Any"builtins.set≠
_cuda_setCheckpointPoolState%torch._C._cuda_setCheckpointPoolState"
None*(
device
builtins.int"builtins.int*e
stateZ
+torch._C._cuda_CUDAAllocator_AllocatorState"+torch._C._cuda_CUDAAllocator_AllocatorState*^
stale_storagesJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*k
storages_to_add_deleters_toJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listü
_cuda_setMemoryFraction torch._C._cuda_setMemoryFraction"
None*.
fraction 
builtins.float"builtins.float*(
device
builtins.int"builtins.int7
_cuda_emptyCachetorch._C._cuda_emptyCache"
None≤
_cuda_memoryStatstorch._C._cuda_memoryStats"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*(
device
builtins.int"builtins.intÉ
!_cuda_resetAccumulatedMemoryStats*torch._C._cuda_resetAccumulatedMemoryStats"
None*(
device
builtins.int"builtins.intu
_cuda_resetPeakMemoryStats#torch._C._cuda_resetPeakMemoryStats"
None*(
device
builtins.int"builtins.inté
_cuda_memorySnapshottorch._C._cuda_memorySnapshot"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÔ
"_cuda_record_memory_history_legacy+torch._C._cuda_record_memory_history_legacy"
None*+
enabled
builtins.bool"builtins.bool*2
record_context
builtins.bool"builtins.bool*6
record_context_cpp
builtins.bool"builtins.bool*9
alloc_trace_max_entries
builtins.int"builtins.int*>
alloc_trace_record_context
builtins.bool"builtins.bool∑
_cuda_record_memory_history$torch._C._cuda_record_memory_history"
None*Q
enabledD
Union[builtins.str,None]
builtins.str"builtins.str
None*Q
contextD
Union[builtins.str,None]
builtins.str"builtins.str
None*(
stacks
builtins.str"builtins.str*
max_entries
AnyY
_cuda_isHistoryEnabledtorch._C._cuda_isHistoryEnabled"
builtins.bool"builtins.bool]
_cuda_getAllocatorBackend"torch._C._cuda_getAllocatorBackend"
builtins.str"builtins.str≤
_cuda_getCheckpointState!torch._C._cuda_getCheckpointState"Z
+torch._C._cuda_CUDAAllocator_AllocatorState"+torch._C._cuda_CUDAAllocator_AllocatorState*(
device
builtins.int"builtins.int*m
mempool`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.intz
_set_cached_tensors_enabled$torch._C._set_cached_tensors_enabled"
None*+
enabled
builtins.bool"builtins.boolp
_add_cached_tensortorch._C._add_cached_tensor"
None*3
t,
torch._tensor.Tensor"torch._tensor.Tensorv
_remove_cached_tensortorch._C._remove_cached_tensor"
None*3
t,
torch._tensor.Tensor"torch._tensor.Tensor»
#_tensors_data_ptrs_at_indices_equal,torch._C._tensors_data_ptrs_at_indices_equal"
builtins.bool"builtins.bool*o
tensorsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*à
ptrs~
'builtins.list[Union[builtins.int,None]]D
Union[builtins.int,None]
builtins.int"builtins.int
None"builtins.list*W
indicesJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listù
0_construct_CUDA_Tensor_From_Storage_And_Metadata9torch._C._construct_CUDA_Tensor_From_Storage_And_Metadata",
torch._tensor.Tensor"torch._tensor.Tensor*G
metadata9
builtins.dict[Any,Any]
Any
Any"builtins.dict*7
storage*
torch.types.Storage"torch.types.Storage~
_storage_Use_Counttorch._C._storage_Use_Count"
builtins.int"builtins.int*-
storage_ptr
builtins.int"builtins.int´
_set_storage_access_error_msg&torch._C._set_storage_access_error_msg"
None*3
t,
torch._tensor.Tensor"torch._tensor.Tensor*#
s
builtins.str"builtins.strz
_free_And_Remove_DeleterFn#torch._C._free_And_Remove_DeleterFn"
None*-
storage_ptr
builtins.int"builtins.intÜ
_has_Standard_Deletertorch._C._has_Standard_Deleter"
builtins.bool"builtins.bool*-
storage_ptr
builtins.int"builtins.intÃ
_cuda_customAllocatortorch._C._cuda_customAllocator"<
torch._C._cuda_CUDAAllocator"torch._C._cuda_CUDAAllocator**
alloc_fn
builtins.int"builtins.int*)
free_fn
builtins.int"builtins.intú
_cuda_changeCurrentAllocator%torch._C._cuda_changeCurrentAllocator"
None*K
	allocator<
torch._C._cuda_CUDAAllocator"torch._C._cuda_CUDAAllocatoro
_cuda_getAllocatortorch._C._cuda_getAllocator"<
torch._C._cuda_CUDAAllocator"torch._C._cuda_CUDAAllocator7
_cuda_lock_mutextorch._C._cuda_lock_mutex"
None;
_cuda_unlock_mutextorch._C._cuda_unlock_mutex"
None∏
_cuda_canDeviceAccessPeer"torch._C._cuda_canDeviceAccessPeer"
builtins.bool"builtins.bool*(
device
builtins.int"builtins.int*-
peer_device
builtins.int"builtins.int¨
)_cuda_jiterator_compile_and_launch_kernel2torch._C._cuda_jiterator_compile_and_launch_kernel",
torch._tensor.Tensor"torch._tensor.Tensor*-
code_string
builtins.str"builtins.str*-
kernel_name
builtins.str"builtins.str*1
return_by_ref
builtins.bool"builtins.bool*-
num_outputs
builtins.int"builtins.int*;
tensors.
builtins.tuple[Any]
Any"builtins.tuple*ü
kwargsí
Lbuiltins.dict[builtins.str,Union[builtins.int,builtins.float,builtins.bool]]
builtins.str"builtins.strî
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"builtins.dicti
_cuda_get_cudnn_benchmark_limit(torch._C._cuda_get_cudnn_benchmark_limit"
builtins.int"builtins.int|
_cuda_set_cudnn_benchmark_limit(torch._C._cuda_set_cudnn_benchmark_limit"
None*%
arg
builtins.int"builtins.intu
$_cuda_get_conv_benchmark_empty_cache-torch._C._cuda_get_conv_benchmark_empty_cache"
builtins.bool"builtins.boolç
%_cudnn_set_conv_benchmark_empty_cache.torch._C._cudnn_set_conv_benchmark_empty_cache"
None**
enable
builtins.bool"builtins.boolE
_nccl_versiontorch._C._nccl_version"
builtins.int"builtins.intW
_nccl_version_suffixtorch._C._nccl_version_suffix" 
builtins.bytes"builtins.bytesM
_nccl_unique_idtorch._C._nccl_unique_id" 
builtins.bytes"builtins.bytes–
_nccl_init_ranktorch._C._nccl_init_rank""
builtins.object"builtins.object*(
nranks
builtins.int"builtins.int*-
comm_id 
builtins.bytes"builtins.bytes*&
rank
builtins.int"builtins.intî
_nccl_reducetorch._C._nccl_reduce"
None*q
inputf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*8
output,
torch._tensor.Tensor"torch._tensor.Tensor*&
root
builtins.int"builtins.int*$
op
builtins.int"builtins.int*≈
streams∑
5Union[typing.Sequence[torch._C._CudaStreamBase],None]r
)typing.Sequence[torch._C._CudaStreamBase]4
torch._C._CudaStreamBase"torch._C._CudaStreamBase"typing.Sequence
None*ü
commsì
,Union[typing.Sequence[builtins.object],None]W
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence
NoneÆ
_nccl_all_reducetorch._C._nccl_all_reduce"
None*q
inputf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*r
outputf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*$
op
builtins.int"builtins.int*≈
streams∑
5Union[typing.Sequence[torch._C._CudaStreamBase],None]r
)typing.Sequence[torch._C._CudaStreamBase]4
torch._C._CudaStreamBase"torch._C._CudaStreamBase"typing.Sequence
None*ü
commsì
,Union[typing.Sequence[builtins.object],None]W
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence
None∫
_nccl_broadcasttorch._C._nccl_broadcast"
None*q
inputf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*&
root
builtins.int"builtins.int*≈
streams∑
5Union[typing.Sequence[torch._C._CudaStreamBase],None]r
)typing.Sequence[torch._C._CudaStreamBase]4
torch._C._CudaStreamBase"torch._C._CudaStreamBase"typing.Sequence
None*ü
commsì
,Union[typing.Sequence[builtins.object],None]W
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence
Noneà
_nccl_all_gathertorch._C._nccl_all_gather"
None*q
inputf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*r
outputf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*≈
streams∑
5Union[typing.Sequence[torch._C._CudaStreamBase],None]r
)typing.Sequence[torch._C._CudaStreamBase]4
torch._C._CudaStreamBase"torch._C._CudaStreamBase"typing.Sequence
None*ü
commsì
,Union[typing.Sequence[builtins.object],None]W
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence
None∂
_nccl_reduce_scattertorch._C._nccl_reduce_scatter"
None*q
inputf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*r
outputf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*$
op
builtins.int"builtins.int*≈
streams∑
5Union[typing.Sequence[torch._C._CudaStreamBase],None]r
)typing.Sequence[torch._C._CudaStreamBase]4
torch._C._CudaStreamBase"torch._C._CudaStreamBase"typing.Sequence
None*ü
commsì
,Union[typing.Sequence[builtins.object],None]W
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence
NoneY
_rocm_is_backward_passtorch._C._rocm_is_backward_pass"
builtins.bool"builtins.booll
_cuda_tunableop_enabletorch._C._cuda_tunableop_enable"
None*'
val
builtins.bool"builtins.boola
_cuda_tunableop_is_enabled#torch._C._cuda_tunableop_is_enabled"
builtins.bool"builtins.boolz
_cuda_tunableop_tuning_enable&torch._C._cuda_tunableop_tuning_enable"
None*'
val
builtins.bool"builtins.boolo
!_cuda_tunableop_tuning_is_enabled*torch._C._cuda_tunableop_tuning_is_enabled"
builtins.bool"builtins.boolë
'_cuda_tunableop_set_max_tuning_duration0torch._C._cuda_tunableop_set_max_tuning_duration"
None**
duration
builtins.int"builtins.inty
'_cuda_tunableop_get_max_tuning_duration0torch._C._cuda_tunableop_get_max_tuning_duration"
builtins.int"builtins.intó
)_cuda_tunableop_set_max_tuning_iterations2torch._C._cuda_tunableop_set_max_tuning_iterations"
None*,

iterations
builtins.int"builtins.int}
)_cuda_tunableop_get_max_tuning_iterations2torch._C._cuda_tunableop_get_max_tuning_iterations"
builtins.int"builtins.intﬂ
_cuda_tunableop_set_filename%torch._C._cuda_tunableop_set_filename"
None**
filename
builtins.str"builtins.str*b
insert_device_ordinalG
Union[builtins.bool,None]
builtins.bool"builtins.bool
Nonec
_cuda_tunableop_get_filename%torch._C._cuda_tunableop_get_filename"
builtins.str"builtins.strµ
_cuda_tunableop_write_file#torch._C._cuda_tunableop_write_file"
builtins.bool"builtins.bool*R
filenameD
Union[builtins.str,None]
builtins.str"builtins.str
None≥
_cuda_tunableop_read_file"torch._C._cuda_tunableop_read_file"
builtins.bool"builtins.bool*R
filenameD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÑ
"_cuda_tunableop_write_file_on_exit+torch._C._cuda_tunableop_write_file_on_exit"
None*'
val
builtins.bool"builtins.boolÇ
_cuda_tunableop_get_results$torch._C._cuda_tunableop_get_results"º
<Tuple[builtins.str,builtins.str,builtins.str,builtins.float]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str 
builtins.float"builtins.float´
_cuda_tunableop_get_validators'torch._C._cuda_tunableop_get_validators"`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str¬
_can_use_flash_attention!torch._C._can_use_flash_attention"
builtins.bool"builtins.bool*8
params,
torch._C._SDPAParams"torch._C._SDPAParams*)
debug
builtins.bool"builtins.bool“
 _can_use_mem_efficient_attention)torch._C._can_use_mem_efficient_attention"
builtins.bool"builtins.bool*8
params,
torch._C._SDPAParams"torch._C._SDPAParams*)
debug
builtins.bool"builtins.boolò

_broadcasttorch._C._broadcast"b
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*W
devicesJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listº
_broadcast_outtorch._C._broadcast_out"b
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*s
out_tensorsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.listÿ
_broadcast_coalescedtorch._C._broadcast_coalesced"ß
2builtins.list[builtins.list[torch._tensor.Tensor]]b
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list"builtins.list*o
tensorsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*W
devicesJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*-
buffer_size
builtins.int"builtins.intÔ
_scattertorch._C._scatter"b
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*W
devicesJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*ì
chunk_sizesÅ
'Union[builtins.list[builtins.int],None]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None*%
dim
builtins.int"builtins.int*õ
streamsç
*Union[builtins.list[torch._C.Stream],None]S
builtins.list[torch._C.Stream]"
torch._C.Stream"torch._C.Stream"builtins.list
None˝
_scatter_outtorch._C._scatter_out"b
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*s
out_tensorsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*%
dim
builtins.int"builtins.int*õ
streamsç
*Union[builtins.list[torch._C.Stream],None]S
builtins.list[torch._C.Stream]"
torch._C.Stream"torch._C.Stream"builtins.list
Noneæ
_gathertorch._C._gather",
torch._tensor.Tensor"torch._tensor.Tensor*o
tensorsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*%
dim
builtins.int"builtins.int*[
destination_indexD
Union[builtins.int,None]
builtins.int"builtins.int
Noneß
_gather_outtorch._C._gather_out",
torch._tensor.Tensor"torch._tensor.Tensor*o
tensorsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*<

out_tensor,
torch._tensor.Tensor"torch._tensor.Tensor*%
dim
builtins.int"builtins.inti
_cuda_isCurrentStreamCapturing'torch._C._cuda_isCurrentStreamCapturing"
builtins.bool"builtins.boolì
_graph_pool_handletorch._C._graph_pool_handle"`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int]
_xpu_setDevicetorch._C._xpu_setDevice"
None*(
device
builtins.int"builtins.int{
_xpu_exchangeDevicetorch._C._xpu_exchangeDevice"
builtins.int"builtins.int*(
device
builtins.int"builtins.intÖ
_xpu_maybeExchangeDevice!torch._C._xpu_maybeExchangeDevice"
builtins.int"builtins.int*(
device
builtins.int"builtins.intG
_xpu_getDevicetorch._C._xpu_getDevice"
builtins.int"builtins.intQ
_xpu_getDeviceCounttorch._C._xpu_getDeviceCount"
builtins.int"builtins.int)
	_xpu_inittorch._C._xpu_init"
Noneø
_xpu_setStreamtorch._C._xpu_setStream"
None*+
	stream_id
builtins.int"builtins.int*.
device_index
builtins.int"builtins.int*-
device_type
builtins.int"builtins.intë
_xpu_getCurrentStreamtorch._C._xpu_getCurrentStream".
builtins.tuple[Any]
Any"builtins.tuple*(
device
builtins.int"builtins.intÖ
_xpu_getCurrentRawStream!torch._C._xpu_getCurrentRawStream"
builtins.int"builtins.int*(
device
builtins.int"builtins.inta
_xpu_synchronizetorch._C._xpu_synchronize"
None*(
device
builtins.int"builtins.int5
_xpu_emptyCachetorch._C._xpu_emptyCache"
None_
_set_worker_signal_handlers$torch._C._set_worker_signal_handlers"
None*
arg
Anyº
_set_worker_pidstorch._C._set_worker_pids"
None*%
key
builtins.int"builtins.int*\

child_pidsL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuplej
_remove_worker_pidstorch._C._remove_worker_pids"
None*+
	loader_id
builtins.int"builtins.intK
_error_if_any_worker_fails#torch._C._error_if_any_worker_fails"
None¥
_create_graph_by_tracing!torch._C._create_graph_by_tracing"˙
?Tuple[torch._C.Graph,TypeAlias[builtins.list[torch._C.IValue]]] 
torch._C.Graph"torch._C.Graphí
)TypeAlias[builtins.list[torch._C.IValue]]S
builtins.list[torch._C.IValue]"
torch._C.IValue"torch._C.IValue"builtins.list"torch._C.Stack*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*
inputs
Any*c
var_name_lookup_fnK
CallableType[builtins.function]&
builtins.function"builtins.function*
strict
Any*
force_outplace
Any*
self
Any *`
argument_namesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list ;
_tracer_warn_use_python torch._C._tracer_warn_use_pythona
_get_tracing_statetorch._C._get_tracing_state".
torch._C.TracingState"torch._C.TracingState?
	_rpc_inittorch._C._rpc_init"
builtins.bool"builtins.boolS
_dist_autograd_inittorch._C._dist_autograd_init"
builtins.bool"builtins.boolA

_c10d_inittorch._C._c10d_init"
builtins.bool"builtins.boolQ
_faulty_agent_inittorch._C._faulty_agent_init"
builtins.bool"builtins.boolç
_register_py_class_for_device&torch._C._register_py_class_for_device"
None*(
device
builtins.str"builtins.str*
cls
AnyW
_current_graph_task_idtorch._C._current_graph_task_id"
builtins.int"builtins.intq
_current_autograd_nodetorch._C._current_autograd_node"6
torch.autograd.graph.Node"torch.autograd.graph.Nodeb
_dispatch_key_settorch._C._dispatch_key_set"
builtins.str"builtins.str*
Tensor
AnyË
gather_tracebacktorch._C.gather_traceback"8
torch._C.CapturedTraceback"torch._C.CapturedTraceback**
python
builtins.bool"builtins.bool**
script
builtins.bool"builtins.bool*'
cpp
builtins.bool"builtins.bool◊
symbolize_tracebackstorch._C.symbolize_tracebacks"ò
.builtins.list[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"builtins.list*Ñ

tracebackst
)builtins.list[torch._C.CapturedTraceback]8
torch._C.CapturedTraceback"torch._C.CapturedTraceback"builtins.list|
_load_mobile_module_from_file&torch._C._load_mobile_module_from_file"
Any**
filename
builtins.str"builtins.strÄ
_load_mobile_module_from_bytes'torch._C._load_mobile_module_from_bytes"
Any*,
bytes_ 
builtins.bytes"builtins.bytesv
_load_jit_module_from_file#torch._C._load_jit_module_from_file"
Any**
filename
builtins.str"builtins.strz
_load_jit_module_from_bytes$torch._C._load_jit_module_from_bytes"
Any*,
bytes_ 
builtins.bytes"builtins.bytesß
_save_mobile_moduletorch._C._save_mobile_module"
Any*=
m6
torch._C.LiteScriptModule"torch._C.LiteScriptModule**
filename
builtins.str"builtins.strÉ
_save_jit_moduletorch._C._save_jit_module"
Any*5
m.
torch._C.ScriptModule"torch._C.ScriptModule**
filename
builtins.str"builtins.str*h
extra_filesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict¶
_save_mobile_module_to_bytes%torch._C._save_mobile_module_to_bytes" 
builtins.bytes"builtins.bytes*=
m6
torch._C.LiteScriptModule"torch._C.LiteScriptModuleÇ
_save_jit_module_to_bytes"torch._C._save_jit_module_to_bytes" 
builtins.bytes"builtins.bytes*5
m.
torch._C.ScriptModule"torch._C.ScriptModule*h
extra_filesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÇ
 _get_module_info_from_flatbuffer)torch._C._get_module_info_from_flatbuffer"
Any**
data 
builtins.bytes"builtins.bytes§
_jit_resolve_packettorch._C._jit_resolve_packet"
builtins.str"builtins.str*)
op_name
builtins.str"builtins.str*
args
Any*
kwargs
Any§
_swap_tensor_impltorch._C._swap_tensor_impl"
Any*4
t1,
torch._tensor.Tensor"torch._tensor.Tensor*4
t2,
torch._tensor.Tensor"torch._tensor.TensorY
_save_pickletorch._C._save_pickle" 
builtins.bytes"builtins.bytes*
obj
Any⁄
_jit_to_static_moduletorch._C._jit_to_static_module"
Any*ó
graph_or_moduleÅ
+Union[torch._C.Graph,torch._C.ScriptModule] 
torch._C.Graph"torch._C.Graph.
torch._C.ScriptModule"torch._C.ScriptModuleà
_fuse_to_static_moduletorch._C._fuse_to_static_module"
Any*ó
graph_or_moduleÅ
+Union[torch._C.Graph,torch._C.ScriptModule] 
torch._C.Graph"torch._C.Graph.
torch._C.ScriptModule"torch._C.ScriptModule**
min_size
builtins.int"builtins.int"›
set_autocast_enabledtorch._C.set_autocast_enabled©
set_autocast_enabledtorch._C.set_autocast_enabled"
None*-
device_type
builtins.str"builtins.str*+
enabled
builtins.bool"builtins.bool0:overloadXz
set_autocast_enabledtorch._C.set_autocast_enabled"
None*+
enabled
builtins.bool"builtins.bool0:overloadX"©
is_autocast_enabledtorch._C.is_autocast_enabledê
is_autocast_enabledtorch._C.is_autocast_enabled"
builtins.bool"builtins.bool*-
device_type
builtins.str"builtins.str0:overloadXa
is_autocast_enabledtorch._C.is_autocast_enabled"
builtins.bool"builtins.bool0:overloadX*i
__path__torch._C.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Ñ
__annotations__torch._C.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*#

_functorchtorch._C._functorch *
_lazytorch._C._lazy */
_lazy_ts_backendtorch._C._lazy_ts_backend *
_nntorch._C._nn *
_onnxtorch._C._onnx *3
_VariableFunctionstorch._C._VariableFunctions *
_cputorch._C._cpu *
_aotitorch._C._aoti *
_verbosetorch._C._verbose *=
float32torch._C.float32 
torch._C.dtype"torch._C.dtype*9
floattorch._C.float 
torch._C.dtype"torch._C.dtype*=
float64torch._C.float64 
torch._C.dtype"torch._C.dtype*;
doubletorch._C.double 
torch._C.dtype"torch._C.dtype*=
float16torch._C.float16 
torch._C.dtype"torch._C.dtype*?
bfloat16torch._C.bfloat16 
torch._C.dtype"torch._C.dtype*I
float8_e4m3fntorch._C.float8_e4m3fn 
torch._C.dtype"torch._C.dtype*M
float8_e4m3fnuztorch._C.float8_e4m3fnuz 
torch._C.dtype"torch._C.dtype*E
float8_e5m2torch._C.float8_e5m2 
torch._C.dtype"torch._C.dtype*M
float8_e5m2fnuztorch._C.float8_e5m2fnuz 
torch._C.dtype"torch._C.dtype*7
halftorch._C.half 
torch._C.dtype"torch._C.dtype*9
uint8torch._C.uint8 
torch._C.dtype"torch._C.dtype*;
uint16torch._C.uint16 
torch._C.dtype"torch._C.dtype*;
uint32torch._C.uint32 
torch._C.dtype"torch._C.dtype*;
uint64torch._C.uint64 
torch._C.dtype"torch._C.dtype*7
int8torch._C.int8 
torch._C.dtype"torch._C.dtype*9
int16torch._C.int16 
torch._C.dtype"torch._C.dtype*9
shorttorch._C.short 
torch._C.dtype"torch._C.dtype*9
int32torch._C.int32 
torch._C.dtype"torch._C.dtype*5
inttorch._C.int 
torch._C.dtype"torch._C.dtype*9
int64torch._C.int64 
torch._C.dtype"torch._C.dtype*7
longtorch._C.long 
torch._C.dtype"torch._C.dtype*A
	complex32torch._C.complex32 
torch._C.dtype"torch._C.dtype*A
	complex64torch._C.complex64 
torch._C.dtype"torch._C.dtype*9
chalftorch._C.chalf 
torch._C.dtype"torch._C.dtype*;
cfloattorch._C.cfloat 
torch._C.dtype"torch._C.dtype*C

complex128torch._C.complex128 
torch._C.dtype"torch._C.dtype*=
cdoubletorch._C.cdouble 
torch._C.dtype"torch._C.dtype*;
quint8torch._C.quint8 
torch._C.dtype"torch._C.dtype*9
qint8torch._C.qint8 
torch._C.dtype"torch._C.dtype*;
qint32torch._C.qint32 
torch._C.dtype"torch._C.dtype*7
booltorch._C.bool 
torch._C.dtype"torch._C.dtype*?
quint4x2torch._C.quint4x2 
torch._C.dtype"torch._C.dtype*?
quint2x4torch._C.quint2x4 
torch._C.dtype"torch._C.dtype*=
bits1x8torch._C.bits1x8 
torch._C.dtype"torch._C.dtype*=
bits2x4torch._C.bits2x4 
torch._C.dtype"torch._C.dtype*=
bits4x2torch._C.bits4x2 
torch._C.dtype"torch._C.dtype*9
bits8torch._C.bits8 
torch._C.dtype"torch._C.dtype*;
bits16torch._C.bits16 
torch._C.dtype"torch._C.dtype*?
stridedtorch._C.strided"
torch._C.layout"torch._C.layout*E

sparse_cootorch._C.sparse_coo"
torch._C.layout"torch._C.layout*E

sparse_csrtorch._C.sparse_csr"
torch._C.layout"torch._C.layout*E

sparse_csctorch._C.sparse_csc"
torch._C.layout"torch._C.layout*E

sparse_bsrtorch._C.sparse_bsr"
torch._C.layout"torch._C.layout*E

sparse_bsctorch._C.sparse_bsc"
torch._C.layout"torch._C.layout*?
_mkldnntorch._C._mkldnn"
torch._C.layout"torch._C.layout*=
jaggedtorch._C.jagged"
torch._C.layout"torch._C.layout*a
contiguous_formattorch._C.contiguous_format0
torch._C.memory_format"torch._C.memory_format*Y
channels_lasttorch._C.channels_last0
torch._C.memory_format"torch._C.memory_format*_
channels_last_3dtorch._C.channels_last_3d0
torch._C.memory_format"torch._C.memory_format*]
preserve_formattorch._C.preserve_format0
torch._C.memory_format"torch._C.memory_format*U
per_tensor_affinetorch._C.per_tensor_affine$
torch._C.qscheme"torch._C.qscheme*W
per_channel_affinetorch._C.per_channel_affine$
torch._C.qscheme"torch._C.qscheme*[
per_tensor_symmetrictorch._C.per_tensor_symmetric$
torch._C.qscheme"torch._C.qscheme*]
per_channel_symmetrictorch._C.per_channel_symmetric$
torch._C.qscheme"torch._C.qscheme*s
 per_channel_affine_float_qparams)torch._C.per_channel_affine_float_qparams$
torch._C.qscheme"torch._C.qscheme*i
CONV_BN_FUSIONtorch._C.CONV_BN_FUSION>
torch._C._MobileOptimizerType"torch._C._MobileOptimizerType*{
INSERT_FOLD_PREPACK_OPS torch._C.INSERT_FOLD_PREPACK_OPS>
torch._C._MobileOptimizerType"torch._C._MobileOptimizerType*i
REMOVE_DROPOUTtorch._C.REMOVE_DROPOUT>
torch._C._MobileOptimizerType"torch._C._MobileOptimizerType*g
FUSE_ADD_RELUtorch._C.FUSE_ADD_RELU>
torch._C._MobileOptimizerType"torch._C._MobileOptimizerType*}
HOIST_CONV_PACKED_PARAMS!torch._C.HOIST_CONV_PACKED_PARAMS>
torch._C._MobileOptimizerType"torch._C._MobileOptimizerType*á
VULKAN_AUTOMATIC_GPU_TRANSFER&torch._C.VULKAN_AUTOMATIC_GPU_TRANSFER>
torch._C._MobileOptimizerType"torch._C._MobileOptimizerType*A

has_openmptorch._C.has_openmp
builtins.bool"builtins.bool*;
has_mkltorch._C.has_mkl
builtins.bool"builtins.bool*=
_has_mpstorch._C._has_mps
builtins.bool"builtins.bool*A

has_lapacktorch._C.has_lapack
builtins.bool"builtins.bool*?
	_has_cudatorch._C._has_cuda
builtins.bool"builtins.bool*A

_has_magmatorch._C._has_magma
builtins.bool"builtins.bool*=
_has_xputorch._C._has_xpu
builtins.bool"builtins.bool*C
_has_mkldnntorch._C._has_mkldnn
builtins.bool"builtins.bool*A

_has_cudnntorch._C._has_cudnn
builtins.bool"builtins.bool*E
has_spectraltorch._C.has_spectral
builtins.bool"builtins.bool*Y
_GLIBCXX_USE_CXX11_ABItorch._C._GLIBCXX_USE_CXX11_ABI
builtins.bool"builtins.bool*Y
default_generatortorch._C.default_generator(
torch._C.Generator"torch._C.Generator*{
_after_ADInplaceOrView_keyset&torch._C._after_ADInplaceOrView_keyset2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*m
_after_autograd_keysettorch._C._after_autograd_keyset2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*Å
 _dispatch_autogradother_backends)torch._C._dispatch_autogradother_backends2
torch._C.DispatchKeySet"torch._C.DispatchKeySet*ô
,_additional_keys_to_prop_for_wrapper_tensors5torch._C._additional_keys_to_prop_for_wrapper_tensors2
torch._C.DispatchKeySet"torch._C.DispatchKeySet