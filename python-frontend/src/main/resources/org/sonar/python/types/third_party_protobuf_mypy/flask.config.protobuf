
flask.config©
ConfigAttributeflask.config.ConfigAttribute"builtins.object*Ê
__init__%flask.config.ConfigAttribute.__init__"
None*F
self<
flask.config.ConfigAttribute"flask.config.ConfigAttribute*&
name
builtins.str"builtins.str*œ
get_converter†
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *¨
__get__$flask.config.ConfigAttribute.__get__"
Any*F
self<
flask.config.ConfigAttribute"flask.config.ConfigAttribute*
obj
Any*
owner
Any *§
__set__$flask.config.ConfigAttribute.__set__"
None*F
self<
flask.config.ConfigAttribute"flask.config.ConfigAttribute*
obj
Any*
value
AnyrÄ
get_converter*flask.config.ConfigAttribute.get_converter†
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
NoneÄ
Configflask.config.Config"builtins.dict*’
__init__flask.config.Config.__init__"
None*4
self*
flask.config.Config"flask.config.Config*+
	root_path
builtins.str"builtins.str*{
defaultsk
"Union[builtins.dict[Any,Any],None]9
builtins.dict[Any,Any]
Any
Any"builtins.dict
None *ã
from_envvarflask.config.Config.from_envvar"
builtins.bool"builtins.bool*4
self*
flask.config.Config"flask.config.Config*/
variable_name
builtins.str"builtins.str*,
silent
builtins.bool"builtins.bool *–
from_prefixed_env%flask.config.Config.from_prefixed_env"
builtins.bool"builtins.bool*4
self*
flask.config.Config"flask.config.Config**
prefix
builtins.str"builtins.str *X
loadsK
CallableType[builtins.function]&
builtins.function"builtins.function *Þ
from_pyfileflask.config.Config.from_pyfile"
builtins.bool"builtins.bool*4
self*
flask.config.Config"flask.config.Config**
filename
builtins.str"builtins.str*,
silent
builtins.bool"builtins.bool *â
from_objectflask.config.Config.from_object"
None*4
self*
flask.config.Config"flask.config.Config*r
obji
#Union[builtins.object,builtins.str]"
builtins.object"builtins.object
builtins.str"builtins.str*Ý
	from_fileflask.config.Config.from_file"
builtins.bool"builtins.bool*4
self*
flask.config.Config"flask.config.Config**
filename
builtins.str"builtins.str*U
loadK
CallableType[builtins.function]&
builtins.function"builtins.function*,
silent
builtins.bool"builtins.bool **
text
builtins.bool"builtins.bool *Ã
from_mapping flask.config.Config.from_mapping"
builtins.bool"builtins.bool*4
self*
flask.config.Config"flask.config.Config*¥
mapping•
,Union[typing.Mapping[builtins.str,Any],None]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping
None *
kwargs
Any*Õ
get_namespace!flask.config.Config.get_namespace"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*4
self*
flask.config.Config"flask.config.Config*+
	namespace
builtins.str"builtins.str*/
	lowercase
builtins.bool"builtins.bool *4
trim_namespace
builtins.bool"builtins.bool *t
__repr__flask.config.Config.__repr__"
builtins.str"builtins.str*,*
flask.config.Config"flask.config.ConfigrH
	root_pathflask.config.Config.root_path
builtins.str"builtins.str*ˆ
__annotations__flask.config.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
ttyping 