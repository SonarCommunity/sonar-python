
pathlib2˝
TracebackTypetypes.TracebackType"builtins.objectj27rP
tb_frametypes.TracebackType.tb_frame"
types.FrameType"types.FrameType*27rJ
tb_lastitypes.TracebackType.tb_lasti
builtins.int"builtins.int*27rL
	tb_linenotypes.TracebackType.tb_lineno
builtins.int"builtins.int*27rV
tb_nexttypes.TracebackType.tb_next*
types.TracebackType"types.TracebackType*27œ 
IO	typing.IO"typing.Iterator*ä
modetyping.IO.mode"
builtins.str"builtins.str*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`z27*ä
nametyping.IO.name"
builtins.str"builtins.str*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`z27*~
closetyping.IO.close"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*ê
closedtyping.IO.closed"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`z27*î
filenotyping.IO.fileno"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*~
flushtyping.IO.flush"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*ñ
isattytyping.IO.isatty"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*¨
readtyping.IO.read"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*%
n
builtins.int"builtins.int 0:abstractmethod@z27*ö
readabletyping.IO.readable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*∏
readlinetyping.IO.readline"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*)
limit
builtins.int"builtins.int 0:abstractmethod@z27*Ë
	readlinestyping.IO.readlines"@
builtins.list[typing.AnyStr]
typing.AnyStr"builtins.list*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*(
hint
builtins.int"builtins.int 0:abstractmethod@z27*Ê
seektyping.IO.seek"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*(
offset
builtins.int"builtins.int**
whence
builtins.int"builtins.int 0:abstractmethod@z27*ö
seekabletyping.IO.seekable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*ê
telltyping.IO.tell"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*Í
truncatetyping.IO.truncate"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None 0:abstractmethod@z27*ö
writabletyping.IO.writable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*¨
writetyping.IO.write"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*
s
typing.AnyStr0:abstractmethod@z27*Ÿ

writelinestyping.IO.writelines"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*O
linesD
typing.Iterable[typing.AnyStr]
typing.AnyStr"typing.Iterable0:abstractmethod@z27*Ö
nexttyping.IO.next"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*æ
__iter__typing.IO.__iter__"D
typing.Iterator[typing.AnyStr]
typing.AnyStr"typing.Iterator*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*¥
	__enter__typing.IO.__enter__"8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*©
__exit__typing.IO.__exit__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*ê
tä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*k
valueb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*f
	tracebackY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None0:abstractmethod@z27Pj27ﬁ
	Generatortyping.Generator"typing.Iterator*ﬂ
nexttyping.Generator.next"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:abstractmethod@z27*Ä
sendtyping.Generator.send"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*
__value
typing._T_contra0:abstractmethod@z27*Ÿ
closetyping.Generator.close"
None*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:abstractmethod@z27*Ô
gi_codetyping.Generator.gi_code" 
types.CodeType"types.CodeType*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`z27*Û
gi_frametyping.Generator.gi_frame""
types.FrameType"types.FrameType*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`z27*Û

gi_runningtyping.Generator.gi_running"
builtins.bool"builtins.bool*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`z272à
throwtyping.Generator.throw¡
throwtyping.Generator.throw"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*[
__typR
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException*ì
__valá
-Union[builtins.BaseException,builtins.object]0
builtins.BaseException"builtins.BaseException"
builtins.object"builtins.object *c
__tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@Xû
throwtyping.Generator.throw"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*9
__typ0
builtins.BaseException"builtins.BaseException*
__val
None *c
__tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@X"27Pj27â
Sequencetyping.Sequence"typing.Iterable"typing.Container"typing.Reversible*û
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*û
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*≈
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz27*∏
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*¿
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*§
__len__typing.Sequence.__len__"
builtins.int"builtins.int*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence0:abstractmethod@z272Ä
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"27Pj27°
TypeVartyping.TypeVar"builtins.object*ﬁ
__init__typing.TypeVar.__init__"
None**
self 
typing.TypeVar"typing.TypeVar*&
name
builtins.str"builtins.str*'
constraints
	Type[Any]
Any*H
bound;
Union[Type[Any],None]
	Type[Any]
Any
None */
	covariant
builtins.bool"builtins.bool *3
contravariant
builtins.bool"builtins.bool z27j27rf
	__bound__typing.TypeVar.__bound__;
Union[Type[Any],None]
	Type[Any]
Any
None*27rz
__constraints__typing.TypeVar.__constraints__C
builtins.tuple[Type[Any]]
	Type[Any]
Any"builtins.tuple*27rQ
__covariant__typing.TypeVar.__covariant__
builtins.bool"builtins.bool*27rY
__contravariant__ typing.TypeVar.__contravariant__
builtins.bool"builtins.bool*27í 
PurePathpathlib2.PurePath"builtins.object*Â
__new__pathlib2.PurePath.__new__"
pathlib2._P*/
cls&
Type[pathlib2._P]
pathlib2._P*y
argso
%Union[builtins.str,pathlib2.PurePath]
builtins.str"builtins.str&
pathlib2.PurePath"pathlib2.PurePathz27*z
__hash__pathlib2.PurePath.__hash__"
builtins.int"builtins.int*0
self&
pathlib2.PurePath"pathlib2.PurePathz27*ß
__lt__pathlib2.PurePath.__lt__"
builtins.bool"builtins.bool*.
self&
pathlib2.PurePath"pathlib2.PurePath*/
other&
pathlib2.PurePath"pathlib2.PurePathz27*ß
__le__pathlib2.PurePath.__le__"
builtins.bool"builtins.bool*.
self&
pathlib2.PurePath"pathlib2.PurePath*/
other&
pathlib2.PurePath"pathlib2.PurePathz27*ß
__gt__pathlib2.PurePath.__gt__"
builtins.bool"builtins.bool*.
self&
pathlib2.PurePath"pathlib2.PurePath*/
other&
pathlib2.PurePath"pathlib2.PurePathz27*ß
__ge__pathlib2.PurePath.__ge__"
builtins.bool"builtins.bool*.
self&
pathlib2.PurePath"pathlib2.PurePath*/
other&
pathlib2.PurePath"pathlib2.PurePathz27*“
__truediv__pathlib2.PurePath.__truediv__"
pathlib2._P*
self
pathlib2._P*v
keyo
%Union[builtins.str,pathlib2.PurePath]
builtins.str"builtins.str&
pathlib2.PurePath"pathlib2.PurePathz27*‘
__rtruediv__pathlib2.PurePath.__rtruediv__"
pathlib2._P*
self
pathlib2._P*v
keyo
%Union[builtins.str,pathlib2.PurePath]
builtins.str"builtins.str&
pathlib2.PurePath"pathlib2.PurePathz27* 
__div__pathlib2.PurePath.__div__"
pathlib2._P*
self
pathlib2._P*v
keyo
%Union[builtins.str,pathlib2.PurePath]
builtins.str"builtins.str&
pathlib2.PurePath"pathlib2.PurePathz27*|
	__bytes__pathlib2.PurePath.__bytes__"
builtins.str"builtins.str*0
self&
pathlib2.PurePath"pathlib2.PurePathz27*z
as_posixpathlib2.PurePath.as_posix"
builtins.str"builtins.str*0
self&
pathlib2.PurePath"pathlib2.PurePathz27*v
as_uripathlib2.PurePath.as_uri"
builtins.str"builtins.str*0
self&
pathlib2.PurePath"pathlib2.PurePathz27*Ç
is_absolutepathlib2.PurePath.is_absolute"
builtins.bool"builtins.bool*0
self&
pathlib2.PurePath"pathlib2.PurePathz27*Ç
is_reservedpathlib2.PurePath.is_reserved"
builtins.bool"builtins.bool*0
self&
pathlib2.PurePath"pathlib2.PurePathz27*¶
matchpathlib2.PurePath.match"
builtins.bool"builtins.bool*0
self&
pathlib2.PurePath"pathlib2.PurePath*.
path_pattern
builtins.str"builtins.strz27*ÿ
relative_topathlib2.PurePath.relative_to"
pathlib2._P*
self
pathlib2._P*z
othero
%Union[builtins.str,pathlib2.PurePath]
builtins.str"builtins.str&
pathlib2.PurePath"pathlib2.PurePathz27*Ä
	with_namepathlib2.PurePath.with_name"
pathlib2._P*
self
pathlib2._P*&
name
builtins.str"builtins.strz27*Ü
with_suffixpathlib2.PurePath.with_suffix"
pathlib2._P*
self
pathlib2._P*(
suffix
builtins.str"builtins.strz27*“
joinpathpathlib2.PurePath.joinpath"
pathlib2._P*
self
pathlib2._P*z
othero
%Union[builtins.str,pathlib2.PurePath]
builtins.str"builtins.str&
pathlib2.PurePath"pathlib2.PurePathz27*ì
parentspathlib2.PurePath.parents"@
typing.Sequence[pathlib2._P]
pathlib2._P"typing.Sequence*
self
pathlib2._P0:property`z27*`
parentpathlib2.PurePath.parent"
pathlib2._P*
self
pathlib2._P0:property`z27j27rr
partspathlib2.PurePath.partsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*27rB
drivepathlib2.PurePath.drive
builtins.str"builtins.str*27r@
rootpathlib2.PurePath.root
builtins.str"builtins.str*27rD
anchorpathlib2.PurePath.anchor
builtins.str"builtins.str*27r@
namepathlib2.PurePath.name
builtins.str"builtins.str*27rD
suffixpathlib2.PurePath.suffix
builtins.str"builtins.str*27rv
suffixespathlib2.PurePath.suffixesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*27r@
stempathlib2.PurePath.stem
builtins.str"builtins.str*27>
PurePosixPathpathlib2.PurePosixPath"pathlib2.PurePathj27B
PureWindowsPathpathlib2.PureWindowsPath"pathlib2.PurePathj27†4
Pathpathlib2.Path"pathlib2.PurePath*ˆ
__new__pathlib2.Path.__new__"
pathlib2._P*/
cls&
Type[pathlib2._P]
pathlib2._P*y
argso
%Union[builtins.str,pathlib2.PurePath]
builtins.str"builtins.str&
pathlib2.PurePath"pathlib2.PurePath*
kwargs
Anyz27*p
	__enter__pathlib2.Path.__enter__"
pathlib2.Path"pathlib2.Path*&
self
pathlib2.Path"pathlib2.Pathz27*ä
__exit__pathlib2.Path.__exit__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*&
self
pathlib2.Path"pathlib2.Path*ó
exc_typeä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*o
	exc_valueb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*f
	tracebackY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
Nonez27*o
cwdpathlib2.Path.cwd"
pathlib2._P*/
cls&
Type[pathlib2._P]
pathlib2._P0:classmethodpz27*p
statpathlib2.Path.stat"&
posix.stat_result"posix.stat_result*(
self
pathlib2.Path"pathlib2.Pathz27*|
chmodpathlib2.Path.chmod"
None*(
self
pathlib2.Path"pathlib2.Path*&
mode
builtins.int"builtins.intz27*l
existspathlib2.Path.exists"
builtins.bool"builtins.bool*(
self
pathlib2.Path"pathlib2.Pathz27*Ê
globpathlib2.Path.glob"q
)typing.Generator[pathlib2.Path,None,None]
pathlib2.Path"pathlib2.Path
None
None"typing.Generator*(
self
pathlib2.Path"pathlib2.Path*)
pattern
builtins.str"builtins.strz27*h
grouppathlib2.Path.group"
builtins.str"builtins.str*(
self
pathlib2.Path"pathlib2.Pathz27*l
is_dirpathlib2.Path.is_dir"
builtins.bool"builtins.bool*(
self
pathlib2.Path"pathlib2.Pathz27*n
is_filepathlib2.Path.is_file"
builtins.bool"builtins.bool*(
self
pathlib2.Path"pathlib2.Pathz27*t

is_symlinkpathlib2.Path.is_symlink"
builtins.bool"builtins.bool*(
self
pathlib2.Path"pathlib2.Pathz27*r
	is_socketpathlib2.Path.is_socket"
builtins.bool"builtins.bool*(
self
pathlib2.Path"pathlib2.Pathz27*n
is_fifopathlib2.Path.is_fifo"
builtins.bool"builtins.bool*(
self
pathlib2.Path"pathlib2.Pathz27*~
is_block_devicepathlib2.Path.is_block_device"
builtins.bool"builtins.bool*(
self
pathlib2.Path"pathlib2.Pathz27*|
is_char_devicepathlib2.Path.is_char_device"
builtins.bool"builtins.bool*(
self
pathlib2.Path"pathlib2.Pathz27*¡
iterdirpathlib2.Path.iterdir"q
)typing.Generator[pathlib2.Path,None,None]
pathlib2.Path"pathlib2.Path
None
None"typing.Generator*(
self
pathlib2.Path"pathlib2.Pathz27*~
lchmodpathlib2.Path.lchmod"
None*(
self
pathlib2.Path"pathlib2.Path*&
mode
builtins.int"builtins.intz27*r
lstatpathlib2.Path.lstat"&
posix.stat_result"posix.stat_result*(
self
pathlib2.Path"pathlib2.Pathz27*›
mkdirpathlib2.Path.mkdir"
None*(
self
pathlib2.Path"pathlib2.Path*(
mode
builtins.int"builtins.int *-
parents
builtins.bool"builtins.bool *.
exist_ok
builtins.bool"builtins.bool z27*Ú
openpathlib2.Path.open"$
typing.IO[Any]
Any"	typing.IO*(
self
pathlib2.Path"pathlib2.Path*0
mode$
builtins.unicode"builtins.unicode *-
	buffering
builtins.int"builtins.int *`
encodingP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None *^
errorsP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None *_
newlineP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None z27*h
ownerpathlib2.Path.owner"
builtins.str"builtins.str*(
self
pathlib2.Path"pathlib2.Pathz27*”
renamepathlib2.Path.rename"
None*(
self
pathlib2.Path"pathlib2.Path*{
targeto
%Union[builtins.str,pathlib2.PurePath]
builtins.str"builtins.str&
pathlib2.PurePath"pathlib2.PurePathz27*’
replacepathlib2.Path.replace"
None*(
self
pathlib2.Path"pathlib2.Path*{
targeto
%Union[builtins.str,pathlib2.PurePath]
builtins.str"builtins.str&
pathlib2.PurePath"pathlib2.PurePathz27*P
resolvepathlib2.Path.resolve"
pathlib2._P*
self
pathlib2._Pz27*Ë
rglobpathlib2.Path.rglob"q
)typing.Generator[pathlib2.Path,None,None]
pathlib2.Path"pathlib2.Path
None
None"typing.Generator*(
self
pathlib2.Path"pathlib2.Path*)
pattern
builtins.str"builtins.strz27*T
rmdirpathlib2.Path.rmdir"
None*(
self
pathlib2.Path"pathlib2.Pathz27*ä

symlink_topathlib2.Path.symlink_to"
None*(
self
pathlib2.Path"pathlib2.Path*o
targetc
!Union[builtins.str,pathlib2.Path]
builtins.str"builtins.str
pathlib2.Path"pathlib2.Path*9
target_is_directory
builtins.bool"builtins.bool z27*Æ
touchpathlib2.Path.touch"
None*(
self
pathlib2.Path"pathlib2.Path*(
mode
builtins.int"builtins.int *.
exist_ok
builtins.bool"builtins.bool z27*V
unlinkpathlib2.Path.unlink"
None*(
self
pathlib2.Path"pathlib2.Pathz27*q
homepathlib2.Path.home"
pathlib2._P*/
cls&
Type[pathlib2._P]
pathlib2._P0:classmethodpz27*R
absolutepathlib2.Path.absolute"
pathlib2._P*
self
pathlib2._Pz27*V

expanduserpathlib2.Path.expanduser"
pathlib2._P*
self
pathlib2._Pz27*r

read_bytespathlib2.Path.read_bytes"
builtins.str"builtins.str*(
self
pathlib2.Path"pathlib2.Pathz27*ö
	read_textpathlib2.Path.read_text"
builtins.str"builtins.str*(
self
pathlib2.Path"pathlib2.Path*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None z27*Ω
samefilepathlib2.Path.samefile"
builtins.bool"builtins.bool*(
self
pathlib2.Path"pathlib2.Path* 

other_pathπ
;Union[builtins.str,builtins.str,builtins.int,pathlib2.Path]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.int"builtins.int
pathlib2.Path"pathlib2.Pathz27*ú
write_bytespathlib2.Path.write_bytes"
builtins.int"builtins.int*(
self
pathlib2.Path"pathlib2.Path*&
data
builtins.str"builtins.strz27*ƒ

write_textpathlib2.Path.write_text"
builtins.int"builtins.int*(
self
pathlib2.Path"pathlib2.Path*&
data
builtins.str"builtins.str*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None z27j27J
	PosixPathpathlib2.PosixPath"pathlib2.Path"pathlib2.PurePosixPathj27P
WindowsPathpathlib2.WindowsPath"pathlib2.Path"pathlib2.PureWindowsPathj27*
osos *27*9
Any
typing.Any"
builtins.object"builtins.object*27*K
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm*27*E
Tupletyping.Tuple*
typing._SpecialForm"typing._SpecialForm*27*C
Typetyping.Type*
typing._SpecialForm"typing._SpecialForm*27*E
Uniontyping.Union*
typing._SpecialForm"typing._SpecialForm*27