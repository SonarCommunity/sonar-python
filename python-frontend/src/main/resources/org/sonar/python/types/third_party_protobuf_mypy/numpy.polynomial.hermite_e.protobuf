
numpy.polynomial.hermite_eœ
HermiteE#numpy.polynomial.hermite_e.HermiteE"&numpy.polynomial._polybase.ABCPolyBaser=
domain*numpy.polynomial.hermite_e.HermiteE.domain
Anyr=
window*numpy.polynomial.hermite_e.HermiteE.window
AnyrE

basis_name.numpy.polynomial.hermite_e.HermiteE.basis_name
Any<

poly2herme%numpy.polynomial.hermite_e.poly2herme*
pol:

herme2poly%numpy.polynomial.hermite_e.herme2poly*
cC
	hermeline$numpy.polynomial.hermite_e.hermeline*
off*
sclF
hermefromroots)numpy.polynomial.hermite_e.hermefromroots*	
roots?
hermeadd#numpy.polynomial.hermite_e.hermeadd*
c1*
c2?
hermesub#numpy.polynomial.hermite_e.hermesub*
c1*
c28
	hermemulx$numpy.polynomial.hermite_e.hermemulx*
c?
hermemul#numpy.polynomial.hermite_e.hermemul*
c1*
c2?
hermediv#numpy.polynomial.hermite_e.hermediv*
c1*
c2O
hermepow#numpy.polynomial.hermite_e.hermepow*
c*
pow*
maxpower V
hermeder#numpy.polynomial.hermite_e.hermeder*
c*
m *	
scl *

axis k
hermeint#numpy.polynomial.hermite_e.hermeint*
c*
m *
k *

lbnd *	
scl *

axis K
hermeval#numpy.polynomial.hermite_e.hermeval*
x*
c*
tensor H

hermeval2d%numpy.polynomial.hermite_e.hermeval2d*
x*
y*
cJ
hermegrid2d&numpy.polynomial.hermite_e.hermegrid2d*
x*
y*
cO

hermeval3d%numpy.polynomial.hermite_e.hermeval3d*
x*
y*
z*
cQ
hermegrid3d&numpy.polynomial.hermite_e.hermegrid3d*
x*
y*
z*
cE
hermevander&numpy.polynomial.hermite_e.hermevander*
x*
degP
hermevander2d(numpy.polynomial.hermite_e.hermevander2d*
x*
y*
degW
hermevander3d(numpy.polynomial.hermite_e.hermevander3d*
x*
y*
z*
degh
hermefit#numpy.polynomial.hermite_e.hermefit*
x*
y*
deg*
rcond *

full *
w B
hermecompanion)numpy.polynomial.hermite_e.hermecompanion*
c:

hermeroots%numpy.polynomial.hermite_e.hermeroots*
c<

hermegauss%numpy.polynomial.hermite_e.hermegauss*
deg<
hermeweight&numpy.polynomial.hermite_e.hermeweight*
x*–
__annotations__*numpy.polynomial.hermite_e.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*y
__all__"numpy.polynomial.hermite_e.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*~
	hermetrim$numpy.polynomial.hermite_e.hermetrimK
CallableType[builtins.function]&
builtins.function"builtins.function*¥
hermedomain&numpy.polynomial.hermite_e.hermedomainí
Nnumpy.ndarray[Any,numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]]
Any‚
;numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]µ
.TypeAlias[numpy.signedinteger[TypeAlias[Any]]]u
#numpy.signedinteger[TypeAlias[Any]]9
TypeAlias[Any]
Any"numpy._typing._nbit._NBitInt"numpy.signedinteger"
numpy.int_"numpy.dtype"numpy.ndarray*¡
	hermezero$numpy.polynomial.hermite_e.hermezeroí
Nnumpy.ndarray[Any,numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]]
Any‚
;numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]µ
.TypeAlias[numpy.signedinteger[TypeAlias[Any]]]u
#numpy.signedinteger[TypeAlias[Any]]9
TypeAlias[Any]
Any"numpy._typing._nbit._NBitInt"numpy.signedinteger"
numpy.int_"numpy.dtype"numpy.ndarray*Ÿ
hermeone#numpy.polynomial.hermite_e.hermeoneí
Nnumpy.ndarray[Any,numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]]
Any‚
;numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]µ
.TypeAlias[numpy.signedinteger[TypeAlias[Any]]]u
#numpy.signedinteger[TypeAlias[Any]]9
TypeAlias[Any]
Any"numpy._typing._nbit._NBitInt"numpy.signedinteger"
numpy.int_"numpy.dtype"numpy.ndarray*›
hermex!numpy.polynomial.hermite_e.hermexí
Nnumpy.ndarray[Any,numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]]
Any‚
;numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]µ
.TypeAlias[numpy.signedinteger[TypeAlias[Any]]]u
#numpy.signedinteger[TypeAlias[Any]]9
TypeAlias[Any]
Any"numpy._typing._nbit._NBitInt"numpy.signedinteger"
numpy.int_"numpy.dtype"numpy.ndarray