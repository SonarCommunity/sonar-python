
fpdf.line_breakÿ#
Fragmentfpdf.line_break.Fragment"builtins.object*Í
__init__!fpdf.line_break.Fragment.__init__"
None*>
self4
fpdf.line_break.Fragment"fpdf.line_break.Fragment*Æ

charactersù
/Union[builtins.list[builtins.str],builtins.str]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.str"builtins.str*°
graphics_stateå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict*'
k 
builtins.float"builtins.float*O
urlD
Union[builtins.str,None]
builtins.str"builtins.str
None z36z37z38z39z310z311z312z313*o
is_ttf_font$fpdf.line_break.Fragment.is_ttf_font*
self0:property`z36z37z38z39z310z311z312z313*m

font_style#fpdf.line_break.Fragment.font_style*
self0:property`z36z37z38z39z310z311z312z313*o
font_family$fpdf.line_break.Fragment.font_family*
self0:property`z36z37z38z39z310z311z312z313*q
font_size_pt%fpdf.line_break.Fragment.font_size_pt*
self0:property`z36z37z38z39z310z311z312z313*k
	font_size"fpdf.line_break.Fragment.font_size*
self0:property`z36z37z38z39z310z311z312z313*w
font_stretching(fpdf.line_break.Fragment.font_stretching*
self0:property`z36z37z38z39z310z311z312z313*q
char_spacing%fpdf.line_break.Fragment.char_spacing*
self0:property`z36z37z38z39z310z311z312z313*k
	text_mode"fpdf.line_break.Fragment.text_mode*
self0:property`z36z37z38z39z310z311z312z313*k
	underline"fpdf.line_break.Fragment.underline*
self0:property`z36z37z38z39z310z311z312z313*m

draw_color#fpdf.line_break.Fragment.draw_color*
self0:property`z36z37z38z39z310z311z312z313*m

fill_color#fpdf.line_break.Fragment.fill_color*
self0:property`z36z37z38z39z310z311z312z313*m

text_color#fpdf.line_break.Fragment.text_color*
self0:property`z36z37z38z39z310z311z312z313*m

line_width#fpdf.line_break.Fragment.line_width*
self0:property`z36z37z38z39z310z311z312z313*k
	char_vpos"fpdf.line_break.Fragment.char_vpos*
self0:property`z36z37z38z39z310z311z312z313*a
liftfpdf.line_break.Fragment.lift*
self0:property`z36z37z38z39z310z311z312z313*e
stringfpdf.line_break.Fragment.string*
self0:property`z36z37z38z39z310z311z312z313*ª
trimfpdf.line_break.Fragment.trim"
Any*>
self4
fpdf.line_break.Fragment"fpdf.line_break.Fragment*'
index
builtins.int"builtins.intz36z37z38z39z310z311z312z313*›
__eq__fpdf.line_break.Fragment.__eq__"
builtins.bool"builtins.bool*64
fpdf.line_break.Fragment"fpdf.line_break.Fragment*64
fpdf.line_break.Fragment"fpdf.line_break.Fragmentz36z37z38z39z310z311z312z313*ù
	get_width"fpdf.line_break.Fragment.get_width"
Any*>
self4
fpdf.line_break.Fragment"fpdf.line_break.Fragment*)
start
builtins.int"builtins.int *O
endD
Union[builtins.int,None]
builtins.int"builtins.int
None *Q
charsD
Union[builtins.str,None]
builtins.str"builtins.str
None *0

initial_cs
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*ø
get_character_width,fpdf.line_break.Fragment.get_character_width"
Any*>
self4
fpdf.line_break.Fragment"fpdf.line_break.Fragment*+
	character
builtins.str"builtins.str*.
print_sh
builtins.bool"builtins.bool *0

initial_cs
builtins.bool"builtins.bool z36z37z38z39z310z311z312z3132õ
fontfpdf.line_break.Fragment.font?
fontfpdf.line_break.Fragment.font*
self0:propertyX`é
fontfpdf.line_break.Fragment.font"
None*>
self4
fpdf.line_break.Fragment"fpdf.line_break.Fragment*
v
Any0:font.setter"36"37"38"39"310"311"312"313j36j37j38j39j310j311j312j313r°

characters#fpdf.line_break.Fragment.charactersJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*36*37*38*39*310*311*312*313rÏ
graphics_state'fpdf.line_break.Fragment.graphics_stateå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict*36*37*38*39*310*311*312*313re
kfpdf.line_break.Fragment.k 
builtins.float"builtins.float*36*37*38*39*310*311*312*313rç
urlfpdf.line_break.Fragment.urlD
Union[builtins.str,None]
builtins.str"builtins.str
None*36*37*38*39*310*311*312*313˚0
TextLinefpdf.line_break.TextLine"builtins.tuple*˜
_replace!fpdf.line_break.TextLine._replace"È
fpdf.line_break.TextLine._NT∆
]Tuple[builtins.tuple[TypeAlias[Any]],builtins.float,builtins.int,builtins.bool,builtins.bool]c
builtins.tuple[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.tuple 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.bool"builtins.bool
builtins.bool"builtins.bool*ı
_selfÈ
fpdf.line_break.TextLine._NT∆
]Tuple[builtins.tuple[TypeAlias[Any]],builtins.float,builtins.int,builtins.bool,builtins.bool]c
builtins.tuple[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.tuple 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.bool"builtins.bool
builtins.bool"builtins.bool*t
	fragmentsc
builtins.tuple[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.tuple *2

text_width 
builtins.float"builtins.float *4
number_of_spaces
builtins.int"builtins.int *-
justify
builtins.bool"builtins.bool *1
trailing_nl
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*õ	
__new__ fpdf.line_break.TextLine.__new__"È
fpdf.line_break.TextLine._NT∆
]Tuple[builtins.tuple[TypeAlias[Any]],builtins.float,builtins.int,builtins.bool,builtins.bool]c
builtins.tuple[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.tuple 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.bool"builtins.bool
builtins.bool"builtins.bool*£
_clsò
"Type[fpdf.line_break.TextLine._NT]È
fpdf.line_break.TextLine._NT∆
]Tuple[builtins.tuple[TypeAlias[Any]],builtins.float,builtins.int,builtins.bool,builtins.bool]c
builtins.tuple[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.tuple 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.bool"builtins.bool
builtins.bool"builtins.bool"type*r
	fragmentsc
builtins.tuple[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.tuple*0

text_width 
builtins.float"builtins.float*2
number_of_spaces
builtins.int"builtins.int*+
justify
builtins.bool"builtins.bool*1
trailing_nl
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*†
_asdict fpdf.line_break.TextLine._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*ı
_selfÈ
fpdf.line_break.TextLine._NT∆
]Tuple[builtins.tuple[TypeAlias[Any]],builtins.float,builtins.int,builtins.bool,builtins.bool]c
builtins.tuple[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.tuple 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.bool"builtins.bool
builtins.bool"builtins.boolz36z37z38z39z310z311z312z313*÷
_makefpdf.line_break.TextLine._make"È
fpdf.line_break.TextLine._NT∆
]Tuple[builtins.tuple[TypeAlias[Any]],builtins.float,builtins.int,builtins.bool,builtins.bool]c
builtins.tuple[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.tuple 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.bool"builtins.bool
builtins.bool"builtins.bool*£
_clsò
"Type[fpdf.line_break.TextLine._NT]È
fpdf.line_break.TextLine._NT∆
]Tuple[builtins.tuple[TypeAlias[Any]],builtins.float,builtins.int,builtins.bool,builtins.bool]c
builtins.tuple[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.tuple 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.bool"builtins.bool
builtins.bool"builtins.bool"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313r‹
	fragments"fpdf.line_break.TextLine.fragmentsc
builtins.tuple[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.tuple*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rõ

text_width#fpdf.line_break.TextLine.text_width 
builtins.float"builtins.float*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313r£
number_of_spaces)fpdf.line_break.TextLine.number_of_spaces
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rì
justify fpdf.line_break.TextLine.justify
builtins.bool"builtins.bool*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rõ
trailing_nl$fpdf.line_break.TextLine.trailing_nl
builtins.bool"builtins.bool*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313r≥
_fields fpdf.line_break.TextLine._fields·
GTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*36*37*38*39*310*311*312*313r≤
_field_types%fpdf.line_break.TextLine._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313r∏
_field_defaults(fpdf.line_break.TextLine._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313rm
_source fpdf.line_break.TextLine._source
builtins.str"builtins.str*36*37*38*39*310*311*312*313r∏
__annotations__(fpdf.line_break.TextLine.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313rÂ
__match_args__'fpdf.line_break.TextLine.__match_args__ï
tTuple[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*310*311*312*313æ1
	SpaceHintfpdf.line_break.SpaceHint"builtins.tuple*∏
_replace"fpdf.line_break.SpaceHint._replace"∂
fpdf.line_break.SpaceHint._NTí
VTuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int*¬
_self∂
fpdf.line_break.SpaceHint._NTí
VTuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int*;
original_fragment_index
builtins.int"builtins.int *<
original_character_index
builtins.int"builtins.int *?
current_line_fragment_index
builtins.int"builtins.int *@
current_line_character_index
builtins.int"builtins.int *2

line_width 
builtins.float"builtins.float *4
number_of_spaces
builtins.int"builtins.int z36z37z38z39z310z311z312z313*Ÿ
__new__!fpdf.line_break.SpaceHint.__new__"∂
fpdf.line_break.SpaceHint._NTí
VTuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int*Ò
_clsÊ
#Type[fpdf.line_break.SpaceHint._NT]∂
fpdf.line_break.SpaceHint._NTí
VTuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int"type*9
original_fragment_index
builtins.int"builtins.int*:
original_character_index
builtins.int"builtins.int*=
current_line_fragment_index
builtins.int"builtins.int*>
current_line_character_index
builtins.int"builtins.int*0

line_width 
builtins.float"builtins.float*2
number_of_spaces
builtins.int"builtins.intz36z37z38z39z310z311z312z313*Ó
_asdict!fpdf.line_break.SpaceHint._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*¬
_self∂
fpdf.line_break.SpaceHint._NTí
VTuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.intz36z37z38z39z310z311z312z313*Ú
_makefpdf.line_break.SpaceHint._make"∂
fpdf.line_break.SpaceHint._NTí
VTuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int*Ò
_clsÊ
#Type[fpdf.line_break.SpaceHint._NT]∂
fpdf.line_break.SpaceHint._NTí
VTuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313r≤
original_fragment_index1fpdf.line_break.SpaceHint.original_fragment_index
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313r¥
original_character_index2fpdf.line_break.SpaceHint.original_character_index
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313r∫
current_line_fragment_index5fpdf.line_break.SpaceHint.current_line_fragment_index
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rº
current_line_character_index6fpdf.line_break.SpaceHint.current_line_character_index
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rú

line_width$fpdf.line_break.SpaceHint.line_width 
builtins.float"builtins.float*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313r§
number_of_spaces*fpdf.line_break.SpaceHint.number_of_spaces
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rﬂ
_fields!fpdf.line_break.SpaceHint._fieldså
TTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*36*37*38*39*310*311*312*313r≥
_field_types&fpdf.line_break.SpaceHint._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313rπ
_field_defaults)fpdf.line_break.SpaceHint._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313rn
_source!fpdf.line_break.SpaceHint._source
builtins.str"builtins.str*36*37*38*39*310*311*312*313rπ
__annotations__)fpdf.line_break.SpaceHint.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313r∂
__match_args__(fpdf.line_break.SpaceHint.__match_args__Â
äTuple[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*310*311*312*313˚Q

HyphenHintfpdf.line_break.HyphenHint"builtins.tuple*Ä
_replace#fpdf.line_break.HyphenHint._replace"ˇ
fpdf.line_break.HyphenHint._NT⁄
¨Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int,builtins.str,builtins.float,builtins.dict[builtins.str,TypeAlias[Any]],builtins.float]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str 
builtins.float"builtins.floatå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict 
builtins.float"builtins.float*ã
_selfˇ
fpdf.line_break.HyphenHint._NT⁄
¨Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int,builtins.str,builtins.float,builtins.dict[builtins.str,TypeAlias[Any]],builtins.float]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str 
builtins.float"builtins.floatå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict 
builtins.float"builtins.float*;
original_fragment_index
builtins.int"builtins.int *<
original_character_index
builtins.int"builtins.int *?
current_line_fragment_index
builtins.int"builtins.int *@
current_line_character_index
builtins.int"builtins.int *2

line_width 
builtins.float"builtins.float *4
number_of_spaces
builtins.int"builtins.int *+
curchar
builtins.str"builtins.str *5
curchar_width 
builtins.float"builtins.float *£
graphics_stateå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict *)
k 
builtins.float"builtins.float z36z37z38z39z310z311z312z313*ö
__new__"fpdf.line_break.HyphenHint.__new__"ˇ
fpdf.line_break.HyphenHint._NT⁄
¨Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int,builtins.str,builtins.float,builtins.dict[builtins.str,TypeAlias[Any]],builtins.float]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str 
builtins.float"builtins.floatå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict 
builtins.float"builtins.float*ª
_cls∞
$Type[fpdf.line_break.HyphenHint._NT]ˇ
fpdf.line_break.HyphenHint._NT⁄
¨Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int,builtins.str,builtins.float,builtins.dict[builtins.str,TypeAlias[Any]],builtins.float]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str 
builtins.float"builtins.floatå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict 
builtins.float"builtins.float"type*9
original_fragment_index
builtins.int"builtins.int*:
original_character_index
builtins.int"builtins.int*=
current_line_fragment_index
builtins.int"builtins.int*>
current_line_character_index
builtins.int"builtins.int*0

line_width 
builtins.float"builtins.float*2
number_of_spaces
builtins.int"builtins.int*)
curchar
builtins.str"builtins.str*3
curchar_width 
builtins.float"builtins.float*°
graphics_stateå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict*'
k 
builtins.float"builtins.floatz36z37z38z39z310z311z312z313*∏
_asdict"fpdf.line_break.HyphenHint._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*ã
_selfˇ
fpdf.line_break.HyphenHint._NT⁄
¨Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int,builtins.str,builtins.float,builtins.dict[builtins.str,TypeAlias[Any]],builtins.float]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str 
builtins.float"builtins.floatå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict 
builtins.float"builtins.floatz36z37z38z39z310z311z312z313*Ü
_make fpdf.line_break.HyphenHint._make"ˇ
fpdf.line_break.HyphenHint._NT⁄
¨Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int,builtins.str,builtins.float,builtins.dict[builtins.str,TypeAlias[Any]],builtins.float]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str 
builtins.float"builtins.floatå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict 
builtins.float"builtins.float*ª
_cls∞
$Type[fpdf.line_break.HyphenHint._NT]ˇ
fpdf.line_break.HyphenHint._NT⁄
¨Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.float,builtins.int,builtins.str,builtins.float,builtins.dict[builtins.str,TypeAlias[Any]],builtins.float]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str 
builtins.float"builtins.floatå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict 
builtins.float"builtins.float"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313r≥
original_fragment_index2fpdf.line_break.HyphenHint.original_fragment_index
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rµ
original_character_index3fpdf.line_break.HyphenHint.original_character_index
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rª
current_line_fragment_index6fpdf.line_break.HyphenHint.current_line_fragment_index
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rΩ
current_line_character_index7fpdf.line_break.HyphenHint.current_line_character_index
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rù

line_width%fpdf.line_break.HyphenHint.line_width 
builtins.float"builtins.float*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313r•
number_of_spaces+fpdf.line_break.HyphenHint.number_of_spaces
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rì
curchar"fpdf.line_break.HyphenHint.curchar
builtins.str"builtins.str*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313r£
curchar_width(fpdf.line_break.HyphenHint.curchar_width 
builtins.float"builtins.float*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rí
graphics_state)fpdf.line_break.HyphenHint.graphics_stateå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rã
kfpdf.line_break.HyphenHint.k 
builtins.float"builtins.float*36*36*37*37*38*38*39*39*310*310*311*311*312*312*313*313rç
_fields"fpdf.line_break.HyphenHint._fieldsπ
àTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*36*37*38*39*310*311*312*313r¥
_field_types'fpdf.line_break.HyphenHint._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313r∫
_field_defaults*fpdf.line_break.HyphenHint._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313ro
_source"fpdf.line_break.HyphenHint._source
builtins.str"builtins.str*36*37*38*39*310*311*312*313r∫
__annotations__*fpdf.line_break.HyphenHint.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313rÛ
__match_args__)fpdf.line_break.HyphenHint.__match_args__°
‚Tuple[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*310*311*312*313Œ
CurrentLinefpdf.line_break.CurrentLine"builtins.object*‘
__init__$fpdf.line_break.CurrentLine.__init__"
None*D
self:
fpdf.line_break.CurrentLine"fpdf.line_break.CurrentLine*.
print_sh
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*¶
add_character)fpdf.line_break.CurrentLine.add_character"
Any*D
self:
fpdf.line_break.CurrentLine"fpdf.line_break.CurrentLine*+
	character
builtins.str"builtins.str*5
character_width 
builtins.float"builtins.float*°
graphics_stateå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict*'
k 
builtins.float"builtins.float*9
original_fragment_index
builtins.int"builtins.int*:
original_character_index
builtins.int"builtins.int*O
urlD
Union[builtins.str,None]
builtins.str"builtins.str
None z36z37z38z39z310z311z312z313*º
trim_trailing_spaces0fpdf.line_break.CurrentLine.trim_trailing_spaces"
None*D
self:
fpdf.line_break.CurrentLine"fpdf.line_break.CurrentLinez36z37z38z39z310z311z312z313*ç
manual_break(fpdf.line_break.CurrentLine.manual_break"
Any*D
self:
fpdf.line_break.CurrentLine"fpdf.line_break.CurrentLine*-
justify
builtins.bool"builtins.bool *1
trailing_nl
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*~
automatic_break_possible4fpdf.line_break.CurrentLine.automatic_break_possible*
selfz36z37z38z39z310z311z312z313*ﬁ
automatic_break+fpdf.line_break.CurrentLine.automatic_break"
Any*D
self:
fpdf.line_break.CurrentLine"fpdf.line_break.CurrentLine*+
justify
builtins.bool"builtins.boolz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313rá
print_sh$fpdf.line_break.CurrentLine.print_sh1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313râ
	fragments%fpdf.line_break.CurrentLine.fragments1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rl
width!fpdf.line_break.CurrentLine.width
builtins.int"builtins.int*36*37*38*39*310*311*312*313rÇ
number_of_spaces,fpdf.line_break.CurrentLine.number_of_spaces
builtins.int"builtins.int*36*37*38*39*310*311*312*313ró
space_break_hint,fpdf.line_break.CurrentLine.space_break_hint1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rô
hyphen_break_hint-fpdf.line_break.CurrentLine.hyphen_break_hint1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313ó
MultiLineBreakfpdf.line_break.MultiLineBreak"builtins.object*ÿ
__init__'fpdf.line_break.MultiLineBreak.__init__"
None*J
self@
fpdf.line_break.MultiLineBreak"fpdf.line_break.MultiLineBreak*ç
styled_text_fragmentsr
)typing.Sequence[fpdf.line_break.Fragment]4
fpdf.line_break.Fragment"fpdf.line_break.Fragment"typing.Sequence*-
justify
builtins.bool"builtins.bool *.
print_sh
builtins.bool"builtins.bool *:
wrapmode*
fpdf.enums.WrapMode"fpdf.enums.WrapMode z36z37z38z39z310z311z312z313*∞
get_line_of_given_width6fpdf.line_break.MultiLineBreak.get_line_of_given_width"
Any*J
self@
fpdf.line_break.MultiLineBreak"fpdf.line_break.MultiLineBreak*3
maximum_width 
builtins.float"builtins.float*/
	wordsplit
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313rÂ
styled_text_fragments4fpdf.line_break.MultiLineBreak.styled_text_fragmentsr
)typing.Sequence[fpdf.line_break.Fragment]4
fpdf.line_break.Fragment"fpdf.line_break.Fragment"typing.Sequence*36*37*38*39*310*311*312*313ru
justify&fpdf.line_break.MultiLineBreak.justify
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rw
print_sh'fpdf.line_break.MultiLineBreak.print_sh
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rÖ
	wrap_mode(fpdf.line_break.MultiLineBreak.wrap_mode*
fpdf.enums.WrapMode"fpdf.enums.WrapMode*36*37*38*39*310*311*312*313rÅ
fragment_index-fpdf.line_break.MultiLineBreak.fragment_index
builtins.int"builtins.int*36*37*38*39*310*311*312*313rÉ
character_index.fpdf.line_break.MultiLineBreak.character_index
builtins.int"builtins.int*36*37*38*39*310*311*312*313r∑
idx_last_forced_break4fpdf.line_break.MultiLineBreak.idx_last_forced_breakD
Union[builtins.int,None]
builtins.int"builtins.int
None*36*37*38*39*310*311*312*313*Ø
__annotations__fpdf.line_break.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313*l
SOFT_HYPHENfpdf.line_break.SOFT_HYPHEN
builtins.str"builtins.str*36*37*38*39*310*311*312*313*b
HYPHENfpdf.line_break.HYPHEN
builtins.str"builtins.str*36*37*38*39*310*311*312*313*`
SPACEfpdf.line_break.SPACE
builtins.str"builtins.str*36*37*38*39*310*311*312*313*d
NEWLINEfpdf.line_break.NEWLINE
builtins.str"builtins.str*36*37*38*39*310*311*312*313