
numpy.polynomial.chebyshev™
	Chebyshev$numpy.polynomial.chebyshev.Chebyshev"&numpy.polynomial._polybase.ABCPolyBase*Ü
interpolate0numpy.polynomial.chebyshev.Chebyshev.interpolate*
cls*
func*
deg*
domain *

args 0:classmethodpr>
domain+numpy.polynomial.chebyshev.Chebyshev.domain
Anyr>
window+numpy.polynomial.chebyshev.Chebyshev.window
AnyrF

basis_name/numpy.polynomial.chebyshev.Chebyshev.basis_name
Any:
	poly2cheb$numpy.polynomial.chebyshev.poly2cheb*
pol8
	cheb2poly$numpy.polynomial.chebyshev.cheb2poly*
cA
chebline#numpy.polynomial.chebyshev.chebline*
off*
sclD
chebfromroots(numpy.polynomial.chebyshev.chebfromroots*	
roots=
chebadd"numpy.polynomial.chebyshev.chebadd*
c1*
c2=
chebsub"numpy.polynomial.chebyshev.chebsub*
c1*
c26
chebmulx#numpy.polynomial.chebyshev.chebmulx*
c=
chebmul"numpy.polynomial.chebyshev.chebmul*
c1*
c2=
chebdiv"numpy.polynomial.chebyshev.chebdiv*
c1*
c2M
chebpow"numpy.polynomial.chebyshev.chebpow*
c*
pow*
maxpower T
chebder"numpy.polynomial.chebyshev.chebder*
c*
m *	
scl *

axis i
chebint"numpy.polynomial.chebyshev.chebint*
c*
m *
k *

lbnd *	
scl *

axis I
chebval"numpy.polynomial.chebyshev.chebval*
x*
c*
tensor F
	chebval2d$numpy.polynomial.chebyshev.chebval2d*
x*
y*
cH

chebgrid2d%numpy.polynomial.chebyshev.chebgrid2d*
x*
y*
cM
	chebval3d$numpy.polynomial.chebyshev.chebval3d*
x*
y*
z*
cO

chebgrid3d%numpy.polynomial.chebyshev.chebgrid3d*
x*
y*
z*
cC

chebvander%numpy.polynomial.chebyshev.chebvander*
x*
degN
chebvander2d'numpy.polynomial.chebyshev.chebvander2d*
x*
y*
degU
chebvander3d'numpy.polynomial.chebyshev.chebvander3d*
x*
y*
z*
degf
chebfit"numpy.polynomial.chebyshev.chebfit*
x*
y*
deg*
rcond *

full *
w @
chebcompanion(numpy.polynomial.chebyshev.chebcompanion*
c8
	chebroots$numpy.polynomial.chebyshev.chebroots*
c\
chebinterpolate*numpy.polynomial.chebyshev.chebinterpolate*
func*
deg*

args :
	chebgauss$numpy.polynomial.chebyshev.chebgauss*
deg:

chebweight%numpy.polynomial.chebyshev.chebweight*
x9
chebpts1#numpy.polynomial.chebyshev.chebpts1*
npts9
chebpts2#numpy.polynomial.chebyshev.chebpts2*
npts*ñ
__annotations__*numpy.polynomial.chebyshev.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*y
__all__"numpy.polynomial.chebyshev.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*|
chebtrim#numpy.polynomial.chebyshev.chebtrimK
CallableType[builtins.function]&
builtins.function"builtins.function*£

chebdomain%numpy.polynomial.chebyshev.chebdomainÌ
Nnumpy.ndarray[Any,numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]]
AnyÇ
;numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]µ
.TypeAlias[numpy.signedinteger[TypeAlias[Any]]]u
#numpy.signedinteger[TypeAlias[Any]]9
TypeAlias[Any]
Any"numpy._typing._nbit._NBitInt"numpy.signedinteger"
numpy.int_"numpy.dtype"numpy.ndarray*ü
chebzero#numpy.polynomial.chebyshev.chebzeroÌ
Nnumpy.ndarray[Any,numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]]
AnyÇ
;numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]µ
.TypeAlias[numpy.signedinteger[TypeAlias[Any]]]u
#numpy.signedinteger[TypeAlias[Any]]9
TypeAlias[Any]
Any"numpy._typing._nbit._NBitInt"numpy.signedinteger"
numpy.int_"numpy.dtype"numpy.ndarray*ù
chebone"numpy.polynomial.chebyshev.cheboneÌ
Nnumpy.ndarray[Any,numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]]
AnyÇ
;numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]µ
.TypeAlias[numpy.signedinteger[TypeAlias[Any]]]u
#numpy.signedinteger[TypeAlias[Any]]9
TypeAlias[Any]
Any"numpy._typing._nbit._NBitInt"numpy.signedinteger"
numpy.int_"numpy.dtype"numpy.ndarray*ô
chebx numpy.polynomial.chebyshev.chebxÌ
Nnumpy.ndarray[Any,numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]]
AnyÇ
;numpy.dtype[TypeAlias[numpy.signedinteger[TypeAlias[Any]]]]µ
.TypeAlias[numpy.signedinteger[TypeAlias[Any]]]u
#numpy.signedinteger[TypeAlias[Any]]9
TypeAlias[Any]
Any"numpy._typing._nbit._NBitInt"numpy.signedinteger"
numpy.int_"numpy.dtype"numpy.ndarray