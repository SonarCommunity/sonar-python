
torch.autograd.functionalG
_as_tuple_nocheck+torch.autograd.functional._as_tuple_nocheck*
xX
	_as_tuple#torch.autograd.functional._as_tuple*
inp*
arg_name *
fn_name Z
_tuple_postprocess,torch.autograd.functional._tuple_postprocess*
res*
	to_unpackl
_grad_preprocess*torch.autograd.functional._grad_preprocess*

inputs*
create_graph*

need_graph^
_grad_postprocess+torch.autograd.functional._grad_postprocess*

inputs*
create_graphZ
_validate_v%torch.autograd.functional._validate_v*
v*	
other*
is_other_tuplen
_check_requires_grad.torch.autograd.functional._check_requires_grad*

inputs*

input_type*

strict§
_autograd_grad(torch.autograd.functional._autograd_grad*
outputs*

inputs*
grad_outputs *
create_graph *
retain_graph *
is_grads_batched x
_fill_in_zeros(torch.autograd.functional._fill_in_zeros*	
grads*
refs*

strict*
create_graph*	
stagee
vjptorch.autograd.functional.vjp*
func*

inputs*
v *
create_graph *
strict e
jvptorch.autograd.functional.jvp*
func*

inputs*
v *
create_graph *
strict ’
_construct_standard_basis_for7torch.autograd.functional._construct_standard_basis_for"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*q
tensorsd
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*_
tensor_numelsL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuplea
_jacfwd!torch.autograd.functional._jacfwd*
func*

inputs*
strict *
	vectorize ‡
jacobian"torch.autograd.functional.jacobian*
func*

inputs*
create_graph *
strict *
	vectorize *
strategy ”
hessian!torch.autograd.functional.hessian*
func*

inputs*
create_graph *
strict *
	vectorize *
outer_jacobian_strategy e
vhptorch.autograd.functional.vhp*
func*

inputs*
v *
create_graph *
strict e
hvptorch.autograd.functional.hvp*
func*

inputs*
v *
create_graph *
strict *•
__annotations__)torch.autograd.functional.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*#
fwADtorch.autograd.forward_ad *x
__all__!torch.autograd.functional.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list