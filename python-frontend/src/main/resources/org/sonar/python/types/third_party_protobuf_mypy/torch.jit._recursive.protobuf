
torch.jit._recursiveı
ScriptMethodStub%torch.jit._recursive.ScriptMethodStub"builtins.tuple*‚
_replace.torch.jit._recursive.ScriptMethodStub._replace"`
)torch.jit._recursive.ScriptMethodStub._NT1
Tuple[Any,Any,Any]
Any
Any
Any*k
_self`
)torch.jit._recursive.ScriptMethodStub._NT1
Tuple[Any,Any,Any]
Any
Any
Any*"
resolution_callback
Any *
def_
Any *
original_method
Any *ñ
__new__-torch.jit._recursive.ScriptMethodStub.__new__"`
)torch.jit._recursive.ScriptMethodStub._NT1
Tuple[Any,Any,Any]
Any
Any
Any*¶
_clsõ
/Type[torch.jit._recursive.ScriptMethodStub._NT]`
)torch.jit._recursive.ScriptMethodStub._NT1
Tuple[Any,Any,Any]
Any
Any
Any"type* 
resolution_callback
Any*
def_
Any*
original_method
Any*˛
_asdict-torch.jit._recursive.ScriptMethodStub._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*k
_self`
)torch.jit._recursive.ScriptMethodStub._NT1
Tuple[Any,Any,Any]
Any
Any
Any*∏
_make+torch.jit._recursive.ScriptMethodStub._make"`
)torch.jit._recursive.ScriptMethodStub._NT1
Tuple[Any,Any,Any]
Any
Any
Any*¶
_clsõ
/Type[torch.jit._recursive.ScriptMethodStub._NT]`
)torch.jit._recursive.ScriptMethodStub._NT1
Tuple[Any,Any,Any]
Any
Any
Any"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprY
resolution_callback9torch.jit._recursive.ScriptMethodStub.resolution_callback
Anyr;
def_*torch.jit._recursive.ScriptMethodStub.def_
AnyrQ
original_method5torch.jit._recursive.ScriptMethodStub.original_method
Anyr∆
_fields-torch.jit._recursive.ScriptMethodStub._fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrõ
_field_types2torch.jit._recursive.ScriptMethodStub._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr°
_field_defaults5torch.jit._recursive.ScriptMethodStub._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrV
_source-torch.jit._recursive.ScriptMethodStub._source
builtins.str"builtins.strr°
__annotations__5torch.jit._recursive.ScriptMethodStub.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÖ
PropertyStub!torch.jit._recursive.PropertyStub"builtins.tuple*ú
_replace*torch.jit._recursive.PropertyStub._replace"O
%torch.jit._recursive.PropertyStub._NT$
Tuple[Any,Any]
Any
Any*Z
_selfO
%torch.jit._recursive.PropertyStub._NT$
Tuple[Any,Any]
Any
Any*"
resolution_callback
Any *
def_
Any *Œ
__new__)torch.jit._recursive.PropertyStub.__new__"O
%torch.jit._recursive.PropertyStub._NT$
Tuple[Any,Any]
Any
Any*ë
_clsÜ
+Type[torch.jit._recursive.PropertyStub._NT]O
%torch.jit._recursive.PropertyStub._NT$
Tuple[Any,Any]
Any
Any"type* 
resolution_callback
Any*
def_
Any*È
_asdict)torch.jit._recursive.PropertyStub._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Z
_selfO
%torch.jit._recursive.PropertyStub._NT$
Tuple[Any,Any]
Any
Any*é
_make'torch.jit._recursive.PropertyStub._make"O
%torch.jit._recursive.PropertyStub._NT$
Tuple[Any,Any]
Any
Any*ë
_clsÜ
+Type[torch.jit._recursive.PropertyStub._NT]O
%torch.jit._recursive.PropertyStub._NT$
Tuple[Any,Any]
Any
Any"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprU
resolution_callback5torch.jit._recursive.PropertyStub.resolution_callback
Anyr7
def_&torch.jit._recursive.PropertyStub.def_
Anyrñ
_fields)torch.jit._recursive.PropertyStub._fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strró
_field_types.torch.jit._recursive.PropertyStub._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrù
_field_defaults1torch.jit._recursive.PropertyStub._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrR
_source)torch.jit._recursive.PropertyStub._source
builtins.str"builtins.strrù
__annotations__1torch.jit._recursive.PropertyStub.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictœ
SourceContext"torch.jit._recursive.SourceContext"builtins.object*à
__init__+torch.jit._recursive.SourceContext.__init__*
self*

source*
filename*
file_lineno*
leading_whitespace_lenÛ
ConcreteTypeStore&torch.jit._recursive.ConcreteTypeStore"builtins.object*E
__init__/torch.jit._recursive.ConcreteTypeStore.__init__*
self*z
get_or_create_concrete_typeBtorch.jit._recursive.ConcreteTypeStore.get_or_create_concrete_type*
self*
	nn_modulerú

type_store1torch.jit._recursive.ConcreteTypeStore.type_store⁄
^builtins.dict[Type[torch.nn.modules.module.Module],builtins.list[torch._C.ConcreteModuleType]]p
$Type[torch.nn.modules.module.Module]@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"typew
*builtins.list[torch._C.ConcreteModuleType]:
torch._C.ConcreteModuleType"torch._C.ConcreteModuleType"builtins.list"builtins.dictr¬
methods_compiled7torch.jit._recursive.ConcreteTypeStore.methods_compiledu
)builtins.set[torch._C.ConcreteModuleType]:
torch._C.ConcreteModuleType"torch._C.ConcreteModuleType"builtins.setu
_compile_and_register_class0torch.jit._recursive._compile_and_register_class*
obj*
rcb*
qualified_name?
	make_stubtorch.jit._recursive.make_stub*
func*
namec
make_stub_from_method*torch.jit._recursive.make_stub_from_method*
	nn_module*
method_nameb
 make_stubs_from_exported_methods5torch.jit._recursive.make_stubs_from_exported_methods*
modQ
jit_ignored_properties+torch.jit._recursive.jit_ignored_properties*

module`
_get_valid_constant(torch.jit._recursive._get_valid_constant*
attr*
v*

owner_type@
get_annotations$torch.jit._recursive.get_annotations*
objq
infer_concrete_type_builder0torch.jit._recursive.infer_concrete_type_builder*
	nn_module*
share_types ¢
(create_methods_and_properties_from_stubs=torch.jit._recursive.create_methods_and_properties_from_stubs*
concrete_type*
method_stubs*
property_stubs~
create_hooks_from_stubs,torch.jit._recursive.create_hooks_from_stubs*
concrete_type*

hook_stubs*
pre_hook_stubsk
get_module_concrete_type-torch.jit._recursive.get_module_concrete_type*
	nn_module*
share_types H
create_script_class(torch.jit._recursive.create_script_class*
objÉ
create_script_module)torch.jit._recursive.create_script_module*
	nn_module*
stubs_fn*
share_types *

is_tracing {
create_script_module_impl.torch.jit._recursive.create_script_module_impl*
	nn_module*
concrete_type*
stubs_fng
script_model_defines_attr.torch.jit._recursive.script_model_defines_attr*
script_model*
attrÅ
!add_python_attr_to_scripted_model6torch.jit._recursive.add_python_attr_to_scripted_model*
script_model*
orig*
attrn
get_overload_annotations-torch.jit._recursive.get_overload_annotations*
mod*
jit_ignored_properties^
get_overload_name_mapping.torch.jit._recursive.get_overload_name_mapping*
overload_infoI
_check_no_signature(torch.jit._recursive._check_no_signature*
func\
make_stubs_for_overloads-torch.jit._recursive.make_stubs_for_overloads*
overload_infoR
check_module_initialized-torch.jit._recursive.check_module_initialized*
modX
infer_methods_to_compile-torch.jit._recursive.infer_methods_to_compile*
	nn_moduleD
get_hook_stubs#torch.jit._recursive.get_hook_stubs*
	nn_moduleL
get_property_stubs'torch.jit._recursive.get_property_stubs*
	nn_module[
interface_script%torch.jit._recursive.interface_script*
mod_interface*
	nn_moduleF
try_compile_fn#torch.jit._recursive.try_compile_fn*
fn*
locD
wrap_cpp_class#torch.jit._recursive.wrap_cpp_class*
	cpp_classG
wrap_cpp_module$torch.jit._recursive.wrap_cpp_module*

cpp_module`
compile_unbound_method+torch.jit._recursive.compile_unbound_method*
concrete_type*
fnR
	lazy_bindtorch.jit._recursive.lazy_bind*
concrete_type*
unbound_method*ê
__annotations__$torch.jit._recursive.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*&
_jit_internaltorch._jit_internal *â
ignored_attributes'torch.jit._recursive.ignored_attributesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*û
_constant_types$torch.jit._recursive._constant_types‰
”Tuple[CallableType[builtins.type],CallableType[builtins.type],CallableType[builtins.type],CallableType[abc.ABCMeta],Type[None],CallableType[builtins.type],CallableType[builtins.type],CallableType[builtins.type]]?
CallableType[builtins.type]
builtins.type"builtins.type?
CallableType[builtins.type]
builtins.type"builtins.typeN
CallableType[builtins.type]
builtins.type"builtins.type"builtins.typeF
CallableType[abc.ABCMeta]
abc.ABCMeta"abc.ABCMeta"abc.ABCMeta

Type[None]
None"typeN
CallableType[builtins.type]
builtins.type"builtins.type"builtins.type?
CallableType[builtins.type]
builtins.type"builtins.type?
CallableType[builtins.type]
builtins.type"builtins.type*ë
concrete_type_store(torch.jit._recursive.concrete_type_storeP
&torch.jit._recursive.ConcreteTypeStore"&torch.jit._recursive.ConcreteTypeStore