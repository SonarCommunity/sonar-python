
torch.utils._cxx_pytreeÂ

_DummyLeaf"torch.utils._cxx_pytree._DummyLeaf"builtins.object*°
__repr__+torch.utils._cxx_pytree._DummyLeaf.__repr__"
builtins.str"builtins.str*JH
"torch.utils._cxx_pytree._DummyLeaf""torch.utils._cxx_pytree._DummyLeafΩ
LeafSpecMeta$torch.utils._cxx_pytree.LeafSpecMeta"builtins.object*ı
__instancecheck__6torch.utils._cxx_pytree.LeafSpecMeta.__instancecheck__"
builtins.bool"builtins.bool*V
selfL
$torch.utils._cxx_pytree.LeafSpecMeta"$torch.utils._cxx_pytree.LeafSpecMeta*0
instance"
builtins.object"builtins.object‚
LeafSpec torch.utils._cxx_pytree.LeafSpec"builtins.object*˙
__new__(torch.utils._cxx_pytree.LeafSpec.__new__"D
 torch.utils._cxx_pytree.LeafSpec" torch.utils._cxx_pytree.LeafSpec*
clsv
&Type[torch.utils._cxx_pytree.LeafSpec]D
 torch.utils._cxx_pytree.LeafSpec" torch.utils._cxx_pytree.LeafSpec"type@b$torch.utils._cxx_pytree.LeafSpecMetaë
_reverse_args%torch.utils._cxx_pytree._reverse_args"®
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"+torch.utils._cxx_pytree.OpTreeUnflattenFunc*≠
func¢
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"%torch.utils._cxx_pytree.UnflattenFuncÚ

register_pytree_node,torch.utils._cxx_pytree.register_pytree_node"
None*%
cls
	Type[Any]
Any"type*±

flatten_fn†
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"#torch.utils._cxx_pytree.FlattenFunc*µ
unflatten_fn¢
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"%torch.utils._cxx_pytree.UnflattenFunc*`
serialized_type_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *ã
to_dumpable_contextÔ
6Union[TypeAlias[CallableType[builtins.function]],None]®
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"+torch.utils._cxx_pytree.ToDumpableContextFn
None *è
from_dumpable_contextÒ
6Union[TypeAlias[CallableType[builtins.function]],None]™
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"-torch.utils._cxx_pytree.FromDumpableContextFn
None *å
flatten_with_keys_fnÔ
6Union[TypeAlias[CallableType[builtins.function]],None]®
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"+torch.utils._cxx_pytree.FlattenWithKeysFunc
None ı
_private_register_pytree_node5torch.utils._cxx_pytree._private_register_pytree_node"
None*%
cls
	Type[Any]
Any"type*±

flatten_fn†
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"#torch.utils._cxx_pytree.FlattenFunc*µ
unflatten_fn¢
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"%torch.utils._cxx_pytree.UnflattenFunc*`
serialized_type_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *ã
to_dumpable_contextÔ
6Union[TypeAlias[CallableType[builtins.function]],None]®
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"+torch.utils._cxx_pytree.ToDumpableContextFn
None *è
from_dumpable_contextÒ
6Union[TypeAlias[CallableType[builtins.function]],None]™
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"-torch.utils._cxx_pytree.FromDumpableContextFn
None í
tree_flatten$torch.utils._cxx_pytree.tree_flatten"|
/Tuple[builtins.list[Any],UnboundType[TreeSpec]],
builtins.list[Any]
Any"builtins.list
UnboundType[TreeSpec]*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ‹
tree_unflatten&torch.utils._cxx_pytree.tree_unflatten";
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*<
leaves0
typing.Iterable[Any]
Any"typing.Iterable*'
treespec
UnboundType[TreeSpec]¿
	tree_iter!torch.utils._cxx_pytree.tree_iter"0
typing.Iterable[Any]
Any"typing.Iterable*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ¿
tree_leaves#torch.utils._cxx_pytree.tree_leaves",
builtins.list[Any]
Any"builtins.list*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ≥
tree_structure&torch.utils._cxx_pytree.tree_structure"
UnboundType[TreeSpec]*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None Ë
tree_map torch.utils._cxx_pytree.tree_map";
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*F
rests;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None Í
	tree_map_!torch.utils._cxx_pytree.tree_map_";
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*F
rests;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None É
tree_all torch.utils._cxx_pytree.tree_all"
builtins.bool"builtins.bool*U
predK
CallableType[builtins.function]&
builtins.function"builtins.function*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None É
tree_any torch.utils._cxx_pytree.tree_any"
builtins.bool"builtins.bool*U
predK
CallableType[builtins.function]&
builtins.function"builtins.function*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ù
broadcast_prefix(torch.utils._cxx_pytree.broadcast_prefix",
builtins.list[Any]
Any"builtins.list*L
prefix_tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*J
	full_tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ≥
_broadcast_to_and_flatten1torch.utils._cxx_pytree._broadcast_to_and_flatten"Z
Union[builtins.list[Any],None],
builtins.list[Any]
Any"builtins.list
None*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*'
treespec
UnboundType[TreeSpec]*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ’
treespec_dumps&torch.utils._cxx_pytree.treespec_dumps"
builtins.str"builtins.str*'
treespec
UnboundType[TreeSpec]*T
protocolD
Union[builtins.int,None]
builtins.int"builtins.int
None Å
treespec_loads&torch.utils._cxx_pytree.treespec_loads"
UnboundType[TreeSpec]*,

serialized
builtins.str"builtins.strÅ
treespec_pprint'torch.utils._cxx_pytree.treespec_pprint"
builtins.str"builtins.str*'
treespec
UnboundType[TreeSpec]Ã
tree_flatten_with_path.torch.utils._cxx_pytree.tree_flatten_with_path"°
nTuple[builtins.list[Tuple[TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]],Any]],UnboundType[TreeSpec]]ë
Qbuiltins.list[Tuple[TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]],Any]]¨
BTuple[TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]],Any]⁄
7TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]]|
,builtins.tuple[torch.utils._pytree.KeyEntry]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry"builtins.tuple"torch.utils._cxx_pytree.KeyPath
Any"builtins.list
UnboundType[TreeSpec]*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ∫
tree_leaves_with_path-torch.utils._cxx_pytree.tree_leaves_with_path"ë
Qbuiltins.list[Tuple[TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]],Any]]¨
BTuple[TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]],Any]⁄
7TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]]|
,builtins.tuple[torch.utils._pytree.KeyEntry]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry"builtins.tuple"torch.utils._cxx_pytree.KeyPath
Any"builtins.list*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ¸
tree_map_with_path*torch.utils._cxx_pytree.tree_map_with_path";
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*F
rests;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ¨
keystrtorch.utils._cxx_pytree.keystr"
builtins.str"builtins.str*„
kp⁄
7TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]]|
,builtins.tuple[torch.utils._pytree.KeyEntry]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry"builtins.tuple"torch.utils._cxx_pytree.KeyPath´
key_gettorch.utils._cxx_pytree.key_get"
Any*
obj
Any*„
kp⁄
7TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]]|
,builtins.tuple[torch.utils._pytree.KeyEntry]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry"builtins.tuple"torch.utils._cxx_pytree.KeyPath"ï
map_only torch.utils._cxx_pytree.map_only†
map_only torch.utils._cxx_pytree.map_only"û
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._cxx_pytree.MapOnlyFn*¬ø
QTypeAlias[Tuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S]]]»
FTuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S]]}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.S]R
torch.utils._cxx_pytree.S"
builtins.object"builtins.object"builtins.object"type"torch.utils._cxx_pytree.Type20:overloadXﬂ
map_only torch.utils._cxx_pytree.map_only"û
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._cxx_pytree.MapOnlyFn*Å˛
qTypeAlias[Tuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S],Type[torch.utils._cxx_pytree.U]]]Á
fTuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S],Type[torch.utils._cxx_pytree.U]]}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.S]R
torch.utils._cxx_pytree.S"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.U]R
torch.utils._cxx_pytree.U"
builtins.object"builtins.object"builtins.object"type"torch.utils._cxx_pytree.Type30:overloadX‹
map_only torch.utils._cxx_pytree.map_only"û
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._cxx_pytree.MapOnlyFn*}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type0:overloadX’
map_only torch.utils._cxx_pytree.map_only"û
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._cxx_pytree.MapOnlyFn*˜Ù
5TypeAlias[Union[Type[Any],builtins.tuple[Type[Any]]]]ó
*Union[Type[Any],builtins.tuple[Type[Any]]]
	Type[Any]
Any"typeI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple"torch.utils._cxx_pytree.TypeAny0:overloadX™
map_only torch.utils._cxx_pytree.map_only"û
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._cxx_pytree.MapOnlyFn*MK
CallableType[builtins.function]&
builtins.function"builtins.function0:overloadX"¯
tree_map_only%torch.utils._cxx_pytree.tree_map_onlyá
tree_map_only%torch.utils._cxx_pytree.tree_map_only";
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type*¢
funcó
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.Fn*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXÃ
tree_map_only%torch.utils._cxx_pytree.tree_map_only";
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*¬ø
QTypeAlias[Tuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S]]]»
FTuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S]]}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.S]R
torch.utils._cxx_pytree.S"
builtins.object"builtins.object"builtins.object"type"torch.utils._cxx_pytree.Type2*£
funcò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.Fn2*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXã	
tree_map_only%torch.utils._cxx_pytree.tree_map_only";
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*Å˛
qTypeAlias[Tuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S],Type[torch.utils._cxx_pytree.U]]]Á
fTuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S],Type[torch.utils._cxx_pytree.U]]}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.S]R
torch.utils._cxx_pytree.S"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.U]R
torch.utils._cxx_pytree.U"
builtins.object"builtins.object"builtins.object"type"torch.utils._cxx_pytree.Type3*£
funcò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.Fn3*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXÿ
tree_map_only%torch.utils._cxx_pytree.tree_map_only";
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*MK
CallableType[builtins.function]&
builtins.function"builtins.function*•
funcö
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.FnAny*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX"Ç
tree_map_only_&torch.utils._cxx_pytree.tree_map_only_â
tree_map_only_&torch.utils._cxx_pytree.tree_map_only_";
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type*¢
funcó
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.Fn*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXŒ
tree_map_only_&torch.utils._cxx_pytree.tree_map_only_";
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*¬ø
QTypeAlias[Tuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S]]]»
FTuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S]]}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.S]R
torch.utils._cxx_pytree.S"
builtins.object"builtins.object"builtins.object"type"torch.utils._cxx_pytree.Type2*£
funcò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.Fn2*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXç	
tree_map_only_&torch.utils._cxx_pytree.tree_map_only_";
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*Å˛
qTypeAlias[Tuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S],Type[torch.utils._cxx_pytree.U]]]Á
fTuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S],Type[torch.utils._cxx_pytree.U]]}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.S]R
torch.utils._cxx_pytree.S"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.U]R
torch.utils._cxx_pytree.U"
builtins.object"builtins.object"builtins.object"type"torch.utils._cxx_pytree.Type3*£
funcò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.Fn3*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX⁄
tree_map_only_&torch.utils._cxx_pytree.tree_map_only_";
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*MK
CallableType[builtins.function]&
builtins.function"builtins.function*•
funcö
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.FnAny*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX"∆
tree_all_only%torch.utils._cxx_pytree.tree_all_onlyÍ
tree_all_only%torch.utils._cxx_pytree.tree_all_only"
builtins.bool"builtins.bool*}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type*¢
predó
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.Fn*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXØ
tree_all_only%torch.utils._cxx_pytree.tree_all_only"
builtins.bool"builtins.bool*¬ø
QTypeAlias[Tuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S]]]»
FTuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S]]}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.S]R
torch.utils._cxx_pytree.S"
builtins.object"builtins.object"builtins.object"type"torch.utils._cxx_pytree.Type2*£
predò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.Fn2*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXÓ
tree_all_only%torch.utils._cxx_pytree.tree_all_only"
builtins.bool"builtins.bool*Å˛
qTypeAlias[Tuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S],Type[torch.utils._cxx_pytree.U]]]Á
fTuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S],Type[torch.utils._cxx_pytree.U]]}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.S]R
torch.utils._cxx_pytree.S"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.U]R
torch.utils._cxx_pytree.U"
builtins.object"builtins.object"builtins.object"type"torch.utils._cxx_pytree.Type3*£
predò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.Fn3*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX"∆
tree_any_only%torch.utils._cxx_pytree.tree_any_onlyÍ
tree_any_only%torch.utils._cxx_pytree.tree_any_only"
builtins.bool"builtins.bool*}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type*¢
predó
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.Fn*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXØ
tree_any_only%torch.utils._cxx_pytree.tree_any_only"
builtins.bool"builtins.bool*¬ø
QTypeAlias[Tuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S]]]»
FTuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S]]}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.S]R
torch.utils._cxx_pytree.S"
builtins.object"builtins.object"builtins.object"type"torch.utils._cxx_pytree.Type2*£
predò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.Fn2*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXÓ
tree_any_only%torch.utils._cxx_pytree.tree_any_only"
builtins.bool"builtins.bool*Å˛
qTypeAlias[Tuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S],Type[torch.utils._cxx_pytree.U]]]Á
fTuple[Type[torch.utils._cxx_pytree.T],Type[torch.utils._cxx_pytree.S],Type[torch.utils._cxx_pytree.U]]}
Type[torch.utils._cxx_pytree.T]R
torch.utils._cxx_pytree.T"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.S]R
torch.utils._cxx_pytree.S"
builtins.object"builtins.object"builtins.object"type}
Type[torch.utils._cxx_pytree.U]R
torch.utils._cxx_pytree.U"
builtins.object"builtins.object"builtins.object"type"torch.utils._cxx_pytree.Type3*£
predò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._cxx_pytree.Fn3*E
tree;
TypeAlias[Any]
Any"torch.utils._cxx_pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX*ì
__annotations__'torch.utils._cxx_pytree.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*1
optreetorch.utils._cxx_pytree.optree
Any*9

PyTreeSpec"torch.utils._cxx_pytree.PyTreeSpec
Any*v
__all__torch.utils._cxx_pytree.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*5
TreeSpec torch.utils._cxx_pytree.TreeSpec
Any