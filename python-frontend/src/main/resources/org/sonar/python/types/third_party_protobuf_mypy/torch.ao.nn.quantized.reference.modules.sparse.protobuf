
.torch.ao.nn.quantized.reference.modules.sparseû
	Embedding8torch.ao.nn.quantized.reference.modules.sparse.Embedding"!torch.nn.modules.sparse.Embedding"Ftorch.ao.nn.quantized.reference.modules.utils.ReferenceQuantizedModule*–
__init__Atorch.ao.nn.quantized.reference.modules.sparse.Embedding.__init__"
None*~
selft
8torch.ao.nn.quantized.reference.modules.sparse.Embedding"8torch.ao.nn.quantized.reference.modules.sparse.Embedding*0
num_embeddings
builtins.int"builtins.int*/
embedding_dim
builtins.int"builtins.int*W
padding_idxD
Union[builtins.int,None]
builtins.int"builtins.int
None *Z
max_normJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *1
	norm_type 
builtins.float"builtins.float *8
scale_grad_by_freq
builtins.bool"builtins.bool *,
sparse
builtins.bool"builtins.bool *k
_weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *Y
	_get_nameBtorch.ao.nn.quantized.reference.modules.sparse.Embedding._get_name*
self*≤
forward@torch.ao.nn.quantized.reference.modules.sparse.Embedding.forward",
torch._tensor.Tensor"torch._tensor.Tensor*~
selft
8torch.ao.nn.quantized.reference.modules.sparse.Embedding"8torch.ao.nn.quantized.reference.modules.sparse.Embedding*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*à

from_floatCtorch.ao.nn.quantized.reference.modules.sparse.Embedding.from_float*
cls*
mod*
weight_qparams0:classmethodp≠
EmbeddingBag;torch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag"$torch.nn.modules.sparse.EmbeddingBag"Ftorch.ao.nn.quantized.reference.modules.utils.ReferenceQuantizedModule*ø
__init__Dtorch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag.__init__"
None*Ñ
selfz
;torch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag";torch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag*0
num_embeddings
builtins.int"builtins.int*/
embedding_dim
builtins.int"builtins.int*Z
max_normJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *1
	norm_type 
builtins.float"builtins.float *8
scale_grad_by_freq
builtins.bool"builtins.bool *(
mode
builtins.str"builtins.str *,
sparse
builtins.bool"builtins.bool *k
_weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *9
include_last_offset
builtins.bool"builtins.bool *W
padding_idxD
Union[builtins.int,None]
builtins.int"builtins.int
None *
device
Any *
dtype
Any *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *\
	_get_nameEtorch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag._get_name*
self*°
forwardCtorch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag.forward",
torch._tensor.Tensor"torch._tensor.Tensor*Ñ
selfz
;torch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag";torch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*k
offsets\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *v
per_sample_weights\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *≠

from_floatFtorch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag.from_float*
cls*
mod*
weight_qparams* 
use_precomputed_fake_quant 0:classmethodp*™
__annotations__>torch.ao.nn.quantized.reference.modules.sparse.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
nntorch.nn *
Ftorch.nn.functional *ç
__all__6torch.ao.nn.quantized.reference.modules.sparse.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list