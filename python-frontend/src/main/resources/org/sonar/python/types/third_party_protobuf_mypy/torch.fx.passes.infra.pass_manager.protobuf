
"torch.fx.passes.infra.pass_manager‚
PassManager.torch.fx.passes.infra.pass_manager.PassManager"builtins.object*É
__init__7torch.fx.passes.infra.pass_manager.PassManager.__init__"
None*j
self`
.torch.fx.passes.infra.pass_manager.PassManager".torch.fx.passes.infra.pass_manager.PassManager*
passes
Any *
constraints
Any *
steps
Any *@
run_checks_after_each_pass
builtins.bool"builtins.bool *=
suppress_check_failures
builtins.bool"builtins.bool *ê
add_pass7torch.fx.passes.infra.pass_manager.PassManager.add_pass"
Any*j
self`
.torch.fx.passes.infra.pass_manager.PassManager".torch.fx.passes.infra.pass_manager.PassManager*V
_passK
CallableType[builtins.function]&
builtins.function"builtins.function*°
add_constraint=torch.fx.passes.infra.pass_manager.PassManager.add_constraint"
Any*j
self`
.torch.fx.passes.infra.pass_manager.PassManager".torch.fx.passes.infra.pass_manager.PassManager*[

constraintK
CallableType[builtins.function]&
builtins.function"builtins.function*e
validate_constraintsCtorch.fx.passes.infra.pass_manager.PassManager.validate_constraints*
self*_
solve_constraints@torch.fx.passes.infra.pass_manager.PassManager.solve_constraints*
self*ï

add_checks9torch.fx.passes.infra.pass_manager.PassManager.add_checks"
None*j
self`
.torch.fx.passes.infra.pass_manager.PassManager".torch.fx.passes.infra.pass_manager.PassManager*V
checkK
CallableType[builtins.function]&
builtins.function"builtins.function*Å
check4torch.fx.passes.infra.pass_manager.PassManager.check"
None*j
self`
.torch.fx.passes.infra.pass_manager.PassManager".torch.fx.passes.infra.pass_manager.PassManager*L
module@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*Ó
__call__7torch.fx.passes.infra.pass_manager.PassManager.__call__"o
TypeAlias[Tuple[Any,Any]]$
Tuple[Any,Any]
Any
Any"*torch.fx.passes.infra.pass_base.PassResult*j
self`
.torch.fx.passes.infra.pass_manager.PassManager".torch.fx.passes.infra.pass_manager.PassManager*L
module@
torch.nn.modules.module.Module"torch.nn.modules.module.Module8rŒ
passes5torch.fx.passes.infra.pass_manager.PassManager.passeså
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.listrÿ
constraints:torch.fx.passes.infra.pass_manager.PassManager.constraintså
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.listrg

_validated9torch.fx.passes.infra.pass_manager.PassManager._validated
builtins.bool"builtins.boolr[
steps4torch.fx.passes.infra.pass_manager.PassManager.steps
builtins.int"builtins.intrá
run_checks_after_each_passItorch.fx.passes.infra.pass_manager.PassManager.run_checks_after_each_pass
builtins.bool"builtins.boolrÅ
suppress_check_failuresFtorch.fx.passes.infra.pass_manager.PassManager.suppress_check_failures
builtins.bool"builtins.boolÓ
"_validate_pass_schedule_constraintEtorch.fx.passes.infra.pass_manager._validate_pass_schedule_constraint"
None*[

constraintK
CallableType[builtins.function]&
builtins.function"builtins.function*ô
passeså
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.list£
_topological_sort_passes;torch.fx.passes.infra.pass_manager._topological_sort_passes"å
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.list*ô
passeså
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.list*û
constraintså
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.list*û
__annotations__2torch.fx.passes.infra.pass_manager.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
nntorch.nn *U
logger)torch.fx.passes.infra.pass_manager.logger 
logging.Logger"logging.Logger*Å
__all__*torch.fx.passes.infra.pass_manager.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list