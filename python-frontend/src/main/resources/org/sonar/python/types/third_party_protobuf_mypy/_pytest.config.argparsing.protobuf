
_pytest.config.argparsingï1
Parser _pytest.config.argparsing.Parser"builtins.object*Ø
__init__)_pytest.config.argparsing.Parser.__init__"
None*N
selfD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser*Q
usageD
Union[builtins.str,None]
builtins.str"builtins.str
None *ô

processoptÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None */
	_ispytest
builtins.bool"builtins.bool *Ô
processoption._pytest.config.argparsing.Parser.processoption"
None*N
selfD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser*T
optionH
"_pytest.config.argparsing.Argument""_pytest.config.argparsing.Argument*Å
getgroup)_pytest.config.argparsing.Parser.getgroup"N
%_pytest.config.argparsing.OptionGroup"%_pytest.config.argparsing.OptionGroup*N
selfD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser*&
name
builtins.str"builtins.str*/
description
builtins.str"builtins.str *Q
afterD
Union[builtins.str,None]
builtins.str"builtins.str
None *Õ
	addoption*_pytest.config.argparsing.Parser.addoption"
None*N
selfD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser*&
opts
builtins.str"builtins.str*
attrs
Any*ã
parse&_pytest.config.argparsing.Parser.parse"(
argparse.Namespace"argparse.Namespace*N
selfD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser*ˆ
argsÎ
>typing.Sequence[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"typing.Sequence*g
	namespaceV
Union[argparse.Namespace,None](
argparse.Namespace"argparse.Namespace
None *ﬂ

_getparser+_pytest.config.argparsing.Parser._getparser"T
(_pytest.config.argparsing.MyOptionParser"(_pytest.config.argparsing.MyOptionParser*N
selfD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser*˜
parse_setoption0_pytest.config.argparsing.Parser.parse_setoption"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*N
selfD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser*ˆ
argsÎ
>typing.Sequence[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"typing.Sequence*4
option(
argparse.Namespace"argparse.Namespace*g
	namespaceV
Union[argparse.Namespace,None](
argparse.Namespace"argparse.Namespace
None *°
parse_known_args1_pytest.config.argparsing.Parser.parse_known_args"(
argparse.Namespace"argparse.Namespace*N
selfD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser*ˆ
argsÎ
>typing.Sequence[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"typing.Sequence*g
	namespaceV
Union[argparse.Namespace,None](
argparse.Namespace"argparse.Namespace
None *¡
parse_known_and_unknown_args=_pytest.config.argparsing.Parser.parse_known_and_unknown_args"Ø
5Tuple[argparse.Namespace,builtins.list[builtins.str]](
argparse.Namespace"argparse.NamespaceJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*N
selfD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser*ˆ
argsÎ
>typing.Sequence[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"typing.Sequence*g
	namespaceV
Union[argparse.Namespace,None](
argparse.Namespace"argparse.Namespace
None *˜
addini'_pytest.config.argparsing.Parser.addini"
None*N
selfD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser*&
name
builtins.str"builtins.str*&
help
builtins.str"builtins.str*Å
typeÙ
èUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *
default
Any 8rs
prog%_pytest.config.argparsing.Parser.progD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerâ

_anonymous+_pytest.config.argparsing.Parser._anonymousN
%_pytest.config.argparsing.OptionGroup"%_pytest.config.argparsing.OptionGrouprÀ
_groups(_pytest.config.argparsing.Parser._groupsï
4builtins.list[_pytest.config.argparsing.OptionGroup]N
%_pytest.config.argparsing.OptionGroup"%_pytest.config.argparsing.OptionGroup"builtins.listrƒ
_processopt,_pytest.config.argparsing.Parser._processoptÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
Nonerw
_usage'_pytest.config.argparsing.Parser._usageD
Union[builtins.str,None]
builtins.str"builtins.str
Noner◊
_inidict)_pytest.config.argparsing.Parser._inidictü
Lbuiltins.dict[builtins.str,Tuple[builtins.str,Union[builtins.str,None],Any]]
builtins.str"builtins.str°
0Tuple[builtins.str,Union[builtins.str,None],Any]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
Any"builtins.dictrÉ
	_ininames*_pytest.config.argparsing.Parser._ininamesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrí

extra_info+_pytest.config.argparsing.Parser.extra_infoW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrç
	optparser*_pytest.config.argparsing.Parser.optparserT
(_pytest.config.argparsing.MyOptionParser"(_pytest.config.argparsing.MyOptionParser≠
ArgumentError'_pytest.config.argparsing.ArgumentError"builtins.Exception*˝
__init__0_pytest.config.argparsing.ArgumentError.__init__"
None*\
selfR
'_pytest.config.argparsing.ArgumentError"'_pytest.config.argparsing.ArgumentError*%
msg
builtins.str"builtins.str*Ø
option¢
6Union[_pytest.config.argparsing.Argument,builtins.str]H
"_pytest.config.argparsing.Argument""_pytest.config.argparsing.Argument
builtins.str"builtins.str*Æ
__str__/_pytest.config.argparsing.ArgumentError.__str__"
builtins.str"builtins.str*TR
'_pytest.config.argparsing.ArgumentError"'_pytest.config.argparsing.ArgumentErrorrP
msg+_pytest.config.argparsing.ArgumentError.msg
builtins.str"builtins.strr\
	option_id1_pytest.config.argparsing.ArgumentError.option_id
builtins.str"builtins.strì
Argument"_pytest.config.argparsing.Argument"builtins.object*“
__init__+_pytest.config.argparsing.Argument.__init__"
None*R
selfH
"_pytest.config.argparsing.Argument""_pytest.config.argparsing.Argument*'
names
builtins.str"builtins.str*
attrs
Any*—
names(_pytest.config.argparsing.Argument.names"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*R
selfH
"_pytest.config.argparsing.Argument""_pytest.config.argparsing.Argument*‡
attrs(_pytest.config.argparsing.Argument.attrs"Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*R
selfH
"_pytest.config.argparsing.Argument""_pytest.config.argparsing.Argument*ˇ
_set_opt_strings3_pytest.config.argparsing.Argument._set_opt_strings"
None*R
selfH
"_pytest.config.argparsing.Argument""_pytest.config.argparsing.Argument*X
optsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*°
__repr__+_pytest.config.argparsing.Argument.__repr__"
builtins.str"builtins.str*JH
"_pytest.config.argparsing.Argument""_pytest.config.argparsing.Argumentr±
_typ_map+_pytest.config.argparsing.Argument._typ_mapx
)builtins.dict[builtins.str,builtins.type]
builtins.str"builtins.str
builtins.type"builtins.type"builtins.dictrå
_attrs)_pytest.config.argparsing.Argument._attrsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrâ
_short_opts._pytest.config.argparsing.Argument._short_optsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrá

_long_opts-_pytest.config.argparsing.Argument._long_optsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr8
type'_pytest.config.argparsing.Argument.type
Anyr>
default*_pytest.config.argparsing.Argument.default
AnyrM
dest'_pytest.config.argparsing.Argument.dest
builtins.str"builtins.strπ
OptionGroup%_pytest.config.argparsing.OptionGroup"builtins.object*∫
__init__._pytest.config.argparsing.OptionGroup.__init__"
None*X
selfN
%_pytest.config.argparsing.OptionGroup"%_pytest.config.argparsing.OptionGroup*&
name
builtins.str"builtins.str*/
description
builtins.str"builtins.str *è
parserÄ
,Union[_pytest.config.argparsing.Parser,None]D
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser
None */
	_ispytest
builtins.bool"builtins.bool *‹
	addoption/_pytest.config.argparsing.OptionGroup.addoption"
None*X
selfN
%_pytest.config.argparsing.OptionGroup"%_pytest.config.argparsing.OptionGroup*&
opts
builtins.str"builtins.str*
attrs
Any*ﬁ

_addoption0_pytest.config.argparsing.OptionGroup._addoption"
None*X
selfN
%_pytest.config.argparsing.OptionGroup"%_pytest.config.argparsing.OptionGroup*&
opts
builtins.str"builtins.str*
attrs
Any*º
_addoption_instance9_pytest.config.argparsing.OptionGroup._addoption_instance"
None*X
selfN
%_pytest.config.argparsing.OptionGroup"%_pytest.config.argparsing.OptionGroup*T
optionH
"_pytest.config.argparsing.Argument""_pytest.config.argparsing.Argument*0

shortupper
builtins.bool"builtins.bool rP
name*_pytest.config.argparsing.OptionGroup.name
builtins.str"builtins.strr^
description1_pytest.config.argparsing.OptionGroup.description
builtins.str"builtins.strr«
options-_pytest.config.argparsing.OptionGroup.optionså
1builtins.list[_pytest.config.argparsing.Argument]H
"_pytest.config.argparsing.Argument""_pytest.config.argparsing.Argument"builtins.listrπ
parser,_pytest.config.argparsing.OptionGroup.parserÄ
,Union[_pytest.config.argparsing.Parser,None]D
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser
NoneŒ
MyOptionParser(_pytest.config.argparsing.MyOptionParser"argparse.ArgumentParser*Û
__init__1_pytest.config.argparsing.MyOptionParser.__init__"
None*^
selfT
(_pytest.config.argparsing.MyOptionParser"(_pytest.config.argparsing.MyOptionParser*P
parserD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser*•

extra_infoí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *P
progD
Union[builtins.str,None]
builtins.str"builtins.str
None *–
error._pytest.config.argparsing.MyOptionParser.error"
NoReturn
*^
selfT
(_pytest.config.argparsing.MyOptionParser"(_pytest.config.argparsing.MyOptionParser*)
message
builtins.str"builtins.str*À

parse_args3_pytest.config.argparsing.MyOptionParser.parse_args"(
argparse.Namespace"argparse.Namespace*^
selfT
(_pytest.config.argparsing.MyOptionParser"(_pytest.config.argparsing.MyOptionParser*î
argsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *g
	namespaceV
Union[argparse.Namespace,None](
argparse.Namespace"argparse.Namespace
None *¿
_parse_optional8_pytest.config.argparsing.MyOptionParser._parse_optional"‰
TUnion[Tuple[Union[argparse.Action,None],builtins.str,Union[builtins.str,None]],None]ˇ
HTuple[Union[argparse.Action,None],builtins.str,Union[builtins.str,None]]M
Union[argparse.Action,None]"
argparse.Action"argparse.Action
None
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
None*^
selfT
(_pytest.config.argparsing.MyOptionParser"(_pytest.config.argparsing.MyOptionParser*,

arg_string
builtins.str"builtins.strrÅ
_parser0_pytest.config.argparsing.MyOptionParser._parserD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parserrö

extra_info3_pytest.config.argparsing.MyOptionParser.extra_infoW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictò
DropShorterLongHelpFormatter6_pytest.config.argparsing.DropShorterLongHelpFormatter"argparse.HelpFormatter*˘
__init__?_pytest.config.argparsing.DropShorterLongHelpFormatter.__init__"
None*z
selfp
6_pytest.config.argparsing.DropShorterLongHelpFormatter"6_pytest.config.argparsing.DropShorterLongHelpFormatter*
args
Any*
kwargs
Any*∑
_format_action_invocationP_pytest.config.argparsing.DropShorterLongHelpFormatter._format_action_invocation"
builtins.str"builtins.str*z
selfp
6_pytest.config.argparsing.DropShorterLongHelpFormatter"6_pytest.config.argparsing.DropShorterLongHelpFormatter*.
action"
argparse.Action"argparse.Action*r
_split_linesC_pytest.config.argparsing.DropShorterLongHelpFormatter._split_lines*
self*
text*	
width*ï
__annotations__)_pytest.config.argparsing.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
_pytest_pytest *R
FILE_OR_DIR%_pytest.config.argparsing.FILE_OR_DIR
builtins.str"builtins.str