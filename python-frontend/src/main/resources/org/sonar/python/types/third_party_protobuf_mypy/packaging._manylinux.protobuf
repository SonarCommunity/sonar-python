
packaging._manylinux¥
_GLibCVersion"packaging._manylinux._GLibCVersion"builtins.tuple*∑
_replace+packaging._manylinux._GLibCVersion._replace"å
&packaging._manylinux._GLibCVersion._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*ò
_selfå
&packaging._manylinux._GLibCVersion._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*)
major
builtins.int"builtins.int *)
minor
builtins.int"builtins.int *È
__new__*packaging._manylinux._GLibCVersion.__new__"å
&packaging._manylinux._GLibCVersion._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*–
_cls≈
,Type[packaging._manylinux._GLibCVersion._NT]å
&packaging._manylinux._GLibCVersion._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"type*'
major
builtins.int"builtins.int*'
minor
builtins.int"builtins.int*©
_asdict*packaging._manylinux._GLibCVersion._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*ò
_selfå
&packaging._manylinux._GLibCVersion._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*å
_make(packaging._manylinux._GLibCVersion._make"å
&packaging._manylinux._GLibCVersion._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*–
_cls≈
,Type[packaging._manylinux._GLibCVersion._NT]å
&packaging._manylinux._GLibCVersion._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprO
major(packaging._manylinux._GLibCVersion.major
builtins.int"builtins.intrO
minor(packaging._manylinux._GLibCVersion.minor
builtins.int"builtins.intrO
major(packaging._manylinux._GLibCVersion.major
builtins.int"builtins.intrO
minor(packaging._manylinux._GLibCVersion.minor
builtins.int"builtins.intró
_fields*packaging._manylinux._GLibCVersion._fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrò
_field_types/packaging._manylinux._GLibCVersion._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrû
_field_defaults2packaging._manylinux._GLibCVersion._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrS
_source*packaging._manylinux._GLibCVersion._source
builtins.str"builtins.strrû
__annotations__2packaging._manylinux._GLibCVersion.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÖ
_is_linux_armhf$packaging._manylinux._is_linux_armhf"
builtins.bool"builtins.bool*,

executable
builtins.str"builtins.strÉ
_is_linux_i686#packaging._manylinux._is_linux_i686"
builtins.bool"builtins.bool*,

executable
builtins.str"builtins.strÍ
_have_compatible_abi)packaging._manylinux._have_compatible_abi"
builtins.bool"builtins.bool*,

executable
builtins.str"builtins.str*Y
archsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequenceô
_glibc_version_string_confstr2packaging._manylinux._glibc_version_string_confstr"D
Union[builtins.str,None]
builtins.str"builtins.str
Noneó
_glibc_version_string_ctypes1packaging._manylinux._glibc_version_string_ctypes"D
Union[builtins.str,None]
builtins.str"builtins.str
Noneâ
_glibc_version_string*packaging._manylinux._glibc_version_string"D
Union[builtins.str,None]
builtins.str"builtins.str
None“
_parse_glibc_version)packaging._manylinux._parse_glibc_version"`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*-
version_str
builtins.str"builtins.str√
_is_compatible#packaging._manylinux._is_compatible"
builtins.bool"builtins.bool*&
arch
builtins.str"builtins.str*√
versionµ
+TypeAlias[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int""packaging._manylinux._GLibCVersionﬁ
platform_tags"packaging._manylinux.platform_tags"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*Y
archsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*ê
__annotations__$packaging._manylinux.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*S
EF_ARM_ABIMASK#packaging._manylinux.EF_ARM_ABIMASK
builtins.int"builtins.int*U
EF_ARM_ABI_VER5$packaging._manylinux.EF_ARM_ABI_VER5
builtins.int"builtins.int*a
EF_ARM_ABI_FLOAT_HARD*packaging._manylinux.EF_ARM_ABI_FLOAT_HARD
builtins.int"builtins.int*≤
_LAST_GLIBC_MINOR&packaging._manylinux._LAST_GLIBC_MINORu
(builtins.dict[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.dict*ì
_LEGACY_MANYLINUX_MAP*packaging._manylinux._LEGACY_MANYLINUX_MAPÕ
<builtins.dict[Tuple[builtins.int,builtins.int],builtins.str]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.str"builtins.str"builtins.dict