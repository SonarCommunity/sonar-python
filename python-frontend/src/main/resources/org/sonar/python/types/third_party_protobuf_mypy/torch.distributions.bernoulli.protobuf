
torch.distributions.bernoulliç
	Bernoulli'torch.distributions.bernoulli.Bernoulli"0torch.distributions.exp_family.ExponentialFamily*v
__init__0torch.distributions.bernoulli.Bernoulli.__init__*
self*
probs *
logits *
validate_args *d
expand.torch.distributions.bernoulli.Bernoulli.expand*
self*
batch_shape*
	_instance *T
_new,torch.distributions.bernoulli.Bernoulli._new*
self*
args*

kwargs*L
mean,torch.distributions.bernoulli.Bernoulli.mean*
self0:property`*L
mode,torch.distributions.bernoulli.Bernoulli.mode*
self0:property`*T
variance0torch.distributions.bernoulli.Bernoulli.variance*
self0:property`*S
logits.torch.distributions.bernoulli.Bernoulli.logits*
self0:lazy_property*Q
probs-torch.distributions.bernoulli.Bernoulli.probs*
self0:lazy_property*Z
param_shape3torch.distributions.bernoulli.Bernoulli.param_shape*
self0:property`*V
sample.torch.distributions.bernoulli.Bernoulli.sample*
self*
sample_shape *Q
log_prob0torch.distributions.bernoulli.Bernoulli.log_prob*
self*	
value*D
entropy/torch.distributions.bernoulli.Bernoulli.entropy*
self*f
enumerate_support9torch.distributions.bernoulli.Bernoulli.enumerate_support*
self*
expand *b
_natural_params7torch.distributions.bernoulli.Bernoulli._natural_params*
self0:property`*[
_log_normalizer7torch.distributions.bernoulli.Bernoulli._log_normalizer*
self*
xrú
arg_constraints7torch.distributions.bernoulli.Bernoulli.arg_constraintsœ
Fbuiltins.dict[builtins.str,torch.distributions.constraints.Constraint]
builtins.str"builtins.strX
*torch.distributions.constraints.Constraint"*torch.distributions.constraints.Constraint"builtins.dictrê
support/torch.distributions.bernoulli.Bernoulli.supportT
(torch.distributions.constraints._Boolean"(torch.distributions.constraints._Booleanrv
has_enumerate_support=torch.distributions.bernoulli.Bernoulli.has_enumerate_support
builtins.bool"builtins.boolrt
_mean_carrier_measure=torch.distributions.bernoulli.Bernoulli._mean_carrier_measure
builtins.int"builtins.intrA
_param.torch.distributions.bernoulli.Bernoulli._param
Any*ô
__annotations__-torch.distributions.bernoulli.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*|
__all__%torch.distributions.bernoulli.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list