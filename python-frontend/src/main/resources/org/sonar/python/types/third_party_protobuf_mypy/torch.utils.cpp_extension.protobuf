
torch.utils.cpp_extension÷
BuildExtension(torch.utils.cpp_extension.BuildExtension"builtins.object*l
with_options5torch.utils.cpp_extension.BuildExtension.with_options*
cls*
options0:classmethodp*œ
__init__1torch.utils.cpp_extension.BuildExtension.__init__"
None*^
selfT
(torch.utils.cpp_extension.BuildExtension"(torch.utils.cpp_extension.BuildExtension*
args
Any*
kwargs
Any*∑
finalize_options9torch.utils.cpp_extension.BuildExtension.finalize_options"
None*^
selfT
(torch.utils.cpp_extension.BuildExtension"(torch.utils.cpp_extension.BuildExtension*∑
build_extensions9torch.utils.cpp_extension.BuildExtension.build_extensions"
None*^
selfT
(torch.utils.cpp_extension.BuildExtension"(torch.utils.cpp_extension.BuildExtension*e
get_ext_filename9torch.utils.cpp_extension.BuildExtension.get_ext_filename*
self*
ext_name*¿

_check_abi3torch.utils.cpp_extension.BuildExtension._check_abi"ú
4Tuple[builtins.str,torch.torch_version.TorchVersion]
builtins.str"builtins.strD
 torch.torch_version.TorchVersion" torch.torch_version.TorchVersion*^
selfT
(torch.utils.cpp_extension.BuildExtension"(torch.utils.cpp_extension.BuildExtension*r
_add_compile_flag:torch.utils.cpp_extension.BuildExtension._add_compile_flag*
self*
	extension*
flag*~
_define_torch_extension_nameEtorch.utils.cpp_extension.BuildExtension._define_torch_extension_name*
self*
	extension*p
_add_gnu_cpp_abi_flag>torch.utils.cpp_extension.BuildExtension._add_gnu_cpp_abi_flag*
self*
	extensionr^
no_python_abi_suffix=torch.utils.cpp_extension.BuildExtension.no_python_abi_suffix
AnyrH
	use_ninja2torch.utils.cpp_extension.BuildExtension.use_ninja
AnyrW
force.torch.utils.cpp_extension.BuildExtension.force
builtins.bool"builtins.boolrB
cflags/torch.utils.cpp_extension.BuildExtension.cflags
Anyº
cls_with_options@478.torch.utils.cpp_extension.cls_with_options@478"builtins.object*c
__init__7torch.utils.cpp_extension.cls_with_options@478.__init__*
self*
args*

kwargsï
_nt_quote_args(torch.utils.cpp_extension._nt_quote_args"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*å
argsÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneÇ
_find_cuda_home)torch.utils.cpp_extension._find_cuda_home"D
Union[builtins.str,None]
builtins.str"builtins.str
NoneÇ
_find_rocm_home)torch.utils.cpp_extension._find_rocm_home"D
Union[builtins.str,None]
builtins.str"builtins.str
Nonen
_join_rocm_home)torch.utils.cpp_extension._join_rocm_home"
builtins.str"builtins.str*
paths
Any>
get_cxx_compiler*torch.utils.cpp_extension.get_cxx_compiler^
_is_binary_build*torch.utils.cpp_extension._is_binary_build"
builtins.bool"builtins.bool™
 _accepted_compilers_for_platform:torch.utils.cpp_extension._accepted_compilers_for_platform"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listU
_maybe_write&torch.utils.cpp_extension._maybe_write*
filename*
new_contenth
get_default_build_root0torch.utils.cpp_extension.get_default_build_root"
builtins.str"builtins.str¶
check_compiler_ok_for_platform8torch.utils.cpp_extension.check_compiler_ok_for_platform"
builtins.bool"builtins.bool**
compiler
builtins.str"builtins.str´
*get_compiler_abi_compatibility_and_versionDtorch.utils.cpp_extension.get_compiler_abi_compatibility_and_version"ü
5Tuple[builtins.bool,torch.torch_version.TorchVersion]
builtins.bool"builtins.boolD
 torch.torch_version.TorchVersion" torch.torch_version.TorchVersion*
compiler
Any€
_check_cuda_version-torch.utils.cpp_extension._check_cuda_version"
None*/
compiler_name
builtins.str"builtins.str*Z
compiler_versionD
 torch.torch_version.TorchVersion" torch.torch_version.TorchVersionc
CppExtension&torch.utils.cpp_extension.CppExtension*
name*
sources*
args*

kwargse
CUDAExtension'torch.utils.cpp_extension.CUDAExtension*
name*
sources*
args*

kwargs∞
include_paths'torch.utils.cpp_extension.include_paths"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list**
cuda
builtins.bool"builtins.bool ∞
library_paths'torch.utils.cpp_extension.library_paths"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list**
cuda
builtins.bool"builtins.bool Â
loadtorch.utils.cpp_extension.load"
Any*
name
Any*´
sourcesù
/Union[builtins.str,builtins.list[builtins.str]]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*
extra_cflags
Any * 
extra_cuda_cflags
Any *
extra_ldflags
Any *"
extra_include_paths
Any *
build_directory
Any *
verbose
Any *X
	with_cudaG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *
is_python_module
Any *
is_standalone
Any *!
keep_intermediates
Any X
_get_pybind11_abi_build_flags7torch.utils.cpp_extension._get_pybind11_abi_build_flagsV
_get_glibcxx_abi_build_flags6torch.utils.cpp_extension._get_glibcxx_abi_build_flagsV
check_compiler_is_gcc/torch.utils.cpp_extension.check_compiler_is_gcc*
compileræ
0_check_and_build_extension_h_precompiler_headersJtorch.utils.cpp_extension._check_and_build_extension_h_precompiler_headers*
extra_cflags*
extra_include_paths*
is_standalone j
&remove_extension_h_precompiler_headers@torch.utils.cpp_extension.remove_extension_h_precompiler_headersÏ
load_inline%torch.utils.cpp_extension.load_inline*
name*
cpp_sources*
cuda_sources *
	functions *
extra_cflags *
extra_cuda_cflags *
extra_ldflags *
extra_include_paths *
build_directory *
verbose *
	with_cuda *
is_python_module *!
with_pytorch_error_handling *
keep_intermediates *
use_pch ¯
_jit_compile&torch.utils.cpp_extension._jit_compile"
None*
name
Any*
sources
Any*
extra_cflags
Any*
extra_cuda_cflags
Any*
extra_ldflags
Any* 
extra_include_paths
Any*1
build_directory
builtins.str"builtins.str*+
verbose
builtins.bool"builtins.bool*V
	with_cudaG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*
is_python_module
Any*
is_standalone
Any*!
keep_intermediates
Any ¶
%_write_ninja_file_and_compile_objects?torch.utils.cpp_extension._write_ninja_file_and_compile_objects"
None*W
sourcesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*
objects
Any*
cflags
Any*
post_cflags
Any*
cuda_cflags
Any*
cuda_post_cflags
Any*#
cuda_dlink_post_cflags
Any*1
build_directory
builtins.str"builtins.str*+
verbose
builtins.bool"builtins.bool*V
	with_cudaG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None¿
#_write_ninja_file_and_build_library=torch.utils.cpp_extension._write_ninja_file_and_build_library"
None*
name
Any*W
sourcesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*
extra_cflags
Any*
extra_cuda_cflags
Any*
extra_ldflags
Any* 
extra_include_paths
Any*1
build_directory
builtins.str"builtins.str*+
verbose
builtins.bool"builtins.bool*V
	with_cudaG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*3
is_standalone
builtins.bool"builtins.bool B
is_ninja_available,torch.utils.cpp_extension.is_ninja_availableP
verify_ninja_availability3torch.utils.cpp_extension.verify_ninja_availabilityÄ
_prepare_ldflags*torch.utils.cpp_extension._prepare_ldflags*
extra_ldflags*
	with_cuda*
verbose*
is_standalone•
_get_cuda_arch_flags.torch.utils.cpp_extension._get_cuda_arch_flags"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ê
cflagsÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None •
_get_rocm_arch_flags.torch.utils.cpp_extension._get_rocm_arch_flags"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ê
cflagsÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None π
_get_build_directory.torch.utils.cpp_extension._get_build_directory"
builtins.str"builtins.str*&
name
builtins.str"builtins.str*+
verbose
builtins.bool"builtins.bool±
_get_num_workers*torch.utils.cpp_extension._get_num_workers"D
Union[builtins.int,None]
builtins.int"builtins.int
None*+
verbose
builtins.bool"builtins.boolÿ
_run_ninja_build*torch.utils.cpp_extension._run_ninja_build"
None*1
build_directory
builtins.str"builtins.str*+
verbose
builtins.bool"builtins.bool*.
error_prefix
builtins.str"builtins.strU
_get_exec_path(torch.utils.cpp_extension._get_exec_path*
module_name*
pathÖ
_import_module_from_library5torch.utils.cpp_extension._import_module_from_library*
module_name*
path*
is_python_module’
"_write_ninja_file_to_build_library<torch.utils.cpp_extension._write_ninja_file_to_build_library"
None*
path
Any*
name
Any*
sources
Any*
extra_cflags
Any*
extra_cuda_cflags
Any*
extra_ldflags
Any* 
extra_include_paths
Any*
	with_cuda
Any*
is_standalone
Any·
_write_ninja_file+torch.utils.cpp_extension._write_ninja_file"
None*
path
Any*
cflags
Any*
post_cflags
Any*
cuda_cflags
Any*
cuda_post_cflags
Any*#
cuda_dlink_post_cflags
Any*
sources
Any*
objects
Any*
ldflags
Any*
library_target
Any*
	with_cuda
Anyn
_join_cuda_home)torch.utils.cpp_extension._join_cuda_home"
builtins.str"builtins.str*
paths
AnyÄ
_is_cuda_file'torch.utils.cpp_extension._is_cuda_file"
builtins.bool"builtins.bool*&
path
builtins.str"builtins.str*ï
__annotations__)torch.utils.cpp_extension.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*;

setuptools$torch.utils.cpp_extension.setuptools
Any*9
	build_ext#torch.utils.cpp_extension.build_ext
Any*R

IS_WINDOWS$torch.utils.cpp_extension.IS_WINDOWS
builtins.bool"builtins.bool*N
IS_MACOS"torch.utils.cpp_extension.IS_MACOS
builtins.bool"builtins.bool*N
IS_LINUX"torch.utils.cpp_extension.IS_LINUX
builtins.bool"builtins.bool*J
LIB_EXT!torch.utils.cpp_extension.LIB_EXT
builtins.str"builtins.str*L
EXEC_EXT"torch.utils.cpp_extension.EXEC_EXT
builtins.str"builtins.str*R
CLIB_PREFIX%torch.utils.cpp_extension.CLIB_PREFIX
builtins.str"builtins.str*L
CLIB_EXT"torch.utils.cpp_extension.CLIB_EXT
builtins.str"builtins.str*R
SHARED_FLAG%torch.utils.cpp_extension.SHARED_FLAG
builtins.str"builtins.str*F
_HEREtorch.utils.cpp_extension._HERE
builtins.str"builtins.str*R
_TORCH_PATH%torch.utils.cpp_extension._TORCH_PATH
builtins.str"builtins.str*X
TORCH_LIB_PATH(torch.utils.cpp_extension.TORCH_LIB_PATH
builtins.str"builtins.str*ò
SUBPROCESS_DECODE_ARGS0torch.utils.cpp_extension.SUBPROCESS_DECODE_ARGSL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*“
MINIMUM_GCC_VERSION-torch.utils.cpp_extension.MINIMUM_GCC_VERSIONã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*‘
MINIMUM_MSVC_VERSION.torch.utils.cpp_extension.MINIMUM_MSVC_VERSIONã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*’
CUDA_GCC_VERSIONS+torch.utils.cpp_extension.CUDA_GCC_VERSIONSí
rTypeAlias[builtins.dict[builtins.str,TypeAlias[Tuple[builtins.tuple[builtins.int],builtins.tuple[builtins.int]]]]]Û
gbuiltins.dict[builtins.str,TypeAlias[Tuple[builtins.tuple[builtins.int],builtins.tuple[builtins.int]]]]
builtins.str"builtins.str⁄
KTypeAlias[Tuple[builtins.tuple[builtins.int],builtins.tuple[builtins.int]]]‡
@Tuple[builtins.tuple[builtins.int],builtins.tuple[builtins.int]]L
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tupleL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"&torch.utils.cpp_extension.VersionRange"builtins.dict"$torch.utils.cpp_extension.VersionMap*÷
MINIMUM_CLANG_VERSION/torch.utils.cpp_extension.MINIMUM_CLANG_VERSIONã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*Ÿ
CUDA_CLANG_VERSIONS-torch.utils.cpp_extension.CUDA_CLANG_VERSIONSí
rTypeAlias[builtins.dict[builtins.str,TypeAlias[Tuple[builtins.tuple[builtins.int],builtins.tuple[builtins.int]]]]]Û
gbuiltins.dict[builtins.str,TypeAlias[Tuple[builtins.tuple[builtins.int],builtins.tuple[builtins.int]]]]
builtins.str"builtins.str⁄
KTypeAlias[Tuple[builtins.tuple[builtins.int],builtins.tuple[builtins.int]]]‡
@Tuple[builtins.tuple[builtins.int],builtins.tuple[builtins.int]]L
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tupleL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"&torch.utils.cpp_extension.VersionRange"builtins.dict"$torch.utils.cpp_extension.VersionMap*x
__all__!torch.utils.cpp_extension.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*r
ABI_INCOMPATIBILITY_WARNING5torch.utils.cpp_extension.ABI_INCOMPATIBILITY_WARNING
builtins.str"builtins.str*h
WRONG_COMPILER_WARNING0torch.utils.cpp_extension.WRONG_COMPILER_WARNING
builtins.str"builtins.str*f
CUDA_MISMATCH_MESSAGE/torch.utils.cpp_extension.CUDA_MISMATCH_MESSAGE
builtins.str"builtins.str*`
CUDA_MISMATCH_WARN,torch.utils.cpp_extension.CUDA_MISMATCH_WARN
builtins.str"builtins.str*h
CUDA_NOT_FOUND_MESSAGE0torch.utils.cpp_extension.CUDA_NOT_FOUND_MESSAGE
builtins.str"builtins.str*v
	ROCM_HOME#torch.utils.cpp_extension.ROCM_HOMED
Union[builtins.str,None]
builtins.str"builtins.str
None*t
HIP_HOME"torch.utils.cpp_extension.HIP_HOMED
Union[builtins.str,None]
builtins.str"builtins.str
None*^
IS_HIP_EXTENSION*torch.utils.cpp_extension.IS_HIP_EXTENSION
builtins.bool"builtins.bool*Ω
ROCM_VERSION&torch.utils.cpp_extension.ROCM_VERSIONÑ
(Union[builtins.tuple[builtins.int],None]L
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None*v
	CUDA_HOME#torch.utils.cpp_extension.CUDA_HOMED
Union[builtins.str,None]
builtins.str"builtins.str
None*x

CUDNN_HOME$torch.utils.cpp_extension.CUDNN_HOMED
Union[builtins.str,None]
builtins.str"builtins.str
None*¶
!BUILT_FROM_SOURCE_VERSION_PATTERN;torch.utils.cpp_extension.BUILT_FROM_SOURCE_VERSION_PATTERND
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*å
COMMON_MSVC_FLAGS+torch.utils.cpp_extension.COMMON_MSVC_FLAGSJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*†
MSVC_IGNORE_CUDAFE_WARNINGS5torch.utils.cpp_extension.MSVC_IGNORE_CUDAFE_WARNINGSJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*å
COMMON_NVCC_FLAGS+torch.utils.cpp_extension.COMMON_NVCC_FLAGSJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ä
COMMON_HIP_FLAGS*torch.utils.cpp_extension.COMMON_HIP_FLAGSJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*é
COMMON_HIPCC_FLAGS,torch.utils.cpp_extension.COMMON_HIPCC_FLAGSJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*¿
JIT_EXTENSION_VERSIONER1torch.utils.cpp_extension.JIT_EXTENSION_VERSIONERr
7torch.utils._cpp_extension_versioner.ExtensionVersioner"7torch.utils._cpp_extension_versioner.ExtensionVersioner*±
PLAT_TO_VCVARS(torch.utils.cpp_extension.PLAT_TO_VCVARSu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict