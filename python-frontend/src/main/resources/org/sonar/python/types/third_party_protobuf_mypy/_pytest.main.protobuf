
_pytest.main‡
FSHookProxy_pytest.main.FSHookProxy"builtins.object*„
__init__!_pytest.main.FSHookProxy.__init__"
None*>
self4
_pytest.main.FSHookProxy"_pytest.main.FSHookProxy*P
pmH
"_pytest.config.PytestPluginManager""_pytest.config.PytestPluginManager*
remove_mods
Any*î
__getattr__$_pytest.main.FSHookProxy.__getattr__"
Any*64
_pytest.main.FSHookProxy"_pytest.main.FSHookProxy*
builtins.str"builtins.strrk
pm_pytest.main.FSHookProxy.pmH
"_pytest.config.PytestPluginManager""_pytest.config.PytestPluginManagerr<
remove_mods$_pytest.main.FSHookProxy.remove_mods
Anyî
Interrupted_pytest.main.Interrupted"builtins.KeyboardInterruptrO

__module__#_pytest.main.Interrupted.__module__
builtins.str"builtins.str1
Failed_pytest.main.Failed"builtins.ExceptionÊ
_bestrelpath_cache_pytest.main._bestrelpath_cache"builtins.dict*Œ
__missing__+_pytest.main._bestrelpath_cache.__missing__"
builtins.str"builtins.str*L
selfB
_pytest.main._bestrelpath_cache"_pytest.main._bestrelpath_cache*&
path
pathlib.Path"pathlib.Path*¥
__init__(_pytest.main._bestrelpath_cache.__init__"
None*L
selfB
_pytest.main._bestrelpath_cache"_pytest.main._bestrelpath_cache*&
path
pathlib.Path"pathlib.Path*°
__lt__&_pytest.main._bestrelpath_cache.__lt__"
builtins.bool"builtins.bool*f
self\
#_pytest.main._bestrelpath_cache._AT"
builtins.object"builtins.object"builtins.object*g
other\
#_pytest.main._bestrelpath_cache._AT"
builtins.object"builtins.object"builtins.object*°
__le__&_pytest.main._bestrelpath_cache.__le__"
builtins.bool"builtins.bool*f
self\
#_pytest.main._bestrelpath_cache._AT"
builtins.object"builtins.object"builtins.object*g
other\
#_pytest.main._bestrelpath_cache._AT"
builtins.object"builtins.object"builtins.object*°
__gt__&_pytest.main._bestrelpath_cache.__gt__"
builtins.bool"builtins.bool*f
self\
#_pytest.main._bestrelpath_cache._AT"
builtins.object"builtins.object"builtins.object*g
other\
#_pytest.main._bestrelpath_cache._AT"
builtins.object"builtins.object"builtins.object*°
__ge__&_pytest.main._bestrelpath_cache.__ge__"
builtins.bool"builtins.bool*f
self\
#_pytest.main._bestrelpath_cache._AT"
builtins.object"builtins.object"builtins.object*g
other\
#_pytest.main._bestrelpath_cache._AT"
builtins.object"builtins.object"builtins.object8rJ
path$_pytest.main._bestrelpath_cache.path
pathlib.Path"pathlib.Pathrπ
__attrs_attrs__/_pytest.main._bestrelpath_cache.__attrs_attrs__u
#Tuple[attr.Attribute[pathlib.Path]]L
attr.Attribute[pathlib.Path]
pathlib.Path"pathlib.Path"attr.Attribute©4
Session_pytest.main.Session"_pytest.nodes.FSCollector*ß
__init___pytest.main.Session.__init__"
None*6
self,
_pytest.main.Session"_pytest.main.Session*:
config.
_pytest.config.Config"_pytest.config.Config*á
from_config _pytest.main.Session.from_config",
_pytest.main.Session"_pytest.main.Session*[
clsR
Type[_pytest.main.Session],
_pytest.main.Session"_pytest.main.Session"type*:
config.
_pytest.config.Config"_pytest.config.Config0:classmethodp*w
__repr___pytest.main.Session.__repr__"
builtins.str"builtins.str*.,
_pytest.main.Session"_pytest.main.Session*è
	startpath_pytest.main.Session.startpath"
pathlib.Path"pathlib.Path*6
self,
_pytest.main.Session"_pytest.main.Session0:property`*Œ
_node_location_to_relpath._pytest.main.Session._node_location_to_relpath"
builtins.str"builtins.str*6
self,
_pytest.main.Session"_pytest.main.Session*+
	node_path
pathlib.Path"pathlib.Path*É
pytest_collectstart(_pytest.main.Session.pytest_collectstart"
None*6
self,
_pytest.main.Session"_pytest.main.Session0*⁄
pytest_runtest_logreport-_pytest.main.Session.pytest_runtest_logreport"
None*6
self,
_pytest.main.Session"_pytest.main.Session* 
reportΩ
?Union[_pytest.reports.TestReport,_pytest.reports.CollectReport]8
_pytest.reports.TestReport"_pytest.reports.TestReport>
_pytest.reports.CollectReport"_pytest.reports.CollectReport0*™

isinitpath_pytest.main.Session.isinitpath"
builtins.bool"builtins.bool*6
self,
_pytest.main.Session"_pytest.main.Session*¢
pathó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike*∆
gethookproxy!_pytest.main.Session.gethookproxy"
Any*6
self,
_pytest.main.Session"_pytest.main.Session*R
fspathF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike*◊
_recurse_pytest.main.Session._recurse"
builtins.bool"builtins.bool*6
self,
_pytest.main.Session"_pytest.main.Session*T
direntryF
os.DirEntry[builtins.str]
builtins.str"builtins.str"os.DirEntry*∏
_collectfile!_pytest.main.Session._collectfile"o
(typing.Sequence[_pytest.nodes.Collector]2
_pytest.nodes.Collector"_pytest.nodes.Collector"typing.Sequence*6
self,
_pytest.main.Session"_pytest.main.Session*(
fspath
pathlib.Path"pathlib.Path*2
handle_dupes
builtins.bool"builtins.bool *Õ
collect_pytest.main.Session.collect"Î
Btyping.Iterator[Union[_pytest.nodes.Item,_pytest.nodes.Collector]]ì
1Union[_pytest.nodes.Item,_pytest.nodes.Collector](
_pytest.nodes.Item"_pytest.nodes.Item2
_pytest.nodes.Collector"_pytest.nodes.Collector"typing.Iterator*6
self,
_pytest.main.Session"_pytest.main.Session*‰
genitems_pytest.main.Session.genitems"`
#typing.Iterator[_pytest.nodes.Item](
_pytest.nodes.Item"_pytest.nodes.Item"typing.Iterator*6
self,
_pytest.main.Session"_pytest.main.Session*û
nodeì
1Union[_pytest.nodes.Item,_pytest.nodes.Collector](
_pytest.nodes.Item"_pytest.nodes.Item2
_pytest.nodes.Collector"_pytest.nodes.Collector2±
perform_collect$_pytest.main.Session.perform_collect¬
perform_collect$_pytest.main.Session.perform_collect"`
#typing.Sequence[_pytest.nodes.Item](
_pytest.nodes.Item"_pytest.nodes.Item"typing.Sequence*6
self,
_pytest.main.Session"_pytest.main.Session*î
argsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *J
genitems:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadX≤
perform_collect$_pytest.main.Session.perform_collect"Î
Btyping.Sequence[Union[_pytest.nodes.Item,_pytest.nodes.Collector]]ì
1Union[_pytest.nodes.Item,_pytest.nodes.Collector](
_pytest.nodes.Item"_pytest.nodes.Item2
_pytest.nodes.Collector"_pytest.nodes.Collector"typing.Sequence*6
self,
_pytest.main.Session"_pytest.main.Session*î
argsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *.
genitems
builtins.bool"builtins.bool 0:overloadX8rp
Interrupted _pytest.main.Session.Interrupted?
CallableType[builtins.type]
builtins.type"builtins.typerf
Failed_pytest.main.Session.Failed?
CallableType[builtins.type]
builtins.type"builtins.typerg
_setupstate _pytest.main.Session._setupstate6
_pytest.runner.SetupState"_pytest.runner.SetupStater{
_fixturemanager$_pytest.main.Session._fixturemanagerB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManagerr±

exitstatus_pytest.main.Session.exitstatusÅ
+Union[builtins.int,_pytest.config.ExitCode]
builtins.int"builtins.int2
_pytest.config.ExitCode"_pytest.config.ExitCoderé
pytest_collectreport)_pytest.main.Session.pytest_collectreportK
CallableType[builtins.function]&
builtins.function"builtins.functionrM
testsfailed _pytest.main.Session.testsfailed
builtins.int"builtins.intrS
testscollected#_pytest.main.Session.testscollected
builtins.int"builtins.intrí

shouldstop_pytest.main.Session.shouldstopc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.strrí

shouldfail_pytest.main.Session.shouldfailc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.strra
trace_pytest.main.Session.trace<
pluggy._tracing.TagTracerSub"pluggy._tracing.TagTracerSubrâ
_initialpaths"_pytest.main.Session._initialpathsT
 builtins.frozenset[pathlib.Path]
pathlib.Path"pathlib.Path"builtins.frozensetr≤
_bestrelpathcache&_pytest.main.Session._bestrelpathcacheu
(builtins.dict[pathlib.Path,builtins.str]
pathlib.Path"pathlib.Path
builtins.str"builtins.str"builtins.dictr‹
	_notfound_pytest.main.Session._notfoundÆ
Kbuiltins.list[Tuple[builtins.str,typing.Sequence[_pytest.nodes.Collector]]]œ
<Tuple[builtins.str,typing.Sequence[_pytest.nodes.Collector]]
builtins.str"builtins.stro
(typing.Sequence[_pytest.nodes.Collector]2
_pytest.nodes.Collector"_pytest.nodes.Collector"typing.Sequence"builtins.listrß
_initial_parts#_pytest.main.Session._initial_partsÔ
>builtins.list[Tuple[pathlib.Path,builtins.list[builtins.str]]]ù
/Tuple[pathlib.Path,builtins.list[builtins.str]]
pathlib.Path"pathlib.PathJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"builtins.listrÅ
items_pytest.main.Session.items\
!builtins.list[_pytest.nodes.Item](
_pytest.nodes.Item"_pytest.nodes.Item"builtins.listç
pytest_addoption_pytest.main.pytest_addoption"
None*P
parserD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parsery
validate_basetemp_pytest.main.validate_basetemp"
builtins.str"builtins.str*&
path
builtins.str"builtins.str¿
wrap_session_pytest.main.wrap_session"Å
+Union[builtins.int,_pytest.config.ExitCode]
builtins.int"builtins.int2
_pytest.config.ExitCode"_pytest.config.ExitCode*:
config.
_pytest.config.Config"_pytest.config.Config*U
doitK
CallableType[builtins.function]&
builtins.function"builtins.function˜
pytest_cmdline_main _pytest.main.pytest_cmdline_main"Å
+Union[builtins.int,_pytest.config.ExitCode]
builtins.int"builtins.int2
_pytest.config.ExitCode"_pytest.config.ExitCode*:
config.
_pytest.config.Config"_pytest.config.Config•
_main_pytest.main._main"ê
0Union[builtins.int,_pytest.config.ExitCode,None]
builtins.int"builtins.int2
_pytest.config.ExitCode"_pytest.config.ExitCode
None*:
config.
_pytest.config.Config"_pytest.config.Config*9
session,
_pytest.main.Session"_pytest.main.Sessionx
pytest_collection_pytest.main.pytest_collection"
None*9
session,
_pytest.main.Session"_pytest.main.Sessionê
pytest_runtestloop_pytest.main.pytest_runtestloop"
builtins.bool"builtins.bool*9
session,
_pytest.main.Session"_pytest.main.Sessioni
_in_venv_pytest.main._in_venv"
builtins.bool"builtins.bool*&
path
pathlib.Path"pathlib.PathÛ
pytest_ignore_collect"_pytest.main.pytest_ignore_collect"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*1
collection_path
pathlib.Path"pathlib.Path*:
config.
_pytest.config.Config"_pytest.config.Config˙
pytest_collection_modifyitems*_pytest.main.pytest_collection_modifyitems"
None*g
items\
!builtins.list[_pytest.nodes.Item](
_pytest.nodes.Item"_pytest.nodes.Item"builtins.list*:
config.
_pytest.config.Config"_pytest.config.Configx
search_pypath_pytest.main.search_pypath"
builtins.str"builtins.str*-
module_name
builtins.str"builtins.strÚ
resolve_collection_argument(_pytest.main.resolve_collection_argument"ù
/Tuple[pathlib.Path,builtins.list[builtins.str]]
pathlib.Path"pathlib.PathJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*1
invocation_path
pathlib.Path"pathlib.Path*%
arg
builtins.str"builtins.str*/
	as_pypath
builtins.bool"builtins.bool *à
__annotations___pytest.main.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
_pytest_pytest 