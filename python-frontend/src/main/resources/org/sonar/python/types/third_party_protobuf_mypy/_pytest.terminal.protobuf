
_pytest.terminalÀ
MoreQuietAction _pytest.terminal.MoreQuietAction"argparse.Action*–
__init__)_pytest.terminal.MoreQuietAction.__init__"
None*N
selfD
 _pytest.terminal.MoreQuietAction" _pytest.terminal.MoreQuietAction*b
option_stringsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*&
dest
builtins.str"builtins.str*1
default"
builtins.object"builtins.object *.
required
builtins.bool"builtins.bool *P
helpD
Union[builtins.str,None]
builtins.str"builtins.str
None *±
__call__)_pytest.terminal.MoreQuietAction.__call__"
None*N
selfD
 _pytest.terminal.MoreQuietAction" _pytest.terminal.MoreQuietAction*>
parser2
argparse.ArgumentParser"argparse.ArgumentParser*7
	namespace(
argparse.Namespace"argparse.Namespace*À
valuesæ
9Union[builtins.str,typing.Sequence[builtins.object],None]
builtins.str"builtins.strW
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence
None*Y
option_stringD
Union[builtins.str,None]
builtins.str"builtins.str
None û
WarningReport_pytest.terminal.WarningReport"builtins.object*â
get_location+_pytest.terminal.WarningReport.get_location"D
Union[builtins.str,None]
builtins.str"builtins.str
None*J
self@
_pytest.terminal.WarningReport"_pytest.terminal.WarningReport*:
config.
_pytest.config.Config"_pytest.config.Config*∫
__init__'_pytest.terminal.WarningReport.__init__"
None*J
self@
_pytest.terminal.WarningReport"_pytest.terminal.WarningReport*)
message
builtins.str"builtins.str*R
nodeidD
Union[builtins.str,None]
builtins.str"builtins.str
None *Ø

fslocationú
,Union[Tuple[builtins.str,builtins.int],None]`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
None *û
__lt__%_pytest.terminal.WarningReport.__lt__"
builtins.bool"builtins.bool*e
self[
"_pytest.terminal.WarningReport._AT"
builtins.object"builtins.object"builtins.object*f
other[
"_pytest.terminal.WarningReport._AT"
builtins.object"builtins.object"builtins.object*û
__le__%_pytest.terminal.WarningReport.__le__"
builtins.bool"builtins.bool*e
self[
"_pytest.terminal.WarningReport._AT"
builtins.object"builtins.object"builtins.object*f
other[
"_pytest.terminal.WarningReport._AT"
builtins.object"builtins.object"builtins.object*û
__gt__%_pytest.terminal.WarningReport.__gt__"
builtins.bool"builtins.bool*e
self[
"_pytest.terminal.WarningReport._AT"
builtins.object"builtins.object"builtins.object*f
other[
"_pytest.terminal.WarningReport._AT"
builtins.object"builtins.object"builtins.object*û
__ge__%_pytest.terminal.WarningReport.__ge__"
builtins.bool"builtins.bool*e
self[
"_pytest.terminal.WarningReport._AT"
builtins.object"builtins.object"builtins.object*f
other[
"_pytest.terminal.WarningReport._AT"
builtins.object"builtins.object"builtins.object8rO
message&_pytest.terminal.WarningReport.message
builtins.str"builtins.strru
nodeid%_pytest.terminal.WarningReport.nodeidD
Union[builtins.str,None]
builtins.str"builtins.str
Noner÷

fslocation)_pytest.terminal.WarningReport.fslocationú
,Union[Tuple[builtins.str,builtins.int],None]`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
NonerV
count_towards_summary4_pytest.terminal.WarningReport.count_towards_summary
Anyrì
__attrs_attrs__._pytest.terminal.WarningReport.__attrs_attrs__œ
âTuple[attr.Attribute[builtins.str],attr.Attribute[Union[builtins.str,None]],attr.Attribute[Union[Tuple[builtins.str,builtins.int],None]]]L
attr.Attribute[builtins.str]
builtins.str"builtins.str"attr.AttributeÄ
(attr.Attribute[Union[builtins.str,None]]D
Union[builtins.str,None]
builtins.str"builtins.str
None"attr.AttributeÌ
<attr.Attribute[Union[Tuple[builtins.str,builtins.int],None]]ú
,Union[Tuple[builtins.str,builtins.int],None]`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
None"attr.Attribute…û
TerminalReporter!_pytest.terminal.TerminalReporter"builtins.object*£
__init__*_pytest.terminal.TerminalReporter.__init__"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*:
config.
_pytest.config.Config"_pytest.config.Config*S
fileG
Union[typing.TextIO,None]
typing.TextIO"typing.TextIO
None *∞
_determine_show_progress_info?_pytest.terminal.TerminalReporter._determine_show_progress_info"˚
IUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.bool]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str:
Literal[builtins.bool]	
builtins.bool"builtins.bool*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*∂
	verbosity+_pytest.terminal.TerminalReporter.verbosity"
builtins.int"builtins.int*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter0:property`*∫

showheader,_pytest.terminal.TerminalReporter.showheader"
builtins.bool"builtins.bool*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter0:property`*∏
	no_header+_pytest.terminal.TerminalReporter.no_header"
builtins.bool"builtins.bool*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter0:property`*∫

no_summary,_pytest.terminal.TerminalReporter.no_summary"
builtins.bool"builtins.bool*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter0:property`*∆
showlongtestinfo2_pytest.terminal.TerminalReporter.showlongtestinfo"
builtins.bool"builtins.bool*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter0:property`*Ã
hasopt(_pytest.terminal.TerminalReporter.hasopt"
builtins.bool"builtins.bool*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*&
char
builtins.str"builtins.str*ê
write_fspath_result5_pytest.terminal.TerminalReporter.write_fspath_result"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*(
nodeid
builtins.str"builtins.str*
res
Any**
markup
builtins.bool"builtins.bool*í
write_ensure_prefix5_pytest.terminal.TerminalReporter.write_ensure_prefix"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*(
prefix
builtins.str"builtins.str*)
extra
builtins.str"builtins.str *
kwargs
Any*û
ensure_newline0_pytest.terminal.TerminalReporter.ensure_newline"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*ê
write'_pytest.terminal.TerminalReporter.write"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*)
content
builtins.str"builtins.str*+
flush
builtins.bool"builtins.bool **
markup
builtins.bool"builtins.bool*å
flush'_pytest.terminal.TerminalReporter.flush"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*¥

write_line,_pytest.terminal.TerminalReporter.write_line"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*p
linef
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes**
markup
builtins.bool"builtins.bool*‰
rewrite)_pytest.terminal.TerminalReporter.rewrite"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*&
line
builtins.str"builtins.str**
markup
builtins.bool"builtins.bool*ë
	write_sep+_pytest.terminal.TerminalReporter.write_sep"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*%
sep
builtins.str"builtins.str*Q
titleD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	fullwidthD
Union[builtins.int,None]
builtins.int"builtins.int
None **
markup
builtins.bool"builtins.bool*ä
section)_pytest.terminal.TerminalReporter.section"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*'
title
builtins.str"builtins.str*'
sep
builtins.str"builtins.str *&
kw
builtins.bool"builtins.bool*Ÿ
line&_pytest.terminal.TerminalReporter.line"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*%
msg
builtins.str"builtins.str*&
kw
builtins.bool"builtins.bool*ˇ

_add_stats,_pytest.terminal.TerminalReporter._add_stats"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter**
category
builtins.str"builtins.str*;
items0
typing.Sequence[Any]
Any"typing.Sequence*ì
pytest_internalerror6_pytest.terminal.TerminalReporter.pytest_internalerror"
builtins.bool"builtins.bool*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*Q
excreprD
 _pytest._code.code.ExceptionRepr" _pytest._code.code.ExceptionRepr*£
pytest_warning_recorded9_pytest.terminal.TerminalReporter.pytest_warning_recorded"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*G
warning_message2
warnings.WarningMessage"warnings.WarningMessage*(
nodeid
builtins.str"builtins.str*‚
pytest_plugin_registered:_pytest.terminal.TerminalReporter.pytest_plugin_registered"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*.
plugin"
builtins.object"builtins.object*ë
pytest_deselected3_pytest.terminal.TerminalReporter.pytest_deselected"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*k
items`
#typing.Sequence[_pytest.nodes.Item](
_pytest.nodes.Item"_pytest.nodes.Item"typing.Sequence*´
pytest_runtest_logstart9_pytest.terminal.TerminalReporter.pytest_runtest_logstart"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*(
nodeid
builtins.str"builtins.str*Œ
locationø
9Tuple[builtins.str,Union[builtins.int,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.int,None]
builtins.int"builtins.int
None
builtins.str"builtins.str*¯
pytest_runtest_logreport:_pytest.terminal.TerminalReporter.pytest_runtest_logreport"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*D
report8
_pytest.reports.TestReport"_pytest.reports.TestReport*¿
_is_last_item/_pytest.terminal.TerminalReporter._is_last_item"
builtins.bool"builtins.bool*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter0:property`*‹
pytest_runtest_logfinish:_pytest.terminal.TerminalReporter.pytest_runtest_logfinish"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*(
nodeid
builtins.str"builtins.str*ÿ
!_get_progress_information_messageC_pytest.terminal.TerminalReporter._get_progress_information_message"
builtins.str"builtins.str*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*‘
)_write_progress_information_filling_spaceK_pytest.terminal.TerminalReporter._write_progress_information_filling_space"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*–
_width_of_current_line8_pytest.terminal.TerminalReporter._width_of_current_line"
builtins.int"builtins.int*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter0:property`*§
pytest_collection3_pytest.terminal.TerminalReporter.pytest_collection"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*ˆ
pytest_collectreport6_pytest.terminal.TerminalReporter.pytest_collectreport"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*J
report>
_pytest.reports.CollectReport"_pytest.reports.CollectReport*À
report_collect0_pytest.terminal.TerminalReporter.report_collect"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*+
final
builtins.bool"builtins.bool *Â
pytest_sessionstart5_pytest.terminal.TerminalReporter.pytest_sessionstart"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*9
session,
_pytest.main.Session"_pytest.main.Session0*»
_write_report_lines_from_hooks@_pytest.terminal.TerminalReporter._write_report_lines_from_hooks"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*á
lines˚
Btyping.Sequence[Union[builtins.str,typing.Sequence[builtins.str]]]£
1Union[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Sequence*®
pytest_report_header6_pytest.terminal.TerminalReporter.pytest_report_header"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*:
config.
_pytest.config.Config"_pytest.config.Config*Ì
pytest_collection_finish:_pytest.terminal.TerminalReporter.pytest_collection_finish"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*9
session,
_pytest.main.Session"_pytest.main.Session*ó
_printcollecteditems6_pytest.terminal.TerminalReporter._printcollecteditems"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*k
items`
#typing.Sequence[_pytest.nodes.Item](
_pytest.nodes.Item"_pytest.nodes.Item"typing.Sequence*˚
pytest_sessionfinish6_pytest.terminal.TerminalReporter.pytest_sessionfinish"
Any*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*9
session,
_pytest.main.Session"_pytest.main.Session*í

exitstatusÅ
+Union[builtins.int,_pytest.config.ExitCode]
builtins.int"builtins.int2
_pytest.config.ExitCode"_pytest.config.ExitCode0*¸
pytest_terminal_summary9_pytest.terminal.TerminalReporter.pytest_terminal_summary"R
 typing.Generator[None,None,None]
None
None
None"typing.Generator*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter0*”
pytest_keyboard_interrupt;_pytest.terminal.TerminalReporter.pytest_keyboard_interrupt"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*ú
excinfoé
8_pytest._code.code.ExceptionInfo[builtins.BaseException]0
builtins.BaseException"builtins.BaseException" _pytest._code.code.ExceptionInfo*¶
pytest_unconfigure4_pytest.terminal.TerminalReporter.pytest_unconfigure"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*¥
_report_keyboardinterrupt;_pytest.terminal.TerminalReporter._report_keyboardinterrupt"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*Ä
_locationline/_pytest.terminal.TerminalReporter._locationline"
builtins.str"builtins.str*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*(
nodeid
builtins.str"builtins.str*(
fspath
builtins.str"builtins.str*P
linenoD
Union[builtins.int,None]
builtins.int"builtins.int
None*(
domain
builtins.str"builtins.str*_
_getfailureheadline5_pytest.terminal.TerminalReporter._getfailureheadline*
self*
rep*S
_getcrashline/_pytest.terminal.TerminalReporter._getcrashline*
self*
rep*Ω

getreports,_pytest.terminal.TerminalReporter.getreports"
Any*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*&
name
builtins.str"builtins.str*¢
summary_warnings2_pytest.terminal.TerminalReporter.summary_warnings"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*û
summary_passes0_pytest.terminal.TerminalReporter.summary_passes"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*¬
_get_teardown_reports7_pytest.terminal.TerminalReporter._get_teardown_reports"t
)builtins.list[_pytest.reports.TestReport]8
_pytest.reports.TestReport"_pytest.reports.TestReport"builtins.list*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*(
nodeid
builtins.str"builtins.str*ﬁ
_handle_teardown_sections;_pytest.terminal.TerminalReporter._handle_teardown_sections"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*(
nodeid
builtins.str"builtins.str*Û
print_teardown_sections9_pytest.terminal.TerminalReporter.print_teardown_sections"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*A
rep8
_pytest.reports.TestReport"_pytest.reports.TestReport*¢
summary_failures2_pytest.terminal.TerminalReporter.summary_failures"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*û
summary_errors0_pytest.terminal.TerminalReporter.summary_errors"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*„
_outrep_summary1_pytest.terminal.TerminalReporter._outrep_summary"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*A
rep8
_pytest.reports.BaseReport"_pytest.reports.BaseReport*ú
summary_stats/_pytest.terminal.TerminalReporter.summary_stats"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*¶
short_test_summary4_pytest.terminal.TerminalReporter.short_test_summary"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*∂
_get_main_color1_pytest.terminal.TerminalReporter._get_main_color"ù
/Tuple[builtins.str,builtins.list[builtins.str]]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*˜
_determine_main_color7_pytest.terminal.TerminalReporter._determine_main_color"
builtins.str"builtins.str*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*5
unknown_type_seen
builtins.bool"builtins.bool*†
_set_main_color1_pytest.terminal.TerminalReporter._set_main_color"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*È
build_summary_stats_line:_pytest.terminal.TerminalReporter.build_summary_stats_line"æ
`Tuple[builtins.list[Tuple[builtins.str,builtins.dict[builtins.str,builtins.bool]]],builtins.str]π
Lbuiltins.list[Tuple[builtins.str,builtins.dict[builtins.str,builtins.bool]]]Ÿ
=Tuple[builtins.str,builtins.dict[builtins.str,builtins.bool]]
builtins.str"builtins.strx
)builtins.dict[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool"builtins.dict"builtins.list
builtins.str"builtins.str*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*˚
_get_reports_to_display9_pytest.terminal.TerminalReporter._get_reports_to_display",
builtins.list[Any]
Any"builtins.list*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*%
key
builtins.str"builtins.str*˘
 _build_normal_summary_stats_lineB_pytest.terminal.TerminalReporter._build_normal_summary_stats_line"æ
`Tuple[builtins.list[Tuple[builtins.str,builtins.dict[builtins.str,builtins.bool]]],builtins.str]π
Lbuiltins.list[Tuple[builtins.str,builtins.dict[builtins.str,builtins.bool]]]Ÿ
=Tuple[builtins.str,builtins.dict[builtins.str,builtins.bool]]
builtins.str"builtins.strx
)builtins.dict[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool"builtins.dict"builtins.list
builtins.str"builtins.str*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*Ö
&_build_collect_only_summary_stats_lineH_pytest.terminal.TerminalReporter._build_collect_only_summary_stats_line"æ
`Tuple[builtins.list[Tuple[builtins.str,builtins.dict[builtins.str,builtins.bool]]],builtins.str]π
Lbuiltins.list[Tuple[builtins.str,builtins.dict[builtins.str,builtins.bool]]]Ÿ
=Tuple[builtins.str,builtins.dict[builtins.str,builtins.bool]]
builtins.str"builtins.strx
)builtins.dict[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool"builtins.dict"builtins.list
builtins.str"builtins.str*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter2˚

showfspath,_pytest.terminal.TerminalReporter.showfspathº

showfspath,_pytest.terminal.TerminalReporter.showfspath"
builtins.bool"builtins.bool*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter0:propertyX`ˇ

showfspath,_pytest.terminal.TerminalReporter.showfspath"
None*P
selfF
!_pytest.terminal.TerminalReporter"!_pytest.terminal.TerminalReporter*R
valueG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None0:showfspath.setter8rb
config(_pytest.terminal.TerminalReporter.config.
_pytest.config.Config"_pytest.config.Configr^
_numcollected/_pytest.terminal.TerminalReporter._numcollected
builtins.int"builtins.intrî
_session*_pytest.terminal.TerminalReporter._session\
 Union[_pytest.main.Session,None],
_pytest.main.Session"_pytest.main.Session
NonerÖ
_showfspath-_pytest.terminal.TerminalReporter._showfspathG
Union[builtins.bool,None]
builtins.bool"builtins.bool
Noneræ
stats'_pytest.terminal.TerminalReporter.statsã
.builtins.dict[builtins.str,builtins.list[Any]]
builtins.str"builtins.str,
builtins.list[Any]
Any"builtins.list"builtins.dictrÇ
_main_color-_pytest.terminal.TerminalReporter._main_colorD
Union[builtins.str,None]
builtins.str"builtins.str
Noner¬
_known_types._pytest.terminal.TerminalReporter._known_typesÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NonerV
	startpath+_pytest.terminal.TerminalReporter.startpath
pathlib.Path"pathlib.PathrÑ
_tw%_pytest.terminal.TerminalReporter._twV
)_pytest._io.terminalwriter.TerminalWriter")_pytest._io.terminalwriter.TerminalWriterr^
_screen_width/_pytest.terminal.TerminalReporter._screen_width
builtins.int"builtins.intr›
currentfspath/_pytest.terminal.TerminalReporter.currentfspathö
2Union[None,pathlib.Path,builtins.str,builtins.int]
None
pathlib.Path"pathlib.Path
builtins.str"builtins.str
builtins.int"builtins.intrZ
reportchars-_pytest.terminal.TerminalReporter.reportchars
builtins.str"builtins.strrX
	hasmarkup+_pytest.terminal.TerminalReporter.hasmarkup
builtins.bool"builtins.boolrR
isatty(_pytest.terminal.TerminalReporter.isatty
builtins.bool"builtins.boolr§
_progress_nodeids_reported<_pytest.terminal.TerminalReporter._progress_nodeids_reportedH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setr 
_show_progress_info5_pytest.terminal.TerminalReporter._show_progress_info˚
IUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.bool]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str:
Literal[builtins.bool]	
builtins.bool"builtins.boolr¶
_collect_report_last_write<_pytest.terminal.TerminalReporter._collect_report_last_writeJ
Union[builtins.float,None] 
builtins.float"builtins.float
Noner¢
_already_displayed_warnings=_pytest.terminal.TerminalReporter._already_displayed_warningsD
Union[builtins.int,None]
builtins.int"builtins.int
Noner◊
_keyboardinterrupt_memo9_pytest.terminal.TerminalReporter._keyboardinterrupt_memoÄ
,Union[_pytest._code.code.ExceptionRepr,None]D
 _pytest._code.code.ExceptionRepr" _pytest._code.code.ExceptionRepr
NonerZ

_tests_ran,_pytest.terminal.TerminalReporter._tests_ran
builtins.bool"builtins.boolrj
_sessionstarttime3_pytest.terminal.TerminalReporter._sessionstarttime 
builtins.float"builtins.floatë
pytest_addoption!_pytest.terminal.pytest_addoption"
None*P
parserD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser{
pytest_configure!_pytest.terminal.pytest_configure"
None*:
config.
_pytest.config.Config"_pytest.config.Configá
getreportopt_pytest.terminal.getreportopt"
builtins.str"builtins.str*:
config.
_pytest.config.Config"_pytest.config.Config≠
_get_node_id_with_markup)_pytest.terminal._get_node_id_with_markup"
Any*^
twV
)_pytest._io.terminalwriter.TerminalWriter")_pytest._io.terminalwriter.TerminalWriter*:
config.
_pytest.config.Config"_pytest.config.Config*A
rep8
_pytest.reports.BaseReport"_pytest.reports.BaseReport˝
_format_trimmed _pytest.terminal._format_trimmed"D
Union[builtins.str,None]
builtins.str"builtins.str
None*(
format
builtins.str"builtins.str*%
msg
builtins.str"builtins.str*1
available_width
builtins.int"builtins.intﬁ
 _get_line_with_reprcrash_message1_pytest.terminal._get_line_with_reprcrash_message"
builtins.str"builtins.str*:
config.
_pytest.config.Config"_pytest.config.Config*A
rep8
_pytest.reports.BaseReport"_pytest.reports.BaseReport*^
twV
)_pytest._io.terminalwriter.TerminalWriter")_pytest._io.terminalwriter.TerminalWriter*â
word_markupx
)builtins.dict[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool"builtins.dictƒ
_folded_skips_pytest.terminal._folded_skips"”
Ubuiltins.list[Tuple[builtins.int,builtins.str,Union[builtins.int,None],builtins.str]]Í
FTuple[builtins.int,builtins.str,Union[builtins.int,None],builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strD
Union[builtins.int,None]
builtins.int"builtins.int
None
builtins.str"builtins.str"builtins.list*+
	startpath
pathlib.Path"pathlib.Path*è
skippedÅ
.typing.Sequence[_pytest.reports.CollectReport]>
_pytest.reports.CollectReport"_pytest.reports.CollectReport"typing.Sequence⁄
	pluralize_pytest.terminal.pluralize"`
 Tuple[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*'
count
builtins.int"builtins.int*&
noun
builtins.str"builtins.str¢
_plugin_nameversions%_pytest.terminal._plugin_nameversions"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*

plugininfo
Anyê
format_session_duration(_pytest.terminal.format_session_duration"
builtins.str"builtins.str*-
seconds 
builtins.float"builtins.float°
_get_raw_skip_reason%_pytest.terminal._get_raw_skip_reason"
builtins.str"builtins.str*D
report8
_pytest.reports.TestReport"_pytest.reports.TestReport*å
__annotations__ _pytest.terminal.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
_pytest_pytest *o
REPORT_COLLECTING_RESOLUTION-_pytest.terminal.REPORT_COLLECTING_RESOLUTION 
builtins.float"builtins.float*ê
KNOWN_TYPES_pytest.terminal.KNOWN_TYPES‚
nTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*[
_REPORTCHARS_DEFAULT%_pytest.terminal._REPORTCHARS_DEFAULT
builtins.str"builtins.str*™
_color_for_type _pytest.terminal._color_for_typeu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*a
_color_for_type_default(_pytest.terminal._color_for_type_default
builtins.str"builtins.str