
lzmalzmaö
LZMADecompressorlzma.LZMADecompressor"builtins.object2¨
__init__lzma.LZMADecompressor.__init__"
None*8
self.
lzma.LZMADecompressor"lzma.LZMADecompressor*R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *T
memlimitD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None z35z36z37z38z392˙

decompress lzma.LZMADecompressor.decompress" 
builtins.bytes"builtins.bytes*8
self.
lzma.LZMADecompressor"lzma.LZMADecompressor**
data 
builtins.bytes"builtins.bytes*.

max_length
builtins.int"builtins.int z35z36z37z38z392û
checklzma.LZMADecompressor.check"
builtins.int"builtins.int*8
self.
lzma.LZMADecompressor"lzma.LZMADecompressor0:property`z35z36z37z38z392ú
eoflzma.LZMADecompressor.eof"
builtins.bool"builtins.bool*8
self.
lzma.LZMADecompressor"lzma.LZMADecompressor0:property`z35z36z37z38z392Æ
unused_data!lzma.LZMADecompressor.unused_data" 
builtins.bytes"builtins.bytes*8
self.
lzma.LZMADecompressor"lzma.LZMADecompressor0:property`z35z36z37z38z392¨
needs_input!lzma.LZMADecompressor.needs_input"
builtins.bool"builtins.bool*8
self.
lzma.LZMADecompressor"lzma.LZMADecompressor0:property`z35z36z37z38z39r35r36r37r38r39
LZMACompressorlzma.LZMACompressor"builtins.object2œ
__init__lzma.LZMACompressor.__init__"
None*4
self*
lzma.LZMACompressor"lzma.LZMACompressor*R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *)
check
builtins.int"builtins.int *R
presetD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None z35z36z37z38z392¿
compresslzma.LZMACompressor.compress" 
builtins.bytes"builtins.bytes*4
self*
lzma.LZMACompressor"lzma.LZMACompressor**
__data 
builtins.bytes"builtins.bytesz35z36z37z38z392é
flushlzma.LZMACompressor.flush" 
builtins.bytes"builtins.bytes*4
self*
lzma.LZMACompressor"lzma.LZMACompressorz35z36z37z38z39r35r36r37r38r39[
	LZMAErrorlzma.LZMAError"builtins.Exception*builtins.BaseExceptionr35r36r37r38r39Õ
LZMAFilelzma.LZMAFile"io.BufferedIOBase"	typing.IO*	io.IOBase*typing.Iterator*typing.Iterable2†
__init__lzma.LZMAFile.__init__"
None*(
self
lzma.LZMAFile"lzma.LZMAFile*∂
filename•
wUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes],typing.IO[builtins.bytes],None]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLikeH
typing.IO[builtins.bytes] 
builtins.bytes"builtins.bytes"	typing.IO
None *(
mode
builtins.str"builtins.str *R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *)
check
builtins.int"builtins.int *R
presetD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None z35z36z37z38z392Z
	__enter__lzma.LZMAFile.__enter__"
lzma._T*
self
lzma._Tz35z36z37z38z392d
closelzma.LZMAFile.close"
None*(
self
lzma.LZMAFile"lzma.LZMAFilez35z36z37z38z392ä
closedlzma.LZMAFile.closed"
builtins.bool"builtins.bool*(
self
lzma.LZMAFile"lzma.LZMAFile0:property`z35z36z37z38z392z
filenolzma.LZMAFile.fileno"
builtins.int"builtins.int*(
self
lzma.LZMAFile"lzma.LZMAFilez35z36z37z38z392Ä
seekablelzma.LZMAFile.seekable"
builtins.bool"builtins.bool*(
self
lzma.LZMAFile"lzma.LZMAFilez35z36z37z38z392Ä
readablelzma.LZMAFile.readable"
builtins.bool"builtins.bool*(
self
lzma.LZMAFile"lzma.LZMAFilez35z36z37z38z392Ä
writablelzma.LZMAFile.writable"
builtins.bool"builtins.bool*(
self
lzma.LZMAFile"lzma.LZMAFilez35z36z37z38z392§
peeklzma.LZMAFile.peek" 
builtins.bytes"builtins.bytes*(
self
lzma.LZMAFile"lzma.LZMAFile*(
size
builtins.int"builtins.int z35z36z37z38z392Ã
readlzma.LZMAFile.read" 
builtins.bytes"builtins.bytes*(
self
lzma.LZMAFile"lzma.LZMAFile*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None z35z36z37z38z392¶
read1lzma.LZMAFile.read1" 
builtins.bytes"builtins.bytes*(
self
lzma.LZMAFile"lzma.LZMAFile*(
size
builtins.int"builtins.int z35z36z37z38z392‘
readlinelzma.LZMAFile.readline" 
builtins.bytes"builtins.bytes*(
self
lzma.LZMAFile"lzma.LZMAFile*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None z35z36z37z38z392û
writelzma.LZMAFile.write"
builtins.int"builtins.int*(
self
lzma.LZMAFile"lzma.LZMAFile*£
dataò
bTypeAlias[Union[builtins.bytes,builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap]]ï
WUnion[builtins.bytes,builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap"_typeshed.ReadableBufferz35z36z37z38z392Ã
seeklzma.LZMAFile.seek"
builtins.int"builtins.int*(
self
lzma.LZMAFile"lzma.LZMAFile*(
offset
builtins.int"builtins.int**
whence
builtins.int"builtins.int z35z36z37z38z392v
telllzma.LZMAFile.tell"
builtins.int"builtins.int*(
self
lzma.LZMAFile"lzma.LZMAFilez35z36z37z38z39r35r36r37r38r39"¶
compresslzma.compress" 
builtins.bytes"builtins.bytes**
data 
builtins.bytes"builtins.bytes**
format
builtins.int"builtins.int *)
check
builtins.int"builtins.int *R
presetD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None z35z36z37z38z39"Å

decompresslzma.decompress" 
builtins.bytes"builtins.bytes**
data 
builtins.bytes"builtins.bytes**
format
builtins.int"builtins.int *T
memlimitD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None z35z36z37z38z39"ç
is_check_supportedlzma.is_check_supported"
builtins.bool"builtins.bool**

__check_id
builtins.int"builtins.intz35z36z37z38z39*÷A
open	lzma.openª
open	lzma.open"
lzma.LZMAFile"lzma.LZMAFile*ƒ
filenameµ
èTypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.bytes]]]å
ÑUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.bytes]]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPathH
typing.IO[builtins.bytes] 
builtins.bytes"builtins.bytes"	typing.IO"lzma._PathOrFile*µ
mode®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *D
check7
Literal[builtins.int]	
builtins.int"builtins.int *
preset
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None *
encoding
None *
errors
None *
newline
None 0:overloadX—
open	lzma.open"
lzma.LZMAFile"lzma.LZMAFile*ƒ
filenameµ
èTypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.bytes]]]å
ÑUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.bytes]]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPathH
typing.IO[builtins.bytes] 
builtins.bytes"builtins.bytes"	typing.IO"lzma._PathOrFile*™
modeü
ïTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]Â
äUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"lzma._OpenBinaryWritingMode*R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *)
check
builtins.int"builtins.int *R
presetD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None *
encoding
None *
errors
None *
newline
None 0:overloadX˚	
open	lzma.open"
typing.TextIO"typing.TextIO*≈
filename∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*A
mode7
Literal[builtins.str]	
builtins.str"builtins.str*R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *D
check7
Literal[builtins.int]	
builtins.int"builtins.int *
preset
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
newlineD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX”
open	lzma.open"
typing.TextIO"typing.TextIO*≈
filename∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*˜
modeÏ
STypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"lzma._OpenTextWritingMode*R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *)
check
builtins.int"builtins.int *R
presetD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
newlineD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX»
open	lzma.open"f
"Union[lzma.LZMAFile,typing.TextIO]
lzma.LZMAFile"lzma.LZMAFile
typing.TextIO"typing.TextIO*ƒ
filenameµ
èTypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.bytes]]]å
ÑUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.bytes]]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPathH
typing.IO[builtins.bytes] 
builtins.bytes"builtins.bytes"	typing.IO"lzma._PathOrFile*&
mode
builtins.str"builtins.str*R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *)
check
builtins.int"builtins.int *R
presetD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
newlineD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX"35"36"37"38"39