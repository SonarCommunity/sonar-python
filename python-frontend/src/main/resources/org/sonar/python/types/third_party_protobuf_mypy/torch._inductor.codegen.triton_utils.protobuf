
$torch._inductor.codegen.triton_utilsË
signature_of1torch._inductor.codegen.triton_utils.signature_of"
builtins.str"builtins.str*ÿ
argŒ
çTypeAlias[Union[torch._inductor.codegen.common.WorkspaceArg,torch._inductor.codegen.common.TensorArg,torch._inductor.codegen.common.SizeArg]]ã
ÇUnion[torch._inductor.codegen.common.WorkspaceArg,torch._inductor.codegen.common.TensorArg,torch._inductor.codegen.common.SizeArg]Z
+torch._inductor.codegen.common.WorkspaceArg"+torch._inductor.codegen.common.WorkspaceArgT
(torch._inductor.codegen.common.TensorArg"(torch._inductor.codegen.common.TensorArgP
&torch._inductor.codegen.common.SizeArg"&torch._inductor.codegen.common.SizeArg",torch._inductor.codegen.common.KernelArgType*,

size_dtype
builtins.str"builtins.strñ	
signature_to_meta6torch._inductor.codegen.triton_utils.signature_to_meta"u
(builtins.dict[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"builtins.dict*è
	signatureˇ
úbuiltins.list[TypeAlias[Union[torch._inductor.codegen.common.WorkspaceArg,torch._inductor.codegen.common.TensorArg,torch._inductor.codegen.common.SizeArg]]]Œ
çTypeAlias[Union[torch._inductor.codegen.common.WorkspaceArg,torch._inductor.codegen.common.TensorArg,torch._inductor.codegen.common.SizeArg]]ã
ÇUnion[torch._inductor.codegen.common.WorkspaceArg,torch._inductor.codegen.common.TensorArg,torch._inductor.codegen.common.SizeArg]Z
+torch._inductor.codegen.common.WorkspaceArg"+torch._inductor.codegen.common.WorkspaceArgT
(torch._inductor.codegen.common.TensorArg"(torch._inductor.codegen.common.TensorArgP
&torch._inductor.codegen.common.SizeArg"&torch._inductor.codegen.common.SizeArg",torch._inductor.codegen.common.KernelArgType"builtins.list*,

size_dtype
builtins.str"builtins.str*ë
indicesÅ
'Union[builtins.list[builtins.int],None]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None ∑
is_unaligned_buffer8torch._inductor.codegen.triton_utils.is_unaligned_buffer"
Any*]
argT
(torch._inductor.codegen.common.TensorArg"(torch._inductor.codegen.common.TensorArgÂ
	config_of.torch._inductor.codegen.triton_utils.config_of"
Any*ä
argsˇ
úbuiltins.list[TypeAlias[Union[torch._inductor.codegen.common.WorkspaceArg,torch._inductor.codegen.common.TensorArg,torch._inductor.codegen.common.SizeArg]]]Œ
çTypeAlias[Union[torch._inductor.codegen.common.WorkspaceArg,torch._inductor.codegen.common.TensorArg,torch._inductor.codegen.common.SizeArg]]ã
ÇUnion[torch._inductor.codegen.common.WorkspaceArg,torch._inductor.codegen.common.TensorArg,torch._inductor.codegen.common.SizeArg]Z
+torch._inductor.codegen.common.WorkspaceArg"+torch._inductor.codegen.common.WorkspaceArgT
(torch._inductor.codegen.common.TensorArg"(torch._inductor.codegen.common.TensorArgP
&torch._inductor.codegen.common.SizeArg"&torch._inductor.codegen.common.SizeArg",torch._inductor.codegen.common.KernelArgType"builtins.list*ë
indicesÅ
'Union[builtins.list[builtins.int],None]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None *†
__annotations__4torch._inductor.codegen.triton_utils.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*<
sympy*torch._inductor.codegen.triton_utils.sympy
Any