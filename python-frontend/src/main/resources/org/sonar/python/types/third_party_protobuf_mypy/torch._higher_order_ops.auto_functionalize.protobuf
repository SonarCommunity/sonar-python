
*torch._higher_order_ops.auto_functionalizeü
AutoFunctionalized=torch._higher_order_ops.auto_functionalize.AutoFunctionalized"torch._ops.HigherOrderOperator*\
__init__Ftorch._higher_order_ops.auto_functionalize.AutoFunctionalized.__init__*
self*¨
__call__Ftorch._higher_order_ops.auto_functionalize.AutoFunctionalized.__call__"¢
/Tuple[Any,builtins.tuple[torch._tensor.Tensor]]
Anyd
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*ˆ
self~
=torch._higher_order_ops.auto_functionalize.AutoFunctionalized"=torch._higher_order_ops.auto_functionalize.AutoFunctionalized*?
_mutable_op.
torch._ops.OpOverload"torch._ops.OpOverload*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict·
can_auto_functionalizeAtorch._higher_order_ops.auto_functionalize.can_auto_functionalize"
builtins.bool"builtins.bool*:
op2
torch._ops.OperatorBase"torch._ops.OperatorBaseÝ
get_mutable_arg_names@torch._higher_order_ops.auto_functionalize.get_mutable_arg_names"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
op.
torch._ops.OpOverload"torch._ops.OpOverload¹
do_auto_functionalize@torch._higher_order_ops.auto_functionalize.do_auto_functionalize"
Any*6
op.
torch._ops.OpOverload"torch._ops.OpOverload*8
args.
builtins.tuple[Any]
Any"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*¦
__annotations__:torch._higher_order_ops.auto_functionalize.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
pytreetorch.utils._pytree *Õ
auto_functionalized>torch._higher_order_ops.auto_functionalize.auto_functionalized~
=torch._higher_order_ops.auto_functionalize.AutoFunctionalized"=torch._higher_order_ops.auto_functionalize.AutoFunctionalized