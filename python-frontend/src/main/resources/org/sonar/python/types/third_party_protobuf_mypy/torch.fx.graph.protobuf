
torch.fx.graphπ0
GraphModule!torch.fx.graph_module.GraphModule"torch.nn.modules.module.Module*Í
__new__)torch.fx.graph_module.GraphModule.__new__"
Any*Ç
clsy
'Type[torch.fx.graph_module.GraphModule]F
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule"type*
args
Any*
kwargs
Any*Ô
__init__*torch.fx.graph_module.GraphModule.__init__"
None*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*Ô
root‰
EUnion[torch.nn.modules.module.Module,builtins.dict[builtins.str,Any]]@
torch.nn.modules.module.Module"torch.nn.modules.module.ModuleW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*7
graph,
torch.fx.graph.Graph"torch.fx.graph.Graph*.

class_name
builtins.str"builtins.str 0*ƒ
	to_folder+torch.fx.graph_module.GraphModule.to_folder"
Any*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*|
folderp
$Union[builtins.str,os.PathLike[Any]]
builtins.str"builtins.str(
os.PathLike[Any]
Any"os.PathLike*/
module_name
builtins.str"builtins.str 0*ß
add_submodule/torch.fx.graph_module.GraphModule.add_submodule"
builtins.bool"builtins.bool*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*(
target
builtins.str"builtins.str*G
m@
torch.nn.modules.module.Module"torch.nn.modules.module.Module0*‰
delete_submodule2torch.fx.graph_module.GraphModule.delete_submodule"
builtins.bool"builtins.bool*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*(
target
builtins.str"builtins.str0*º
delete_all_unused_submodules>torch.fx.graph_module.GraphModule.delete_all_unused_submodules"
None*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule0*¨
code&torch.fx.graph_module.GraphModule.code"
builtins.str"builtins.str*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule0:property`*ƒ
	recompile+torch.fx.graph_module.GraphModule.recompile"6
torch.fx.graph.PythonCode"torch.fx.graph.PythonCode*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule0*ı
__reduce_deploy__3torch.fx.graph_module.GraphModule.__reduce_deploy__"
Any*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*P
importerB
torch.package.importer.Importer"torch.package.importer.Importer*ï
__reduce_package__4torch.fx.graph_module.GraphModule.__reduce_package__"
Any*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*n
exporter`
.torch.package.package_exporter.PackageExporter".torch.package.package_exporter.PackageExporter*D

__reduce__,torch.fx.graph_module.GraphModule.__reduce__*
self*L
_deepcopy_init0torch.fx.graph_module.GraphModule._deepcopy_init*
self*R
__deepcopy__.torch.fx.graph_module.GraphModule.__deepcopy__*
self*
memo*@
__copy__*torch.fx.graph_module.GraphModule.__copy__*
self*é
print_readable0torch.fx.graph_module.GraphModule.print_readable*
self*
print_output *
include_stride *
include_device 0*ú
__str__)torch.fx.graph_module.GraphModule.__str__"
builtins.str"builtins.str*HF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*h
_replicate_for_data_parallel>torch.fx.graph_module.GraphModule._replicate_for_data_parallel*
self*v
_set_replace_hook3torch.fx.graph_module.GraphModule._set_replace_hook*
self*
f0:contextlib.contextmanager*k
_register_create_node_hook<torch.fx.graph_module.GraphModule._register_create_node_hook*
self*
f*o
_unregister_create_node_hook>torch.fx.graph_module.GraphModule._unregister_create_node_hook*
self*
f*i
_register_erase_node_hook;torch.fx.graph_module.GraphModule._register_erase_node_hook*
self*
f*m
_unregister_erase_node_hook=torch.fx.graph_module.GraphModule._unregister_erase_node_hook*
self*
f2«
graph'torch.fx.graph_module.GraphModule.graph¿
graph'torch.fx.graph_module.GraphModule.graph",
torch.fx.graph.Graph"torch.fx.graph.Graph*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule0:propertyX`—
graph'torch.fx.graph_module.GraphModule.graph"
None*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*3
g,
torch.fx.graph.Graph"torch.fx.graph.Graph0:graph.setter8r§
__jit_unused_properties__;torch.fx.graph_module.GraphModule.__jit_unused_properties__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrÛ
_tracer_cls-torch.fx.graph_module.GraphModule._tracer_cls¥
1Union[Type[torch.fx._symbolic_trace.Tracer],None]s
%Type[torch.fx._symbolic_trace.Tracer]B
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer"type
Nonerõ
_tracer_extras0torch.fx.graph_module.GraphModule._tracer_extrasW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrá
meta&torch.fx.graph_module.GraphModule.metaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrJ
_replace_hook/torch.fx.graph_module.GraphModule._replace_hook
NonerŸ
_create_node_hooks4torch.fx.graph_module.GraphModule._create_node_hookså
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.listr◊
_erase_node_hooks3torch.fx.graph_module.GraphModule._erase_node_hookså
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.listr;
_graph(torch.fx.graph_module.GraphModule._graph
Anyrt
_in_spec*torch.fx.graph_module.GraphModule._in_spec<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpecrÆ
	_out_spec+torch.fx.graph_module.GraphModule._out_spect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
Noner9
_code'torch.fx.graph_module.GraphModule._code
AnyrE
_lineno_map-torch.fx.graph_module.GraphModule._lineno_map
Any•
_CustomBuiltintorch.fx.graph._CustomBuiltin"builtins.tuple*◊
_replace&torch.fx.graph._CustomBuiltin._replace"i
!torch.fx.graph._CustomBuiltin._NTB
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any*t
_selfi
!torch.fx.graph._CustomBuiltin._NTB
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any*.

import_str
builtins.str"builtins.str *
obj
Any *Ö
__new__%torch.fx.graph._CustomBuiltin.__new__"i
!torch.fx.graph._CustomBuiltin._NTB
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any*ß
_clsú
'Type[torch.fx.graph._CustomBuiltin._NT]i
!torch.fx.graph._CustomBuiltin._NTB
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"type*,

import_str
builtins.str"builtins.str*
obj
Any*ˇ
_asdict%torch.fx.graph._CustomBuiltin._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*t
_selfi
!torch.fx.graph._CustomBuiltin._NTB
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any*∫
_make#torch.fx.graph._CustomBuiltin._make"i
!torch.fx.graph._CustomBuiltin._NTB
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any*ß
_clsú
'Type[torch.fx.graph._CustomBuiltin._NT]i
!torch.fx.graph._CustomBuiltin._NTB
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprT

import_str(torch.fx.graph._CustomBuiltin.import_str
builtins.str"builtins.strr1
obj!torch.fx.graph._CustomBuiltin.obj
AnyrT

import_str(torch.fx.graph._CustomBuiltin.import_str
builtins.str"builtins.strr1
obj!torch.fx.graph._CustomBuiltin.obj
Anyrí
_fields%torch.fx.graph._CustomBuiltin._fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrì
_field_types*torch.fx.graph._CustomBuiltin._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrô
_field_defaults-torch.fx.graph._CustomBuiltin._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrN
_source%torch.fx.graph._CustomBuiltin._source
builtins.str"builtins.strrô
__annotations__-torch.fx.graph._CustomBuiltin.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÖ

_Namespacetorch.fx.graph._Namespace"builtins.object*8
__init__"torch.fx.graph._Namespace.__init__*
self*Ú
create_name%torch.fx.graph._Namespace.create_name"
builtins.str"builtins.str*@
self6
torch.fx.graph._Namespace"torch.fx.graph._Namespace*+
	candidate
builtins.str"builtins.str*/
obj&
Union[Any,None]
Any
None*—
associate_name_with_obj1torch.fx.graph._Namespace.associate_name_with_obj"
Any*@
self6
torch.fx.graph._Namespace"torch.fx.graph._Namespace*&
name
builtins.str"builtins.str*
obj
Any*⁄
_is_illegal_name*torch.fx.graph._Namespace._is_illegal_name"
builtins.bool"builtins.bool*@
self6
torch.fx.graph._Namespace"torch.fx.graph._Namespace*&
name
builtins.str"builtins.str*
obj
Any*ø
_rename_object(torch.fx.graph._Namespace._rename_object"
Any*@
self6
torch.fx.graph._Namespace"torch.fx.graph._Namespace*
obj
Any*&
name
builtins.str"builtins.strrè
_obj_to_name&torch.fx.graph._Namespace._obj_to_nameW
builtins.dict[Any,builtins.str]
Any
builtins.str"builtins.str"builtins.dictrM
_unassociated_names-torch.fx.graph._Namespace._unassociated_names
Anyr~
_used_names%torch.fx.graph._Namespace._used_namesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setr´
_base_count%torch.fx.graph._Namespace._base_countu
(builtins.dict[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.dictrM
_illegal_char_regex-torch.fx.graph._Namespace._illegal_char_regex
AnyrK
_name_suffix_regex,torch.fx.graph._Namespace._name_suffix_regex
Any∂


PythonCodetorch.fx.graph.PythonCode"builtins.object*ñ
__init__"torch.fx.graph.PythonCode.__init__"
None*@
self6
torch.fx.graph.PythonCode"torch.fx.graph.PythonCode*%
src
builtins.str"builtins.str*d
globalsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*å
_lineno_map˙
@Union[builtins.dict[builtins.int,Union[builtins.int,None]],None]©
4builtins.dict[builtins.int,Union[builtins.int,None]]
builtins.int"builtins.intD
Union[builtins.int,None]
builtins.int"builtins.int
None"builtins.dict
None8rB
srctorch.fx.graph.PythonCode.src
builtins.str"builtins.strrÖ
globals!torch.fx.graph.PythonCode.globalsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr±
_lineno_map%torch.fx.graph.PythonCode._lineno_map˙
@Union[builtins.dict[builtins.int,Union[builtins.int,None]],None]©
4builtins.dict[builtins.int,Union[builtins.int,None]]
builtins.int"builtins.intD
Union[builtins.int,None]
builtins.int"builtins.int
None"builtins.dict
Noner‡
__dataclass_fields__.torch.fx.graph.PythonCode.__dataclass_fields__ó
2builtins.dict[builtins.str,dataclasses.Field[Any]]
builtins.str"builtins.str4
dataclasses.Field[Any]
Any"dataclasses.Field"builtins.dict˘
_InsertPointtorch.fx.graph._InsertPoint"builtins.object*U
__init__$torch.fx.graph._InsertPoint.__init__*
self*	
graph*

new_insert*4
	__enter__%torch.fx.graph._InsertPoint.__enter__* *8
__exit__$torch.fx.graph._InsertPoint.__exit__* * * * r3
graph!torch.fx.graph._InsertPoint.graph
Anyr?
orig_insert'torch.fx.graph._InsertPoint.orig_insert
Any·

_node_listtorch.fx.graph._node_list"builtins.object*‚
__init__"torch.fx.graph._node_list.__init__"
None*@
self6
torch.fx.graph._node_list"torch.fx.graph._node_list*7
graph,
torch.fx.graph.Graph"torch.fx.graph.Graph*-
	direction
builtins.str"builtins.str *.
__len__!torch.fx.graph._node_list.__len__* *0
__iter__"torch.fx.graph._node_list.__iter__* *8
__reversed__&torch.fx.graph._node_list.__reversed__* rV
graphtorch.fx.graph._node_list.graph,
torch.fx.graph.Graph"torch.fx.graph.GraphrN
	direction#torch.fx.graph._node_list.direction
builtins.str"builtins.strπ+
_PyTreeInfotorch.fx.graph._PyTreeInfo"builtins.tuple*î	
_replace#torch.fx.graph._PyTreeInfo._replace"ë
torch.fx.graph._PyTreeInfo._NTÏ
hTuple[builtins.list[builtins.str],torch.utils._pytree.TreeSpec,Union[torch.utils._pytree.TreeSpec,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
None*ù
_selfë
torch.fx.graph._PyTreeInfo._NTÏ
hTuple[builtins.list[builtins.str],torch.utils._pytree.TreeSpec,Union[torch.utils._pytree.TreeSpec,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
None*[
	orig_argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *K
in_spec<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec *Ñ
out_spect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
None *º	
__new__"torch.fx.graph._PyTreeInfo.__new__"ë
torch.fx.graph._PyTreeInfo._NTÏ
hTuple[builtins.list[builtins.str],torch.utils._pytree.TreeSpec,Union[torch.utils._pytree.TreeSpec,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
None*Õ
_cls¬
$Type[torch.fx.graph._PyTreeInfo._NT]ë
torch.fx.graph._PyTreeInfo._NTÏ
hTuple[builtins.list[builtins.str],torch.utils._pytree.TreeSpec,Union[torch.utils._pytree.TreeSpec,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
None"type*Y
	orig_argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*I
in_spec<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*Ç
out_spect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
None*¶
_asdict"torch.fx.graph._PyTreeInfo._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*ù
_selfë
torch.fx.graph._PyTreeInfo._NTÏ
hTuple[builtins.list[builtins.str],torch.utils._pytree.TreeSpec,Union[torch.utils._pytree.TreeSpec,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
None*Ü
_make torch.fx.graph._PyTreeInfo._make"ë
torch.fx.graph._PyTreeInfo._NTÏ
hTuple[builtins.list[builtins.str],torch.utils._pytree.TreeSpec,Union[torch.utils._pytree.TreeSpec,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
None*Õ
_cls¬
$Type[torch.fx.graph._PyTreeInfo._NT]ë
torch.fx.graph._PyTreeInfo._NTÏ
hTuple[builtins.list[builtins.str],torch.utils._pytree.TreeSpec,Union[torch.utils._pytree.TreeSpec,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
None"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpr}
	orig_args$torch.fx.graph._PyTreeInfo.orig_argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrk
in_spec"torch.fx.graph._PyTreeInfo.in_spec<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpecr•
out_spec#torch.fx.graph._PyTreeInfo.out_spect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
Noner}
	orig_args$torch.fx.graph._PyTreeInfo.orig_argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrk
in_spec"torch.fx.graph._PyTreeInfo.in_spec<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpecr•
out_spec#torch.fx.graph._PyTreeInfo.out_spect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
Nonerª
_fields"torch.fx.graph._PyTreeInfo._fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrê
_field_types'torch.fx.graph._PyTreeInfo._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrñ
_field_defaults*torch.fx.graph._PyTreeInfo._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrK
_source"torch.fx.graph._PyTreeInfo._source
builtins.str"builtins.strrñ
__annotations__*torch.fx.graph._PyTreeInfo.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÌ
_ParsedStackTrace torch.fx.graph._ParsedStackTrace"builtins.object*M
get_summary_str0torch.fx.graph._ParsedStackTrace.get_summary_str*
self*±
__init__)torch.fx.graph._ParsedStackTrace.__init__"
None*N
selfD
 torch.fx.graph._ParsedStackTrace" torch.fx.graph._ParsedStackTrace*&
file
builtins.str"builtins.str*(
lineno
builtins.str"builtins.str*&
name
builtins.str"builtins.str*&
code
builtins.str"builtins.str8rK
file%torch.fx.graph._ParsedStackTrace.file
builtins.str"builtins.strrO
lineno'torch.fx.graph._ParsedStackTrace.lineno
builtins.str"builtins.strrK
name%torch.fx.graph._ParsedStackTrace.name
builtins.str"builtins.strrK
code%torch.fx.graph._ParsedStackTrace.code
builtins.str"builtins.strrÁ
__dataclass_fields__5torch.fx.graph._ParsedStackTrace.__dataclass_fields__ó
2builtins.dict[builtins.str,dataclasses.Field[Any]]
builtins.str"builtins.str4
dataclasses.Field[Any]
Any"dataclasses.Field"builtins.dict¸
CodeGentorch.fx.graph.CodeGen"builtins.object*5
__init__torch.fx.graph.CodeGen.__init__*
self*ü

gen_fn_def!torch.fx.graph.CodeGen.gen_fn_def"
builtins.str"builtins.str*:
self0
torch.fx.graph.CodeGen"torch.fx.graph.CodeGen*Y
	free_varsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*9
maybe_return_annotation
builtins.str"builtins.str*˚
generate_output&torch.fx.graph.CodeGen.generate_output"
builtins.str"builtins.str*:
self0
torch.fx.graph.CodeGen"torch.fx.graph.CodeGen*Â
output_args”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument*è
process_inputs%torch.fx.graph.CodeGen.process_inputs"
Any*:
self0
torch.fx.graph.CodeGen"torch.fx.graph.CodeGen*
args
Any*î
process_outputs&torch.fx.graph.CodeGen.process_outputs"
Any*:
self0
torch.fx.graph.CodeGen"torch.fx.graph.CodeGen*
outputs
Any*¯
additional_globals)torch.fx.graph.CodeGen.additional_globals"{
&builtins.list[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.list*:
self0
torch.fx.graph.CodeGen"torch.fx.graph.CodeGen*‘
_gen_python_code'torch.fx.graph.CodeGen._gen_python_code"6
torch.fx.graph.PythonCode"torch.fx.graph.PythonCode*:
self0
torch.fx.graph.CodeGen"torch.fx.graph.CodeGen*
nodes
Any*-
root_module
builtins.str"builtins.str*E
	namespace6
torch.fx.graph._Namespace"torch.fx.graph._Namespace*-
verbose
builtins.bool"builtins.bool *4
include_stride
builtins.bool"builtins.bool *4
include_device
builtins.bool"builtins.bool 8r§
_body_transformer(torch.fx.graph.CodeGen._body_transformer‰
6Union[TypeAlias[CallableType[builtins.function]],None]ù
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function" torch.fx.graph.TransformCodeFunc
NonerM

_func_name!torch.fx.graph.CodeGen._func_name
builtins.str"builtins.str√
_PyTreeCodeGentorch.fx.graph._PyTreeCodeGen"torch.fx.graph.CodeGen*ù
__init__&torch.fx.graph._PyTreeCodeGen.__init__"
None*H
self>
torch.fx.graph._PyTreeCodeGen"torch.fx.graph._PyTreeCodeGen*î
pytree_infoÇ
sTypeAlias[Tuple[builtins.list[builtins.str],torch.utils._pytree.TreeSpec,Union[torch.utils._pytree.TreeSpec,None]]]Ï
hTuple[builtins.list[builtins.str],torch.utils._pytree.TreeSpec,Union[torch.utils._pytree.TreeSpec,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
None"torch.fx.graph._PyTreeInfo*¶
process_inputs,torch.fx.graph._PyTreeCodeGen.process_inputs"
Any*H
self>
torch.fx.graph._PyTreeCodeGen"torch.fx.graph._PyTreeCodeGen*
inputs
Any*•
process_outputs-torch.fx.graph._PyTreeCodeGen.process_outputs"
Any*H
self>
torch.fx.graph._PyTreeCodeGen"torch.fx.graph._PyTreeCodeGen*
out
Any*l

gen_fn_def(torch.fx.graph._PyTreeCodeGen.gen_fn_def*
self*
	free_vars*
maybe_return_annotation*[
generate_output-torch.fx.graph._PyTreeCodeGen.generate_output*
self*
output_argsrΩ
pytree_info)torch.fx.graph._PyTreeCodeGen.pytree_infoÇ
sTypeAlias[Tuple[builtins.list[builtins.str],torch.utils._pytree.TreeSpec,Union[torch.utils._pytree.TreeSpec,None]]]Ï
hTuple[builtins.list[builtins.str],torch.utils._pytree.TreeSpec,Union[torch.utils._pytree.TreeSpec,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
None"torch.fx.graph._PyTreeInfoõ
_FindNodesLookupTable$torch.fx.graph._FindNodesLookupTable"builtins.object*C
__init__-torch.fx.graph._FindNodesLookupTable.__init__*
self*¡
_key)torch.fx.graph._FindNodesLookupTable._key"¢
LTuple[builtins.str,Union[CallableType[builtins.function],builtins.str,None]]
builtins.str"builtins.str±
8Union[CallableType[builtins.function],builtins.str,None]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str
None*V
selfL
$torch.fx.graph._FindNodesLookupTable"$torch.fx.graph._FindNodesLookupTable*
node
Any*º
__contains__1torch.fx.graph._FindNodesLookupTable.__contains__"
builtins.bool"builtins.bool*NL
$torch.fx.graph._FindNodesLookupTable"$torch.fx.graph._FindNodesLookupTable*	
Any*À
insert+torch.fx.graph._FindNodesLookupTable.insert"
None*V
selfL
$torch.fx.graph._FindNodesLookupTable"$torch.fx.graph._FindNodesLookupTable*2
node(
torch.fx.node.Node"torch.fx.node.Node*À
remove+torch.fx.graph._FindNodesLookupTable.remove"
None*V
selfL
$torch.fx.graph._FindNodesLookupTable"$torch.fx.graph._FindNodesLookupTable*2
node(
torch.fx.node.Node"torch.fx.node.Node*á

find_nodes/torch.fx.graph._FindNodesLookupTable.find_nodes"
Any*V
selfL
$torch.fx.graph._FindNodesLookupTable"$torch.fx.graph._FindNodesLookupTable*$
op
builtins.str"builtins.str*¿
target±
8Union[CallableType[builtins.function],builtins.str,None]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str
None r‹
table*torch.fx.graph._FindNodesLookupTable.table¶
Çbuiltins.dict[Tuple[builtins.str,Union[CallableType[builtins.function],builtins.str,None]],builtins.dict[torch.fx.node.Node,None]]¢
LTuple[builtins.str,Union[CallableType[builtins.function],builtins.str,None]]
builtins.str"builtins.str±
8Union[CallableType[builtins.function],builtins.str,None]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str
Nonek
&builtins.dict[torch.fx.node.Node,None](
torch.fx.node.Node"torch.fx.node.Node
None"builtins.dict"builtins.dictΩá
Graphtorch.fx.graph.Graph"builtins.object*˛
__init__torch.fx.graph.Graph.__init__"
None*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*ô
owning_moduleÉ
-Union[torch.fx.graph_module.GraphModule,None]F
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule
None *«

tracer_cls¥
1Union[Type[torch.fx._symbolic_trace.Tracer],None]s
%Type[torch.fx._symbolic_trace.Tracer]B
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer"type
None *®
tracer_extrasí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None 0*°
nodestorch.fx.graph.Graph.nodes"6
torch.fx.graph._node_list"torch.fx.graph._node_list*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph0:property`*Ö

find_nodestorch.fx.graph.Graph.find_nodes"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*$
op
builtins.str"builtins.str*¿
target±
8Union[CallableType[builtins.function],builtins.str,None]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str
None **
sort
builtins.bool"builtins.bool 0*∆

graph_copytorch.fx.graph.Graph.graph_copy"⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*3
g,
torch.fx.graph.Graph"torch.fx.graph.Graph*ß
val_mapô
4builtins.dict[torch.fx.node.Node,torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node(
torch.fx.node.Node"torch.fx.node.Node"builtins.dict*!
return_output_node
Any 0*¨
__deepcopy__!torch.fx.graph.Graph.__deepcopy__",
torch.fx.graph.Graph"torch.fx.graph.Graph*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*
memo
Any *⁄.
create_node torch.fx.graph.Graph.create_node"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*$
op
builtins.str"builtins.str*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*Ê
argsŸ
ıUnion[builtins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple
None *ù
kwargsé
ÅUnion[builtins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dict
None *P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *7
	type_expr&
Union[Any,None]
Any
None 0*K
process_inputs#torch.fx.graph.Graph.process_inputs*
self*
args0*L
process_outputs$torch.fx.graph.Graph.process_outputs*
self*
out0*©

erase_nodetorch.fx.graph.Graph.erase_node"
None*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*6
to_erase(
torch.fx.node.Node"torch.fx.node.Node0*›
inserting_before%torch.fx.graph.Graph.inserting_before"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*_
nV
Union[torch.fx.node.Node,None](
torch.fx.node.Node"torch.fx.node.Node
None 0*€
inserting_after$torch.fx.graph.Graph.inserting_after"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*_
nV
Union[torch.fx.node.Node,None](
torch.fx.node.Node"torch.fx.node.Node
None 0*í
placeholder torch.fx.graph.Graph.placeholder"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*&
name
builtins.str"builtins.str*7
	type_expr&
Union[Any,None]
Any
None *
default_value
Any 0*¯
get_attrtorch.fx.graph.Graph.get_attr"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*0
qualified_name
builtins.str"builtins.str*7
	type_expr&
Union[Any,None]
Any
None 0*Ñ,
call_module torch.fx.graph.Graph.call_module"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*-
module_name
builtins.str"builtins.str*Ê
argsŸ
ıUnion[builtins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple
None *ù
kwargsé
ÅUnion[builtins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dict
None *7
	type_expr&
Union[Any,None]
Any
None 0*Ñ,
call_method torch.fx.graph.Graph.call_method"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*-
method_name
builtins.str"builtins.str*Ê
argsŸ
ıUnion[builtins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple
None *ù
kwargsé
ÅUnion[builtins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dict
None *7
	type_expr&
Union[Any,None]
Any
None 0*∏,
call_function"torch.fx.graph.Graph.call_function"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*]
the_functionK
CallableType[builtins.function]&
builtins.function"builtins.function*Ê
argsŸ
ıUnion[builtins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple
None *ù
kwargsé
ÅUnion[builtins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dict
None *7
	type_expr&
Union[Any,None]
Any
None 0*•
	node_copytorch.fx.graph.Graph.node_copy"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*2
node(
torch.fx.node.Node"torch.fx.node.Node*`
arg_transformK
CallableType[builtins.function]&
builtins.function"builtins.function 0*Ñ
outputtorch.fx.graph.Graph.output"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*‡
result”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument*7
	type_expr&
Union[Any,None]
Any
None 0*ò
_target_to_str#torch.fx.graph.Graph._target_to_str"
builtins.str"builtins.str*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*Î
python_code torch.fx.graph.Graph.python_code"6
torch.fx.graph.PythonCode"torch.fx.graph.PythonCode*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*-
root_module
builtins.str"builtins.str*-
verbose
builtins.bool"builtins.bool *4
include_stride
builtins.bool"builtins.bool *4
include_device
builtins.bool"builtins.bool 0*≤
_python_code!torch.fx.graph.Graph._python_code"6
torch.fx.graph.PythonCode"torch.fx.graph.PythonCode*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*-
root_module
builtins.str"builtins.str*E
	namespace6
torch.fx.graph._Namespace"torch.fx.graph._Namespace*-
verbose
builtins.bool"builtins.bool *4
include_stride
builtins.bool"builtins.bool *4
include_device
builtins.bool"builtins.bool *u
__str__torch.fx.graph.Graph.__str__"
builtins.str"builtins.str*.,
torch.fx.graph.Graph"torch.fx.graph.Graph*?
print_tabular"torch.fx.graph.Graph.print_tabular*
self0*-
linttorch.fx.graph.Graph.lint*
self0*K
eliminate_dead_code(torch.fx.graph.Graph.eliminate_dead_code*
self0*±
set_codegen torch.fx.graph.Graph.set_codegen"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*=
codegen0
torch.fx.graph.CodeGen"torch.fx.graph.CodeGen0*ﬂ
on_generate_code%torch.fx.graph.Graph.on_generate_code"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*a
make_transformerK
CallableType[builtins.function]&
builtins.function"builtins.function02°
owning_module"torch.fx.graph.Graph.owning_moduleM
owning_module"torch.fx.graph.Graph.owning_module*
self0:propertyX`ú
owning_module"torch.fx.graph.Graph.owning_module"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*ç
modÉ
-Union[torch.fx.graph_module.GraphModule,None]F
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule
None0:owning_module.setter8rM
_roottorch.fx.graph.Graph._root(
torch.fx.node.Node"torch.fx.node.Noder¶
_used_names torch.fx.graph.Graph._used_namesu
(builtins.dict[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.dictr0
_inserttorch.fx.graph.Graph._insert
Anyr?
_lentorch.fx.graph.Graph._len
builtins.int"builtins.intrq
_graph_namespace%torch.fx.graph.Graph._graph_namespace6
torch.fx.graph._Namespace"torch.fx.graph._Namespacerª
_owning_module#torch.fx.graph.Graph._owning_moduleÉ
-Union[torch.fx.graph_module.GraphModule,None]F
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule
NonerÊ
_tracer_cls torch.fx.graph.Graph._tracer_cls¥
1Union[Type[torch.fx._symbolic_trace.Tracer],None]s
%Type[torch.fx._symbolic_trace.Tracer]B
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer"type
Noner 
_tracer_extras#torch.fx.graph.Graph._tracer_extrasí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
Noner[
_codegentorch.fx.graph.Graph._codegen0
torch.fx.graph.CodeGen"torch.fx.graph.CodeGenrÜ

_co_fieldstorch.fx.graph.Graph._co_fieldsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictró
_find_nodes_lookup_table-torch.fx.graph.Graph._find_nodes_lookup_tableL
$torch.fx.graph._FindNodesLookupTable"$torch.fx.graph._FindNodesLookupTable¥
_register_custom_builtin'torch.fx.graph._register_custom_builtin"
Any*&
name
builtins.str"builtins.str*,

import_str
builtins.str"builtins.str*
obj
Anyj
	_is_magictorch.fx.graph._is_magic"
builtins.bool"builtins.bool*#
x
builtins.str"builtins.strl
_snake_casetorch.fx.graph._snake_case"
builtins.str"builtins.str*#
s
builtins.str"builtins.stra
_is_from_torchtorch.fx.graph._is_from_torch"
builtins.bool"builtins.bool*
obj
Anyü
_format_targettorch.fx.graph._format_target"
builtins.str"builtins.str*&
base
builtins.str"builtins.str*(
target
builtins.str"builtins.stro
_parse_stack_trace!torch.fx.graph._parse_stack_trace"
Any*-
stack_trace
builtins.str"builtins.str*ä
__annotations__torch.fx.graph.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
pytreetorch.utils._pytree *
	fx_pytreetorch.fx._pytree *m
__all__torch.fx.graph.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*∞
_origin_type_maptorch.fx.graph._origin_type_map{
*builtins.dict[abc.ABCMeta,builtins.object]
abc.ABCMeta"abc.ABCMeta"
builtins.object"builtins.object"builtins.dict*Ø
_custom_builtinstorch.fx.graph._custom_builtins˘
>builtins.dict[builtins.str,TypeAlias[Tuple[builtins.str,Any]]]
builtins.str"builtins.strâ
"TypeAlias[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"torch.fx.graph._CustomBuiltin"builtins.dict*¶
dtype_abbrstorch.fx.graph.dtype_abbrs{
*builtins.dict[torch._C.dtype,builtins.str] 
torch._C.dtype"torch._C.dtype
builtins.str"builtins.str"builtins.dict*º
reflectable_magic_methods(torch.fx.graph.reflectable_magic_methodsu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*§
magic_methodstorch.fx.graph.magic_methodsu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*®
inplace_methodstorch.fx.graph.inplace_methodsu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict