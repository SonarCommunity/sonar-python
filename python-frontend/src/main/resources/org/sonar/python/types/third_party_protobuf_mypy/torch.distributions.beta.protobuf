
torch.distributions.betaö
Betatorch.distributions.beta.Beta"0torch.distributions.exp_family.ExponentialFamily*y
__init__&torch.distributions.beta.Beta.__init__*
self*
concentration1*
concentration0*
validate_args *Z
expand$torch.distributions.beta.Beta.expand*
self*
batch_shape*
	_instance *B
mean"torch.distributions.beta.Beta.mean*
self0:property`*B
mode"torch.distributions.beta.Beta.mode*
self0:property`*J
variance&torch.distributions.beta.Beta.variance*
self0:property`*N
rsample%torch.distributions.beta.Beta.rsample*
self*
sample_shape *G
log_prob&torch.distributions.beta.Beta.log_prob*
self*	
value*:
entropy%torch.distributions.beta.Beta.entropy*
self*V
concentration1,torch.distributions.beta.Beta.concentration1*
self0:property`*V
concentration0,torch.distributions.beta.Beta.concentration0*
self0:property`*X
_natural_params-torch.distributions.beta.Beta._natural_params*
self0:property`*X
_log_normalizer-torch.distributions.beta.Beta._log_normalizer*
self*
x*
yr’
arg_constraints-torch.distributions.beta.Beta.arg_constraintsÏ
Fbuiltins.dict[builtins.str,torch.distributions.constraints.Constraint]
builtins.str"builtins.strX
*torch.distributions.constraints.Constraint"*torch.distributions.constraints.Constraint"builtins.dictrˆ
support%torch.distributions.beta.Beta.supportV
)torch.distributions.constraints._Interval")torch.distributions.constraints._IntervalrX
has_rsample)torch.distributions.beta.Beta.has_rsample
builtins.bool"builtins.boolr?

_dirichlet(torch.distributions.beta.Beta._dirichlet
Any*”
__annotations__(torch.distributions.beta.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*w
__all__ torch.distributions.beta.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list