
macpathmacpath"M
basenamemacpath.basename"
typing.AnyStr*
s
typing.AnyStrz27"K
dirnamemacpath.dirname"
typing.AnyStr*
s
typing.AnyStrz27"P
normcasemacpath.normcase"
typing.AnyStr*
path
typing.AnyStrz27"M
normpathmacpath.normpath"
typing.AnyStr*
s
typing.AnyStrz27"P
realpathmacpath.realpath"
typing.AnyStr*
path
typing.AnyStrz27"i
islinkmacpath.islink"
builtins.bool"builtins.bool*+
s$
builtins.unicode"builtins.unicodez27"ç
islinkmacpath.islink"
builtins.bool"builtins.bool*æ
s∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPathz35z36z37z38z39"Ç
splitmacpath.split"L
"Tuple[typing.AnyStr,typing.AnyStr]
typing.AnyStr
typing.AnyStr*
s
typing.AnyStrz27*¢
joinmacpath.joinã
joinmacpath.join"
builtins.str"builtins.str*$
__p1
builtins.str"builtins.str*#
p
builtins.str"builtins.str0:overloadXï
joinmacpath.join"$
builtins.unicode"builtins.unicode*$
__p1
builtins.str"builtins.str*$
__p2
builtins.str"builtins.str*$
__p3
builtins.str"builtins.str*,
__p4$
builtins.unicode"builtins.unicode*+
p$
builtins.unicode"builtins.unicode0:overloadXÔ
joinmacpath.join"$
builtins.unicode"builtins.unicode*$
__p1
builtins.str"builtins.str*$
__p2
builtins.str"builtins.str*,
__p3$
builtins.unicode"builtins.unicode*+
p$
builtins.unicode"builtins.unicode0:overloadX…
joinmacpath.join"$
builtins.unicode"builtins.unicode*$
__p1
builtins.str"builtins.str*,
__p2$
builtins.unicode"builtins.unicode*+
p$
builtins.unicode"builtins.unicode0:overloadX£
joinmacpath.join"$
builtins.unicode"builtins.unicode*,
__p1$
builtins.unicode"builtins.unicode*+
p$
builtins.unicode"builtins.unicode0:overloadX"27*≤	
joinmacpath.join¨
joinmacpath.join"
builtins.str"builtins.str*Ò
sÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*ı
pathsÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath0:overloadXÿ
joinmacpath.join" 
builtins.bytes"builtins.bytes*Ö
s˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath*â
paths˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath0:overloadX"35"36"37"38"39*é
basenamemacpath.basenameÇ
basenamemacpath.basename"
typing.AnyStr*C
s<
os.PathLike[typing.AnyStr]
typing.AnyStr"os.PathLike0:overloadXW
basenamemacpath.basename"
typing.AnyStr*
s
typing.AnyStr0:overloadX"35"36"37"38"39*à
dirnamemacpath.dirnameÄ
dirnamemacpath.dirname"
typing.AnyStr*C
s<
os.PathLike[typing.AnyStr]
typing.AnyStr"os.PathLike0:overloadXU
dirnamemacpath.dirname"
typing.AnyStr*
s
typing.AnyStr0:overloadX"35"36"37"38"39*î
normcasemacpath.normcaseÖ
normcasemacpath.normcase"
typing.AnyStr*F
path<
os.PathLike[typing.AnyStr]
typing.AnyStr"os.PathLike0:overloadXZ
normcasemacpath.normcase"
typing.AnyStr*
path
typing.AnyStr0:overloadX"35"36"37"38"39*é
normpathmacpath.normpathÇ
normpathmacpath.normpath"
typing.AnyStr*C
s<
os.PathLike[typing.AnyStr]
typing.AnyStr"os.PathLike0:overloadXW
normpathmacpath.normpath"
typing.AnyStr*
s
typing.AnyStr0:overloadX"35"36"37"38"39*î
realpathmacpath.realpathÖ
realpathmacpath.realpath"
typing.AnyStr*F
path<
os.PathLike[typing.AnyStr]
typing.AnyStr"os.PathLike0:overloadXZ
realpathmacpath.realpath"
typing.AnyStr*
path
typing.AnyStr0:overloadX"35"36"37"38"39*Û
splitmacpath.split∑
splitmacpath.split"L
"Tuple[typing.AnyStr,typing.AnyStr]
typing.AnyStr
typing.AnyStr*C
s<
os.PathLike[typing.AnyStr]
typing.AnyStr"os.PathLike0:overloadXå
splitmacpath.split"L
"Tuple[typing.AnyStr,typing.AnyStr]
typing.AnyStr
typing.AnyStr*
s
typing.AnyStr0:overloadX"35"36"37"38"39