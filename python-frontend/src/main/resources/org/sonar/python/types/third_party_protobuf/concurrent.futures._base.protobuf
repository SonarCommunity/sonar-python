
concurrent.futures._base?
Errorconcurrent.futures._base.Error"builtins.Exceptionj27]
CancelledError'concurrent.futures._base.CancelledError"concurrent.futures._base.Errorj27Y
TimeoutError%concurrent.futures._base.TimeoutError"concurrent.futures._base.Errorj27Í
_Collection$concurrent.futures._base._Collection"typing.Iterable"typing.Container*â
__len__,concurrent.futures._base._Collection.__len__"
builtins.int"builtins.int*ô
selfê
Dconcurrent.futures._base._Collection[concurrent.futures._base._T_co]"
concurrent.futures._base._T_co"$concurrent.futures._base._Collection0:abstractmethod@z27PXj27ç
Futureconcurrent.futures._base.Future"builtins.object*–
__init__(concurrent.futures._base.Future.__init__"
None*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Futurez27*‚
cancel&concurrent.futures._base.Future.cancel"
builtins.bool"builtins.bool*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Futurez27*Ë
	cancelled)concurrent.futures._base.Future.cancelled"
builtins.bool"builtins.bool*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Futurez27*‰
running'concurrent.futures._base.Future.running"
builtins.bool"builtins.bool*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Futurez27*ﬁ
done$concurrent.futures._base.Future.done"
builtins.bool"builtins.bool*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Futurez27*∑
add_done_callback1concurrent.futures._base.Future.add_done_callback"
None*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*S
fnK
CallableType[builtins.function]&
builtins.function"builtins.functionz27*æ
result&concurrent.futures._base.Future.result"
concurrent.futures._base._T*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None z27*é
set_running_or_notify_cancel<concurrent.futures._base.Future.set_running_or_notify_cancel"
builtins.bool"builtins.bool*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Futurez27*Å

set_result*concurrent.futures._base.Future.set_result"
None*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*+
result
concurrent.futures._base._Tz27*¨
	exception)concurrent.futures._base.Future.exception"
Any*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None z27*¬
exception_info.concurrent.futures._base.Future.exception_info"í
*Tuple[Any,Union[types.TracebackType,None]]
AnyY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None z27*Ú
set_exception-concurrent.futures._base.Future.set_exception"
None*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*
	exception
Anyz27*Ê
set_exception_info2concurrent.futures._base.Future.set_exception_info"
None*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*
	exception
Any*h
	tracebackY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
Nonez27Pj27á
Executor!concurrent.futures._base.Executor"builtins.object*à
submit(concurrent.futures._base.Executor.submit"Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*P
selfF
!concurrent.futures._base.Executor"!concurrent.futures._base.Executor*S
fnK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Anyz27*◊
map%concurrent.futures._base.Executor.map"`
,typing.Iterator[concurrent.futures._base._T]
concurrent.futures._base._T"typing.Iterator*P
selfF
!concurrent.futures._base.Executor"!concurrent.futures._base.Executor*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*?
	iterables0
typing.Iterable[Any]
Any"typing.Iterable*Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None z27*¬
shutdown*concurrent.futures._base.Executor.shutdown"
None*P
selfF
!concurrent.futures._base.Executor"!concurrent.futures._base.Executor**
wait
builtins.bool"builtins.bool z27*Ü
	__enter__+concurrent.futures._base.Executor.__enter__"
concurrent.futures._base._T*'
self
concurrent.futures._base._Tz27*è
__exit__*concurrent.futures._base.Executor.__exit__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*N
selfF
!concurrent.futures._base.Executor"!concurrent.futures._base.Executor*
exc_type
Any*
exc_val
Any*
exc_tb
Anyz27j27à

_Waiter concurrent.futures._base._Waiter"builtins.object*ì
__init__)concurrent.futures._base._Waiter.__init__"
None*N
selfD
 concurrent.futures._base._Waiter" concurrent.futures._base._Waiterz27*ı

add_result+concurrent.futures._base._Waiter.add_result"
None*N
selfD
 concurrent.futures._base._Waiter" concurrent.futures._base._Waiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurez27*˚
add_exception.concurrent.futures._base._Waiter.add_exception"
None*N
selfD
 concurrent.futures._base._Waiter" concurrent.futures._base._Waiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurez27*˚
add_cancelled.concurrent.futures._base._Waiter.add_cancelled"
None*N
selfD
 concurrent.futures._base._Waiter" concurrent.futures._base._Waiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurez27j27rW
event&concurrent.futures._base._Waiter.event"
threading.Event"threading.Event*27r‚
finished_futures1concurrent.futures._base._Waiter.finished_futuresñ
3builtins.list[concurrent.futures._base.Future[Any]]P
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future"builtins.list*27’	
_AsCompletedWaiter+concurrent.futures._base._AsCompletedWaiter" concurrent.futures._base._Waiter*¥
__init__4concurrent.futures._base._AsCompletedWaiter.__init__"
None*d
selfZ
+concurrent.futures._base._AsCompletedWaiter"+concurrent.futures._base._AsCompletedWaiterz27*ñ

add_result6concurrent.futures._base._AsCompletedWaiter.add_result"
None*d
selfZ
+concurrent.futures._base._AsCompletedWaiter"+concurrent.futures._base._AsCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurez27*ú
add_exception9concurrent.futures._base._AsCompletedWaiter.add_exception"
None*d
selfZ
+concurrent.futures._base._AsCompletedWaiter"+concurrent.futures._base._AsCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurez27*ú
add_cancelled9concurrent.futures._base._AsCompletedWaiter.add_cancelled"
None*d
selfZ
+concurrent.futures._base._AsCompletedWaiter"+concurrent.futures._base._AsCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurez27j27r^
lock0concurrent.futures._base._AsCompletedWaiter.lock 
threading.Lock"threading.Lock*27ﬂ
_FirstCompletedWaiter.concurrent.futures._base._FirstCompletedWaiter" concurrent.futures._base._Waiter*ü

add_result9concurrent.futures._base._FirstCompletedWaiter.add_result"
None*j
self`
.concurrent.futures._base._FirstCompletedWaiter".concurrent.futures._base._FirstCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurez27*•
add_exception<concurrent.futures._base._FirstCompletedWaiter.add_exception"
None*j
self`
.concurrent.futures._base._FirstCompletedWaiter".concurrent.futures._base._FirstCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurez27*•
add_cancelled<concurrent.futures._base._FirstCompletedWaiter.add_cancelled"
None*j
self`
.concurrent.futures._base._FirstCompletedWaiter".concurrent.futures._base._FirstCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurez27j27¿
_AllCompletedWaiter,concurrent.futures._base._AllCompletedWaiter" concurrent.futures._base._Waiter*£
__init__5concurrent.futures._base._AllCompletedWaiter.__init__"
None*f
self\
,concurrent.futures._base._AllCompletedWaiter",concurrent.futures._base._AllCompletedWaiter*3
num_pending_calls
builtins.int"builtins.int*5
stop_on_exception
builtins.bool"builtins.boolz27*ô

add_result7concurrent.futures._base._AllCompletedWaiter.add_result"
None*f
self\
,concurrent.futures._base._AllCompletedWaiter",concurrent.futures._base._AllCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurez27*ü
add_exception:concurrent.futures._base._AllCompletedWaiter.add_exception"
None*f
self\
,concurrent.futures._base._AllCompletedWaiter",concurrent.futures._base._AllCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurez27*ü
add_cancelled:concurrent.futures._base._AllCompletedWaiter.add_cancelled"
None*f
self\
,concurrent.futures._base._AllCompletedWaiter",concurrent.futures._base._AllCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurez27j27ru
num_pending_calls>concurrent.futures._base._AllCompletedWaiter.num_pending_calls
builtins.int"builtins.int*27rw
stop_on_exception>concurrent.futures._base._AllCompletedWaiter.stop_on_exception
builtins.bool"builtins.bool*27r_
lock1concurrent.futures._base._AllCompletedWaiter.lock 
threading.Lock"threading.Lock*27ı
_AcquireFutures(concurrent.futures._base._AcquireFutures"builtins.object*÷
__init__1concurrent.futures._base._AcquireFutures.__init__"
None*^
selfT
(concurrent.futures._base._AcquireFutures"(concurrent.futures._base._AcquireFutures*®
futuresö
5typing.Iterable[concurrent.futures._base.Future[Any]]P
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future"typing.Iterablez27*´
	__enter__2concurrent.futures._base._AcquireFutures.__enter__"
None*\
selfT
(concurrent.futures._base._AcquireFutures"(concurrent.futures._base._AcquireFuturesz27*º
__exit__1concurrent.futures._base._AcquireFutures.__exit__"
None*\
selfT
(concurrent.futures._base._AcquireFutures"(concurrent.futures._base._AcquireFutures*
args
Anyz27j27r‹
futures0concurrent.futures._base._AcquireFutures.futuresö
5typing.Iterable[concurrent.futures._base.Future[Any]]P
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future"typing.Iterable*27È
as_completed%concurrent.futures._base.as_completed"„
Mtyping.Iterator[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"typing.Iterator*Ï
fs„
Mtyping.Iterable[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"typing.Iterable*Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None z27≤
waitconcurrent.futures._base.wait"·
úTuple[builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]],builtins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]]›
Jbuiltins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"builtins.set›
Jbuiltins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"builtins.set*ñ
fsç
bconcurrent.futures._base._Collection[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"$concurrent.futures._base._Collection*Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None */
return_when
builtins.str"builtins.str z27*]
FIRST_COMPLETED(concurrent.futures._base.FIRST_COMPLETED
builtins.str"builtins.str*27*]
FIRST_EXCEPTION(concurrent.futures._base.FIRST_EXCEPTION
builtins.str"builtins.str*27*Y
ALL_COMPLETED&concurrent.futures._base.ALL_COMPLETED
builtins.str"builtins.str*27*M
PENDING concurrent.futures._base.PENDING
builtins.str"builtins.str*27*M
RUNNING concurrent.futures._base.RUNNING
builtins.str"builtins.str*27*Q
	CANCELLED"concurrent.futures._base.CANCELLED
builtins.str"builtins.str*27*k
CANCELLED_AND_NOTIFIED/concurrent.futures._base.CANCELLED_AND_NOTIFIED
builtins.str"builtins.str*27*O
FINISHED!concurrent.futures._base.FINISHED
builtins.str"builtins.str*27*O
LOGGERconcurrent.futures._base.LOGGER 
logging.Logger"logging.Logger*27