
concurrent.futures._base;
Errorconcurrent.futures._base.Error"builtins.ExceptionY
CancelledError'concurrent.futures._base.CancelledError"concurrent.futures._base.ErrorU
TimeoutError%concurrent.futures._base.TimeoutError"concurrent.futures._base.Error_
InvalidStateError*concurrent.futures._base.InvalidStateError"concurrent.futures._base.ErrorP
BrokenExecutor'concurrent.futures._base.BrokenExecutor"builtins.RuntimeError‚
_Collection$concurrent.futures._base._Collection"typing.Iterable"typing.Container*Ö
__len__,concurrent.futures._base._Collection.__len__"
builtins.int"builtins.int*ô
selfê
Dconcurrent.futures._base._Collection[concurrent.futures._base._T_co]"
concurrent.futures._base._T_co"$concurrent.futures._base._Collection0:abstractmethod@PXÂ
Futureconcurrent.futures._base.Future"builtins.object*Ã
__init__(concurrent.futures._base.Future.__init__"
None*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*ﬁ
cancel&concurrent.futures._base.Future.cancel"
builtins.bool"builtins.bool*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*‰
	cancelled)concurrent.futures._base.Future.cancelled"
builtins.bool"builtins.bool*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*‡
running'concurrent.futures._base.Future.running"
builtins.bool"builtins.bool*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*⁄
done$concurrent.futures._base.Future.done"
builtins.bool"builtins.bool*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*≥
add_done_callback1concurrent.futures._base.Future.add_done_callback"
None*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*S
fnK
CallableType[builtins.function]&
builtins.function"builtins.function*∫
result&concurrent.futures._base.Future.result"
concurrent.futures._base._T*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *ä
set_running_or_notify_cancel<concurrent.futures._base.Future.set_running_or_notify_cancel"
builtins.bool"builtins.bool*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*˝

set_result*concurrent.futures._base.Future.set_result"
None*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*+
result
concurrent.futures._base._T*É
	exception)concurrent.futures._base.Future.exception"b
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *…
set_exception-concurrent.futures._base.Future.set_exception"
None*ã
selfÄ
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*q
	exceptionb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
NonePú
Executor!concurrent.futures._base.Executor"builtins.object*Ñ
submit(concurrent.futures._base.Executor.submit"Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future*P
selfF
!concurrent.futures._base.Executor"!concurrent.futures._base.Executor*S
fnK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any*Ä
map%concurrent.futures._base.Executor.map"`
,typing.Iterator[concurrent.futures._base._T]
concurrent.futures._base._T"typing.Iterator*P
selfF
!concurrent.futures._base.Executor"!concurrent.futures._base.Executor*S
fnK
CallableType[builtins.function]&
builtins.function"builtins.function*?
	iterables0
typing.Iterable[Any]
Any"typing.Iterable*Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *-
	chunksize
builtins.int"builtins.int *æ
shutdown*concurrent.futures._base.Executor.shutdown"
None*P
selfF
!concurrent.futures._base.Executor"!concurrent.futures._base.Executor**
wait
builtins.bool"builtins.bool *Ç
	__enter__+concurrent.futures._base.Executor.__enter__"
concurrent.futures._base._T*'
self
concurrent.futures._base._T*ã
__exit__*concurrent.futures._base.Executor.__exit__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*N
selfF
!concurrent.futures._base.Executor"!concurrent.futures._base.Executor*
exc_type
Any*
exc_val
Any*
exc_tb
Anyå
DoneAndNotDoneFutures.concurrent.futures._base.DoneAndNotDoneFutures"typing.Sequence*¿
__new__6concurrent.futures._base.DoneAndNotDoneFutures.__new__"û
Kconcurrent.futures._base.DoneAndNotDoneFutures[concurrent.futures._base._T]
concurrent.futures._base._T".concurrent.futures._base.DoneAndNotDoneFutures*Å
_clsˆ
QType[concurrent.futures._base.DoneAndNotDoneFutures[concurrent.futures._base._T]]û
Kconcurrent.futures._base.DoneAndNotDoneFutures[concurrent.futures._base._T]
concurrent.futures._base._T".concurrent.futures._base.DoneAndNotDoneFutures*Ë
done›
Jbuiltins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"builtins.set*Ï
not_done›
Jbuiltins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"builtins.set*â
__len__6concurrent.futures._base.DoneAndNotDoneFutures.__len__"
builtins.int"builtins.int*ß
selfû
Kconcurrent.futures._base.DoneAndNotDoneFutures[concurrent.futures._base._T]
concurrent.futures._base._T".concurrent.futures._base.DoneAndNotDoneFutures2ú
__getitem__:concurrent.futures._base.DoneAndNotDoneFutures.__getitem__Ñ
__getitem__:concurrent.futures._base.DoneAndNotDoneFutures.__getitem__"›
Jbuiltins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"builtins.set*ß
selfû
Kconcurrent.futures._base.DoneAndNotDoneFutures[concurrent.futures._base._T]
concurrent.futures._base._T".concurrent.futures._base.DoneAndNotDoneFutures*!
i
builtins.int"builtins.int0:overloadX…
__getitem__:concurrent.futures._base.DoneAndNotDoneFutures.__getitem__"û
Kconcurrent.futures._base.DoneAndNotDoneFutures[concurrent.futures._base._T]
concurrent.futures._base._T".concurrent.futures._base.DoneAndNotDoneFutures*ß
selfû
Kconcurrent.futures._base.DoneAndNotDoneFutures[concurrent.futures._base._T]
concurrent.futures._base._T".concurrent.futures._base.DoneAndNotDoneFutures*%
s 
builtins.slice"builtins.slice0:overloadXPrõ
done3concurrent.futures._base.DoneAndNotDoneFutures.done›
Jbuiltins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"builtins.setr£
not_done7concurrent.futures._base.DoneAndNotDoneFutures.not_done›
Jbuiltins.set[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"builtins.setÏ	
_Waiter concurrent.futures._base._Waiter"builtins.object*è
__init__)concurrent.futures._base._Waiter.__init__"
None*N
selfD
 concurrent.futures._base._Waiter" concurrent.futures._base._Waiter*Ò

add_result+concurrent.futures._base._Waiter.add_result"
None*N
selfD
 concurrent.futures._base._Waiter" concurrent.futures._base._Waiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future*˜
add_exception.concurrent.futures._base._Waiter.add_exception"
None*N
selfD
 concurrent.futures._base._Waiter" concurrent.futures._base._Waiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future*˜
add_cancelled.concurrent.futures._base._Waiter.add_cancelled"
None*N
selfD
 concurrent.futures._base._Waiter" concurrent.futures._base._Waiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.FuturerS
event&concurrent.futures._base._Waiter.event"
threading.Event"threading.Eventrﬁ
finished_futures1concurrent.futures._base._Waiter.finished_futuresñ
3builtins.list[concurrent.futures._base.Future[Any]]P
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future"builtins.listΩ	
_AsCompletedWaiter+concurrent.futures._base._AsCompletedWaiter" concurrent.futures._base._Waiter*∞
__init__4concurrent.futures._base._AsCompletedWaiter.__init__"
None*d
selfZ
+concurrent.futures._base._AsCompletedWaiter"+concurrent.futures._base._AsCompletedWaiter*í

add_result6concurrent.futures._base._AsCompletedWaiter.add_result"
None*d
selfZ
+concurrent.futures._base._AsCompletedWaiter"+concurrent.futures._base._AsCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future*ò
add_exception9concurrent.futures._base._AsCompletedWaiter.add_exception"
None*d
selfZ
+concurrent.futures._base._AsCompletedWaiter"+concurrent.futures._base._AsCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future*ò
add_cancelled9concurrent.futures._base._AsCompletedWaiter.add_cancelled"
None*d
selfZ
+concurrent.futures._base._AsCompletedWaiter"+concurrent.futures._base._AsCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.FuturerZ
lock0concurrent.futures._base._AsCompletedWaiter.lock 
threading.Lock"threading.Lockœ
_FirstCompletedWaiter.concurrent.futures._base._FirstCompletedWaiter" concurrent.futures._base._Waiter*õ

add_result9concurrent.futures._base._FirstCompletedWaiter.add_result"
None*j
self`
.concurrent.futures._base._FirstCompletedWaiter".concurrent.futures._base._FirstCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future*°
add_exception<concurrent.futures._base._FirstCompletedWaiter.add_exception"
None*j
self`
.concurrent.futures._base._FirstCompletedWaiter".concurrent.futures._base._FirstCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future*°
add_cancelled<concurrent.futures._base._FirstCompletedWaiter.add_cancelled"
None*j
self`
.concurrent.futures._base._FirstCompletedWaiter".concurrent.futures._base._FirstCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future†
_AllCompletedWaiter,concurrent.futures._base._AllCompletedWaiter" concurrent.futures._base._Waiter*ü
__init__5concurrent.futures._base._AllCompletedWaiter.__init__"
None*f
self\
,concurrent.futures._base._AllCompletedWaiter",concurrent.futures._base._AllCompletedWaiter*3
num_pending_calls
builtins.int"builtins.int*5
stop_on_exception
builtins.bool"builtins.bool*ï

add_result7concurrent.futures._base._AllCompletedWaiter.add_result"
None*f
self\
,concurrent.futures._base._AllCompletedWaiter",concurrent.futures._base._AllCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future*õ
add_exception:concurrent.futures._base._AllCompletedWaiter.add_exception"
None*f
self\
,concurrent.futures._base._AllCompletedWaiter",concurrent.futures._base._AllCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future*õ
add_cancelled:concurrent.futures._base._AllCompletedWaiter.add_cancelled"
None*f
self\
,concurrent.futures._base._AllCompletedWaiter",concurrent.futures._base._AllCompletedWaiter*\
futureP
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Futurerq
num_pending_calls>concurrent.futures._base._AllCompletedWaiter.num_pending_calls
builtins.int"builtins.intrs
stop_on_exception>concurrent.futures._base._AllCompletedWaiter.stop_on_exception
builtins.bool"builtins.boolr[
lock1concurrent.futures._base._AllCompletedWaiter.lock 
threading.Lock"threading.Lock·
_AcquireFutures(concurrent.futures._base._AcquireFutures"builtins.object*“
__init__1concurrent.futures._base._AcquireFutures.__init__"
None*^
selfT
(concurrent.futures._base._AcquireFutures"(concurrent.futures._base._AcquireFutures*®
futuresö
5typing.Iterable[concurrent.futures._base.Future[Any]]P
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future"typing.Iterable*ß
	__enter__2concurrent.futures._base._AcquireFutures.__enter__"
None*\
selfT
(concurrent.futures._base._AcquireFutures"(concurrent.futures._base._AcquireFutures*∏
__exit__1concurrent.futures._base._AcquireFutures.__exit__"
None*\
selfT
(concurrent.futures._base._AcquireFutures"(concurrent.futures._base._AcquireFutures*
args
Anyrÿ
futures0concurrent.futures._base._AcquireFutures.futuresö
5typing.Iterable[concurrent.futures._base.Future[Any]]P
$concurrent.futures._base.Future[Any]
Any"concurrent.futures._base.Future"typing.IterableÂ
as_completed%concurrent.futures._base.as_completed"„
Mtyping.Iterator[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"typing.Iterator*Ï
fs„
Mtyping.Iterable[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"typing.Iterable*Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None ¡
waitconcurrent.futures._base.wait"û
Kconcurrent.futures._base.DoneAndNotDoneFutures[concurrent.futures._base._T]
concurrent.futures._base._T".concurrent.futures._base.DoneAndNotDoneFutures*Ï
fs„
Mtyping.Iterable[concurrent.futures._base.Future[concurrent.futures._base._T]]Ä
<concurrent.futures._base.Future[concurrent.futures._base._T]
concurrent.futures._base._T"concurrent.futures._base.Future"typing.Iterable*Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None */
return_when
builtins.str"builtins.str *Y
FIRST_COMPLETED(concurrent.futures._base.FIRST_COMPLETED
builtins.str"builtins.str*Y
FIRST_EXCEPTION(concurrent.futures._base.FIRST_EXCEPTION
builtins.str"builtins.str*U
ALL_COMPLETED&concurrent.futures._base.ALL_COMPLETED
builtins.str"builtins.str*I
PENDING concurrent.futures._base.PENDING
builtins.str"builtins.str*I
RUNNING concurrent.futures._base.RUNNING
builtins.str"builtins.str*M
	CANCELLED"concurrent.futures._base.CANCELLED
builtins.str"builtins.str*g
CANCELLED_AND_NOTIFIED/concurrent.futures._base.CANCELLED_AND_NOTIFIED
builtins.str"builtins.str*K
FINISHED!concurrent.futures._base.FINISHED
builtins.str"builtins.str*K
LOGGERconcurrent.futures._base.LOGGER 
logging.Logger"logging.Logger