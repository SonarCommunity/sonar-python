
0torch.ao.nn.quantized.modules.functional_modulesæ
FloatFunctional@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional"torch.nn.modules.module.Module*_
__init__Itorch.ao.nn.quantized.modules.functional_modules.FloatFunctional.__init__*
self*d
forwardHtorch.ao.nn.quantized.modules.functional_modules.FloatFunctional.forward*
self*
x*ı
addDtorch.ao.nn.quantized.modules.functional_modules.FloatFunctional.add",
torch._tensor.Tensor"torch._tensor.Tensor*è
selfÑ
@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional"@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.Tensor*˜

add_scalarKtorch.ao.nn.quantized.modules.functional_modules.FloatFunctional.add_scalar",
torch._tensor.Tensor"torch._tensor.Tensor*è
selfÑ
@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional"@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*'
y 
builtins.float"builtins.float*ı
mulDtorch.ao.nn.quantized.modules.functional_modules.FloatFunctional.mul",
torch._tensor.Tensor"torch._tensor.Tensor*è
selfÑ
@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional"@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.Tensor*˜

mul_scalarKtorch.ao.nn.quantized.modules.functional_modules.FloatFunctional.mul_scalar",
torch._tensor.Tensor"torch._tensor.Tensor*è
selfÑ
@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional"@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*'
y 
builtins.float"builtins.float*ü
catDtorch.ao.nn.quantized.modules.functional_modules.FloatFunctional.cat",
torch._tensor.Tensor"torch._tensor.Tensor*è
selfÑ
@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional"@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional*i
xb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*'
dim
builtins.int"builtins.int *ˇ
add_reluItorch.ao.nn.quantized.modules.functional_modules.FloatFunctional.add_relu",
torch._tensor.Tensor"torch._tensor.Tensor*è
selfÑ
@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional"@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.Tensor*˚
matmulGtorch.ao.nn.quantized.modules.functional_modules.FloatFunctional.matmul",
torch._tensor.Tensor"torch._tensor.Tensor*è
selfÑ
@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional"@torch.ao.nn.quantized.modules.functional_modules.FloatFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.Tensorr|
activation_post_processXtorch.ao.nn.quantized.modules.functional_modules.FloatFunctional.activation_post_process
Anyè
FXFloatFunctionalBtorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional"torch.nn.modules.module.Module*f
forwardJtorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional.forward*
self*
x*˚
addFtorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional.add",
torch._tensor.Tensor"torch._tensor.Tensor*ì
selfà
Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional"Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.Tensor*˝

add_scalarMtorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional.add_scalar",
torch._tensor.Tensor"torch._tensor.Tensor*ì
selfà
Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional"Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*'
y 
builtins.float"builtins.float*˚
mulFtorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional.mul",
torch._tensor.Tensor"torch._tensor.Tensor*ì
selfà
Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional"Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.Tensor*˝

mul_scalarMtorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional.mul_scalar",
torch._tensor.Tensor"torch._tensor.Tensor*ì
selfà
Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional"Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*'
y 
builtins.float"builtins.float*•
catFtorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional.cat",
torch._tensor.Tensor"torch._tensor.Tensor*ì
selfà
Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional"Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional*i
xb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*'
dim
builtins.int"builtins.int *Ö
add_reluKtorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional.add_relu",
torch._tensor.Tensor"torch._tensor.Tensor*ì
selfà
Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional"Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.Tensor*Å
matmulItorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional.matmul",
torch._tensor.Tensor"torch._tensor.Tensor*ì
selfà
Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional"Btorch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.TensorÌ
QFunctional<torch.ao.nn.quantized.modules.functional_modules.QFunctional"torch.nn.modules.module.Module*[
__init__Etorch.ao.nn.quantized.modules.functional_modules.QFunctional.__init__*
self*ù
_save_to_state_dictPtorch.ao.nn.quantized.modules.functional_modules.QFunctional._save_to_state_dict*
self*
destination*

prefix*
	keep_vars*Ë
_load_from_state_dictRtorch.ao.nn.quantized.modules.functional_modules.QFunctional._load_from_state_dict*
self*

state_dict*

prefix*
local_metadata*

strict*
missing_keys*
unexpected_keys*

error_msgs*]
	_get_nameFtorch.ao.nn.quantized.modules.functional_modules.QFunctional._get_name*
self*_

extra_reprGtorch.ao.nn.quantized.modules.functional_modules.QFunctional.extra_repr*
self*`
forwardDtorch.ao.nn.quantized.modules.functional_modules.QFunctional.forward*
self*
x*Ë
add@torch.ao.nn.quantized.modules.functional_modules.QFunctional.add",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.modules.functional_modules.QFunctional"<torch.ao.nn.quantized.modules.functional_modules.QFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.Tensor*Í

add_scalarGtorch.ao.nn.quantized.modules.functional_modules.QFunctional.add_scalar",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.modules.functional_modules.QFunctional"<torch.ao.nn.quantized.modules.functional_modules.QFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*'
y 
builtins.float"builtins.float*Ë
mul@torch.ao.nn.quantized.modules.functional_modules.QFunctional.mul",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.modules.functional_modules.QFunctional"<torch.ao.nn.quantized.modules.functional_modules.QFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.Tensor*Í

mul_scalarGtorch.ao.nn.quantized.modules.functional_modules.QFunctional.mul_scalar",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.modules.functional_modules.QFunctional"<torch.ao.nn.quantized.modules.functional_modules.QFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*'
y 
builtins.float"builtins.float*í
cat@torch.ao.nn.quantized.modules.functional_modules.QFunctional.cat",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.modules.functional_modules.QFunctional"<torch.ao.nn.quantized.modules.functional_modules.QFunctional*i
xb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*'
dim
builtins.int"builtins.int *Ú
add_reluEtorch.ao.nn.quantized.modules.functional_modules.QFunctional.add_relu",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.modules.functional_modules.QFunctional"<torch.ao.nn.quantized.modules.functional_modules.QFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.Tensor*Ó
matmulCtorch.ao.nn.quantized.modules.functional_modules.QFunctional.matmul",
torch._tensor.Tensor"torch._tensor.Tensor*Ü
self|
<torch.ao.nn.quantized.modules.functional_modules.QFunctional"<torch.ao.nn.quantized.modules.functional_modules.QFunctional*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*3
y,
torch._tensor.Tensor"torch._tensor.Tensor*ö

from_floatGtorch.ao.nn.quantized.modules.functional_modules.QFunctional.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodprT
scaleBtorch.ao.nn.quantized.modules.functional_modules.QFunctional.scale
Anyr^

zero_pointGtorch.ao.nn.quantized.modules.functional_modules.QFunctional.zero_point
Anyrx
activation_post_processTtorch.ao.nn.quantized.modules.functional_modules.QFunctional.activation_post_process
Any*¨
__annotations__@torch.ao.nn.quantized.modules.functional_modules.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*è
__all__8torch.ao.nn.quantized.modules.functional_modules.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list