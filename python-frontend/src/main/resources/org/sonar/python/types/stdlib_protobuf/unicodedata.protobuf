
unicodedata×!
UCDunicodedata.UCD"builtins.object*¯
bidirectionalunicodedata.UCD.bidirectional"
builtins.str"builtins.str*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.strz36z37z38z39z310*¥
categoryunicodedata.UCD.category"
builtins.str"builtins.str*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.strz36z37z38z39z310*§
	combiningunicodedata.UCD.combining"
builtins.int"builtins.int*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.strz36z37z38z39z310*¯
decompositionunicodedata.UCD.decomposition"
builtins.str"builtins.str*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.strz36z37z38z39z310*¹
east_asian_width unicodedata.UCD.east_asian_width"Ÿ
•TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]å
ŠUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"unicodedata._EastAsianWidth*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.strz36z37z38z39z310*ë
lookupunicodedata.UCD.lookup"
builtins.str"builtins.str*,
self"
unicodedata.UCD"unicodedata.UCD*hf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesz36z37z38z39z310*¥
mirroredunicodedata.UCD.mirrored"
builtins.int"builtins.int*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.strz36z37z38z39z310*Ç
	normalizeunicodedata.UCD.normalize"
builtins.str"builtins.str*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.str*
builtins.str"builtins.strz36z37z38z39z310*É
is_normalizedunicodedata.UCD.is_normalized"
builtins.bool"builtins.bool*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.str*
builtins.str"builtins.strz38z39z3102Ç
decimalunicodedata.UCD.decimalœ
decimalunicodedata.UCD.decimal"
builtins.int"builtins.int*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.str0:overloadXî
decimalunicodedata.UCD.decimal"X
"Union[builtins.int,unicodedata._T]
builtins.int"builtins.int
unicodedata._T*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.str*
unicodedata._T0:overloadX"36"37"38"39"3102»
digitunicodedata.UCD.digit˜
digitunicodedata.UCD.digit"
builtins.int"builtins.int*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.str0:overloadXê
digitunicodedata.UCD.digit"X
"Union[builtins.int,unicodedata._T]
builtins.int"builtins.int
unicodedata._T*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.str*
unicodedata._T0:overloadX"36"37"38"39"3102µ
nameunicodedata.UCD.name–
nameunicodedata.UCD.name"
builtins.str"builtins.str*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.str0:overloadXè
nameunicodedata.UCD.name"X
"Union[builtins.str,unicodedata._T]
builtins.str"builtins.str
unicodedata._T*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.str*
unicodedata._T0:overloadX"36"37"38"39"3102Ñ
numericunicodedata.UCD.numeric 
numericunicodedata.UCD.numeric" 
builtins.float"builtins.float*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.str0:overloadXô
numericunicodedata.UCD.numeric"^
$Union[builtins.float,unicodedata._T] 
builtins.float"builtins.float
unicodedata._T*,
self"
unicodedata.UCD"unicodedata.UCD*
builtins.str"builtins.str*
unicodedata._T0:overloadX"36"37"38"39"3108j36j37j38j39j310re
unidata_versionunicodedata.UCD.unidata_version
builtins.str"builtins.str*36*37*38*39*310}
bidirectionalunicodedata.bidirectional"
builtins.str"builtins.str*
builtins.str"builtins.strz36z37z38z39z310s
categoryunicodedata.category"
builtins.str"builtins.str*
builtins.str"builtins.strz36z37z38z39z310u
	combiningunicodedata.combining"
builtins.int"builtins.int*
builtins.str"builtins.strz36z37z38z39z310}
decompositionunicodedata.decomposition"
builtins.str"builtins.str*
builtins.str"builtins.strz36z37z38z39z310‡
east_asian_widthunicodedata.east_asian_width"Ÿ
•TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]å
ŠUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"unicodedata._EastAsianWidth*
builtins.str"builtins.strz36z37z38z39z310¹
lookupunicodedata.lookup"
builtins.str"builtins.str*hf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesz36z37z38z39z310s
mirroredunicodedata.mirrored"
builtins.int"builtins.int*
builtins.str"builtins.strz36z37z38z39z310•
	normalizeunicodedata.normalize"
builtins.str"builtins.str*
builtins.str"builtins.str*
builtins.str"builtins.strz36z37z38z39z310—
is_normalizedunicodedata.is_normalized"
builtins.bool"builtins.bool*
builtins.str"builtins.str*
builtins.str"builtins.strz38z39z310"Þ
decimalunicodedata.decimalj
decimalunicodedata.decimal"
builtins.int"builtins.int*
builtins.str"builtins.str0:overloadX¼
decimalunicodedata.decimal"X
"Union[builtins.int,unicodedata._T]
builtins.int"builtins.int
unicodedata._T*
builtins.str"builtins.str*
unicodedata._T0:overloadX"36"37"38"39"310"Ò
digitunicodedata.digitf
digitunicodedata.digit"
builtins.int"builtins.int*
builtins.str"builtins.str0:overloadX¸
digitunicodedata.digit"X
"Union[builtins.int,unicodedata._T]
builtins.int"builtins.int
unicodedata._T*
builtins.str"builtins.str*
unicodedata._T0:overloadX"36"37"38"39"310"Ì
nameunicodedata.named
nameunicodedata.name"
builtins.str"builtins.str*
builtins.str"builtins.str0:overloadX¶
nameunicodedata.name"X
"Union[builtins.str,unicodedata._T]
builtins.str"builtins.str
unicodedata._T*
builtins.str"builtins.str*
unicodedata._T0:overloadX"36"37"38"39"310"è
numericunicodedata.numericn
numericunicodedata.numeric" 
builtins.float"builtins.float*
builtins.str"builtins.str0:overloadXÂ
numericunicodedata.numeric"^
$Union[builtins.float,unicodedata._T] 
builtins.float"builtins.float
unicodedata._T*
builtins.str"builtins.str*
unicodedata._T0:overloadX"36"37"38"39"310*œ
__annotations__unicodedata.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*[
	ucd_3_2_0unicodedata.ucd_3_2_0"
unicodedata.UCD"unicodedata.UCD*36*37*38*39*310*a
unidata_versionunicodedata.unidata_version
builtins.str"builtins.str*36*37*38*39*310*A
ucnhash_CAPIunicodedata.ucnhash_CAPI
Any*36*37*38*39