
torch.testingˇ
	FileChecktorch._C.FileCheck"builtins.object*ä
runtorch._C.FileCheck.run"
None*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*Æ
checktorch._C.FileCheck.check"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*∂
	check_nottorch._C.FileCheck.check_not"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*∏

check_sametorch._C.FileCheck.check_same"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*∏

check_nexttorch._C.FileCheck.check_next"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*í
check_counttorch._C.FileCheck.check_count"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*'
count
builtins.int"builtins.int*-
exactly
builtins.bool"builtins.bool *∂
	check_dagtorch._C.FileCheck.check_dag"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*‘
check_source_highlighted+torch._C.FileCheck.check_source_highlighted"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.str*∫
check_regextorch._C.FileCheck.check_regex"(
torch._C.FileCheck"torch._C.FileCheck*2
self(
torch._C.FileCheck"torch._C.FileCheck*-
test_string
builtins.str"builtins.strì
assert_close&torch.testing._comparison.assert_close"
Any*
actual
Any*
expected
Any*6
allow_subclasses
builtins.bool"builtins.bool *V
rtolJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *V
atolJ
Union[builtins.float,None] 
builtins.float"builtins.float
None */
	equal_nan
builtins.bool"builtins.bool *2
check_device
builtins.bool"builtins.bool *1
check_dtype
builtins.bool"builtins.bool *2
check_layout
builtins.bool"builtins.bool *2
check_stride
builtins.bool"builtins.bool *Ω
msg±
8Union[builtins.str,CallableType[builtins.function],None]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function
None è
make_tensor#torch.testing._creation.make_tensor",
torch._tensor.Tensor"torch._tensor.Tensor*¬
shape∂
ZUnion[builtins.int,torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
builtins.int"builtins.int
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*+
dtype 
torch._C.dtype"torch._C.dtype*u
devicei
#Union[builtins.str,torch._C.device]
builtins.str"builtins.str"
torch._C.device"torch._C.device*U
lowJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *V
highJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
requires_grad
builtins.bool"builtins.bool *3
noncontiguous
builtins.bool"builtins.bool *2
exclude_zero
builtins.bool"builtins.bool *w
memory_formatb
"Union[torch._C.memory_format,None]0
torch._C.memory_format"torch._C.memory_format
None *n
__path__torch.testing.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*â
__annotations__torch.testing.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict* 
_utilstorch.testing._utils 