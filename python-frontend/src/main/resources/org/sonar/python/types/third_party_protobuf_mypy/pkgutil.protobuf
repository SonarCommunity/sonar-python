
pkgutilá)

ModuleInfopkgutil.ModuleInfo"builtins.tuple*ü
_replacepkgutil.ModuleInfo._replace"ˆ
pkgutil.ModuleInfo._NTë
cTuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]Ã
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder
builtins.str"builtins.str
builtins.bool"builtins.bool*”
_selfˆ
pkgutil.ModuleInfo._NTë
cTuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]Ã
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder
builtins.str"builtins.str
builtins.bool"builtins.bool*Ù
module_finderÃ
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder *(
name
builtins.str"builtins.str *+
ispkg
builtins.bool"builtins.bool *–	
__new__pkgutil.ModuleInfo.__new__"ˆ
pkgutil.ModuleInfo._NTë
cTuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]Ã
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder
builtins.str"builtins.str
builtins.bool"builtins.bool*¶
_cls«
Type[pkgutil.ModuleInfo._NT]ˆ
pkgutil.ModuleInfo._NTë
cTuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]Ã
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder
builtins.str"builtins.str
builtins.bool"builtins.bool*×
module_finderÃ
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder*&
name
builtins.str"builtins.str*)
ispkg
builtins.bool"builtins.bool*•
_asdictpkgutil.ModuleInfo._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*”
_selfˆ
pkgutil.ModuleInfo._NTë
cTuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]Ã
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder
builtins.str"builtins.str
builtins.bool"builtins.bool*Þ
_makepkgutil.ModuleInfo._make"ˆ
pkgutil.ModuleInfo._NTë
cTuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]Ã
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder
builtins.str"builtins.str
builtins.bool"builtins.bool*¶
_cls«
Type[pkgutil.ModuleInfo._NT]ˆ
pkgutil.ModuleInfo._NTë
cTuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]Ã
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder
builtins.str"builtins.str
builtins.bool"builtins.bool*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpr÷
module_finder pkgutil.ModuleInfo.module_finderÃ
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinderr=
namepkgutil.ModuleInfo.name
builtins.str"builtins.strrA
ispkgpkgutil.ModuleInfo.ispkg
builtins.bool"builtins.boolr÷
module_finder pkgutil.ModuleInfo.module_finderÃ
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinderr=
namepkgutil.ModuleInfo.name
builtins.str"builtins.strrA
ispkgpkgutil.ModuleInfo.ispkg
builtins.bool"builtins.boolr³
_fieldspkgutil.ModuleInfo._fields‹
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrˆ
_field_typespkgutil.ModuleInfo._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrŽ
_field_defaults"pkgutil.ModuleInfo._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrC
_sourcepkgutil.ModuleInfo._source
builtins.str"builtins.strrŽ
__annotations__"pkgutil.ModuleInfo.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictð
ImpImporterpkgutil.ImpImporter"builtins.object*º
__init__pkgutil.ImpImporter.__init__"
None*4
self*
pkgutil.ImpImporter"pkgutil.ImpImporter*P
pathD
Union[builtins.str,None]
builtins.str"builtins.str
None Ò
	ImpLoaderpkgutil.ImpLoader"builtins.object* 
__init__pkgutil.ImpLoader.__init__"
None*0
self&
pkgutil.ImpLoader"pkgutil.ImpLoader**
fullname
builtins.str"builtins.str*L
fileB
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO**
filename
builtins.str"builtins.str*•
etc‹
-Tuple[builtins.str,builtins.str,builtins.int]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.int"builtins.int¾
extend_pathpkgutil.extend_path"s
pkgutil._PathTN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable"typing.Iterable*}
paths
pkgutil._PathTN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable"typing.Iterable*&
name
builtins.str"builtins.str¬
find_loaderpkgutil.find_loader"\
 Union[importlib.abc.Loader,None],
importlib.abc.Loader"importlib.abc.Loader
None**
fullname
builtins.str"builtins.strÊ
get_importerpkgutil.get_importer"w
)Union[importlib.abc.PathEntryFinder,None]>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder
None*+
	path_item
builtins.str"builtins.str°

get_loaderpkgutil.get_loader"\
 Union[importlib.abc.Loader,None],
importlib.abc.Loader"importlib.abc.Loader
None*0
module_or_name
builtins.str"builtins.str„
iter_importerspkgutil.iter_importers"«
Rtyping.Iterator[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]]Ã
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder"typing.Iterator*,
fullname
builtins.str"builtins.str ó
iter_modulespkgutil.iter_modules"‰
typing.Iterator[TypeAlias[Tuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]]]ô
nTypeAlias[Tuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]]ë
cTuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]Ã
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder
builtins.str"builtins.str
builtins.bool"builtins.bool"pkgutil.ModuleInfo"typing.Iterator*”
path‡
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None **
prefix
builtins.str"builtins.str —
	read_codepkgutil.read_code"
Any*n
streamb
&_typeshed.SupportsRead[builtins.bytes] 
builtins.bytes"builtins.bytes"_typeshed.SupportsReadŽ
walk_packagespkgutil.walk_packages"‰
typing.Iterator[TypeAlias[Tuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]]]ô
nTypeAlias[Tuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]]ë
cTuple[Union[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder],builtins.str,builtins.bool]Ã
AUnion[importlib.abc.MetaPathFinder,importlib.abc.PathEntryFinder]<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder
builtins.str"builtins.str
builtins.bool"builtins.bool"pkgutil.ModuleInfo"typing.Iterator*”
path‡
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None **
prefix
builtins.str"builtins.str *–
onerror†
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ¿
get_datapkgutil.get_data"J
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None*)
package
builtins.str"builtins.str**
resource
builtins.str"builtins.str*ƒ
__annotations__pkgutil.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*f
__all__pkgutil.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list