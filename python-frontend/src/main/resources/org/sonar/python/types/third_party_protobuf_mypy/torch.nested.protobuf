
torch.nested˜
as_nested_tensortorch.nested.as_nested_tensor",
torch._tensor.Tensor"torch._tensor.Tensor*é
tsà
dUnion[torch._tensor.Tensor,builtins.list[torch._tensor.Tensor],builtins.tuple[torch._tensor.Tensor]],
torch._tensor.Tensor"torch._tensor.Tensorb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.listd
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *[
deviceM
Union[torch._C.device,None]"
torch._C.device"torch._C.device
None *
layout
Any ð
nested_tensortorch.nested.nested_tensor",
torch._tensor.Tensor"torch._tensor.Tensor*
tensor_list
Any*
dtype
Any *
layout
Any *
device
Any *
requires_grad
Any *

pin_memory
Any Ð
narrowtorch.nested.narrow",
torch._tensor.Tensor"torch._tensor.Tensor*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*%
dim
builtins.int"builtins.int*ƒ
startx
(Union[builtins.int,torch._tensor.Tensor]
builtins.int"builtins.int,
torch._tensor.Tensor"torch._tensor.Tensor*„
lengthx
(Union[builtins.int,torch._tensor.Tensor]
builtins.int"builtins.int,
torch._tensor.Tensor"torch._tensor.Tensor*
layout
Any Ý
nested_tensor_from_jagged&torch.nested.nested_tensor_from_jagged",
torch._tensor.Tensor"torch._tensor.Tensor*8
values,
torch._tensor.Tensor"torch._tensor.Tensor*k
offsets\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *k
lengths\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *V

jagged_dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *m
__path__torch.nested.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ˆ
__annotations__torch.nested.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
Ftorch.nn.functional *(
_nestedtorch.nested._nested
Any*k
__all__torch.nested.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*:
to_padded_tensortorch.nested.to_padded_tensor
Any