
_pytest.monkeypatch¡
Notset_pytest.monkeypatch.Notset"builtins.object*â
__repr__#_pytest.monkeypatch.Notset.__repr__"
builtins.str"builtins.str*:8
_pytest.monkeypatch.Notset"_pytest.monkeypatch.NotsetÃ'
MonkeyPatch_pytest.monkeypatch.MonkeyPatch"builtins.object*å
__init__(_pytest.monkeypatch.MonkeyPatch.__init__"
None*L
selfB
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch*˚
context'_pytest.monkeypatch.MonkeyPatch.context"ß
;typing.Generator[_pytest.monkeypatch.MonkeyPatch,None,None]B
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch
None
None"typing.Generator*|
clss
%Type[_pytest.monkeypatch.MonkeyPatch]B
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch"type0:classmethod:contextmanagerp* 
delattr'_pytest.monkeypatch.MonkeyPatch.delattr"
None*L
selfB
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch*u
targeti
#Union[builtins.object,builtins.str]"
builtins.object"builtins.object
builtins.str"builtins.str*ó
nameä
.Union[builtins.str,_pytest.monkeypatch.Notset]
builtins.str"builtins.str8
_pytest.monkeypatch.Notset"_pytest.monkeypatch.Notset *-
raising
builtins.bool"builtins.bool *«
setitem'_pytest.monkeypatch.MonkeyPatch.setitem"
None*L
selfB
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch*Ö
dic˚
Btyping.MutableMapping[_pytest.monkeypatch.K,_pytest.monkeypatch.V]N
_pytest.monkeypatch.K"
builtins.object"builtins.object"builtins.objectN
_pytest.monkeypatch.V"
builtins.object"builtins.object"builtins.object"typing.MutableMapping*X
nameN
_pytest.monkeypatch.K"
builtins.object"builtins.object"builtins.object*Y
valueN
_pytest.monkeypatch.V"
builtins.object"builtins.object"builtins.object*õ
delitem'_pytest.monkeypatch.MonkeyPatch.delitem"
None*L
selfB
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch*Ö
dic˚
Btyping.MutableMapping[_pytest.monkeypatch.K,_pytest.monkeypatch.V]N
_pytest.monkeypatch.K"
builtins.object"builtins.object"builtins.objectN
_pytest.monkeypatch.V"
builtins.object"builtins.object"builtins.object"typing.MutableMapping*X
nameN
_pytest.monkeypatch.K"
builtins.object"builtins.object"builtins.object*-
raising
builtins.bool"builtins.bool *Æ
setenv&_pytest.monkeypatch.MonkeyPatch.setenv"
None*L
selfB
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch*&
name
builtins.str"builtins.str*'
value
builtins.str"builtins.str*S
prependD
Union[builtins.str,None]
builtins.str"builtins.str
None *ﬂ
delenv&_pytest.monkeypatch.MonkeyPatch.delenv"
None*L
selfB
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch*&
name
builtins.str"builtins.str*-
raising
builtins.bool"builtins.bool *≠
syspath_prepend/_pytest.monkeypatch.MonkeyPatch.syspath_prepend"
None*L
selfB
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch*
path
Any*´
chdir%_pytest.monkeypatch.MonkeyPatch.chdir"
None*L
selfB
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch*¢
pathó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike*Ñ
undo$_pytest.monkeypatch.MonkeyPatch.undo"
None*L
selfB
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch2Ï
setattr'_pytest.monkeypatch.MonkeyPatch.setattrÊ
setattr'_pytest.monkeypatch.MonkeyPatch.setattr"
None*L
selfB
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch*(
target
builtins.str"builtins.str*,
name"
builtins.object"builtins.object*E
value8
_pytest.monkeypatch.Notset"_pytest.monkeypatch.Notset *-
raising
builtins.bool"builtins.bool 0:overloadXŒ
setattr'_pytest.monkeypatch.MonkeyPatch.setattr"
None*L
selfB
_pytest.monkeypatch.MonkeyPatch"_pytest.monkeypatch.MonkeyPatch*.
target"
builtins.object"builtins.object*&
name
builtins.str"builtins.str*-
value"
builtins.object"builtins.object*-
raising
builtins.bool"builtins.bool 0:overloadX8r™
_setattr(_pytest.monkeypatch.MonkeyPatch._setattrÛ
Bbuiltins.list[Tuple[builtins.object,builtins.str,builtins.object]]ù
3Tuple[builtins.object,builtins.str,builtins.object]"
builtins.object"builtins.object
builtins.str"builtins.str"
builtins.object"builtins.object"builtins.listr˚
_setitem(_pytest.monkeypatch.MonkeyPatch._setitemƒ
Tbuiltins.list[Tuple[typing.MutableMapping[Any,Any],builtins.object,builtins.object]]‹
ETuple[typing.MutableMapping[Any,Any],builtins.object,builtins.object]I
typing.MutableMapping[Any,Any]
Any
Any"typing.MutableMapping"
builtins.object"builtins.object"
builtins.object"builtins.object"builtins.listrr
_cwd$_pytest.monkeypatch.MonkeyPatch._cwdD
Union[builtins.str,None]
builtins.str"builtins.str
Noner¿
_savesyspath,_pytest.monkeypatch.MonkeyPatch._savesyspathÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
Noner
resolve_pytest.monkeypatch.resolve""
builtins.object"builtins.object*&
name
builtins.str"builtins.str⁄
annotated_getattr%_pytest.monkeypatch.annotated_getattr""
builtins.object"builtins.object*+
obj"
builtins.object"builtins.object*&
name
builtins.str"builtins.str*%
ann
builtins.str"builtins.strÅ
derive_importpath%_pytest.monkeypatch.derive_importpath"i
#Tuple[builtins.str,builtins.object]
builtins.str"builtins.str"
builtins.object"builtins.object*-
import_path
builtins.str"builtins.str*+
raising
builtins.bool"builtins.bool*è
__annotations__#_pytest.monkeypatch.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ü
RE_IMPORT_ERROR_NAME(_pytest.monkeypatch.RE_IMPORT_ERROR_NAMED
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*^
notset_pytest.monkeypatch.notset8
_pytest.monkeypatch.Notset"_pytest.monkeypatch.Notset