

click.core≥
ParameterSourceclick.core.ParameterSource"	enum.EnumHrM
COMMANDLINE&click.core.ParameterSource.COMMANDLINE
	enum.auto"	enum.autorM
ENVIRONMENT&click.core.ParameterSource.ENVIRONMENT
	enum.auto"	enum.autorE
DEFAULT"click.core.ParameterSource.DEFAULT
	enum.auto"	enum.autorM
DEFAULT_MAP&click.core.ParameterSource.DEFAULT_MAP
	enum.auto"	enum.autorC
PROMPT!click.core.ParameterSource.PROMPT
	enum.auto"	enum.auto∞N
Contextclick.core.Context"builtins.object*∞
__init__click.core.Context.__init__"
None*2
self(
click.core.Context"click.core.Context*5
command(
click.core.Command"click.core.Command*d
parentV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *U
	info_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *1
obj&
Union[Any,None]
Any
None *^
auto_envvar_prefixD
Union[builtins.str,None]
builtins.str"builtins.str
None *¶
default_mapí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *Z
terminal_widthD
Union[builtins.int,None]
builtins.int"builtins.int
None *]
max_content_widthD
Union[builtins.int,None]
builtins.int"builtins.int
None *7
resilient_parsing
builtins.bool"builtins.bool *_
allow_extra_argsG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *f
allow_interspersed_argsG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *e
ignore_unknown_optionsG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *õ
help_option_namesÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *£
token_normalize_funcÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *T
colorG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *[
show_defaultG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *º
to_info_dictclick.core.Context.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*2
self(
click.core.Context"click.core.Context*Ö
	__enter__click.core.Context.__enter__"(
click.core.Context"click.core.Context*0
self(
click.core.Context"click.core.Context*V
__exit__click.core.Context.__exit__*
self*
exc_type*
	exc_value*
tb*¯
scopeclick.core.Context.scope"`
#typing.Iterator[click.core.Context](
click.core.Context"click.core.Context"typing.Iterator*2
self(
click.core.Context"click.core.Context*-
cleanup
builtins.bool"builtins.bool 0:contextmanager*∫
metaclick.core.Context.meta"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*2
self(
click.core.Context"click.core.Context0:property`*©
make_formatter!click.core.Context.make_formatter"@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*2
self(
click.core.Context"click.core.Context*‹
with_resource click.core.Context.with_resource"
click.core.V*2
self(
click.core.Context"click.core.Context*c
context_managerN
#typing.ContextManager[click.core.V]
click.core.V"typing.ContextManager*Ü
call_on_close click.core.Context.call_on_close"K
CallableType[builtins.function]&
builtins.function"builtins.function*2
self(
click.core.Context"click.core.Context*R
fK
CallableType[builtins.function]&
builtins.function"builtins.function*_
closeclick.core.Context.close"
None*2
self(
click.core.Context"click.core.Context*è
command_pathclick.core.Context.command_path"
builtins.str"builtins.str*2
self(
click.core.Context"click.core.Context0:property`*á
	find_rootclick.core.Context.find_root"(
click.core.Context"click.core.Context*2
self(
click.core.Context"click.core.Context*÷
find_objectclick.core.Context.find_object"8
Union[click.core.V,None]
click.core.V
None*2
self(
click.core.Context"click.core.Context*9
object_type(
Type[click.core.V]
click.core.V*≤
ensure_object click.core.Context.ensure_object"
click.core.V*2
self(
click.core.Context"click.core.Context*9
object_type(
Type[click.core.V]
click.core.V*å
failclick.core.Context.fail"
NoReturn
*2
self(
click.core.Context"click.core.Context*)
message
builtins.str"builtins.str*c
abortclick.core.Context.abort"
NoReturn
*2
self(
click.core.Context"click.core.Context*ã
exitclick.core.Context.exit"
NoReturn
*2
self(
click.core.Context"click.core.Context*(
code
builtins.int"builtins.int *{
	get_usageclick.core.Context.get_usage"
builtins.str"builtins.str*2
self(
click.core.Context"click.core.Context*y
get_helpclick.core.Context.get_help"
builtins.str"builtins.str*2
self(
click.core.Context"click.core.Context*Œ
_make_sub_context$click.core.Context._make_sub_context"(
click.core.Context"click.core.Context*2
self(
click.core.Context"click.core.Context*5
command(
click.core.Command"click.core.Command*Œ
invokeclick.core.Context.invoke"
Any*2
__self(
click.core.Context"click.core.Context*√

__callback¥
9Union[click.core.Command,CallableType[builtins.function]](
click.core.Command"click.core.CommandK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any*Ω
forwardclick.core.Context.forward"
Any*2
__self(
click.core.Context"click.core.Context*1
__cmd(
click.core.Command"click.core.Command*
args
Any*
kwargs
Any*Î
set_parameter_source'click.core.Context.set_parameter_source"
None*2
self(
click.core.Context"click.core.Context*&
name
builtins.str"builtins.str*D
source8
click.core.ParameterSource"click.core.ParameterSource*ã
get_parameter_source'click.core.Context.get_parameter_source"n
&Union[click.core.ParameterSource,None]8
click.core.ParameterSource"click.core.ParameterSource
None*2
self(
click.core.Context"click.core.Context*&
name
builtins.str"builtins.str2≈
lookup_default!click.core.Context.lookup_defaultè
lookup_default!click.core.Context.lookup_default"&
Union[Any,None]
Any
None*2
self(
click.core.Context"click.core.Context*&
name
builtins.str"builtins.str*F
call:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:
t.overloadX˝
lookup_default!click.core.Context.lookup_default"ì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
None*2
self(
click.core.Context"click.core.Context*&
name
builtins.str"builtins.str*F
call:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:
t.overloadXr°
formatter_class"click.core.Context.formatter_classj
$Type[click.formatting.HelpFormatter]@
click.formatting.HelpFormatter"click.formatting.HelpFormatterr{
parentclick.core.Context.parentV
Union[click.core.Context,None](
click.core.Context"click.core.Context
NonerO
commandclick.core.Context.command(
click.core.Command"click.core.Commandro
	info_nameclick.core.Context.info_nameD
Union[builtins.str,None]
builtins.str"builtins.str
Noner|
paramsclick.core.Context.paramsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrk
argsclick.core.Context.argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr
protected_args!click.core.Context.protected_argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr{
_opt_prefixes click.core.Context._opt_prefixesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setr&
objclick.core.Context.obj
Anyrz
_metaclick.core.Context._metaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr¬
default_mapclick.core.Context.default_mapí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
NonerÅ
invoked_subcommand%click.core.Context.invoked_subcommandD
Union[builtins.str,None]
builtins.str"builtins.str
Nonery
terminal_width!click.core.Context.terminal_widthD
Union[builtins.int,None]
builtins.int"builtins.int
Noner
max_content_width$click.core.Context.max_content_widthD
Union[builtins.int,None]
builtins.int"builtins.int
NonerW
allow_extra_args#click.core.Context.allow_extra_args
builtins.bool"builtins.boolre
allow_interspersed_args*click.core.Context.allow_interspersed_args
builtins.bool"builtins.boolrc
ignore_unknown_options)click.core.Context.ignore_unknown_options
builtins.bool"builtins.boolrÖ
help_option_names$click.core.Context.help_option_namesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr»
token_normalize_func'click.core.Context.token_normalize_funcÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
NonerY
resilient_parsing$click.core.Context.resilient_parsing
builtins.bool"builtins.boolrÅ
auto_envvar_prefix%click.core.Context.auto_envvar_prefixD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerj
colorclick.core.Context.colorG
Union[builtins.bool,None]
builtins.bool"builtins.bool
Nonerx
show_defaultclick.core.Context.show_defaultG
Union[builtins.bool,None]
builtins.bool"builtins.bool
Noner∆
_close_callbacks#click.core.Context._close_callbackså
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.listrA
_depthclick.core.Context._depth
builtins.int"builtins.intr€
_parameter_source$click.core.Context._parameter_sourceü
6builtins.dict[builtins.str,click.core.ParameterSource]
builtins.str"builtins.str8
click.core.ParameterSource"click.core.ParameterSource"builtins.dictr[
_exit_stackclick.core.Context._exit_stack,
contextlib.ExitStack"contextlib.ExitStackÁ%
BaseCommandclick.core.BaseCommand"builtins.object*Ô
__init__click.core.BaseCommand.__init__"
None*:
self0
click.core.BaseCommand"click.core.BaseCommand*N
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None*´
context_settingsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *˚
to_info_dict#click.core.BaseCommand.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*:
self0
click.core.BaseCommand"click.core.BaseCommand*1
ctx(
click.core.Context"click.core.Context*É
__repr__click.core.BaseCommand.__repr__"
builtins.str"builtins.str*8
self0
click.core.BaseCommand"click.core.BaseCommand*∫
	get_usage click.core.BaseCommand.get_usage"
builtins.str"builtins.str*:
self0
click.core.BaseCommand"click.core.BaseCommand*1
ctx(
click.core.Context"click.core.Context*∏
get_helpclick.core.BaseCommand.get_help"
builtins.str"builtins.str*:
self0
click.core.BaseCommand"click.core.BaseCommand*1
ctx(
click.core.Context"click.core.Context*æ
make_context#click.core.BaseCommand.make_context"(
click.core.Context"click.core.Context*:
self0
click.core.BaseCommand"click.core.BaseCommand*S
	info_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*d
parentV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *
extra
Any*¿

parse_args!click.core.BaseCommand.parse_args"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*:
self0
click.core.BaseCommand"click.core.BaseCommand*1
ctx(
click.core.Context"click.core.Context*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ü
invokeclick.core.BaseCommand.invoke"
Any*:
self0
click.core.BaseCommand"click.core.BaseCommand*1
ctx(
click.core.Context"click.core.Context*Ï
shell_complete%click.core.BaseCommand.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*:
self0
click.core.BaseCommand"click.core.BaseCommand*1
ctx(
click.core.Context"click.core.Context*,

incomplete
builtins.str"builtins.str*˚
_main_shell_completion-click.core.BaseCommand._main_shell_completion"
None*:
self0
click.core.BaseCommand"click.core.BaseCommand*e
ctx_argsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*+
	prog_name
builtins.str"builtins.str*X
complete_varD
Union[builtins.str,None]
builtins.str"builtins.str
None *ò
__call__click.core.BaseCommand.__call__"
Any*:
self0
click.core.BaseCommand"click.core.BaseCommand*
args
Any*
kwargs
Any2‡
mainclick.core.BaseCommand.main¨
mainclick.core.BaseCommand.main"
NoReturn
*:
self0
click.core.BaseCommand"click.core.BaseCommand*î
argsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *U
	prog_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *X
complete_varD
Union[builtins.str,None]
builtins.str"builtins.str
None *Q
standalone_mode:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
extra
Any0:
t.overloadXã
mainclick.core.BaseCommand.main"
Any*:
self0
click.core.BaseCommand"click.core.BaseCommand*î
argsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *U
	prog_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *X
complete_varD
Union[builtins.str,None]
builtins.str"builtins.str
None *5
standalone_mode
builtins.bool"builtins.bool *
extra
Any0:
t.overloadXr}
context_class$click.core.BaseCommand.context_classF
Type[click.core.Context](
click.core.Context"click.core.Contextr[
allow_extra_args'click.core.BaseCommand.allow_extra_args
builtins.bool"builtins.boolri
allow_interspersed_args.click.core.BaseCommand.allow_interspersed_args
builtins.bool"builtins.boolrg
ignore_unknown_options-click.core.BaseCommand.ignore_unknown_options
builtins.bool"builtins.boolri
nameclick.core.BaseCommand.nameD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerî
context_settings'click.core.BaseCommand.context_settingsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÖ2
Commandclick.core.Command"click.core.BaseCommand*Ÿ	
__init__click.core.Command.__init__"
None*2
self(
click.core.Command"click.core.Command*N
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None*´
context_settingsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *ó
callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *∞
params°
/Union[builtins.list[click.core.Parameter],None]b
#builtins.list[click.core.Parameter],
click.core.Parameter"click.core.Parameter"builtins.list
None *P
helpD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
epilogD
Union[builtins.str,None]
builtins.str"builtins.str
None *V

short_helpD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
options_metavarD
Union[builtins.str,None]
builtins.str"builtins.str
None *5
add_help_option
builtins.bool"builtins.bool *5
no_args_is_help
builtins.bool"builtins.bool *,
hidden
builtins.bool"builtins.bool *0

deprecated
builtins.bool"builtins.bool *Ô
to_info_dictclick.core.Command.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*Æ
	get_usageclick.core.Command.get_usage"
builtins.str"builtins.str*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*ˆ

get_paramsclick.core.Command.get_params"b
#builtins.list[click.core.Parameter],
click.core.Parameter"click.core.Parameter"builtins.list*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*Ò
format_usageclick.core.Command.format_usage"
None*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*Ú
collect_usage_pieces'click.core.Command.collect_usage_pieces"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*Ù
get_help_option_names(click.core.Command.get_help_option_names"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*Ò
get_help_option"click.core.Command.get_help_option"S
Union[click.core.Option,None]&
click.core.Option"click.core.Option
None*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*Ã
make_parserclick.core.Command.make_parser"6
click.parser.OptionParser"click.parser.OptionParser*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*¨
get_helpclick.core.Command.get_help"
builtins.str"builtins.str*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*∏
get_short_help_str%click.core.Command.get_short_help_str"
builtins.str"builtins.str*2
self(
click.core.Command"click.core.Command*)
limit
builtins.int"builtins.int *Ô
format_helpclick.core.Command.format_help"
None*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*˘
format_help_text#click.core.Command.format_help_text"
None*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*ı
format_options!click.core.Command.format_options"
None*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*Û
format_epilog click.core.Command.format_epilog"
None*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*¥

parse_argsclick.core.Command.parse_args"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ì
invokeclick.core.Command.invoke"
Any*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*‡
shell_complete!click.core.Command.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*,

incomplete
builtins.str"builtins.strr∞
callbackclick.core.Command.callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
Nonerá
paramsclick.core.Command.paramsb
#builtins.list[click.core.Parameter],
click.core.Parameter"click.core.Parameter"builtins.listre
helpclick.core.Command.helpD
Union[builtins.str,None]
builtins.str"builtins.str
Noneri
epilogclick.core.Command.epilogD
Union[builtins.str,None]
builtins.str"builtins.str
Noner{
options_metavar"click.core.Command.options_metavarD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerq

short_helpclick.core.Command.short_helpD
Union[builtins.str,None]
builtins.str"builtins.str
NonerU
add_help_option"click.core.Command.add_help_option
builtins.bool"builtins.boolrU
no_args_is_help"click.core.Command.no_args_is_help
builtins.bool"builtins.boolrC
hiddenclick.core.Command.hidden
builtins.bool"builtins.boolrK

deprecatedclick.core.Command.deprecated
builtins.bool"builtins.bool‡$
MultiCommandclick.core.MultiCommand"click.core.Command*¶
__init__ click.core.MultiCommand.__init__"
None*<
self2
click.core.MultiCommand"click.core.MultiCommand*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *<
invoke_without_command
builtins.bool"builtins.bool *^
no_args_is_helpG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *^
subcommand_metavarD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
chain
builtins.bool"builtins.bool *û
result_callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *
attrs
Any*˛
to_info_dict$click.core.MultiCommand.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*Å
collect_usage_pieces,click.core.MultiCommand.collect_usage_pieces"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*Ñ
format_options&click.core.MultiCommand.format_options"
None*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*Ù
result_callback'click.core.MultiCommand.result_callback"K
CallableType[builtins.function]&
builtins.function"builtins.function*<
self2
click.core.MultiCommand"click.core.MultiCommand*-
replace
builtins.bool"builtins.bool *Ü
format_commands'click.core.MultiCommand.format_commands"
None*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*√

parse_args"click.core.MultiCommand.parse_args"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*¢
invokeclick.core.MultiCommand.invoke"
Any*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*Ã
resolve_command'click.core.MultiCommand.resolve_command"»
ZTuple[Union[builtins.str,None],Union[click.core.Command,None],builtins.list[builtins.str]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneV
Union[click.core.Command,None](
click.core.Command"click.core.Command
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ß
get_command#click.core.MultiCommand.get_command"V
Union[click.core.Command,None](
click.core.Command"click.core.Command
None*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context**
cmd_name
builtins.str"builtins.str*Û
list_commands%click.core.MultiCommand.list_commands"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*Ô
shell_complete&click.core.MultiCommand.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*,

incomplete
builtins.str"builtins.strr\
allow_extra_args(click.core.MultiCommand.allow_extra_args
builtins.bool"builtins.boolrj
allow_interspersed_args/click.core.MultiCommand.allow_interspersed_args
builtins.bool"builtins.boolrh
invoke_without_command.click.core.MultiCommand.invoke_without_command
builtins.bool"builtins.boolr^
subcommand_metavar*click.core.MultiCommand.subcommand_metavar
builtins.str"builtins.strrF
chainclick.core.MultiCommand.chain
builtins.bool"builtins.boolr≈
_result_callback(click.core.MultiCommand._result_callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
NoneŸ
Groupclick.core.Group"click.core.MultiCommand*±
__init__click.core.Group.__init__"
None*.
self$
click.core.Group"click.core.Group*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *È
commandsÿ
^Union[builtins.dict[builtins.str,click.core.Command],typing.Sequence[click.core.Command],None]á
.builtins.dict[builtins.str,click.core.Command]
builtins.str"builtins.str(
click.core.Command"click.core.Command"builtins.dict`
#typing.Sequence[click.core.Command](
click.core.Command"click.core.Command"typing.Sequence
None *
attrs
Any*Í
add_commandclick.core.Group.add_command"
None*.
self$
click.core.Group"click.core.Group*1
cmd(
click.core.Command"click.core.Command*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *í
get_commandclick.core.Group.get_command"V
Union[click.core.Command,None](
click.core.Command"click.core.Command
None*.
self$
click.core.Group"click.core.Group*1
ctx(
click.core.Context"click.core.Context**
cmd_name
builtins.str"builtins.str*ﬁ
list_commandsclick.core.Group.list_commands"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*.
self$
click.core.Group"click.core.Group*1
ctx(
click.core.Context"click.core.Context2Â
commandclick.core.Group.command‰
commandclick.core.Group.command"(
click.core.Command"click.core.Command*.
self$
click.core.Group"click.core.Group*U
__funcK
CallableType[builtins.function]&
builtins.function"builtins.function0:
t.overloadXÿ
commandclick.core.Group.command"K
CallableType[builtins.function]&
builtins.function"builtins.function*.
self$
click.core.Group"click.core.Group*
args
Any*
kwargs
Any0:
t.overloadX2’
groupclick.core.Group.group‹
groupclick.core.Group.group"$
click.core.Group"click.core.Group*.
self$
click.core.Group"click.core.Group*U
__funcK
CallableType[builtins.function]&
builtins.function"builtins.function0:
t.overloadX‘
groupclick.core.Group.group"K
CallableType[builtins.function]&
builtins.function"builtins.function*.
self$
click.core.Group"click.core.Group*
args
Any*
kwargs
Any0:
t.overloadXr´
command_classclick.core.Group.command_classz
$Union[Type[click.core.Command],None]F
Type[click.core.Command](
click.core.Command"click.core.Command
NonerÌ
group_classclick.core.Group.group_classø
6Union[Type[click.core.Group],Type[builtins.type],None]@
Type[click.core.Group]$
click.core.Group"click.core.Group7
Type[builtins.type]
builtins.type"builtins.type
NonerØ
commandsclick.core.Group.commandsá
.builtins.dict[builtins.str,click.core.Command]
builtins.str"builtins.str(
click.core.Command"click.core.Command"builtins.dict†
CommandCollectionclick.core.CommandCollection"click.core.MultiCommand*©
__init__%click.core.CommandCollection.__init__"
None*F
self<
click.core.CommandCollection"click.core.CommandCollection*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *Ω
sources≠
2Union[builtins.list[click.core.MultiCommand],None]k
&builtins.list[click.core.MultiCommand]2
click.core.MultiCommand"click.core.MultiCommand"builtins.list
None *
attrs
Any* 

add_source'click.core.CommandCollection.add_source"
None*F
self<
click.core.CommandCollection"click.core.CommandCollection*A
	multi_cmd2
click.core.MultiCommand"click.core.MultiCommand*∂
get_command(click.core.CommandCollection.get_command"V
Union[click.core.Command,None](
click.core.Command"click.core.Command
None*F
self<
click.core.CommandCollection"click.core.CommandCollection*1
ctx(
click.core.Context"click.core.Context**
cmd_name
builtins.str"builtins.str*Ç
list_commands*click.core.CommandCollection.list_commands"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*F
self<
click.core.CommandCollection"click.core.CommandCollection*1
ctx(
click.core.Context"click.core.Contextrú
sources$click.core.CommandCollection.sourcesk
&builtins.list[click.core.MultiCommand]2
click.core.MultiCommand"click.core.MultiCommand"builtins.listŸA
	Parameterclick.core.Parameter"builtins.object*ì
__init__click.core.Parameter.__init__"
None*6
self,
click.core.Parameter"click.core.Parameter*õ
param_declsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *x
typel
%Union[click.types.ParamType,Any,None].
click.types.ParamType"click.types.ParamType
Any
None *.
required
builtins.bool"builtins.bool *£
defaultì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
None *ó
callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *Q
nargsD
Union[builtins.int,None]
builtins.int"builtins.int
None *.
multiple
builtins.bool"builtins.bool *S
metavarD
Union[builtins.str,None]
builtins.str"builtins.str
None *2
expose_value
builtins.bool"builtins.bool *.
is_eager
builtins.bool"builtins.bool *¡
envvar≤
6Union[builtins.str,typing.Sequence[builtins.str],None]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *ù
shell_completeÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *¬
to_info_dict!click.core.Parameter.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*6
self,
click.core.Parameter"click.core.Parameter*}
__repr__click.core.Parameter.__repr__"
builtins.str"builtins.str*4
self,
click.core.Parameter"click.core.Parameter*≤
_parse_decls!click.core.Parameter._parse_decls"π
WTuple[Union[builtins.str,None],builtins.list[builtins.str],builtins.list[builtins.str]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
click.core.Parameter"click.core.Parameter*Y
declsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*0
expose_value
builtins.bool"builtins.bool*£
human_readable_name(click.core.Parameter.human_readable_name"
builtins.str"builtins.str*6
self,
click.core.Parameter"click.core.Parameter0:property`*á
make_metavar!click.core.Parameter.make_metavar"
builtins.str"builtins.str*6
self,
click.core.Parameter"click.core.Parameter*Ï
add_to_parser"click.core.Parameter.add_to_parser"
None*6
self,
click.core.Parameter"click.core.Parameter*B
parser6
click.parser.OptionParser"click.parser.OptionParser*1
ctx(
click.core.Context"click.core.Context*Ò
consume_value"click.core.Parameter.consume_value"l
%Tuple[Any,click.core.ParameterSource]
Any8
click.core.ParameterSource"click.core.ParameterSource*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*c
optsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*ø
type_cast_value$click.core.Parameter.type_cast_value"
Any*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*
value
Any*•
value_is_missing%click.core.Parameter.value_is_missing"
builtins.bool"builtins.bool*6
self,
click.core.Parameter"click.core.Parameter*
value
Any*ª
process_value"click.core.Parameter.process_value"
Any*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*
value
Any*Ú
resolve_envvar_value)click.core.Parameter.resolve_envvar_value"D
Union[builtins.str,None]
builtins.str"builtins.str
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*Œ
value_from_envvar&click.core.Parameter.value_from_envvar"&
Union[Any,None]
Any
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*Ê
handle_parse_result(click.core.Parameter.handle_parse_result"
&Tuple[Any,builtins.list[builtins.str]]
AnyJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*c
optsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*¡
get_help_record$click.core.Parameter.get_help_record"ú
,Union[Tuple[builtins.str,builtins.str],None]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*
get_usage_pieces%click.core.Parameter.get_usage_pieces"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*æ
get_error_hint#click.core.Parameter.get_error_hint"
builtins.str"builtins.str*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*Ê
shell_complete#click.core.Parameter.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*,

incomplete
builtins.str"builtins.str2ª
get_default click.core.Parameter.get_defaultö
get_default click.core.Parameter.get_default"&
Union[Any,None]
Any
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*F
call:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:
t.overloadXÏ
get_default click.core.Parameter.get_default"ì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context**
call
builtins.bool"builtins.bool 0:
t.overloadXrU
param_type_name$click.core.Parameter.param_type_name
builtins.str"builtins.strrg
nameclick.core.Parameter.nameD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerm
optsclick.core.Parameter.optsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrÅ
secondary_opts#click.core.Parameter.secondary_optsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrQ
typeclick.core.Parameter.type.
click.types.ParamType"click.types.ParamTyperI
requiredclick.core.Parameter.required
builtins.bool"builtins.boolr≤
callbackclick.core.Parameter.callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
NonerA
nargsclick.core.Parameter.nargs
builtins.int"builtins.intrI
multipleclick.core.Parameter.multiple
builtins.bool"builtins.boolrQ
expose_value!click.core.Parameter.expose_value
builtins.bool"builtins.boolrΩ
defaultclick.core.Parameter.defaultì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
NonerI
is_eagerclick.core.Parameter.is_eager
builtins.bool"builtins.boolrm
metavarclick.core.Parameter.metavarD
Union[builtins.str,None]
builtins.str"builtins.str
Noner⁄
envvarclick.core.Parameter.envvar≤
6Union[builtins.str,typing.Sequence[builtins.str],None]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
NonerŒ
_custom_shell_complete+click.core.Parameter._custom_shell_completeÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None…/
Optionclick.core.Option"click.core.Parameter*É
__init__click.core.Option.__init__"
None*0
self&
click.core.Option"click.core.Option*õ
param_declsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *Ü
show_defaultr
&Union[builtins.bool,builtins.str,None]
builtins.bool"builtins.bool
builtins.str"builtins.str
None *q
promptc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.str *~
confirmation_promptc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.str *5
prompt_required
builtins.bool"builtins.bool *0

hide_input
builtins.bool"builtins.bool *V
is_flagG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *8

flag_value&
Union[Any,None]
Any
None *.
multiple
builtins.bool"builtins.bool *+
count
builtins.bool"builtins.bool *8
allow_from_autoenv
builtins.bool"builtins.bool *x
typel
%Union[click.types.ParamType,Any,None].
click.types.ParamType"click.types.ParamType
Any
None *P
helpD
Union[builtins.str,None]
builtins.str"builtins.str
None *,
hidden
builtins.bool"builtins.bool *2
show_choices
builtins.bool"builtins.bool *1
show_envvar
builtins.bool"builtins.bool *
attrs
Any*π
to_info_dictclick.core.Option.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*0
self&
click.core.Option"click.core.Option*©
_parse_declsclick.core.Option._parse_decls"π
WTuple[Union[builtins.str,None],builtins.list[builtins.str],builtins.list[builtins.str]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*0
self&
click.core.Option"click.core.Option*Y
declsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*0
expose_value
builtins.bool"builtins.bool*„
add_to_parserclick.core.Option.add_to_parser"
None*0
self&
click.core.Option"click.core.Option*B
parser6
click.parser.OptionParser"click.parser.OptionParser*1
ctx(
click.core.Context"click.core.Context*∏
get_help_record!click.core.Option.get_help_record"ú
,Union[Tuple[builtins.str,builtins.str],None]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*§
prompt_for_value"click.core.Option.prompt_for_value"
Any*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*È
resolve_envvar_value&click.core.Option.resolve_envvar_value"D
Union[builtins.str,None]
builtins.str"builtins.str
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*≈
value_from_envvar#click.core.Option.value_from_envvar"&
Union[Any,None]
Any
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*†
consume_valueclick.core.Option.consume_value"l
%Tuple[Any,click.core.ParameterSource]
Any8
click.core.ParameterSource"click.core.ParameterSource*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*ö
optsè
1typing.Mapping[builtins.str,click.core.Parameter]
builtins.str"builtins.str,
click.core.Parameter"click.core.Parameter"typing.Mapping2¶
get_defaultclick.core.Option.get_defaultë
get_defaultclick.core.Option.get_default"&
Union[Any,None]
Any
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*F
call:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:
t.overloadX„
get_defaultclick.core.Option.get_default"ì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context**
call
builtins.bool"builtins.bool 0:
t.overloadXrR
param_type_name!click.core.Option.param_type_name
builtins.str"builtins.strrh
promptclick.core.Option.promptD
Union[builtins.str,None]
builtins.str"builtins.str
Noner°
confirmation_prompt%click.core.Option.confirmation_promptc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.strrT
prompt_required!click.core.Option.prompt_required
builtins.bool"builtins.boolrJ

hide_inputclick.core.Option.hide_input
builtins.bool"builtins.boolrB
hiddenclick.core.Option.hidden
builtins.bool"builtins.boolrX
_flag_needs_value#click.core.Option._flag_needs_value
builtins.bool"builtins.boolr´
defaultclick.core.Option.defaultÑ
*Union[Any,CallableType[builtins.function]]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.functionrD
is_flagclick.core.Option.is_flag
builtins.bool"builtins.boolrN
is_bool_flagclick.core.Option.is_bool_flag
builtins.bool"builtins.boolr3

flag_valueclick.core.Option.flag_value
Anyr@
countclick.core.Option.count
builtins.bool"builtins.boolrZ
allow_from_autoenv$click.core.Option.allow_from_autoenv
builtins.bool"builtins.boolrd
helpclick.core.Option.helpD
Union[builtins.str,None]
builtins.str"builtins.str
Noner¢
show_defaultclick.core.Option.show_defaultr
&Union[builtins.bool,builtins.str,None]
builtins.bool"builtins.bool
builtins.str"builtins.str
NonerN
show_choicesclick.core.Option.show_choices
builtins.bool"builtins.boolrL
show_envvarclick.core.Option.show_envvar
builtins.bool"builtins.bool∫
Argumentclick.core.Argument"click.core.Parameter*∂
__init__click.core.Argument.__init__"
None*4
self*
click.core.Argument"click.core.Argument*_
param_declsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*W
requiredG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *
attrs
Any*†
human_readable_name'click.core.Argument.human_readable_name"
builtins.str"builtins.str*4
self*
click.core.Argument"click.core.Argument0:property`*Ñ
make_metavar click.core.Argument.make_metavar"
builtins.str"builtins.str*4
self*
click.core.Argument"click.core.Argument*Ø
_parse_decls click.core.Argument._parse_decls"π
WTuple[Union[builtins.str,None],builtins.list[builtins.str],builtins.list[builtins.str]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*4
self*
click.core.Argument"click.core.Argument*Y
declsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*0
expose_value
builtins.bool"builtins.bool*Ì
get_usage_pieces$click.core.Argument.get_usage_pieces"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*4
self*
click.core.Argument"click.core.Argument*1
ctx(
click.core.Context"click.core.Context*ª
get_error_hint"click.core.Argument.get_error_hint"
builtins.str"builtins.str*4
self*
click.core.Argument"click.core.Argument*1
ctx(
click.core.Context"click.core.Context*È
add_to_parser!click.core.Argument.add_to_parser"
None*4
self*
click.core.Argument"click.core.Argument*B
parser6
click.parser.OptionParser"click.parser.OptionParser*1
ctx(
click.core.Context"click.core.ContextrT
param_type_name#click.core.Argument.param_type_name
builtins.str"builtins.str]
_gettext.gettext"
builtins.str"builtins.str*)
message
builtins.str"builtins.strÂ
_complete_visible_commands%click.core._complete_visible_commands"æ
7typing.Iterator[Tuple[builtins.str,click.core.Command]]r
&Tuple[builtins.str,click.core.Command]
builtins.str"builtins.str(
click.core.Command"click.core.Command"typing.Iterator*1
ctx(
click.core.Context"click.core.Context*,

incomplete
builtins.str"builtins.strî
_check_multicommandclick.core._check_multicommand"
None*D
base_command2
click.core.MultiCommand"click.core.MultiCommand**
cmd_name
builtins.str"builtins.str*1
cmd(
click.core.Command"click.core.Command*.
register
builtins.bool"builtins.bool ô
batchclick.core.batch"~
+builtins.list[builtins.tuple[click.core.V]]@
builtins.tuple[click.core.V]
click.core.V"builtins.tuple"builtins.list*P
iterableB
typing.Iterable[click.core.V]
click.core.V"typing.Iterable*,

batch_size
builtins.int"builtins.int§
iter_params_for_processing%click.core.iter_params_for_processing"b
#builtins.list[click.core.Parameter],
click.core.Parameter"click.core.Parameter"builtins.list*|
invocation_orderf
%typing.Sequence[click.core.Parameter],
click.core.Parameter"click.core.Parameter"typing.Sequence*}
declaration_orderf
%typing.Sequence[click.core.Parameter],
click.core.Parameter"click.core.Parameter"typing.Sequencek
_check_iterclick.core._check_iter"0
typing.Iterator[Any]
Any"typing.Iterator*
value
Any*
ttyping *
tetyping_extensions 