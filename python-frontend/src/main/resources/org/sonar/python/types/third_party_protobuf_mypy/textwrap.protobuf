
textwrap“#
TextWrappertextwrap.TextWrapper"builtins.object*Ü
__init__textwrap.TextWrapper.__init__"
None*6
self,
textwrap.TextWrapper"textwrap.TextWrapper*)
width
builtins.int"builtins.int *2
initial_indent
builtins.str"builtins.str *5
subsequent_indent
builtins.str"builtins.str *1
expand_tabs
builtins.bool"builtins.bool *8
replace_whitespace
builtins.bool"builtins.bool *:
fix_sentence_endings
builtins.bool"builtins.bool *6
break_long_words
builtins.bool"builtins.bool *5
drop_whitespace
builtins.bool"builtins.bool *6
break_on_hyphens
builtins.bool"builtins.bool *+
tabsize
builtins.int"builtins.int *U
	max_linesD
Union[builtins.int,None]
builtins.int"builtins.int
None */
placeholder
builtins.str"builtins.str *π
_munge_whitespace&textwrap.TextWrapper._munge_whitespace"
builtins.str"builtins.str*6
self,
textwrap.TextWrapper"textwrap.TextWrapper*&
text
builtins.str"builtins.str*—
_splittextwrap.TextWrapper._split"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
textwrap.TextWrapper"textwrap.TextWrapper*&
text
builtins.str"builtins.str*›
_fix_sentence_endings*textwrap.TextWrapper._fix_sentence_endings"
None*6
self,
textwrap.TextWrapper"textwrap.TextWrapper*V
chunksJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*å
_handle_long_word&textwrap.TextWrapper._handle_long_word"
None*6
self,
textwrap.TextWrapper"textwrap.TextWrapper*_
reversed_chunksJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*X
cur_lineJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*)
cur_len
builtins.int"builtins.int*'
width
builtins.int"builtins.int*ç
_wrap_chunks!textwrap.TextWrapper._wrap_chunks"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
textwrap.TextWrapper"textwrap.TextWrapper*V
chunksJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ﬂ
_split_chunks"textwrap.TextWrapper._split_chunks"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
textwrap.TextWrapper"textwrap.TextWrapper*&
text
builtins.str"builtins.str*Õ
wraptextwrap.TextWrapper.wrap"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
textwrap.TextWrapper"textwrap.TextWrapper*&
text
builtins.str"builtins.str*ü
filltextwrap.TextWrapper.fill"
builtins.str"builtins.str*6
self,
textwrap.TextWrapper"textwrap.TextWrapper*&
text
builtins.str"builtins.strrA
widthtextwrap.TextWrapper.width
builtins.int"builtins.intrS
initial_indent#textwrap.TextWrapper.initial_indent
builtins.str"builtins.strrY
subsequent_indent&textwrap.TextWrapper.subsequent_indent
builtins.str"builtins.strrO
expand_tabs textwrap.TextWrapper.expand_tabs
builtins.bool"builtins.boolr]
replace_whitespace'textwrap.TextWrapper.replace_whitespace
builtins.bool"builtins.boolra
fix_sentence_endings)textwrap.TextWrapper.fix_sentence_endings
builtins.bool"builtins.boolrW
drop_whitespace$textwrap.TextWrapper.drop_whitespace
builtins.bool"builtins.boolrY
break_long_words%textwrap.TextWrapper.break_long_words
builtins.bool"builtins.boolrY
break_on_hyphens%textwrap.TextWrapper.break_on_hyphens
builtins.bool"builtins.boolrE
tabsizetextwrap.TextWrapper.tabsize
builtins.int"builtins.intrq
	max_linestextwrap.TextWrapper.max_linesD
Union[builtins.int,None]
builtins.int"builtins.int
NonerM
placeholder textwrap.TextWrapper.placeholder
builtins.str"builtins.strr}
sentence_end_re$textwrap.TextWrapper.sentence_end_reD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Patternrs

wordsep_retextwrap.TextWrapper.wordsep_reD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.PatternrÅ
wordsep_simple_re&textwrap.TextWrapper.wordsep_simple_reD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.PatternrW
whitespace_trans%textwrap.TextWrapper.whitespace_trans
builtins.str"builtins.strr¿
unicode_whitespace_trans-textwrap.TextWrapper.unicode_whitespace_transu
(builtins.dict[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.dictrC
uspacetextwrap.TextWrapper.uspace
builtins.int"builtins.intr9
xtextwrap.TextWrapper.x
builtins.str"builtins.str§
wraptextwrap.wrap"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*&
text
builtins.str"builtins.str*)
width
builtins.int"builtins.int *2
initial_indent
builtins.str"builtins.str *5
subsequent_indent
builtins.str"builtins.str *1
expand_tabs
builtins.bool"builtins.bool *+
tabsize
builtins.int"builtins.int *8
replace_whitespace
builtins.bool"builtins.bool *:
fix_sentence_endings
builtins.bool"builtins.bool *6
break_long_words
builtins.bool"builtins.bool *6
break_on_hyphens
builtins.bool"builtins.bool *5
drop_whitespace
builtins.bool"builtins.bool *U
	max_linesD
Union[builtins.int,None]
builtins.int"builtins.int
None */
placeholder
builtins.str"builtins.str ˆ
filltextwrap.fill"
builtins.str"builtins.str*&
text
builtins.str"builtins.str*)
width
builtins.int"builtins.int *2
initial_indent
builtins.str"builtins.str *5
subsequent_indent
builtins.str"builtins.str *1
expand_tabs
builtins.bool"builtins.bool *+
tabsize
builtins.int"builtins.int *8
replace_whitespace
builtins.bool"builtins.bool *:
fix_sentence_endings
builtins.bool"builtins.bool *6
break_long_words
builtins.bool"builtins.bool *6
break_on_hyphens
builtins.bool"builtins.bool *5
drop_whitespace
builtins.bool"builtins.bool *U
	max_linesD
Union[builtins.int,None]
builtins.int"builtins.int
None */
placeholder
builtins.str"builtins.str £
shortentextwrap.shorten"
builtins.str"builtins.str*&
text
builtins.str"builtins.str*'
width
builtins.int"builtins.int*2
initial_indent
builtins.str"builtins.str *5
subsequent_indent
builtins.str"builtins.str *1
expand_tabs
builtins.bool"builtins.bool *+
tabsize
builtins.int"builtins.int *8
replace_whitespace
builtins.bool"builtins.bool *:
fix_sentence_endings
builtins.bool"builtins.bool *6
break_long_words
builtins.bool"builtins.bool *6
break_on_hyphens
builtins.bool"builtins.bool *5
drop_whitespace
builtins.bool"builtins.bool */
placeholder
builtins.str"builtins.str _
dedenttextwrap.dedent"
builtins.str"builtins.str*&
text
builtins.str"builtins.str§
indenttextwrap.indent"
builtins.str"builtins.str*&
text
builtins.str"builtins.str*(
prefix
builtins.str"builtins.str*ò
	predicateÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *Ñ
__annotations__textwrap.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*g
__all__textwrap.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list