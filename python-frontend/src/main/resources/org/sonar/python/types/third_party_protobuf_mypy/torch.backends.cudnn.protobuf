
torch.backends.cudnn§
CudnnModule torch.backends.cudnn.CudnnModule"torch.backends.PropModule*P
__init__)torch.backends.cudnn.CudnnModule.__init__*
self*
m*
namerm
enabled(torch.backends.cudnn.CudnnModule.enabled8
torch.backends.ContextProp"torch.backends.ContextPropry
deterministic.torch.backends.cudnn.CudnnModule.deterministic8
torch.backends.ContextProp"torch.backends.ContextProprq
	benchmark*torch.backends.cudnn.CudnnModule.benchmark8
torch.backends.ContextProp"torch.backends.ContextPropr≥
benchmark_limit0torch.backends.cudnn.CudnnModule.benchmark_limitn
&Union[torch.backends.ContextProp,None]8
torch.backends.ContextProp"torch.backends.ContextProp
Noners

allow_tf32+torch.backends.cudnn.CudnnModule.allow_tf328
torch.backends.ContextProp"torch.backends.ContextProp#
_inittorch.backends.cudnn._init0
_init-redefinitiontorch.backends.cudnn._init'
versiontorch.backends.cudnn.version1
is_available!torch.backends.cudnn.is_available?
is_acceptable"torch.backends.cudnn.is_acceptable*

tensoré
	set_flagstorch.backends.cudnn.set_flags*
_enabled *

_benchmark *
_benchmark_limit *
_deterministic *
_allow_tf32 *u
__path__torch.backends.cudnn.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ê
__annotations__$torch.backends.cudnn.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*}
__cudnn_version$torch.backends.cudnn.__cudnn_versionD
Union[builtins.int,None]
builtins.int"builtins.int
None*è
CUDNN_TENSOR_DTYPES(torch.backends.cudnn.CUDNN_TENSOR_DTYPESN
builtins.set[torch._C.dtype] 
torch._C.dtype"torch._C.dtype"builtins.set*G
enabledtorch.backends.cudnn.enabled
builtins.bool"builtins.bool*S
deterministic"torch.backends.cudnn.deterministic
builtins.bool"builtins.bool*K
	benchmarktorch.backends.cudnn.benchmark
builtins.bool"builtins.bool*M

allow_tf32torch.backends.cudnn.allow_tf32
builtins.bool"builtins.bool*U
benchmark_limit$torch.backends.cudnn.benchmark_limit
builtins.int"builtins.int