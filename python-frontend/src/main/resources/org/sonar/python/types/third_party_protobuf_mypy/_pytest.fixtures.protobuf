
_pytest.fixturesã+
PseudoFixtureDef!_pytest.fixtures.PseudoFixtureDef"builtins.object*‡

__init__*_pytest.fixtures.PseudoFixtureDef.__init__"
None*»
selfΩ
@_pytest.fixtures.PseudoFixtureDef[_pytest.fixtures.FixtureValue]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"!_pytest.fixtures.PseudoFixtureDef*õ
cached_resultá
∂TypeAlias[Union[Tuple[_pytest.fixtures.FixtureValue,builtins.object,None],Tuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]]]¢
´Union[Tuple[_pytest.fixtures.FixtureValue,builtins.object,None],Tuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]]√
9Tuple[_pytest.fixtures.FixtureValue,builtins.object,None]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"
builtins.object"builtins.object
None©
jTuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]
None"
builtins.object"builtins.objectä
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType"%_pytest.fixtures._FixtureCachedResult*5
scope*
_pytest.scope.Scope"_pytest.scope.Scope*ß
__lt__(_pytest.fixtures.PseudoFixtureDef.__lt__"
builtins.bool"builtins.bool*h
self^
%_pytest.fixtures.PseudoFixtureDef._AT"
builtins.object"builtins.object"builtins.object*i
other^
%_pytest.fixtures.PseudoFixtureDef._AT"
builtins.object"builtins.object"builtins.object*ß
__le__(_pytest.fixtures.PseudoFixtureDef.__le__"
builtins.bool"builtins.bool*h
self^
%_pytest.fixtures.PseudoFixtureDef._AT"
builtins.object"builtins.object"builtins.object*i
other^
%_pytest.fixtures.PseudoFixtureDef._AT"
builtins.object"builtins.object"builtins.object*ß
__gt__(_pytest.fixtures.PseudoFixtureDef.__gt__"
builtins.bool"builtins.bool*h
self^
%_pytest.fixtures.PseudoFixtureDef._AT"
builtins.object"builtins.object"builtins.object*i
other^
%_pytest.fixtures.PseudoFixtureDef._AT"
builtins.object"builtins.object"builtins.object*ß
__ge__(_pytest.fixtures.PseudoFixtureDef.__ge__"
builtins.bool"builtins.bool*h
self^
%_pytest.fixtures.PseudoFixtureDef._AT"
builtins.object"builtins.object"builtins.object*i
other^
%_pytest.fixtures.PseudoFixtureDef._AT"
builtins.object"builtins.object"builtins.object8Pr 
cached_result/_pytest.fixtures.PseudoFixtureDef.cached_resultá
∂TypeAlias[Union[Tuple[_pytest.fixtures.FixtureValue,builtins.object,None],Tuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]]]¢
´Union[Tuple[_pytest.fixtures.FixtureValue,builtins.object,None],Tuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]]√
9Tuple[_pytest.fixtures.FixtureValue,builtins.object,None]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"
builtins.object"builtins.object
None©
jTuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]
None"
builtins.object"builtins.objectä
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType"%_pytest.fixtures._FixtureCachedResultr^
_scope(_pytest.fixtures.PseudoFixtureDef._scope*
_pytest.scope.Scope"_pytest.scope.ScoperÜ
__attrs_attrs__1_pytest.fixtures.PseudoFixtureDef.__attrs_attrs__ø
ÒTuple[attr.Attribute[TypeAlias[Union[Tuple[_pytest.fixtures.FixtureValue,builtins.object,None],Tuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]]]],attr.Attribute[_pytest.scope.Scope]]„	
∆attr.Attribute[TypeAlias[Union[Tuple[_pytest.fixtures.FixtureValue,builtins.object,None],Tuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]]]]á
∂TypeAlias[Union[Tuple[_pytest.fixtures.FixtureValue,builtins.object,None],Tuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]]]¢
´Union[Tuple[_pytest.fixtures.FixtureValue,builtins.object,None],Tuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]]√
9Tuple[_pytest.fixtures.FixtureValue,builtins.object,None]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"
builtins.object"builtins.object
None©
jTuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]
None"
builtins.object"builtins.objectä
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType"%_pytest.fixtures._FixtureCachedResult"attr.Attributea
#attr.Attribute[_pytest.scope.Scope]*
_pytest.scope.Scope"_pytest.scope.Scope"attr.Attribute¿
FuncFixtureInfo _pytest.fixtures.FuncFixtureInfo"builtins.object*©
prune_dependency_tree6_pytest.fixtures.FuncFixtureInfo.prune_dependency_tree"
None*N
selfD
 _pytest.fixtures.FuncFixtureInfo" _pytest.fixtures.FuncFixtureInfo*—
__init__)_pytest.fixtures.FuncFixtureInfo.__init__"
None*N
selfD
 _pytest.fixtures.FuncFixtureInfo" _pytest.fixtures.FuncFixtureInfo*Z
argnamesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*^
initialnamesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*]
names_closureJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*§
name2fixturedefsç
Mbuiltins.dict[builtins.str,typing.Sequence[_pytest.fixtures.FixtureDef[Any]]]
builtins.str"builtins.stré
1typing.Sequence[_pytest.fixtures.FixtureDef[Any]]H
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"typing.Sequence"builtins.dict*§
__lt__'_pytest.fixtures.FuncFixtureInfo.__lt__"
builtins.bool"builtins.bool*g
self]
$_pytest.fixtures.FuncFixtureInfo._AT"
builtins.object"builtins.object"builtins.object*h
other]
$_pytest.fixtures.FuncFixtureInfo._AT"
builtins.object"builtins.object"builtins.object*§
__le__'_pytest.fixtures.FuncFixtureInfo.__le__"
builtins.bool"builtins.bool*g
self]
$_pytest.fixtures.FuncFixtureInfo._AT"
builtins.object"builtins.object"builtins.object*h
other]
$_pytest.fixtures.FuncFixtureInfo._AT"
builtins.object"builtins.object"builtins.object*§
__gt__'_pytest.fixtures.FuncFixtureInfo.__gt__"
builtins.bool"builtins.bool*g
self]
$_pytest.fixtures.FuncFixtureInfo._AT"
builtins.object"builtins.object"builtins.object*h
other]
$_pytest.fixtures.FuncFixtureInfo._AT"
builtins.object"builtins.object"builtins.object*§
__ge__'_pytest.fixtures.FuncFixtureInfo.__ge__"
builtins.bool"builtins.bool*g
self]
$_pytest.fixtures.FuncFixtureInfo._AT"
builtins.object"builtins.object"builtins.object*h
other]
$_pytest.fixtures.FuncFixtureInfo._AT"
builtins.object"builtins.object"builtins.object8rÉ
argnames)_pytest.fixtures.FuncFixtureInfo.argnamesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuplerã
initialnames-_pytest.fixtures.FuncFixtureInfo.initialnamesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuplerã
names_closure._pytest.fixtures.FuncFixtureInfo.names_closureJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr’
name2fixturedefs1_pytest.fixtures.FuncFixtureInfo.name2fixturedefsç
Mbuiltins.dict[builtins.str,typing.Sequence[_pytest.fixtures.FixtureDef[Any]]]
builtins.str"builtins.stré
1typing.Sequence[_pytest.fixtures.FixtureDef[Any]]H
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"typing.Sequence"builtins.dictr·
__attrs_attrs__0_pytest.fixtures.FuncFixtureInfo.__attrs_attrs__õ
ÍTuple[attr.Attribute[builtins.tuple[builtins.str]],attr.Attribute[builtins.tuple[builtins.str]],attr.Attribute[builtins.list[builtins.str]],attr.Attribute[builtins.dict[builtins.str,typing.Sequence[_pytest.fixtures.FixtureDef[Any]]]]]å
,attr.Attribute[builtins.tuple[builtins.str]]L
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple"attr.Attributeå
,attr.Attribute[builtins.tuple[builtins.str]]L
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple"attr.Attributeâ
+attr.Attribute[builtins.list[builtins.str]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"attr.Attributeˇ
]attr.Attribute[builtins.dict[builtins.str,typing.Sequence[_pytest.fixtures.FixtureDef[Any]]]]ç
Mbuiltins.dict[builtins.str,typing.Sequence[_pytest.fixtures.FixtureDef[Any]]]
builtins.str"builtins.stré
1typing.Sequence[_pytest.fixtures.FixtureDef[Any]]H
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"typing.Sequence"builtins.dict"attr.Attribute«C
FixtureRequest_pytest.fixtures.FixtureRequest"builtins.object*÷
__init__(_pytest.fixtures.FixtureRequest.__init__"
None*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*

pyfuncitem
Any*/
	_ispytest
builtins.bool"builtins.bool *¬
scope%_pytest.fixtures.FixtureRequest.scope"µ
TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]ï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_pytest.scope._ScopeName*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest0:property`*‰
fixturenames,_pytest.fixtures.FixtureRequest.fixturenames"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest0:property`*D
node$_pytest.fixtures.FixtureRequest.node*
self0:property`*ã
_getnextfixturedef2_pytest.fixtures.FixtureRequest._getnextfixturedef"H
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*)
argname
builtins.str"builtins.str*º
config&_pytest.fixtures.FixtureRequest.config".
_pytest.config.Config"_pytest.config.Config*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest0:property`*L
function(_pytest.fixtures.FixtureRequest.function*
self0:property`*B
cls#_pytest.fixtures.FixtureRequest.cls*
self0:property`*L
instance(_pytest.fixtures.FixtureRequest.instance*
self0:property`*H
module&_pytest.fixtures.FixtureRequest.module*
self0:property`*¶
path$_pytest.fixtures.FixtureRequest.path"
pathlib.Path"pathlib.Path*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest0:property`*˘
keywords(_pytest.fixtures.FixtureRequest.keywords"g
'typing.MutableMapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MutableMapping*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest0:property`*º
session'_pytest.fixtures.FixtureRequest.session",
_pytest.main.Session"_pytest.main.Session*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest0:property`*
addfinalizer,_pytest.fixtures.FixtureRequest.addfinalizer"
None*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*Z
	finalizerK
CallableType[builtins.function]&
builtins.function"builtins.function*Ü
_addfinalizer-_pytest.fixtures.FixtureRequest._addfinalizer"
None*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*Z
	finalizerK
CallableType[builtins.function]&
builtins.function"builtins.function*
scope
Any*Õ
applymarker+_pytest.fixtures.FixtureRequest.applymarker"
None*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*∏
marker´
9Union[builtins.str,_pytest.mark.structures.MarkDecorator]
builtins.str"builtins.strN
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*„

raiseerror*_pytest.fixtures.FixtureRequest.raiseerror"
NoReturn
*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*M
msgD
Union[builtins.str,None]
builtins.str"builtins.str
None*ñ
_fillfixtures-_pytest.fixtures.FixtureRequest._fillfixtures"
None*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*ƒ
getfixturevalue/_pytest.fixtures.FixtureRequest.getfixturevalue"
Any*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*)
argname
builtins.str"builtins.str*§
_get_active_fixturedef6_pytest.fixtures.FixtureRequest._get_active_fixturedef"ÿ
fUnion[_pytest.fixtures.FixtureDef[builtins.object],_pytest.fixtures.PseudoFixtureDef[builtins.object]]o
,_pytest.fixtures.FixtureDef[builtins.object]"
builtins.object"builtins.object"_pytest.fixtures.FixtureDef{
2_pytest.fixtures.PseudoFixtureDef[builtins.object]"
builtins.object"builtins.object"!_pytest.fixtures.PseudoFixtureDef*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*)
argname
builtins.str"builtins.str*°
_get_fixturestack1_pytest.fixtures.FixtureRequest._get_fixturestack"ä
/builtins.list[_pytest.fixtures.FixtureDef[Any]]H
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"builtins.list*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*©
_compute_fixture_value6_pytest.fixtures.FixtureRequest._compute_fixture_value"
None*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*

fixturedefo
,_pytest.fixtures.FixtureDef[builtins.object]"
builtins.object"builtins.object"_pytest.fixtures.FixtureDef*Ò
_schedule_finalizers4_pytest.fixtures.FixtureRequest._schedule_finalizers"
None*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*

fixturedefo
,_pytest.fixtures.FixtureDef[builtins.object]"
builtins.object"builtins.object"_pytest.fixtures.FixtureDef*J

subrequest:
_pytest.fixtures.SubRequest"_pytest.fixtures.SubRequest*¿
_check_scope,_pytest.fixtures.FixtureRequest._check_scope"
None*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*)
argname
builtins.str"builtins.str*>
invoking_scope*
_pytest.scope.Scope"_pytest.scope.Scope*?
requested_scope*
_pytest.scope.Scope"_pytest.scope.Scope*‡
_factorytraceback1_pytest.fixtures.FixtureRequest._factorytraceback"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*¥
_getscopeitem-_pytest.fixtures.FixtureRequest._getscopeitem"ì
1Union[_pytest.nodes.Item,_pytest.nodes.Collector](
_pytest.nodes.Item"_pytest.nodes.Item2
_pytest.nodes.Collector"_pytest.nodes.Collector*L
selfB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*è
scopeÉ
öUnion[_pytest.scope.Scope,TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]]*
_pytest.scope.Scope"_pytest.scope.Scopeµ
TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]ï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_pytest.scope._ScopeName*ò
__repr__(_pytest.fixtures.FixtureRequest.__repr__"
builtins.str"builtins.str*DB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequestrC
_pyfuncitem+_pytest.fixtures.FixtureRequest._pyfuncitem
AnyrÄ
fixturename+_pytest.fixtures.FixtureRequest.fixturenameD
Union[builtins.str,None]
builtins.str"builtins.str
Noner\
_scope&_pytest.fixtures.FixtureRequest._scope*
_pytest.scope.Scope"_pytest.scope.Scoperˆ
_fixture_defs-_pytest.fixtures.FixtureRequest._fixture_defsµ
<builtins.dict[builtins.str,_pytest.fixtures.FixtureDef[Any]]
builtins.str"builtins.strH
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"builtins.dictr‘
_arg2fixturedefs0_pytest.fixtures.FixtureRequest._arg2fixturedefsç
Mbuiltins.dict[builtins.str,typing.Sequence[_pytest.fixtures.FixtureDef[Any]]]
builtins.str"builtins.stré
1typing.Sequence[_pytest.fixtures.FixtureDef[Any]]H
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"typing.Sequence"builtins.dictrØ

_arg2index*_pytest.fixtures.FixtureRequest._arg2indexu
(builtins.dict[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.dictrÜ
_fixturemanager/_pytest.fixtures.FixtureRequest._fixturemanagerB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManagerr7
param%_pytest.fixtures.FixtureRequest.param
AnyØ

SubRequest_pytest.fixtures.SubRequest"_pytest.fixtures.FixtureRequest*˝
__init__$_pytest.fixtures.SubRequest.__init__"
None*D
self:
_pytest.fixtures.SubRequest"_pytest.fixtures.SubRequest*O
requestB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*5
scope*
_pytest.scope.Scope"_pytest.scope.Scope*
param
Any*-
param_index
builtins.int"builtins.int*

fixturedefo
,_pytest.fixtures.FixtureDef[builtins.object]"
builtins.object"builtins.object"_pytest.fixtures.FixtureDef*/
	_ispytest
builtins.bool"builtins.bool *å
__repr__$_pytest.fixtures.SubRequest.__repr__"
builtins.str"builtins.str*<:
_pytest.fixtures.SubRequest"_pytest.fixtures.SubRequest*‰
addfinalizer(_pytest.fixtures.SubRequest.addfinalizer"
None*D
self:
_pytest.fixtures.SubRequest"_pytest.fixtures.SubRequest*Z
	finalizerK
CallableType[builtins.function]&
builtins.function"builtins.function*Â
_schedule_finalizers0_pytest.fixtures.SubRequest._schedule_finalizers"
None*D
self:
_pytest.fixtures.SubRequest"_pytest.fixtures.SubRequest*

fixturedefo
,_pytest.fixtures.FixtureDef[builtins.object]"
builtins.object"builtins.object"_pytest.fixtures.FixtureDef*J

subrequest:
_pytest.fixtures.SubRequest"_pytest.fixtures.SubRequest8rÇ
_parent_request+_pytest.fixtures.SubRequest._parent_requestB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequestrT
param_index'_pytest.fixtures.SubRequest.param_index
builtins.int"builtins.intrß
_fixturedef'_pytest.fixtures.SubRequest._fixturedefo
,_pytest.fixtures.FixtureDef[builtins.object]"
builtins.object"builtins.object"_pytest.fixtures.FixtureDefä

FixtureLookupError#_pytest.fixtures.FixtureLookupError"builtins.LookupError*ç
__init__,_pytest.fixtures.FixtureLookupError.__init__"
None*T
selfJ
#_pytest.fixtures.FixtureLookupError"#_pytest.fixtures.FixtureLookupError*Q
argnameD
Union[builtins.str,None]
builtins.str"builtins.str
None*O
requestB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*O
msgD
Union[builtins.str,None]
builtins.str"builtins.str
None *Ê

formatrepr._pytest.fixtures.FixtureLookupError.formatrepr"R
'_pytest.fixtures.FixtureLookupErrorRepr"'_pytest.fixtures.FixtureLookupErrorRepr*T
selfJ
#_pytest.fixtures.FixtureLookupError"#_pytest.fixtures.FixtureLookupError8r|
argname+_pytest.fixtures.FixtureLookupError.argnameD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerz
request+_pytest.fixtures.FixtureLookupError.requestB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequestrÕ
fixturestack0_pytest.fixtures.FixtureLookupError.fixturestackä
/builtins.list[_pytest.fixtures.FixtureDef[Any]]H
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"builtins.listrt
msg'_pytest.fixtures.FixtureLookupError.msgD
Union[builtins.str,None]
builtins.str"builtins.str
None¯
FixtureLookupErrorRepr'_pytest.fixtures.FixtureLookupErrorRepr"_pytest._code.code.TerminalRepr*€
__init__0_pytest.fixtures.FixtureLookupErrorRepr.__init__"
None*\
selfR
'_pytest.fixtures.FixtureLookupErrorRepr"'_pytest.fixtures.FixtureLookupErrorRepr*¶
filenameó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike*-
firstlineno
builtins.int"builtins.int*[
tblinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*-
errorstring
builtins.str"builtins.str*Q
argnameD
Union[builtins.str,None]
builtins.str"builtins.str
None*à

toterminal2_pytest.fixtures.FixtureLookupErrorRepr.toterminal"
None*\
selfR
'_pytest.fixtures.FixtureLookupErrorRepr"'_pytest.fixtures.FixtureLookupErrorRepr*^
twV
)_pytest._io.terminalwriter.TerminalWriter")_pytest._io.terminalwriter.TerminalWriterrä
tblines/_pytest.fixtures.FixtureLookupErrorRepr.tblinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequencer`
errorstring3_pytest.fixtures.FixtureLookupErrorRepr.errorstring
builtins.str"builtins.strr÷
filename0_pytest.fixtures.FixtureLookupErrorRepr.filenameó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLiker`
firstlineno3_pytest.fixtures.FixtureLookupErrorRepr.firstlineno
builtins.int"builtins.intrÄ
argname/_pytest.fixtures.FixtureLookupErrorRepr.argnameD
Union[builtins.str,None]
builtins.str"builtins.str
Noneè;

FixtureDef_pytest.fixtures.FixtureDef"builtins.object*Ë
__init__$_pytest.fixtures.FixtureDef.__init__"
None*º
self±
:_pytest.fixtures.FixtureDef[_pytest.fixtures.FixtureValue]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"_pytest.fixtures.FixtureDef*V
fixturemanagerB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager*P
baseidD
Union[builtins.str,None]
builtins.str"builtins.str
None*)
argname
builtins.str"builtins.str*Ê
func€
QTypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]‰
FUnion[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function"_pytest.fixtures._FixtureFunc*ã
scopeˇ
øUnion[_pytest.scope.Scope,TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],CallableType[builtins.function],None]*
_pytest.scope.Scope"_pytest.scope.Scopeµ
TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]ï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_pytest.scope._ScopeNameK
CallableType[builtins.function]&
builtins.function"builtins.function
None*†
paramsì
,Union[typing.Sequence[builtins.object],None]W
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence
None*.
unittest
builtins.bool"builtins.bool *Õ
ids¡
WUnion[builtins.tuple[Union[builtins.object,None]],CallableType[builtins.function],None]å
+builtins.tuple[Union[builtins.object,None]]M
Union[builtins.object,None]"
builtins.object"builtins.object
None"builtins.tupleK
CallableType[builtins.function]&
builtins.function"builtins.function
None *Ø
scope!_pytest.fixtures.FixtureDef.scope"µ
TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]ï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_pytest.scope._ScopeName*º
self±
:_pytest.fixtures.FixtureDef[_pytest.fixtures.FixtureValue]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"_pytest.fixtures.FixtureDef0:property`*›
addfinalizer(_pytest.fixtures.FixtureDef.addfinalizer"
None*º
self±
:_pytest.fixtures.FixtureDef[_pytest.fixtures.FixtureValue]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"_pytest.fixtures.FixtureDef*Z
	finalizerK
CallableType[builtins.function]&
builtins.function"builtins.function*æ
finish"_pytest.fixtures.FixtureDef.finish"
None*º
self±
:_pytest.fixtures.FixtureDef[_pytest.fixtures.FixtureValue]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"_pytest.fixtures.FixtureDef*G
request:
_pytest.fixtures.SubRequest"_pytest.fixtures.SubRequest*é
execute#_pytest.fixtures.FixtureDef.execute"V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object*º
self±
:_pytest.fixtures.FixtureDef[_pytest.fixtures.FixtureValue]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"_pytest.fixtures.FixtureDef*G
request:
_pytest.fixtures.SubRequest"_pytest.fixtures.SubRequest*ﬁ
	cache_key%_pytest.fixtures.FixtureDef.cache_key""
builtins.object"builtins.object*º
self±
:_pytest.fixtures.FixtureDef[_pytest.fixtures.FixtureValue]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"_pytest.fixtures.FixtureDef*G
request:
_pytest.fixtures.SubRequest"_pytest.fixtures.SubRequest*Ö
__repr__$_pytest.fixtures.FixtureDef.__repr__"
builtins.str"builtins.str*¥±
:_pytest.fixtures.FixtureDef[_pytest.fixtures.FixtureValue]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"_pytest.fixtures.FixtureDef8PrÇ
_fixturemanager+_pytest.fixtures.FixtureDef._fixturemanagerB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManagerrJ
baseid"_pytest.fixtures.FixtureDef.baseid
builtins.str"builtins.strrX
has_location(_pytest.fixtures.FixtureDef.has_location
builtins.bool"builtins.boolrÜ
func _pytest.fixtures.FixtureDef.func€
QTypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]‰
FUnion[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function"_pytest.fixtures._FixtureFuncrL
argname#_pytest.fixtures.FixtureDef.argname
builtins.str"builtins.strrX
_scope"_pytest.fixtures.FixtureDef._scope*
_pytest.scope.Scope"_pytest.scope.Scoper¬
params"_pytest.fixtures.FixtureDef.paramsì
,Union[typing.Sequence[builtins.object],None]W
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence
NonerÍ
ids_pytest.fixtures.FixtureDef.ids¡
WUnion[builtins.tuple[Union[builtins.object,None]],CallableType[builtins.function],None]å
+builtins.tuple[Union[builtins.object,None]]M
Union[builtins.object,None]"
builtins.object"builtins.object
None"builtins.tupleK
CallableType[builtins.function]&
builtins.function"builtins.function
Noner~
argnames$_pytest.fixtures.FixtureDef.argnamesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuplerP
unittest$_pytest.fixtures.FixtureDef.unittest
builtins.bool"builtins.boolrÓ
cached_result)_pytest.fixtures.FixtureDef.cached_result±
∞Union[Tuple[_pytest.fixtures.FixtureValue,builtins.object,None],Tuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]],None]√
9Tuple[_pytest.fixtures.FixtureValue,builtins.object,None]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"
builtins.object"builtins.object
None©
jTuple[None,builtins.object,Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]
None"
builtins.object"builtins.objectä
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType
Noner≈
_finalizers'_pytest.fixtures.FixtureDef._finalizerså
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.listñ:
FixtureFunctionMarker&_pytest.fixtures.FixtureFunctionMarker"builtins.object*ã
__call__/_pytest.fixtures.FixtureFunctionMarker.__call__"q
 _pytest.fixtures.FixtureFunctionK
CallableType[builtins.function]&
builtins.function"builtins.function*Z
selfP
&_pytest.fixtures.FixtureFunctionMarker"&_pytest.fixtures.FixtureFunctionMarker*
functionq
 _pytest.fixtures.FixtureFunctionK
CallableType[builtins.function]&
builtins.function"builtins.function*◊
__init__/_pytest.fixtures.FixtureFunctionMarker.__init__"
None*Z
selfP
&_pytest.fixtures.FixtureFunctionMarker"&_pytest.fixtures.FixtureFunctionMarker*º
scope∞
¶Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],CallableType[builtins.function]]µ
TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]ï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_pytest.scope._ScopeNameK
CallableType[builtins.function]&
builtins.function"builtins.function*†
paramsì
,Union[typing.Iterable[builtins.object],None]W
 typing.Iterable[builtins.object]"
builtins.object"builtins.object"typing.Iterable
None*-
autouse
builtins.bool"builtins.bool *–
idsƒ
XUnion[typing.Sequence[Union[builtins.object,None]],CallableType[builtins.function],None]é
,typing.Sequence[Union[builtins.object,None]]M
Union[builtins.object,None]"
builtins.object"builtins.object
None"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function
None *P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *∂
__lt__-_pytest.fixtures.FixtureFunctionMarker.__lt__"
builtins.bool"builtins.bool*m
selfc
*_pytest.fixtures.FixtureFunctionMarker._AT"
builtins.object"builtins.object"builtins.object*n
otherc
*_pytest.fixtures.FixtureFunctionMarker._AT"
builtins.object"builtins.object"builtins.object*∂
__le__-_pytest.fixtures.FixtureFunctionMarker.__le__"
builtins.bool"builtins.bool*m
selfc
*_pytest.fixtures.FixtureFunctionMarker._AT"
builtins.object"builtins.object"builtins.object*n
otherc
*_pytest.fixtures.FixtureFunctionMarker._AT"
builtins.object"builtins.object"builtins.object*∂
__gt__-_pytest.fixtures.FixtureFunctionMarker.__gt__"
builtins.bool"builtins.bool*m
selfc
*_pytest.fixtures.FixtureFunctionMarker._AT"
builtins.object"builtins.object"builtins.object*n
otherc
*_pytest.fixtures.FixtureFunctionMarker._AT"
builtins.object"builtins.object"builtins.object*∂
__ge__-_pytest.fixtures.FixtureFunctionMarker.__ge__"
builtins.bool"builtins.bool*m
selfc
*_pytest.fixtures.FixtureFunctionMarker._AT"
builtins.object"builtins.object"builtins.object*n
otherc
*_pytest.fixtures.FixtureFunctionMarker._AT"
builtins.object"builtins.object"builtins.object8rË
scope,_pytest.fixtures.FixtureFunctionMarker.scope∞
¶Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],CallableType[builtins.function]]µ
TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]ï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_pytest.scope._ScopeNameK
CallableType[builtins.function]&
builtins.function"builtins.functionr 
params-_pytest.fixtures.FixtureFunctionMarker.paramsê
+Union[builtins.tuple[builtins.object],None]U
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple
NonerY
autouse._pytest.fixtures.FixtureFunctionMarker.autouse
builtins.bool"builtins.boolrı
ids*_pytest.fixtures.FixtureFunctionMarker.ids¡
WUnion[builtins.tuple[Union[builtins.object,None]],CallableType[builtins.function],None]å
+builtins.tuple[Union[builtins.object,None]]M
Union[builtins.object,None]"
builtins.object"builtins.object
None"builtins.tupleK
CallableType[builtins.function]&
builtins.function"builtins.function
Nonery
name+_pytest.fixtures.FixtureFunctionMarker.nameD
Union[builtins.str,None]
builtins.str"builtins.str
NonerÔ
__attrs_attrs__6_pytest.fixtures.FixtureFunctionMarker.__attrs_attrs__£
®Tuple[attr.Attribute[Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],CallableType[builtins.function]]],attr.Attribute[Union[builtins.tuple[builtins.object],None]],attr.Attribute[builtins.bool],attr.Attribute[Union[builtins.tuple[Union[builtins.object,None]],CallableType[builtins.function],None]],attr.Attribute[Union[builtins.str,None]]]¸
∂attr.Attribute[Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],CallableType[builtins.function]]]∞
¶Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],CallableType[builtins.function]]µ
TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]ï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_pytest.scope._ScopeNameK
CallableType[builtins.function]&
builtins.function"builtins.function"attr.Attribute‡
;attr.Attribute[Union[builtins.tuple[builtins.object],None]]ê
+Union[builtins.tuple[builtins.object],None]U
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple
None"attr.AttributeO
attr.Attribute[builtins.bool]
builtins.bool"builtins.bool"attr.AttributeΩ
gattr.Attribute[Union[builtins.tuple[Union[builtins.object,None]],CallableType[builtins.function],None]]¡
WUnion[builtins.tuple[Union[builtins.object,None]],CallableType[builtins.function],None]å
+builtins.tuple[Union[builtins.object,None]]M
Union[builtins.object,None]"
builtins.object"builtins.object
None"builtins.tupleK
CallableType[builtins.function]&
builtins.function"builtins.function
None"attr.AttributeÄ
(attr.Attribute[Union[builtins.str,None]]D
Union[builtins.str,None]
builtins.str"builtins.str
None"attr.AttributeË)
FixtureManager_pytest.fixtures.FixtureManager"builtins.object*«
__init__(_pytest.fixtures.FixtureManager.__init__"
None*L
selfB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager*9
session,
_pytest.main.Session"_pytest.main.Session*™
_get_direct_parametrize_args<_pytest.fixtures.FixtureManager._get_direct_parametrize_args"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*L
selfB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager*2
node(
_pytest.nodes.Node"_pytest.nodes.Node*›
getfixtureinfo._pytest.fixtures.FixtureManager.getfixtureinfo"D
 _pytest.fixtures.FuncFixtureInfo" _pytest.fixtures.FuncFixtureInfo*L
selfB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager*2
node(
_pytest.nodes.Node"_pytest.nodes.Node*
func
Any*
cls
Any*.
funcargs
builtins.bool"builtins.bool *‹
pytest_plugin_registered8_pytest.fixtures.FixtureManager.pytest_plugin_registered"
None*L
selfB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager*.
plugin"
builtins.object"builtins.object*å
_getautousenames0_pytest.fixtures.FixtureManager._getautousenames"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*L
selfB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager*(
nodeid
builtins.str"builtins.str*–
getfixtureclosure1_pytest.fixtures.FixtureManager.getfixtureclosure"º
çTuple[builtins.tuple[builtins.str],builtins.list[builtins.str],builtins.dict[builtins.str,typing.Sequence[_pytest.fixtures.FixtureDef[Any]]]]L
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listç
Mbuiltins.dict[builtins.str,typing.Sequence[_pytest.fixtures.FixtureDef[Any]]]
builtins.str"builtins.stré
1typing.Sequence[_pytest.fixtures.FixtureDef[Any]]H
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"typing.Sequence"builtins.dict*L
selfB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager*^
fixturenamesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*8

parentnode(
_pytest.nodes.Node"_pytest.nodes.Node*a
ignore_argsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *Ë
pytest_generate_tests5_pytest.fixtures.FixtureManager.pytest_generate_tests"
None*L
selfB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager*@
metafunc2
_pytest.python.Metafunc"_pytest.python.Metafunc*ü
pytest_collection_modifyitems=_pytest.fixtures.FixtureManager.pytest_collection_modifyitems"
None*L
selfB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager*g
items\
!builtins.list[_pytest.nodes.Item](
_pytest.nodes.Item"_pytest.nodes.Item"builtins.list*˘
parsefactories._pytest.fixtures.FixtureManager.parsefactories"
None*L
selfB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager*
node_or_obj
Any*
nodeid
Any *.
unittest
builtins.bool"builtins.bool *¬
getfixturedefs._pytest.fixtures.FixtureManager.getfixturedefs"‹
=Union[typing.Sequence[_pytest.fixtures.FixtureDef[Any]],None]é
1typing.Sequence[_pytest.fixtures.FixtureDef[Any]]H
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"typing.Sequence
None*L
selfB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager*)
argname
builtins.str"builtins.str*(
nodeid
builtins.str"builtins.str*Ó
_matchfactories/_pytest.fixtures.FixtureManager._matchfactories"é
1typing.Iterator[_pytest.fixtures.FixtureDef[Any]]H
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"typing.Iterator*L
selfB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager*†
fixturedefsé
1typing.Iterable[_pytest.fixtures.FixtureDef[Any]]H
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"typing.Iterable*(
nodeid
builtins.str"builtins.strrâ
FixtureLookupError2_pytest.fixtures.FixtureManager.FixtureLookupError?
CallableType[builtins.type]
builtins.type"builtins.typerë
FixtureLookupErrorRepr6_pytest.fixtures.FixtureManager.FixtureLookupErrorRepr?
CallableType[builtins.type]
builtins.type"builtins.typer`
session'_pytest.fixtures.FixtureManager.session,
_pytest.main.Session"_pytest.main.Sessionr`
config&_pytest.fixtures.FixtureManager.config.
_pytest.config.Config"_pytest.config.ConfigrŒ
_arg2fixturedefs0_pytest.fixtures.FixtureManager._arg2fixturedefsá
Kbuiltins.dict[builtins.str,builtins.list[_pytest.fixtures.FixtureDef[Any]]]
builtins.str"builtins.strä
/builtins.list[_pytest.fixtures.FixtureDef[Any]]H
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"builtins.list"builtins.dictrì
_holderobjseen._pytest.fixtures.FixtureManager._holderobjseenQ
builtins.set[builtins.object]"
builtins.object"builtins.object"builtins.setrÅ
_nodeid_autousenames4_pytest.fixtures.FixtureManager._nodeid_autousenames≤
7builtins.dict[builtins.str,builtins.list[builtins.str]]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"builtins.dictÄ
pytest_sessionstart$_pytest.fixtures.pytest_sessionstart"
None*9
session,
_pytest.main.Session"_pytest.main.Session‘
get_scope_package"_pytest.fixtures.get_scope_package"
Any*
node
Any*

fixturedefo
,_pytest.fixtures.FixtureDef[builtins.object]"
builtins.object"builtins.object"_pytest.fixtures.FixtureDef¡
get_scope_node_pytest.fixtures.get_scope_node"¢
6Union[_pytest.nodes.Item,_pytest.nodes.Collector,None](
_pytest.nodes.Item"_pytest.nodes.Item2
_pytest.nodes.Collector"_pytest.nodes.Collector
None*2
node(
_pytest.nodes.Node"_pytest.nodes.Node*5
scope*
_pytest.scope.Scope"_pytest.scope.Scope∏
add_funcarg_pseudo_fixture_def/_pytest.fixtures.add_funcarg_pseudo_fixture_def"
None*A
	collector2
_pytest.nodes.Collector"_pytest.nodes.Collector*@
metafunc2
_pytest.python.Metafunc"_pytest.python.Metafunc*V
fixturemanagerB
_pytest.fixtures.FixtureManager"_pytest.fixtures.FixtureManager˜
getfixturemarker!_pytest.fixtures.getfixturemarker"í
2Union[_pytest.fixtures.FixtureFunctionMarker,None]P
&_pytest.fixtures.FixtureFunctionMarker"&_pytest.fixtures.FixtureFunctionMarker
None*+
obj"
builtins.object"builtins.object™
get_parametrized_fixture_keys._pytest.fixtures.get_parametrized_fixture_keys"Ì
;typing.Iterator[TypeAlias[builtins.tuple[builtins.object]]]ú
*TypeAlias[builtins.tuple[builtins.object]]U
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple"_pytest.fixtures._Key"typing.Iterator*2
item(
_pytest.nodes.Item"_pytest.nodes.Item*5
scope*
_pytest.scope.Scope"_pytest.scope.Scope˙
reorder_items_pytest.fixtures.reorder_items"\
!builtins.list[_pytest.nodes.Item](
_pytest.nodes.Item"_pytest.nodes.Item"builtins.list*k
items`
#typing.Sequence[_pytest.nodes.Item](
_pytest.nodes.Item"_pytest.nodes.Item"typing.Sequence≥

fix_cache_order _pytest.fixtures.fix_cache_order"
None*2
item(
_pytest.nodes.Item"_pytest.nodes.Item*Ó
argkeys_cache⁄
Ébuiltins.dict[_pytest.scope.Scope,builtins.dict[_pytest.nodes.Item,builtins.dict[TypeAlias[builtins.tuple[builtins.object]],None]]]*
_pytest.scope.Scope"_pytest.scope.Scopeñ
`builtins.dict[_pytest.nodes.Item,builtins.dict[TypeAlias[builtins.tuple[builtins.object]],None]](
_pytest.nodes.Item"_pytest.nodes.Item¯
>builtins.dict[TypeAlias[builtins.tuple[builtins.object]],None]ú
*TypeAlias[builtins.tuple[builtins.object]]U
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple"_pytest.fixtures._Key
None"builtins.dict"builtins.dict"builtins.dict*Œ
items_by_argkey∏
Çbuiltins.dict[_pytest.scope.Scope,builtins.dict[TypeAlias[builtins.tuple[builtins.object]],collections.deque[_pytest.nodes.Item]]]*
_pytest.scope.Scope"_pytest.scope.Scopeı
_builtins.dict[TypeAlias[builtins.tuple[builtins.object]],collections.deque[_pytest.nodes.Item]]ú
*TypeAlias[builtins.tuple[builtins.object]]U
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple"_pytest.fixtures._Keyd
%collections.deque[_pytest.nodes.Item](
_pytest.nodes.Item"_pytest.nodes.Item"collections.deque"builtins.dict"builtins.dictù
reorder_items_atscope&_pytest.fixtures.reorder_items_atscope"k
&builtins.dict[_pytest.nodes.Item,None](
_pytest.nodes.Item"_pytest.nodes.Item
None"builtins.dict*v
itemsk
&builtins.dict[_pytest.nodes.Item,None](
_pytest.nodes.Item"_pytest.nodes.Item
None"builtins.dict*Ó
argkeys_cache⁄
Ébuiltins.dict[_pytest.scope.Scope,builtins.dict[_pytest.nodes.Item,builtins.dict[TypeAlias[builtins.tuple[builtins.object]],None]]]*
_pytest.scope.Scope"_pytest.scope.Scopeñ
`builtins.dict[_pytest.nodes.Item,builtins.dict[TypeAlias[builtins.tuple[builtins.object]],None]](
_pytest.nodes.Item"_pytest.nodes.Item¯
>builtins.dict[TypeAlias[builtins.tuple[builtins.object]],None]ú
*TypeAlias[builtins.tuple[builtins.object]]U
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple"_pytest.fixtures._Key
None"builtins.dict"builtins.dict"builtins.dict*Œ
items_by_argkey∏
Çbuiltins.dict[_pytest.scope.Scope,builtins.dict[TypeAlias[builtins.tuple[builtins.object]],collections.deque[_pytest.nodes.Item]]]*
_pytest.scope.Scope"_pytest.scope.Scopeı
_builtins.dict[TypeAlias[builtins.tuple[builtins.object]],collections.deque[_pytest.nodes.Item]]ú
*TypeAlias[builtins.tuple[builtins.object]]U
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple"_pytest.fixtures._Keyd
%collections.deque[_pytest.nodes.Item](
_pytest.nodes.Item"_pytest.nodes.Item"collections.deque"builtins.dict"builtins.dict*5
scope*
_pytest.scope.Scope"_pytest.scope.Scope©
get_direct_param_fixture_func._pytest.fixtures.get_direct_param_fixture_func"
Any*O
requestB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequestÑ
fail_fixturefunc!_pytest.fixtures.fail_fixturefunc"
NoReturn
*
fixturefunc
Any*%
msg
builtins.str"builtins.strÂ
call_fixture_func"_pytest.fixtures.call_fixture_func"V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object*Ì
fixturefunc€
QTypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]‰
FUnion[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function"_pytest.fixtures._FixtureFunc*O
requestB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest*
kwargs
Anyx
_teardown_yield_fixture(_pytest.fixtures._teardown_yield_fixture"
None*
fixturefunc
Any*
it
Any¬
_eval_scope_callable%_pytest.fixtures._eval_scope_callable"µ
TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]ï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_pytest.scope._ScopeName*_
scope_callableK
CallableType[builtins.function]&
builtins.function"builtins.function*.
fixture_name
builtins.str"builtins.str*:
config.
_pytest.config.Config"_pytest.config.Configπ
resolve_fixture_function)_pytest.fixtures.resolve_fixture_function"€
QTypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]‰
FUnion[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function"_pytest.fixtures._FixtureFunc*¬

fixturedef±
:_pytest.fixtures.FixtureDef[_pytest.fixtures.FixtureValue]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"_pytest.fixtures.FixtureDef*O
requestB
_pytest.fixtures.FixtureRequest"_pytest.fixtures.FixtureRequest£
pytest_fixture_setup%_pytest.fixtures.pytest_fixture_setup"V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object*¬

fixturedef±
:_pytest.fixtures.FixtureDef[_pytest.fixtures.FixtureValue]V
_pytest.fixtures.FixtureValue"
builtins.object"builtins.object"builtins.object"_pytest.fixtures.FixtureDef*G
request:
_pytest.fixtures.SubRequest"_pytest.fixtures.SubRequest‘
_ensure_immutable_ids&_pytest.fixtures._ensure_immutable_ids"¡
WUnion[builtins.tuple[Union[builtins.object,None]],CallableType[builtins.function],None]å
+builtins.tuple[Union[builtins.object,None]]M
Union[builtins.object,None]"
builtins.object"builtins.object
None"builtins.tupleK
CallableType[builtins.function]&
builtins.function"builtins.function
None*Œ
idsƒ
XUnion[typing.Sequence[Union[builtins.object,None]],CallableType[builtins.function],None]é
,typing.Sequence[Union[builtins.object,None]]M
Union[builtins.object,None]"
builtins.object"builtins.object
None"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function
NoneÌ
_params_converter"_pytest.fixtures._params_converter"ê
+Union[builtins.tuple[builtins.object],None]U
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple
None*†
paramsì
,Union[typing.Iterable[builtins.object],None]W
 typing.Iterable[builtins.object]"
builtins.object"builtins.object"typing.Iterable
None…
-wrap_function_to_error_out_if_called_directly>_pytest.fixtures.wrap_function_to_error_out_if_called_directly"q
 _pytest.fixtures.FixtureFunctionK
CallableType[builtins.function]&
builtins.function"builtins.function*
functionq
 _pytest.fixtures.FixtureFunctionK
CallableType[builtins.function]&
builtins.function"builtins.function*d
fixture_markerP
&_pytest.fixtures.FixtureFunctionMarker"&_pytest.fixtures.FixtureFunctionMarkerí
yield_fixture_pytest.fixtures.yield_fixture*
fixture_function *
args*
scope *
params *
autouse *	
ids *

name ë
pytest_addoption!_pytest.fixtures.pytest_addoption"
None*P
parserD
 _pytest.config.argparsing.Parser" _pytest.config.argparsing.Parser"
fixture_pytest.fixtures.fixtureË
fixture_pytest.fixtures.fixture"q
 _pytest.fixtures.FixtureFunctionK
CallableType[builtins.function]&
builtins.function"builtins.function*á
fixture_functionq
 _pytest.fixtures.FixtureFunctionK
CallableType[builtins.function]&
builtins.function"builtins.function*æ
scope∞
¶Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],CallableType[builtins.function]]µ
TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]ï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_pytest.scope._ScopeNameK
CallableType[builtins.function]&
builtins.function"builtins.function *¢
paramsì
,Union[typing.Iterable[builtins.object],None]W
 typing.Iterable[builtins.object]"
builtins.object"builtins.object"typing.Iterable
None *-
autouse
builtins.bool"builtins.bool *–
idsƒ
XUnion[typing.Sequence[Union[builtins.object,None]],CallableType[builtins.function],None]é
,typing.Sequence[Union[builtins.object,None]]M
Union[builtins.object,None]"
builtins.object"builtins.object
None"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function
None *P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadXﬂ
fixture_pytest.fixtures.fixture"P
&_pytest.fixtures.FixtureFunctionMarker"&_pytest.fixtures.FixtureFunctionMarker* 
fixture_function
None *æ
scope∞
¶Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],CallableType[builtins.function]]µ
TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]ï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_pytest.scope._ScopeNameK
CallableType[builtins.function]&
builtins.function"builtins.function *¢
paramsì
,Union[typing.Iterable[builtins.object],None]W
 typing.Iterable[builtins.object]"
builtins.object"builtins.object"typing.Iterable
None *-
autouse
builtins.bool"builtins.bool *–
idsƒ
XUnion[typing.Sequence[Union[builtins.object,None]],CallableType[builtins.function],None]é
,typing.Sequence[Union[builtins.object,None]]M
Union[builtins.object,None]"
builtins.object"builtins.object
None"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function
None *P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX*å
__annotations__ _pytest.fixtures.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
name2pseudofixturedef_key*_pytest.fixtures.name2pseudofixturedef_key¶
T_pytest.stash.StashKey[builtins.dict[builtins.str,_pytest.fixtures.FixtureDef[Any]]]µ
<builtins.dict[builtins.str,_pytest.fixtures.FixtureDef[Any]]
builtins.str"builtins.strH
 _pytest.fixtures.FixtureDef[Any]
Any"_pytest.fixtures.FixtureDef"builtins.dict"_pytest.stash.StashKey