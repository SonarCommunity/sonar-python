
%torch.distributions.negative_binomialý
NegativeBinomial6torch.distributions.negative_binomial.NegativeBinomial"-torch.distributions.distribution.Distribution*–
__init__?torch.distributions.negative_binomial.NegativeBinomial.__init__*
self*
total_count*
probs *
logits *
validate_args *s
expand=torch.distributions.negative_binomial.NegativeBinomial.expand*
self*
batch_shape*
	_instance *c
_new;torch.distributions.negative_binomial.NegativeBinomial._new*
self*
args*

kwargs*[
mean;torch.distributions.negative_binomial.NegativeBinomial.mean*
self0:property`*[
mode;torch.distributions.negative_binomial.NegativeBinomial.mode*
self0:property`*c
variance?torch.distributions.negative_binomial.NegativeBinomial.variance*
self0:property`*b
logits=torch.distributions.negative_binomial.NegativeBinomial.logits*
self0:lazy_property*`
probs<torch.distributions.negative_binomial.NegativeBinomial.probs*
self0:lazy_property*i
param_shapeBtorch.distributions.negative_binomial.NegativeBinomial.param_shape*
self0:property`*b
_gamma=torch.distributions.negative_binomial.NegativeBinomial._gamma*
self0:lazy_property*e
sample=torch.distributions.negative_binomial.NegativeBinomial.sample*
self*
sample_shape *`
log_prob?torch.distributions.negative_binomial.NegativeBinomial.log_prob*
self*	
valuer«
arg_constraintsFtorch.distributions.negative_binomial.NegativeBinomial.arg_constraintsÏ
Fbuiltins.dict[builtins.str,torch.distributions.constraints.Constraint]
builtins.str"builtins.strX
*torch.distributions.constraints.Constraint"*torch.distributions.constraints.Constraint"builtins.dictrµ
support>torch.distributions.negative_binomial.NegativeBinomial.supportj
3torch.distributions.constraints._IntegerGreaterThan"3torch.distributions.constraints._IntegerGreaterThanrZ
total_countBtorch.distributions.negative_binomial.NegativeBinomial.total_count
AnyrP
_param=torch.distributions.negative_binomial.NegativeBinomial._param
Any*¡
__annotations__5torch.distributions.negative_binomial.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
Ftorch.nn.functional *„
__all__-torch.distributions.negative_binomial.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list