
$torch._inductor.codegen.multi_kernel’
MultiKernelState5torch._inductor.codegen.multi_kernel.MultiKernelState"builtins.object*T
__init__>torch._inductor.codegen.multi_kernel.MultiKernelState.__init__*
self*k
define_kernelCtorch._inductor.codegen.multi_kernel.MultiKernelState.define_kernel*
self*
kernelsrs
subkernel_to_kernel_nameNtorch._inductor.codegen.multi_kernel.MultiKernelState.subkernel_to_kernel_name
AnyÎ	
MultiKernel0torch._inductor.codegen.multi_kernel.MultiKernel"builtins.object*\
__init__9torch._inductor.codegen.multi_kernel.MultiKernel.__init__*
self*
kernels*f
call_kernel<torch._inductor.codegen.multi_kernel.MultiKernel.call_kernel*
self*
kernel_name*a
codegen_nan_checkBtorch._inductor.codegen.multi_kernel.MultiKernel.codegen_nan_check*
self*k
removed_buffers@torch._inductor.codegen.multi_kernel.MultiKernel.removed_buffers*
self0:property`*q
inplaced_to_removeCtorch._inductor.codegen.multi_kernel.MultiKernel.inplaced_to_remove*
self0:property`*ˆ
inplace_update_buffersGtorch._inductor.codegen.multi_kernel.MultiKernel.inplace_update_buffers*
self0:property:cache_on_self`*û
warn_mix_layout@torch._inductor.codegen.multi_kernel.MultiKernel.warn_mix_layout"
Any*n
selfd
0torch._inductor.codegen.multi_kernel.MultiKernel"0torch._inductor.codegen.multi_kernel.MultiKernel*-
kernel_name
builtins.str"builtins.strrL
kernels8torch._inductor.codegen.multi_kernel.MultiKernel.kernels
AnyrT
kernel_name<torch._inductor.codegen.multi_kernel.MultiKernel.kernel_name
AnyrF
args5torch._inductor.codegen.multi_kernel.MultiKernel.args
Anyì
MultiKernelCall4torch._inductor.codegen.multi_kernel.MultiKernelCall"builtins.object*…
__init__=torch._inductor.codegen.multi_kernel.MultiKernelCall.__init__*
self*
multi_kernel_name*
kernels*
src_code*a
cache_file_pathDtorch._inductor.codegen.multi_kernel.MultiKernelCall.cache_file_path*
self*W

load_cache?torch._inductor.codegen.multi_kernel.MultiKernelCall.load_cache*
self*Y
store_cache@torch._inductor.codegen.multi_kernel.MultiKernelCall.store_cache*
self*_
kernels<torch._inductor.codegen.multi_kernel.MultiKernelCall.kernels*
self0:property`*_
run8torch._inductor.codegen.multi_kernel.MultiKernelCall.run*
self*
args*

kwargs*‡
benchmark_sub_kernelsJtorch._inductor.codegen.multi_kernel.MultiKernelCall.benchmark_sub_kernels*
kernel_calls0:staticmethodh*ˆ
record_choiceBtorch._inductor.codegen.multi_kernel.MultiKernelCall.record_choice*
multi_kernel_name*

choice0:staticmethodh*|
lookup_choiceBtorch._inductor.codegen.multi_kernel.MultiKernelCall.lookup_choice*
multi_kernel_name0:staticmethodh*…
run_with_argless_kernelsMtorch._inductor.codegen.multi_kernel.MultiKernelCall.run_with_argless_kernels*
self*
kernel_callsrR
_kernels=torch._inductor.codegen.multi_kernel.MultiKernelCall._kernels
Anyrd
multi_kernel_nameFtorch._inductor.codegen.multi_kernel.MultiKernelCall.multi_kernel_name
AnyrJ
_run9torch._inductor.codegen.multi_kernel.MultiKernelCall._run
Anyr\
disable_cacheBtorch._inductor.codegen.multi_kernel.MultiKernelCall.disable_cache
Anyr\
picked_kernelBtorch._inductor.codegen.multi_kernel.MultiKernelCall.picked_kernel
AnyrT
	_recorded>torch._inductor.codegen.multi_kernel.MultiKernelCall._recorded
AnyY
get_kernel_argdefs7torch._inductor.codegen.multi_kernel.get_kernel_argdefs*

kernelh
_get_all_args2torch._inductor.codegen.multi_kernel._get_all_args*
	args_list*
arg_types_list b
get_all_kernel_argdefs;torch._inductor.codegen.multi_kernel.get_all_kernel_argdefs*
kernelss
get_all_call_args6torch._inductor.codegen.multi_kernel.get_all_call_args*
call_args_list*
arg_types_listW
get_numel_argdefs6torch._inductor.codegen.multi_kernel.get_numel_argdefs*

kernel* 
__annotations__4torch._inductor.codegen.multi_kernel.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Q
log(torch._inductor.codegen.multi_kernel.log 
logging.Logger"logging.Logger