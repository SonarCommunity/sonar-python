
idna=
IDNABidiErroridna.core.IDNABidiError"idna.core.IDNAError7
	IDNAErroridna.core.IDNAError"builtins.UnicodeErrorC
InvalidCodepointidna.core.InvalidCodepoint"idna.core.IDNAErrorQ
InvalidCodepointContext!idna.core.InvalidCodepointContext"idna.core.IDNAErrore
alabelidna.core.alabel" 
builtins.bytes"builtins.bytes*'
label
builtins.str"builtins.strœ

check_bidiidna.core.check_bidi"
builtins.bool"builtins.bool*'
label
builtins.str"builtins.str*/
	check_ltr
builtins.bool"builtins.bool u
check_hyphen_okidna.core.check_hyphen_ok"
builtins.bool"builtins.bool*'
label
builtins.str"builtins.strƒ
check_initial_combiner idna.core.check_initial_combiner"
builtins.bool"builtins.bool*'
label
builtins.str"builtins.strà
check_labelidna.core.check_label"
None*¯
label£
5Union[builtins.str,builtins.bytes,builtins.bytearray]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearrayS
	check_nfcidna.core.check_nfc"
None*'
label
builtins.str"builtins.stró
decodeidna.core.decode"
builtins.str"builtins.str*«
s£
5Union[builtins.str,builtins.bytes,builtins.bytearray]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray*,
strict
builtins.bool"builtins.bool *+
uts46
builtins.bool"builtins.bool *0

std3_rules
builtins.bool"builtins.bool «
encodeidna.core.encode" 
builtins.bytes"builtins.bytes*«
s£
5Union[builtins.str,builtins.bytes,builtins.bytearray]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray*,
strict
builtins.bool"builtins.bool *+
uts46
builtins.bool"builtins.bool *0

std3_rules
builtins.bool"builtins.bool *2
transitional
builtins.bool"builtins.bool ê
ulabelidna.core.ulabel"
builtins.str"builtins.str*¯
label£
5Union[builtins.str,builtins.bytes,builtins.bytearray]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearrayÒ
uts46_remapidna.core.uts46_remap"
builtins.str"builtins.str*(
domain
builtins.str"builtins.str*0

std3_rules
builtins.bool"builtins.bool *2
transitional
builtins.bool"builtins.bool š
valid_contextjidna.core.valid_contextj"
builtins.bool"builtins.bool*'
label
builtins.str"builtins.str*%
pos
builtins.int"builtins.intË
valid_contextoidna.core.valid_contexto"
builtins.bool"builtins.bool*'
label
builtins.str"builtins.str*%
pos
builtins.int"builtins.int*/
	exception
builtins.bool"builtins.bool Å
valid_label_lengthidna.core.valid_label_length"
builtins.bool"builtins.bool*q
labelf
"Union[builtins.bytes,builtins.str] 
builtins.bytes"builtins.bytes
builtins.str"builtins.strù
valid_string_lengthidna.core.valid_string_length"
builtins.bool"builtins.bool*q
labelf
"Union[builtins.bytes,builtins.str] 
builtins.bytes"builtins.bytes
builtins.str"builtins.str*0
trailing_dot
builtins.bool"builtins.bool×
intranges_contain idna.intranges.intranges_contain"
builtins.bool"builtins.bool*&
int_
builtins.int"builtins.int*X
rangesL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*e
__path__idna.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*€
__annotations__idna.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*J
__version__idna.package_data.__version__
builtins.str"builtins.str*c
__all__idna.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list