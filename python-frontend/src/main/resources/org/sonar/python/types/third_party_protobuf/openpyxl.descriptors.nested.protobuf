
openpyxl.descriptors.nestedó+
Nested"openpyxl.descriptors.nested.Nested"$openpyxl.descriptors.base.Descriptor*£	
__init__+openpyxl.descriptors.nested.Nested.__init__"
None*»
selfΩ
@openpyxl.descriptors.nested.Nested[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object""openpyxl.descriptors.nested.Nested*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*0

allow_none
builtins.bool"builtins.bool *0
nested"
builtins.object"builtins.object *U
	namespaceD
Union[builtins.str,None]
builtins.str"builtins.str
None z36z37z38z39z310z311z312z313*“
__get__*openpyxl.descriptors.nested.Nested.__get__"U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object*»
selfΩ
@openpyxl.descriptors.nested.Nested[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object""openpyxl.descriptors.nested.Nested*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*P
clsG
Union[builtins.type,None]
builtins.type"builtins.type
Nonez36z37z38z39z310z311z312z313*Ë
__set__*openpyxl.descriptors.nested.Nested.__set__"
None*»
selfΩ
@openpyxl.descriptors.nested.Nested[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object""openpyxl.descriptors.nested.Nested*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*≤
value¶
qUnion[openpyxl.xml._functions_overloads._HasTagAndGet[openpyxl.descriptors.base._T],openpyxl.descriptors.base._T]◊
Mopenpyxl.xml._functions_overloads._HasTagAndGet[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"/openpyxl.xml._functions_overloads._HasTagAndGetU
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.objectz36z37z38z39z310z311z312z313*ÿ
	from_tree,openpyxl.descriptors.nested.Nested.from_tree"U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object*»
selfΩ
@openpyxl.descriptors.nested.Nested[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object""openpyxl.descriptors.nested.Nested*÷
nodeÀ
Gopenpyxl.xml._functions_overloads._HasGet[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object")openpyxl.xml._functions_overloads._HasGetz36z37z38z39z310z311z312z3132ı
to_tree*openpyxl.descriptors.nested.Nested.to_treeó
to_tree*openpyxl.descriptors.nested.Nested.to_tree"
None*»
selfΩ
@openpyxl.descriptors.nested.Nested[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object""openpyxl.descriptors.nested.Nested*1
tagname"
builtins.object"builtins.object *
value
None *3
	namespace"
builtins.object"builtins.object 0:overloadXˇ
to_tree*openpyxl.descriptors.nested.Nested.to_tree">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*»
selfΩ
@openpyxl.descriptors.nested.Nested[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object""openpyxl.descriptors.nested.Nested*)
tagname
builtins.str"builtins.str*-
value"
builtins.object"builtins.object*U
	namespaceD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX"36"37"38"39"310"311"312"313Pj36j37j38j39j310j311j312j313rD
nested)openpyxl.descriptors.nested.Nested.nested
Any*36*37rã
nested)openpyxl.descriptors.nested.Nested.nested:
Literal[builtins.bool]	
builtins.bool"builtins.bool*38*39*310*311*312*313r{
	attribute,openpyxl.descriptors.nested.Nested.attribute
builtins.str"builtins.str*36*37*38*39*310*311*312*313rÎ
expected_type0openpyxl.descriptors.nested.Nested.expected_typeÉ
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type*36*37*38*39*310*311*312*313r

allow_none-openpyxl.descriptors.nested.Nested.allow_none
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313r£
	namespace,openpyxl.descriptors.nested.Nested.namespaceD
Union[builtins.str,None]
builtins.str"builtins.str
None*36*37*38*39*310*311*312*313ÀW
NestedValue'openpyxl.descriptors.nested.NestedValue""openpyxl.descriptors.nested.Nested"%openpyxl.descriptors.base.Convertible2Ó
__init__0openpyxl.descriptors.nested.NestedValue.__init__ë
__init__0openpyxl.descriptors.nested.NestedValue.__init__"
None*j
self`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*

allow_none
Any0:overloadXì
__init__0openpyxl.descriptors.nested.NestedValue.__init__"
None*j
self`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*

allow_none
Any 0:overloadX"36"372Ë
__init__0openpyxl.descriptors.nested.NestedValue.__init__ƒ
__init__0openpyxl.descriptors.nested.NestedValue.__init__"
None*j
self`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX∆
__init__0openpyxl.descriptors.nested.NestedValue.__init__"
None*j
self`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadX"38"39"310"311"312"3132Â

__get__/openpyxl.descriptors.nested.NestedValue.__get__ù
__get__/openpyxl.descriptors.nested.NestedValue.__get__"ç
(Union[openpyxl.descriptors.base._T,None]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object
None*j
self`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*R
clsG
Union[builtins.type,None]
builtins.type"builtins.type
None 0:overloadX‰
__get__/openpyxl.descriptors.nested.NestedValue.__get__"U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object*j
self`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*R
clsG
Union[builtins.type,None]
builtins.type"builtins.type
None 0:overloadX"36"37"38"39"310"311"312"3132›,
__set__/openpyxl.descriptors.nested.NestedValue.__set__º
__set__/openpyxl.descriptors.nested.NestedValue.__set__"
None*≥
self®
`Union[openpyxl.descriptors.nested.NestedValue[Any],openpyxl.descriptors.nested.NestedValue[Any]]`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*-
value"
builtins.object"builtins.object0:overloadXé
__set__/openpyxl.descriptors.nested.NestedValue.__set__"
None*j
self`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*»
valueº
~Union[openpyxl.xml._functions_overloads._HasTagAndGet[TypeAlias[Union[builtins.bool,builtins.str,builtins.int,None]]],Unknown]µ
oopenpyxl.xml._functions_overloads._HasTagAndGet[TypeAlias[Union[builtins.bool,builtins.str,builtins.int,None]]]ê
>TypeAlias[Union[builtins.bool,builtins.str,builtins.int,None]]ù
3Union[builtins.bool,builtins.str,builtins.int,None]
builtins.bool"builtins.bool
builtins.str"builtins.str
builtins.int"builtins.int
None",openpyxl.descriptors.base._ConvertibleToBool"/openpyxl.xml._functions_overloads._HasTagAndGet 0:overloadX◊
__set__/openpyxl.descriptors.nested.NestedValue.__set__"
None*j
self`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*ë
valueÖ
PUnion[openpyxl.xml._functions_overloads._HasTagAndGet[Union[Any,None]],Any,None]õ
@openpyxl.xml._functions_overloads._HasTagAndGet[Union[Any,None]]&
Union[Any,None]
Any
None"/openpyxl.xml._functions_overloads._HasTagAndGet
Any
None0:overloadXê
__set__/openpyxl.descriptors.nested.NestedValue.__set__"
None*j
self`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict* 
valueæ
?Union[openpyxl.xml._functions_overloads._HasTagAndGet[Any],Any]p
4openpyxl.xml._functions_overloads._HasTagAndGet[Any]
Any"/openpyxl.xml._functions_overloads._HasTagAndGet
Any0:overloadX◊
__set__/openpyxl.descriptors.nested.NestedValue.__set__"
None*j
self`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*ë
valueÖ
PUnion[openpyxl.xml._functions_overloads._HasTagAndGet[Union[Any,None]],Any,None]õ
@openpyxl.xml._functions_overloads._HasTagAndGet[Union[Any,None]]&
Union[Any,None]
Any
None"/openpyxl.xml._functions_overloads._HasTagAndGet
Any
None0:overloadXê
__set__/openpyxl.descriptors.nested.NestedValue.__set__"
None*j
self`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict* 
valueæ
?Union[openpyxl.xml._functions_overloads._HasTagAndGet[Any],Any]p
4openpyxl.xml._functions_overloads._HasTagAndGet[Any]
Any"/openpyxl.xml._functions_overloads._HasTagAndGet
Any0:overloadX“
__set__/openpyxl.descriptors.nested.NestedValue.__set__"
None*j
self`
,openpyxl.descriptors.nested.NestedValue[Any]
Any"'openpyxl.descriptors.nested.NestedValue*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*å
valueÄ
üUnion[openpyxl.xml._functions_overloads._HasTagAndGet[Union[openpyxl.descriptors.base._T,builtins.int,Any]],openpyxl.descriptors.base._T,builtins.int,Any,None]—
eopenpyxl.xml._functions_overloads._HasTagAndGet[Union[openpyxl.descriptors.base._T,builtins.int,Any]]∂
4Union[openpyxl.descriptors.base._T,builtins.int,Any]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object
builtins.int"builtins.int
Any"/openpyxl.xml._functions_overloads._HasTagAndGetU
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object
builtins.int"builtins.int
Any
None0:overloadX"36"37"38"39"310"311"312"313Pj36j37j38j39j310j311j312j313˘K

NestedText&openpyxl.descriptors.nested.NestedText"'openpyxl.descriptors.nested.NestedValue*∂
	from_tree0openpyxl.descriptors.nested.NestedText.from_tree"
builtins.str"builtins.str*–
self≈
Dopenpyxl.descriptors.nested.NestedText[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"&openpyxl.descriptors.nested.NestedText*b
nodeX
*openpyxl.xml._functions_overloads._HasText"*openpyxl.xml._functions_overloads._HasTextz36z37z38z39z310z311z312z3132Á
__init__/openpyxl.descriptors.nested.NestedText.__init__é
__init__/openpyxl.descriptors.nested.NestedText.__init__"
None*h
self^
+openpyxl.descriptors.nested.NestedText[Any]
Any"&openpyxl.descriptors.nested.NestedText*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*

allow_none
Any0:overloadXê
__init__/openpyxl.descriptors.nested.NestedText.__init__"
None*h
self^
+openpyxl.descriptors.nested.NestedText[Any]
Any"&openpyxl.descriptors.nested.NestedText*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*

allow_none
Any 0:overloadX"36"372·
__init__/openpyxl.descriptors.nested.NestedText.__init__¡
__init__/openpyxl.descriptors.nested.NestedText.__init__"
None*h
self^
+openpyxl.descriptors.nested.NestedText[Any]
Any"&openpyxl.descriptors.nested.NestedText*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX√
__init__/openpyxl.descriptors.nested.NestedText.__init__"
None*h
self^
+openpyxl.descriptors.nested.NestedText[Any]
Any"&openpyxl.descriptors.nested.NestedText*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadX"38"39"310"311"312"3132ﬁ

__get__.openpyxl.descriptors.nested.NestedText.__get__ö
__get__.openpyxl.descriptors.nested.NestedText.__get__"ç
(Union[openpyxl.descriptors.base._T,None]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object
None*h
self^
+openpyxl.descriptors.nested.NestedText[Any]
Any"&openpyxl.descriptors.nested.NestedText*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*R
clsG
Union[builtins.type,None]
builtins.type"builtins.type
None 0:overloadX·
__get__.openpyxl.descriptors.nested.NestedText.__get__"U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object*h
self^
+openpyxl.descriptors.nested.NestedText[Any]
Any"&openpyxl.descriptors.nested.NestedText*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*R
clsG
Union[builtins.type,None]
builtins.type"builtins.type
None 0:overloadX"36"37"38"39"310"311"312"3132˜
__set__.openpyxl.descriptors.nested.NestedText.__set__Ô
__set__.openpyxl.descriptors.nested.NestedText.__set__"
None*h
self^
+openpyxl.descriptors.nested.NestedText[Any]
Any"&openpyxl.descriptors.nested.NestedText*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*-
value"
builtins.object"builtins.object0:overloadXÛ
__set__.openpyxl.descriptors.nested.NestedText.__set__"
None*h
self^
+openpyxl.descriptors.nested.NestedText[Any]
Any"&openpyxl.descriptors.nested.NestedText*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*1
value&
Union[Any,None]
Any
None0:overloadX‘
__set__.openpyxl.descriptors.nested.NestedText.__set__"
None*h
self^
+openpyxl.descriptors.nested.NestedText[Any]
Any"&openpyxl.descriptors.nested.NestedText*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*
value
Any0:overloadX¡
__set__.openpyxl.descriptors.nested.NestedText.__set__"
NoReturn
*h
self^
+openpyxl.descriptors.nested.NestedText[Any]
Any"&openpyxl.descriptors.nested.NestedText*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*{
valuep
4openpyxl.xml._functions_overloads._HasTagAndGet[Any]
Any"/openpyxl.xml._functions_overloads._HasTagAndGet0:overloadXî
__set__.openpyxl.descriptors.nested.NestedText.__set__"
None*h
self^
+openpyxl.descriptors.nested.NestedText[Any]
Any"&openpyxl.descriptors.nested.NestedText*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*—
value≈
9Union[openpyxl.descriptors.base._T,builtins.int,Any,None]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object
builtins.int"builtins.int
Any
None0:overloadX"36"37"38"39"310"311"312"3132ë
to_tree.openpyxl.descriptors.nested.NestedText.to_tree£
to_tree.openpyxl.descriptors.nested.NestedText.to_tree"
None*–
self≈
Dopenpyxl.descriptors.nested.NestedText[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"&openpyxl.descriptors.nested.NestedText*1
tagname"
builtins.object"builtins.object *
value
None *3
	namespace"
builtins.object"builtins.object 0:overloadXã
to_tree.openpyxl.descriptors.nested.NestedText.to_tree">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*–
self≈
Dopenpyxl.descriptors.nested.NestedText[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"&openpyxl.descriptors.nested.NestedText*)
tagname
builtins.str"builtins.str*-
value"
builtins.object"builtins.object*U
	namespaceD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX"36"37"38"39"310"311"312"313Pj36j37j38j39j310j311j312j313∞
NestedFloat'openpyxl.descriptors.nested.NestedFloat"'openpyxl.descriptors.nested.NestedValue"openpyxl.descriptors.base.Float2Ü
__init__0openpyxl.descriptors.nested.NestedFloat.__init__ù
__init__0openpyxl.descriptors.nested.NestedFloat.__init__"
None*\
selfR
'openpyxl.descriptors.nested.NestedFloat"'openpyxl.descriptors.nested.NestedFloat*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *

allow_none
Any0:overloadXü
__init__0openpyxl.descriptors.nested.NestedFloat.__init__"
None*\
selfR
'openpyxl.descriptors.nested.NestedFloat"'openpyxl.descriptors.nested.NestedFloat*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *

allow_none
Any 0:overloadX"36"372Ä
__init__0openpyxl.descriptors.nested.NestedFloat.__init__–
__init__0openpyxl.descriptors.nested.NestedFloat.__init__"
None*\
selfR
'openpyxl.descriptors.nested.NestedFloat"'openpyxl.descriptors.nested.NestedFloat*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX“
__init__0openpyxl.descriptors.nested.NestedFloat.__init__"
None*\
selfR
'openpyxl.descriptors.nested.NestedFloat"'openpyxl.descriptors.nested.NestedFloat*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadX"38"39"310"311"312"313j36j37j38j39j310j311j312j313“
NestedInteger)openpyxl.descriptors.nested.NestedInteger"'openpyxl.descriptors.nested.NestedValue"!openpyxl.descriptors.base.Integer2î
__init__2openpyxl.descriptors.nested.NestedInteger.__init__£
__init__2openpyxl.descriptors.nested.NestedInteger.__init__"
None*`
selfV
)openpyxl.descriptors.nested.NestedInteger")openpyxl.descriptors.nested.NestedInteger*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *

allow_none
Any0:overloadX•
__init__2openpyxl.descriptors.nested.NestedInteger.__init__"
None*`
selfV
)openpyxl.descriptors.nested.NestedInteger")openpyxl.descriptors.nested.NestedInteger*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *

allow_none
Any 0:overloadX"36"372é
__init__2openpyxl.descriptors.nested.NestedInteger.__init__÷
__init__2openpyxl.descriptors.nested.NestedInteger.__init__"
None*`
selfV
)openpyxl.descriptors.nested.NestedInteger")openpyxl.descriptors.nested.NestedInteger*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadXÿ
__init__2openpyxl.descriptors.nested.NestedInteger.__init__"
None*`
selfV
)openpyxl.descriptors.nested.NestedInteger")openpyxl.descriptors.nested.NestedInteger*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadX"38"39"310"311"312"313j36j37j38j39j310j311j312j313¡
NestedString(openpyxl.descriptors.nested.NestedString"'openpyxl.descriptors.nested.NestedValue" openpyxl.descriptors.base.String2ç
__init__1openpyxl.descriptors.nested.NestedString.__init__†
__init__1openpyxl.descriptors.nested.NestedString.__init__"
None*^
selfT
(openpyxl.descriptors.nested.NestedString"(openpyxl.descriptors.nested.NestedString*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *

allow_none
Any0:overloadX¢
__init__1openpyxl.descriptors.nested.NestedString.__init__"
None*^
selfT
(openpyxl.descriptors.nested.NestedString"(openpyxl.descriptors.nested.NestedString*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *

allow_none
Any 0:overloadX"36"372á
__init__1openpyxl.descriptors.nested.NestedString.__init__”
__init__1openpyxl.descriptors.nested.NestedString.__init__"
None*^
selfT
(openpyxl.descriptors.nested.NestedString"(openpyxl.descriptors.nested.NestedString*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX’
__init__1openpyxl.descriptors.nested.NestedString.__init__"
None*^
selfT
(openpyxl.descriptors.nested.NestedString"(openpyxl.descriptors.nested.NestedString*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadX"38"39"310"311"312"313j36j37j38j39j310j311j312j313®

NestedBool&openpyxl.descriptors.nested.NestedBool"'openpyxl.descriptors.nested.NestedValue"openpyxl.descriptors.base.Bool*ì
__set__.openpyxl.descriptors.nested.NestedBool.__set__"
None*Z
selfP
&openpyxl.descriptors.nested.NestedBool"&openpyxl.descriptors.nested.NestedBool*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*»
valueº
~Union[openpyxl.xml._functions_overloads._HasTagAndGet[TypeAlias[Union[builtins.bool,builtins.str,builtins.int,None]]],Unknown]µ
oopenpyxl.xml._functions_overloads._HasTagAndGet[TypeAlias[Union[builtins.bool,builtins.str,builtins.int,None]]]ê
>TypeAlias[Union[builtins.bool,builtins.str,builtins.int,None]]ù
3Union[builtins.bool,builtins.str,builtins.int,None]
builtins.bool"builtins.bool
builtins.str"builtins.str
builtins.int"builtins.int
None",openpyxl.descriptors.base._ConvertibleToBool"/openpyxl.xml._functions_overloads._HasTagAndGet z36z37z38z39z310z311z312z313*
	from_tree0openpyxl.descriptors.nested.NestedBool.from_tree"
builtins.bool"builtins.bool*Z
selfP
&openpyxl.descriptors.nested.NestedBool"&openpyxl.descriptors.nested.NestedBool*ê
nodeÖ
8openpyxl.xml._functions_overloads._HasGet[builtins.bool]
builtins.bool"builtins.bool")openpyxl.xml._functions_overloads._HasGetz36z37z38z39z310z311z312z3132ˇ
__init__/openpyxl.descriptors.nested.NestedBool.__init__ö
__init__/openpyxl.descriptors.nested.NestedBool.__init__"
None*Z
selfP
&openpyxl.descriptors.nested.NestedBool"&openpyxl.descriptors.nested.NestedBool*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *

allow_none
Any0:overloadXú
__init__/openpyxl.descriptors.nested.NestedBool.__init__"
None*Z
selfP
&openpyxl.descriptors.nested.NestedBool"&openpyxl.descriptors.nested.NestedBool*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *

allow_none
Any 0:overloadX"36"372˘
__init__/openpyxl.descriptors.nested.NestedBool.__init__Õ
__init__/openpyxl.descriptors.nested.NestedBool.__init__"
None*Z
selfP
&openpyxl.descriptors.nested.NestedBool"&openpyxl.descriptors.nested.NestedBool*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadXœ
__init__/openpyxl.descriptors.nested.NestedBool.__init__"
None*Z
selfP
&openpyxl.descriptors.nested.NestedBool"&openpyxl.descriptors.nested.NestedBool*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadX"38"39"310"311"312"313j36j37j38j39j310j311j312j313˜
NestedNoneSet)openpyxl.descriptors.nested.NestedNoneSet""openpyxl.descriptors.nested.Nested"!openpyxl.descriptors.base.NoneSet*É
__init__2openpyxl.descriptors.nested.NestedNoneSet.__init__"
None*÷
selfÀ
Gopenpyxl.descriptors.nested.NestedNoneSet[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object")openpyxl.descriptors.nested.NestedNoneSet*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *È
values‹
9typing.Iterable[Union[openpyxl.descriptors.base._T,None]]ç
(Union[openpyxl.descriptors.base._T,None]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object
None"typing.Iterablez36z37z38z39z310z311z312z313*≤

__set__1openpyxl.descriptors.nested.NestedNoneSet.__set__"
None*÷
selfÀ
Gopenpyxl.descriptors.nested.NestedNoneSet[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object")openpyxl.descriptors.nested.NestedNoneSet*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*É
value˜
ïTypeAlias[Union[openpyxl.xml._functions_overloads._HasTagAndGet[Union[openpyxl.descriptors.base._T,Any,None]],openpyxl.descriptors.base._T,Any,None]]©
äUnion[openpyxl.xml._functions_overloads._HasTagAndGet[Union[openpyxl.descriptors.base._T,Any,None]],openpyxl.descriptors.base._T,Any,None]≠
]openpyxl.xml._functions_overloads._HasTagAndGet[Union[openpyxl.descriptors.base._T,Any,None]]ö
,Union[openpyxl.descriptors.base._T,Any,None]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object
Any
None"/openpyxl.xml._functions_overloads._HasTagAndGetU
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object
Any
None"/openpyxl.descriptors.nested._NestedNoneSetParamz36z37*í
__set__1openpyxl.descriptors.nested.NestedNoneSet.__set__"
None*÷
selfÀ
Gopenpyxl.descriptors.nested.NestedNoneSet[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object")openpyxl.descriptors.nested.NestedNoneSet*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*œ
value√
πTypeAlias[Union[openpyxl.xml._functions_overloads._HasTagAndGet[Union[openpyxl.descriptors.base._T,Literal[builtins.str],None]],openpyxl.descriptors.base._T,Literal[builtins.str],None]]—
ÆUnion[openpyxl.xml._functions_overloads._HasTagAndGet[Union[openpyxl.descriptors.base._T,Literal[builtins.str],None]],openpyxl.descriptors.base._T,Literal[builtins.str],None]Å
oopenpyxl.xml._functions_overloads._HasTagAndGet[Union[openpyxl.descriptors.base._T,Literal[builtins.str],None]]‹
>Union[openpyxl.descriptors.base._T,Literal[builtins.str],None]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object7
Literal[builtins.str]	
builtins.str"builtins.str
None"/openpyxl.xml._functions_overloads._HasTagAndGetU
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object7
Literal[builtins.str]	
builtins.str"builtins.str
None"/openpyxl.descriptors.nested._NestedNoneSetParamz38z39z310z311z312z313Pj36j37j38j39j310j311j312j313–
	NestedSet%openpyxl.descriptors.nested.NestedSet""openpyxl.descriptors.nested.Nested"openpyxl.descriptors.base.Set*≤
__init__.openpyxl.descriptors.nested.NestedSet.__init__"
None*Œ
self√
Copenpyxl.descriptors.nested.NestedSet[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"%openpyxl.descriptors.nested.NestedSet*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *§
valuesó
-typing.Iterable[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"typing.Iterablez36z37z38z39z310z311z312z313Pj36j37j38j39j310j311j312j313≥_
NestedMinMax(openpyxl.descriptors.nested.NestedMinMax""openpyxl.descriptors.nested.Nested" openpyxl.descriptors.base.MinMax2π
__init__1openpyxl.descriptors.nested.NestedMinMax.__init__ò
__init__1openpyxl.descriptors.nested.NestedMinMax.__init__"
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*

allow_none
Any*)
min 
builtins.float"builtins.float*)
max 
builtins.float"builtins.float0:overloadXö
__init__1openpyxl.descriptors.nested.NestedMinMax.__init__"
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*

allow_none
Any *)
min 
builtins.float"builtins.float*)
max 
builtins.float"builtins.float0:overloadXö
__init__1openpyxl.descriptors.nested.NestedMinMax.__init__"
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*Â
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam *

allow_none
Any*)
min 
builtins.float"builtins.float*)
max 
builtins.float"builtins.float0:overloadXú
__init__1openpyxl.descriptors.nested.NestedMinMax.__init__"
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*Â
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam *

allow_none
Any *)
min 
builtins.float"builtins.float*)
max 
builtins.float"builtins.float0:overloadX"36"372ô
__init__1openpyxl.descriptors.nested.NestedMinMax.__init__À
__init__1openpyxl.descriptors.nested.NestedMinMax.__init__"
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool*)
min 
builtins.float"builtins.float*)
max 
builtins.float"builtins.float0:overloadXÕ
__init__1openpyxl.descriptors.nested.NestedMinMax.__init__"
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool *)
min 
builtins.float"builtins.float*)
max 
builtins.float"builtins.float0:overloadXÕ
__init__1openpyxl.descriptors.nested.NestedMinMax.__init__"
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*Â
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool*)
min 
builtins.float"builtins.float*)
max 
builtins.float"builtins.float0:overloadXœ
__init__1openpyxl.descriptors.nested.NestedMinMax.__init__"
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*Â
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool *)
min 
builtins.float"builtins.float*)
max 
builtins.float"builtins.float0:overloadX"38"39"310"311"312"3132Ï

__get__0openpyxl.descriptors.nested.NestedMinMax.__get__†
__get__0openpyxl.descriptors.nested.NestedMinMax.__get__"ç
(Union[openpyxl.descriptors.base._M,None]U
openpyxl.descriptors.base._M"
builtins.object"builtins.object"builtins.object
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*R
clsG
Union[builtins.type,None]
builtins.type"builtins.type
None 0:overloadXÁ
__get__0openpyxl.descriptors.nested.NestedMinMax.__get__"U
openpyxl.descriptors.base._M"
builtins.object"builtins.object"builtins.object*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*R
clsG
Union[builtins.type,None]
builtins.type"builtins.type
None 0:overloadX"36"37"38"39"310"311"312"3132≈
__set__0openpyxl.descriptors.nested.NestedMinMax.__set__⁄
__set__0openpyxl.descriptors.nested.NestedMinMax.__set__"
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*ë
valueÖ
PUnion[openpyxl.xml._functions_overloads._HasTagAndGet[Union[Any,None]],Any,None]õ
@openpyxl.xml._functions_overloads._HasTagAndGet[Union[Any,None]]&
Union[Any,None]
Any
None"/openpyxl.xml._functions_overloads._HasTagAndGet
Any
None0:overloadXì
__set__0openpyxl.descriptors.nested.NestedMinMax.__set__"
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict* 
valueæ
?Union[openpyxl.xml._functions_overloads._HasTagAndGet[Any],Any]p
4openpyxl.xml._functions_overloads._HasTagAndGet[Any]
Any"/openpyxl.xml._functions_overloads._HasTagAndGet
Any0:overloadX⁄
__set__0openpyxl.descriptors.nested.NestedMinMax.__set__"
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*ë
valueÖ
PUnion[openpyxl.xml._functions_overloads._HasTagAndGet[Union[Any,None]],Any,None]õ
@openpyxl.xml._functions_overloads._HasTagAndGet[Union[Any,None]]&
Union[Any,None]
Any
None"/openpyxl.xml._functions_overloads._HasTagAndGet
Any
None0:overloadXì
__set__0openpyxl.descriptors.nested.NestedMinMax.__set__"
None*l
selfb
-openpyxl.descriptors.nested.NestedMinMax[Any]
Any"(openpyxl.descriptors.nested.NestedMinMax*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict* 
valueæ
?Union[openpyxl.xml._functions_overloads._HasTagAndGet[Any],Any]p
4openpyxl.xml._functions_overloads._HasTagAndGet[Any]
Any"/openpyxl.xml._functions_overloads._HasTagAndGet
Any0:overloadX"36"37"38"39"310"311"312"313Pj36j37j38j39j310j311j312j313Ã'
EmptyTag$openpyxl.descriptors.nested.EmptyTag""openpyxl.descriptors.nested.Nested"openpyxl.descriptors.base.Bool*ç
__set__,openpyxl.descriptors.nested.EmptyTag.__set__"
None*V
selfL
$openpyxl.descriptors.nested.EmptyTag"$openpyxl.descriptors.nested.EmptyTag*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*»
valueº
~Union[openpyxl.xml._functions_overloads._HasTagAndGet[TypeAlias[Union[builtins.bool,builtins.str,builtins.int,None]]],Unknown]µ
oopenpyxl.xml._functions_overloads._HasTagAndGet[TypeAlias[Union[builtins.bool,builtins.str,builtins.int,None]]]ê
>TypeAlias[Union[builtins.bool,builtins.str,builtins.int,None]]ù
3Union[builtins.bool,builtins.str,builtins.int,None]
builtins.bool"builtins.bool
builtins.str"builtins.str
builtins.int"builtins.int
None",openpyxl.descriptors.base._ConvertibleToBool"/openpyxl.xml._functions_overloads._HasTagAndGet z36z37z38z39z310z311z312z313*“
	from_tree.openpyxl.descriptors.nested.EmptyTag.from_tree"
Any*V
selfL
$openpyxl.descriptors.nested.EmptyTag"$openpyxl.descriptors.nested.EmptyTag*,
node"
builtins.object"builtins.objectz36z37*ô
	from_tree.openpyxl.descriptors.nested.EmptyTag.from_tree":
Literal[builtins.bool]	
builtins.bool"builtins.bool*V
selfL
$openpyxl.descriptors.nested.EmptyTag"$openpyxl.descriptors.nested.EmptyTag*,
node"
builtins.object"builtins.objectz38z39z310z311z312z3132Ò
__init__-openpyxl.descriptors.nested.EmptyTag.__init__î
__init__-openpyxl.descriptors.nested.EmptyTag.__init__"
None*V
selfL
$openpyxl.descriptors.nested.EmptyTag"$openpyxl.descriptors.nested.EmptyTag*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *

allow_none
Any0:overloadXñ
__init__-openpyxl.descriptors.nested.EmptyTag.__init__"
None*V
selfL
$openpyxl.descriptors.nested.EmptyTag"$openpyxl.descriptors.nested.EmptyTag*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *

allow_none
Any 0:overloadX"36"372Î
__init__-openpyxl.descriptors.nested.EmptyTag.__init__«
__init__-openpyxl.descriptors.nested.EmptyTag.__init__"
None*V
selfL
$openpyxl.descriptors.nested.EmptyTag"$openpyxl.descriptors.nested.EmptyTag*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX…
__init__-openpyxl.descriptors.nested.EmptyTag.__init__"
None*V
selfL
$openpyxl.descriptors.nested.EmptyTag"$openpyxl.descriptors.nested.EmptyTag*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadX"38"39"310"311"312"3132∂	
__get__,openpyxl.descriptors.nested.EmptyTag.__get__ø
__get__,openpyxl.descriptors.nested.EmptyTag.__get__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*V
selfL
$openpyxl.descriptors.nested.EmptyTag"$openpyxl.descriptors.nested.EmptyTag*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*R
clsG
Union[builtins.type,None]
builtins.type"builtins.type
None 0:overloadXñ
__get__,openpyxl.descriptors.nested.EmptyTag.__get__"
builtins.bool"builtins.bool*V
selfL
$openpyxl.descriptors.nested.EmptyTag"$openpyxl.descriptors.nested.EmptyTag*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*R
clsG
Union[builtins.type,None]
builtins.type"builtins.type
None 0:overloadX"36"37"38"39"310"311"312"3132ï
to_tree,openpyxl.descriptors.nested.EmptyTag.to_tree¶
to_tree,openpyxl.descriptors.nested.EmptyTag.to_tree"
None*V
selfL
$openpyxl.descriptors.nested.EmptyTag"$openpyxl.descriptors.nested.EmptyTag*1
tagname"
builtins.object"builtins.object *
value
None *3
	namespace"
builtins.object"builtins.object 0:overloadXé
to_tree,openpyxl.descriptors.nested.EmptyTag.to_tree">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*V
selfL
$openpyxl.descriptors.nested.EmptyTag"$openpyxl.descriptors.nested.EmptyTag*)
tagname
builtins.str"builtins.str*-
value"
builtins.object"builtins.object*U
	namespaceD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX"36"37"38"39"310"311"312"313j36j37j38j39j310j311j312j313*ª
__annotations__+openpyxl.descriptors.nested.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313*q
ConvertibleToFloat.openpyxl.descriptors.nested.ConvertibleToFloat
Any*36*37*38*39*310*311*312*313*m
ConvertibleToInt,openpyxl.descriptors.nested.ConvertibleToInt
Any*36*37*38*39*310*311*312*313*?
Literal#openpyxl.descriptors.nested.Literal
Any*36*37