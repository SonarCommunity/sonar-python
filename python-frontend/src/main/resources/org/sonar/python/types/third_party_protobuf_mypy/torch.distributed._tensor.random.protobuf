
 torch.distributed._tensor.random≈
_RNGStateTracker1torch.distributed._tensor.random._RNGStateTracker"builtins.object*Û
__init__:torch.distributed._tensor.random._RNGStateTracker.__init__"
None*p
selff
1torch.distributed._tensor.random._RNGStateTracker"1torch.distributed._tensor.random._RNGStateTracker*/
device_type
builtins.str"builtins.str *⁄

rng_states<torch.distributed._tensor.random._RNGStateTracker.rng_states"ç
0builtins.dict[builtins.str,torch._tensor.Tensor]
builtins.str"builtins.str,
torch._tensor.Tensor"torch._tensor.Tensor"builtins.dict*p
selff
1torch.distributed._tensor.random._RNGStateTracker"1torch.distributed._tensor.random._RNGStateTracker0:property`*˝
rng_state_is_syncCtorch.distributed._tensor.random._RNGStateTracker.rng_state_is_sync"
builtins.bool"builtins.bool*p
selff
1torch.distributed._tensor.random._RNGStateTracker"1torch.distributed._tensor.random._RNGStateTracker*
name
Any*˛
get_seed:torch.distributed._tensor.random._RNGStateTracker.get_seed"
builtins.int"builtins.int*p
selff
1torch.distributed._tensor.random._RNGStateTracker"1torch.distributed._tensor.random._RNGStateTracker*&
name
builtins.str"builtins.str*í
set_seed:torch.distributed._tensor.random._RNGStateTracker.set_seed"
None*p
selff
1torch.distributed._tensor.random._RNGStateTracker"1torch.distributed._tensor.random._RNGStateTracker*&
name
builtins.str"builtins.str*&
seed
builtins.int"builtins.int*œ
_distribute_regionDtorch.distributed._tensor.random._RNGStateTracker._distribute_region"
Any*p
selff
1torch.distributed._tensor.random._RNGStateTracker"1torch.distributed._tensor.random._RNGStateTracker*x
specn
5torch.distributed._tensor.placement_types.DTensorSpec"5torch.distributed._tensor.placement_types.DTensorSpec2î
distribute_region_enabledKtorch.distributed._tensor.random._RNGStateTracker.distribute_region_enabledä
distribute_region_enabledKtorch.distributed._tensor.random._RNGStateTracker.distribute_region_enabled"
builtins.bool"builtins.bool*p
selff
1torch.distributed._tensor.random._RNGStateTracker"1torch.distributed._tensor.random._RNGStateTracker0:propertyX`ú
distribute_region_enabledKtorch.distributed._tensor.random._RNGStateTracker.distribute_region_enabled"
None*p
selff
1torch.distributed._tensor.random._RNGStateTracker"1torch.distributed._tensor.random._RNGStateTracker*
value
Any0: distribute_region_enabled.setterrl
_device_type>torch.distributed._tensor.random._RNGStateTracker._device_type
builtins.str"builtins.strr[
_device_handle@torch.distributed._tensor.random._RNGStateTracker._device_handle
Anyr‘
_states9torch.distributed._tensor.random._RNGStateTracker._statesç
0builtins.dict[builtins.str,torch._tensor.Tensor]
builtins.str"builtins.str,
torch._tensor.Tensor"torch._tensor.Tensor"builtins.dictrt
_devices:torch.distributed._tensor.random._RNGStateTracker._devices,
builtins.list[Any]
Any"builtins.listrÇ
_use_distribute_regionHtorch.distributed._tensor.random._RNGStateTracker._use_distribute_region
builtins.bool"builtins.boolÅ
OffsetBasedRNGTracker6torch.distributed._tensor.random.OffsetBasedRNGTracker"1torch.distributed._tensor.random._RNGStateTracker*Ç
__init__?torch.distributed._tensor.random.OffsetBasedRNGTracker.__init__"
None*z
selfp
6torch.distributed._tensor.random.OffsetBasedRNGTracker"6torch.distributed._tensor.random.OffsetBasedRNGTracker*/
device_type
builtins.str"builtins.str *ä
_manual_seedCtorch.distributed._tensor.random.OffsetBasedRNGTracker._manual_seed"
None*z
selfp
6torch.distributed._tensor.random.OffsetBasedRNGTracker"6torch.distributed._tensor.random.OffsetBasedRNGTracker*/
parallel_seed
builtins.int"builtins.int*˚
_distribute_regionItorch.distributed._tensor.random.OffsetBasedRNGTracker._distribute_region"
Any*z
selfp
6torch.distributed._tensor.random.OffsetBasedRNGTracker"6torch.distributed._tensor.random.OffsetBasedRNGTracker*x
specn
5torch.distributed._tensor.placement_types.DTensorSpec"5torch.distributed._tensor.placement_types.DTensorSpec0:contextlib.contextmanager*ë

get_offsetAtorch.distributed._tensor.random.OffsetBasedRNGTracker.get_offset"
builtins.int"builtins.int*z
selfp
6torch.distributed._tensor.random.OffsetBasedRNGTracker"6torch.distributed._tensor.random.OffsetBasedRNGTracker*&
name
builtins.str"builtins.str*ß

set_offsetAtorch.distributed._tensor.random.OffsetBasedRNGTracker.set_offset"
None*z
selfp
6torch.distributed._tensor.random.OffsetBasedRNGTracker"6torch.distributed._tensor.random.OffsetBasedRNGTracker*&
name
builtins.str"builtins.str*(
offset
builtins.int"builtins.int*ﬂ
_set_pre_op_offsetItorch.distributed._tensor.random.OffsetBasedRNGTracker._set_pre_op_offset"
None*z
selfp
6torch.distributed._tensor.random.OffsetBasedRNGTracker"6torch.distributed._tensor.random.OffsetBasedRNGTracker*x
specn
5torch.distributed._tensor.placement_types.DTensorSpec"5torch.distributed._tensor.placement_types.DTensorSpec*è
_set_post_op_offsetJtorch.distributed._tensor.random.OffsetBasedRNGTracker._set_post_op_offset"
None*z
selfp
6torch.distributed._tensor.random.OffsetBasedRNGTracker"6torch.distributed._tensor.random.OffsetBasedRNGTracker*x
specn
5torch.distributed._tensor.placement_types.DTensorSpec"5torch.distributed._tensor.placement_types.DTensorSpec*,

old_offset
builtins.int"builtins.int*∫
_calc_shard_linear_idxMtorch.distributed._tensor.random.OffsetBasedRNGTracker._calc_shard_linear_idx"
builtins.int"builtins.int*z
selfp
6torch.distributed._tensor.random.OffsetBasedRNGTracker"6torch.distributed._tensor.random.OffsetBasedRNGTracker*[
shard_coordJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*Z

shard_sizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listñ	
TensorParallelRNGTracker9torch.distributed._tensor.random.TensorParallelRNGTracker"1torch.distributed._tensor.random._RNGStateTracker*å
__init__Btorch.distributed._tensor.random.TensorParallelRNGTracker.__init__"
None*Ä
selfv
9torch.distributed._tensor.random.TensorParallelRNGTracker"9torch.distributed._tensor.random.TensorParallelRNGTracker*/
device_type
builtins.str"builtins.str *Ù
_manual_seedFtorch.distributed._tensor.random.TensorParallelRNGTracker._manual_seed"
Any*Ä
selfv
9torch.distributed._tensor.random.TensorParallelRNGTracker"9torch.distributed._tensor.random.TensorParallelRNGTracker*a
tp_meshT
(torch.distributed.device_mesh.DeviceMesh"(torch.distributed.device_mesh.DeviceMesh*-
	base_seed
builtins.int"builtins.int *Ö
_distribute_regionLtorch.distributed._tensor.random.TensorParallelRNGTracker._distribute_region"
Any*Ä
selfv
9torch.distributed._tensor.random.TensorParallelRNGTracker"9torch.distributed._tensor.random.TensorParallelRNGTracker*x
specn
5torch.distributed._tensor.placement_types.DTensorSpec"5torch.distributed._tensor.placement_types.DTensorSpec0:contextlib.contextmanager÷
is_rng_supported_mesh6torch.distributed._tensor.random.is_rng_supported_mesh"
builtins.bool"builtins.bool*e
device_meshT
(torch.distributed.device_mesh.DeviceMesh"(torch.distributed.device_mesh.DeviceMesh‘
manual_seed,torch.distributed._tensor.random.manual_seed"
None*&
seed
builtins.int"builtins.int*e
device_meshT
(torch.distributed.device_mesh.DeviceMesh"(torch.distributed.device_mesh.DeviceMesh*ú
__annotations__0torch.distributed._tensor.random.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
disttorch.distributed *Û
_rng_tracker-torch.distributed._tensor.random._rng_tracker≥
=Union[torch.distributed._tensor.random._RNGStateTracker,None]f
1torch.distributed._tensor.random._RNGStateTracker"1torch.distributed._tensor.random._RNGStateTracker
None