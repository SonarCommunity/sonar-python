
torch.ao.nn.qat.modules.conv∞
_ConvNd$torch.ao.nn.qat.modules.conv._ConvNd"torch.nn.modules.conv._ConvNd*≈
__init__-torch.ao.nn.qat.modules.conv._ConvNd.__init__"
None*V
selfL
$torch.ao.nn.qat.modules.conv._ConvNd"$torch.ao.nn.qat.modules.conv._ConvNd*-
in_channels
builtins.int"builtins.int*.
out_channels
builtins.int"builtins.int*]
kernel_sizeL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*X
strideL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*Y
paddingL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*Z
dilationL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*.

transposed
builtins.bool"builtins.bool*`
output_paddingL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*(
groups
builtins.int"builtins.int*(
bias
builtins.bool"builtins.bool*.
padding_mode
builtins.str"builtins.str*
qconfig
Any *
device
Any *
dtype
Any *L
forward,torch.ao.nn.qat.modules.conv._ConvNd.forward*
self*	
input*É

from_float/torch.ao.nn.qat.modules.conv._ConvNd.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:staticmethodh*C
to_float-torch.ao.nn.qat.modules.conv._ConvNd.to_float*
selfrg
_FLOAT_MODULE2torch.ao.nn.qat.modules.conv._ConvNd._FLOAT_MODULE"
builtins.object"builtins.objectr@
qconfig,torch.ao.nn.qat.modules.conv._ConvNd.qconfig
AnyrT
weight_fake_quant6torch.ao.nn.qat.modules.conv._ConvNd.weight_fake_quant
Any™
Conv1d#torch.ao.nn.qat.modules.conv.Conv1d"$torch.ao.nn.qat.modules.conv._ConvNd"torch.nn.modules.conv.Conv1d*ú
__init__,torch.ao.nn.qat.modules.conv.Conv1d.__init__"
None*T
selfJ
#torch.ao.nn.qat.modules.conv.Conv1d"#torch.ao.nn.qat.modules.conv.Conv1d*-
in_channels
builtins.int"builtins.int*.
out_channels
builtins.int"builtins.int*ë
kernel_sizeˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t*é
strideˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t *õ
paddingã
gUnion[builtins.str,TypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]]
builtins.str"builtins.strˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t *ê
dilationˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t **
groups
builtins.int"builtins.int **
bias
builtins.bool"builtins.bool *0
padding_mode
builtins.str"builtins.str *
qconfig
Any *
device
Any *
dtype
Any *Å

from_float.torch.ao.nn.qat.modules.conv.Conv1d.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodprÉ
_FLOAT_MODULE1torch.ao.nn.qat.modules.conv.Conv1d._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.typerç
_FLOAT_CONV_MODULE6torch.ao.nn.qat.modules.conv.Conv1d._FLOAT_CONV_MODULE?
CallableType[builtins.type]
builtins.type"builtins.type€
Conv2d#torch.ao.nn.qat.modules.conv.Conv2d"$torch.ao.nn.qat.modules.conv._ConvNd"torch.nn.modules.conv.Conv2d*Ä
__init__,torch.ao.nn.qat.modules.conv.Conv2d.__init__"
None*T
selfJ
#torch.ao.nn.qat.modules.conv.Conv2d"#torch.ao.nn.qat.modules.conv.Conv2d*-
in_channels
builtins.int"builtins.int*.
out_channels
builtins.int"builtins.int*ƒ
kernel_size≤
kTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]]ü
`TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]å
UUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectﬁ
6Tuple[torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_2_t"torch.nn.common_types._size_2_t*¡
stride≤
kTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]]ü
`TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]å
UUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectﬁ
6Tuple[torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_2_t"torch.nn.common_types._size_2_t *Ê
padding÷
Union[builtins.str,TypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]]]
builtins.str"builtins.str≤
kTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]]ü
`TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]å
UUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectﬁ
6Tuple[torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_2_t"torch.nn.common_types._size_2_t *√
dilation≤
kTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]]ü
`TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]å
UUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectﬁ
6Tuple[torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_2_t"torch.nn.common_types._size_2_t **
groups
builtins.int"builtins.int **
bias
builtins.bool"builtins.bool *0
padding_mode
builtins.str"builtins.str *
qconfig
Any *
device
Any *
dtype
Any *K
forward+torch.ao.nn.qat.modules.conv.Conv2d.forward*
self*	
input*Å

from_float.torch.ao.nn.qat.modules.conv.Conv2d.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodprÉ
_FLOAT_MODULE1torch.ao.nn.qat.modules.conv.Conv2d._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.typerç
_FLOAT_CONV_MODULE6torch.ao.nn.qat.modules.conv.Conv2d._FLOAT_CONV_MODULE?
CallableType[builtins.type]
builtins.type"builtins.type¿%
Conv3d#torch.ao.nn.qat.modules.conv.Conv3d"$torch.ao.nn.qat.modules.conv._ConvNd"torch.nn.modules.conv.Conv3d*Â 
__init__,torch.ao.nn.qat.modules.conv.Conv3d.__init__"
None*T
selfJ
#torch.ao.nn.qat.modules.conv.Conv3d"#torch.ao.nn.qat.modules.conv.Conv3d*-
in_channels
builtins.int"builtins.int*.
out_channels
builtins.int"builtins.int*˜
kernel_sizeÂ
ÉTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]]π
xTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]é
mUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object»
NTuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_3_t"torch.nn.common_types._size_3_t*Ù
strideÂ
ÉTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]]π
xTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]é
mUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object»
NTuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_3_t"torch.nn.common_types._size_3_t *≤
padding¢
óUnion[builtins.str,TypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]]]
builtins.str"builtins.strÂ
ÉTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]]π
xTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]é
mUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object»
NTuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_3_t"torch.nn.common_types._size_3_t *ˆ
dilationÂ
ÉTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]]π
xTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]é
mUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object»
NTuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_3_t"torch.nn.common_types._size_3_t **
groups
builtins.int"builtins.int **
bias
builtins.bool"builtins.bool *0
padding_mode
builtins.str"builtins.str *
qconfig
Any *
device
Any *
dtype
Any *K
forward+torch.ao.nn.qat.modules.conv.Conv3d.forward*
self*	
input*Å

from_float.torch.ao.nn.qat.modules.conv.Conv3d.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodprÉ
_FLOAT_MODULE1torch.ao.nn.qat.modules.conv.Conv3d._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.typerç
_FLOAT_CONV_MODULE6torch.ao.nn.qat.modules.conv.Conv3d._FLOAT_CONV_MODULE?
CallableType[builtins.type]
builtins.type"builtins.type*ò
__annotations__,torch.ao.nn.qat.modules.conv.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
nntorch.nn *{
__all__$torch.ao.nn.qat.modules.conv.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list