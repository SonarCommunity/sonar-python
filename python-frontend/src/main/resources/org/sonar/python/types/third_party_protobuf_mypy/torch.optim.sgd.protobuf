
torch.optim.sgdµ
SGDtorch.optim.sgd.SGD"torch.optim.optimizer.Optimizer*ñ
__init__torch.optim.sgd.SGD.__init__"
None*4
self*
torch.optim.sgd.SGD"torch.optim.sgd.SGD*
params
Any**
lr 
builtins.float"builtins.float *0
momentum 
builtins.float"builtins.float *1
	dampening 
builtins.float"builtins.float *4
weight_decay 
builtins.float"builtins.float *
nesterov
Any *.
maximize
builtins.bool"builtins.bool *V
foreachG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *4
differentiable
builtins.bool"builtins.bool *T
fusedG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *E
__setstate__ torch.optim.sgd.SGD.__setstate__*
self*	
state*t
_init_grouptorch.optim.sgd.SGD._init_group*
self*	
group*

params*	
grads*
momentum_buffer_list*Y
steptorch.optim.sgd.SGD.step*
self*
closure 0:_use_grad_for_differentiablerl
_step_supports_amp_scaling.torch.optim.sgd.SGD._step_supports_amp_scaling
builtins.bool"builtins.bool 	
sgdtorch.optim.sgd.sgd"
Any*n
paramsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*p
d_p_listb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*¹
momentum_buffer_listž
/builtins.list[Union[torch._tensor.Tensor,None]]\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None"builtins.list*5
has_sparse_grad
builtins.bool"builtins.bool *V
foreachG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *T
fusedG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *n

grad_scale\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *m
	found_inf\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *2
weight_decay 
builtins.float"builtins.float*.
momentum 
builtins.float"builtins.float*(
lr 
builtins.float"builtins.float*/
	dampening 
builtins.float"builtins.float*,
nesterov
builtins.bool"builtins.bool*,
maximize
builtins.bool"builtins.bool‡
_single_tensor_sgd"torch.optim.sgd._single_tensor_sgd"
Any*n
paramsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*m
gradsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*¹
momentum_buffer_listž
/builtins.list[Union[torch._tensor.Tensor,None]]\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None"builtins.list*l

grad_scale\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*k
	found_inf\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*2
weight_decay 
builtins.float"builtins.float*.
momentum 
builtins.float"builtins.float*(
lr 
builtins.float"builtins.float*/
	dampening 
builtins.float"builtins.float*,
nesterov
builtins.bool"builtins.bool*,
maximize
builtins.bool"builtins.bool*3
has_sparse_grad
builtins.bool"builtins.bool…
_multi_tensor_sgd!torch.optim.sgd._multi_tensor_sgd"
Any*n
paramsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*m
gradsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*¹
momentum_buffer_listž
/builtins.list[Union[torch._tensor.Tensor,None]]\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None"builtins.list*l

grad_scale\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*k
	found_inf\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*2
weight_decay 
builtins.float"builtins.float*.
momentum 
builtins.float"builtins.float*(
lr 
builtins.float"builtins.float*/
	dampening 
builtins.float"builtins.float*,
nesterov
builtins.bool"builtins.bool*,
maximize
builtins.bool"builtins.bool*3
has_sparse_grad
builtins.bool"builtins.boolø

_fused_sgdtorch.optim.sgd._fused_sgd"
None*n
paramsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*m
gradsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*¹
momentum_buffer_listž
/builtins.list[Union[torch._tensor.Tensor,None]]\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None"builtins.list*l

grad_scale\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*k
	found_inf\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*2
weight_decay 
builtins.float"builtins.float*.
momentum 
builtins.float"builtins.float*(
lr 
builtins.float"builtins.float*/
	dampening 
builtins.float"builtins.float*,
nesterov
builtins.bool"builtins.bool*,
maximize
builtins.bool"builtins.bool*3
has_sparse_grad
builtins.bool"builtins.bool*‹
__annotations__torch.optim.sgd.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*n
__all__torch.optim.sgd.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list