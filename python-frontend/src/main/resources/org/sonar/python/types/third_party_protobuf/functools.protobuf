
	functools—

_CacheInfofunctools._CacheInfo"builtins.tuple*°
_replacefunctools._CacheInfo._replace"
functools._CacheInfo._NT*'
_self
functools._CacheInfo._NT*(
hits
builtins.int"builtins.int **
misses
builtins.int"builtins.int *+
maxsize
builtins.int"builtins.int *,
currsize
builtins.int"builtins.int *∫
__new__functools._CacheInfo.__new__"
functools._CacheInfo._NT*J
_cls@
Type[functools._CacheInfo._NT]
functools._CacheInfo._NT*&
hits
builtins.int"builtins.int*(
misses
builtins.int"builtins.int*)
maxsize
builtins.int"builtins.int**
currsize
builtins.int"builtins.int*©
_asdictfunctools._CacheInfo._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*'
_self
functools._CacheInfo._NT*Ü
_makefunctools._CacheInfo._make"
functools._CacheInfo._NT*J
_cls@
Type[functools._CacheInfo._NT]
functools._CacheInfo._NT*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpr?
hitsfunctools._CacheInfo.hits
builtins.int"builtins.intrC
missesfunctools._CacheInfo.misses
builtins.int"builtins.intrE
maxsizefunctools._CacheInfo.maxsize
builtins.int"builtins.intrG
currsizefunctools._CacheInfo.currsize
builtins.int"builtins.intr?
hitsfunctools._CacheInfo.hits
builtins.int"builtins.intrC
missesfunctools._CacheInfo.misses
builtins.int"builtins.intrE
maxsizefunctools._CacheInfo.maxsize
builtins.int"builtins.intrG
currsizefunctools._CacheInfo.currsize
builtins.int"builtins.intr‡
_fieldsfunctools._CacheInfo._fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrä
_field_types!functools._CacheInfo._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrê
_field_defaults$functools._CacheInfo._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrE
_sourcefunctools._CacheInfo._source
builtins.str"builtins.strrê
__annotations__$functools._CacheInfo.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict›
_lru_cache_wrapperfunctools._lru_cache_wrapper"builtins.object*â
__call__%functools._lru_cache_wrapper.__call__"
functools._T*f
self\
*functools._lru_cache_wrapper[functools._T]
functools._T"functools._lru_cache_wrapper*,
args"
typing.Hashable"typing.Hashable*.
kwargs"
typing.Hashable"typing.Hashable*÷

cache_info'functools._lru_cache_wrapper.cache_info"∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*f
self\
*functools._lru_cache_wrapper[functools._T]
functools._T"functools._lru_cache_wrapper*©
cache_clear(functools._lru_cache_wrapper.cache_clear"
None*f
self\
*functools._lru_cache_wrapper[functools._T]
functools._T"functools._lru_cache_wrapperPrÑ
__wrapped__(functools._lru_cache_wrapper.__wrapped__K
CallableType[builtins.function]&
builtins.function"builtins.function¶
partialfunctools.partial"builtins.object*Å
__init__functools.partial.__init__"
None*P
selfF
functools.partial[functools._T]
functools._T"functools.partial*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any*≤
__call__functools.partial.__call__"
functools._T*P
selfF
functools.partial[functools._T]
functools._T"functools.partial*
args
Any*
kwargs
AnyPrk
funcfunctools.partial.funcK
CallableType[builtins.function]&
builtins.function"builtins.functionrN
argsfunctools.partial.args.
builtins.tuple[Any]
Any"builtins.tupler
keywordsfunctools.partial.keywordsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictΩ
partialmethodfunctools.partialmethod"builtins.object*à
__get__functools.partialmethod.__get__"K
CallableType[builtins.function]&
builtins.function"builtins.function*\
selfR
%functools.partialmethod[functools._T]
functools._T"functools.partialmethod*
obj
Any*
cls
	Type[Any]
Any*–
__isabstractmethod__,functools.partialmethod.__isabstractmethod__"
builtins.bool"builtins.bool*\
selfR
%functools.partialmethod[functools._T]
functools._T"functools.partialmethod0:property`2ﬂ
__init__ functools.partialmethod.__init__£
__init__ functools.partialmethod.__init__"
None*\
selfR
%functools.partialmethod[functools._T]
functools._T"functools.partialmethod*U
__funcK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
keywords
Any0:overloadXä
__init__ functools.partialmethod.__init__"
None*\
selfR
%functools.partialmethod[functools._T]
functools._T"functools.partialmethod*<
__func2
TypeAlias[Any]
Any"functools._Descriptor*
args
Any*
keywords
Any0:overloadXPr·
funcfunctools.partialmethod.func∫
5Union[CallableType[builtins.function],TypeAlias[Any]]K
CallableType[builtins.function]&
builtins.function"builtins.function2
TypeAlias[Any]
Any"functools._DescriptorrT
argsfunctools.partialmethod.args.
builtins.tuple[Any]
Any"builtins.tuplerÖ
keywords functools.partialmethod.keywordsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict∏
_SingleDispatchCallable!functools._SingleDispatchCallable"builtins.object*á
dispatch*functools._SingleDispatchCallable.dispatch"K
CallableType[builtins.function]&
builtins.function"builtins.function*p
selff
/functools._SingleDispatchCallable[functools._T]
functools._T"!functools._SingleDispatchCallable*
cls
Any*∫
_clear_cache.functools._SingleDispatchCallable._clear_cache"
None*p
selff
/functools._SingleDispatchCallable[functools._T]
functools._T"!functools._SingleDispatchCallable*‚
__call__*functools._SingleDispatchCallable.__call__"
functools._T*p
selff
/functools._SingleDispatchCallable[functools._T]
functools._T"!functools._SingleDispatchCallable*
args
Any*
kwargs
Any2„
register*functools._SingleDispatchCallable.register∫
register*functools._SingleDispatchCallable.register"K
CallableType[builtins.function]&
builtins.function"builtins.function*p
selff
/functools._SingleDispatchCallable[functools._T]
functools._T"!functools._SingleDispatchCallable*
cls
	Type[Any]
Any*
func
None 0:overloadXÔ
register*functools._SingleDispatchCallable.register"K
CallableType[builtins.function]&
builtins.function"builtins.function*p
selff
/functools._SingleDispatchCallable[functools._T]
functools._T"!functools._SingleDispatchCallable*T
clsK
CallableType[builtins.function]&
builtins.function"builtins.function*
func
None 0:overloadX˚
register*functools._SingleDispatchCallable.register"K
CallableType[builtins.function]&
builtins.function"builtins.function*p
selff
/functools._SingleDispatchCallable[functools._T]
functools._T"!functools._SingleDispatchCallable*
cls
	Type[Any]
Any*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function0:overloadXPr‘
registry*functools._SingleDispatchCallable.registryõ
3typing.Mapping[Any,CallableType[builtins.function]]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingí
singledispatchmethodfunctools.singledispatchmethod"builtins.object*Ä
__init__'functools.singledispatchmethod.__init__"
None*j
self`
,functools.singledispatchmethod[functools._T]
functools._T"functools.singledispatchmethod*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*Ÿ
__call__'functools.singledispatchmethod.__call__"
functools._T*j
self`
,functools.singledispatchmethod[functools._T]
functools._T"functools.singledispatchmethod*
args
Any*
kwargs
Any2À
register'functools.singledispatchmethod.register≥
register'functools.singledispatchmethod.register"K
CallableType[builtins.function]&
builtins.function"builtins.function*j
self`
,functools.singledispatchmethod[functools._T]
functools._T"functools.singledispatchmethod*
cls
	Type[Any]
Any*
method
None 0:overloadXË
register'functools.singledispatchmethod.register"K
CallableType[builtins.function]&
builtins.function"builtins.function*j
self`
,functools.singledispatchmethod[functools._T]
functools._T"functools.singledispatchmethod*T
clsK
CallableType[builtins.function]&
builtins.function"builtins.function*
method
None 0:overloadXÙ
register'functools.singledispatchmethod.register"K
CallableType[builtins.function]&
builtins.function"builtins.function*j
self`
,functools.singledispatchmethod[functools._T]
functools._T"functools.singledispatchmethod*
cls
	Type[Any]
Any*W
methodK
CallableType[builtins.function]&
builtins.function"builtins.function0:overloadXPrü

dispatcher)functools.singledispatchmethod.dispatcherf
/functools._SingleDispatchCallable[functools._T]
functools._T"!functools._SingleDispatchCallablerx
func#functools.singledispatchmethod.funcK
CallableType[builtins.function]&
builtins.function"builtins.function√
cached_propertyfunctools.cached_property"builtins.object*Ò
__init__"functools.cached_property.__init__"
None*`
selfV
'functools.cached_property[functools._T]
functools._T"functools.cached_property*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*Ì
__set_name__&functools.cached_property.__set_name__"
None*`
selfV
'functools.cached_property[functools._T]
functools._T"functools.cached_property*!
owner
	Type[Any]
Any*&
name
builtins.str"builtins.str2≤
__get__!functools.cached_property.__get__÷
__get__!functools.cached_property.__get__"V
'functools.cached_property[functools._T]
functools._T"functools.cached_property*`
selfV
'functools.cached_property[functools._T]
functools._T"functools.cached_property*
instance
None*H
owner;
Union[Type[Any],None]
	Type[Any]
Any
None 0:overloadX™
__get__!functools.cached_property.__get__"
functools._T*`
selfV
'functools.cached_property[functools._T]
functools._T"functools.cached_property*0
instance"
builtins.object"builtins.object*H
owner;
Union[Type[Any],None]
	Type[Any]
Any
None 0:overloadXPrs
funcfunctools.cached_property.funcK
CallableType[builtins.function]&
builtins.function"builtins.functionrt
attrname"functools.cached_property.attrnameD
Union[builtins.str,None]
builtins.str"builtins.str
Noneæ
update_wrapperfunctools.update_wrapper"
functools._T*
wrapper
functools._T*°
wrappedì
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"functools._AnyCallable*^
assignedN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *]
updatedN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence »
wrapsfunctools.wraps"K
CallableType[builtins.function]&
builtins.function"builtins.function*°
wrappedì
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"functools._AnyCallable*^
assignedN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *]
updatedN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence á
total_orderingfunctools.total_ordering"(
Type[functools._T]
functools._T*1
cls(
Type[functools._T]
functools._T«

cmp_to_keyfunctools.cmp_to_key"K
CallableType[builtins.function]&
builtins.function"builtins.function*V
mycmpK
CallableType[builtins.function]&
builtins.function"builtins.functionÈ
singledispatchfunctools.singledispatch"f
/functools._SingleDispatchCallable[functools._T]
functools._T"!functools._SingleDispatchCallable*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.functionà
	_make_keyfunctools._make_key""
typing.Hashable"typing.Hashable*_
argsU
builtins.tuple[typing.Hashable]"
typing.Hashable"typing.Hashable"builtins.tuple*W
kwdsM
 _typeshed.SupportsItems[Any,Any]
Any
Any"_typeshed.SupportsItems*)
typed
builtins.bool"builtins.bool*e
kwd_markU
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple *\
	fasttypesK
builtins.set[builtins.type]
builtins.type"builtins.type"builtins.set *+
tuple
builtins.type"builtins.type *
type
Any *V
lenK
CallableType[builtins.function]&
builtins.function"builtins.function "ç
reducefunctools.reduceÜ
reducefunctools.reduce"
functools._T*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function*P
sequenceB
typing.Iterable[functools._S]
functools._S"typing.Iterable*
initial
functools._T0:overloadXÁ
reducefunctools.reduce"
functools._T*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function*P
sequenceB
typing.Iterable[functools._T]
functools._T"typing.Iterable0:overloadX"∂
	lru_cachefunctools.lru_cache˝
	lru_cachefunctools.lru_cache"K
CallableType[builtins.function]&
builtins.function"builtins.function*S
maxsizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *+
typed
builtins.bool"builtins.bool 0:overloadXì
	lru_cachefunctools.lru_cache"\
*functools._lru_cache_wrapper[functools._T]
functools._T"functools._lru_cache_wrapper*X
maxsizeK
CallableType[builtins.function]&
builtins.function"builtins.function*+
typed
builtins.bool"builtins.bool 0:overloadX*Ñ
WRAPPER_ASSIGNMENTSfunctools.WRAPPER_ASSIGNMENTSN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*|
WRAPPER_UPDATESfunctools.WRAPPER_UPDATESN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence