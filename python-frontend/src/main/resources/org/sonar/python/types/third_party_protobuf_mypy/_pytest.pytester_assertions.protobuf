
_pytest.pytester_assertionsú
assertoutcome)_pytest.pytester_assertions.assertoutcome"
None*®
outcomesŸ
ÔTuple[typing.Sequence[_pytest.reports.TestReport],typing.Sequence[Union[_pytest.reports.CollectReport,_pytest.reports.TestReport]],typing.Sequence[Union[_pytest.reports.CollectReport,_pytest.reports.TestReport]]]x
+typing.Sequence[_pytest.reports.TestReport]8
_pytest.reports.TestReport"_pytest.reports.TestReport"typing.Sequence£
Ptyping.Sequence[Union[_pytest.reports.CollectReport,_pytest.reports.TestReport]]½
?Union[_pytest.reports.CollectReport,_pytest.reports.TestReport]>
_pytest.reports.CollectReport"_pytest.reports.CollectReport8
_pytest.reports.TestReport"_pytest.reports.TestReport"typing.Sequence£
Ptyping.Sequence[Union[_pytest.reports.CollectReport,_pytest.reports.TestReport]]½
?Union[_pytest.reports.CollectReport,_pytest.reports.TestReport]>
_pytest.reports.CollectReport"_pytest.reports.CollectReport8
_pytest.reports.TestReport"_pytest.reports.TestReport"typing.Sequence**
passed
builtins.int"builtins.int *+
skipped
builtins.int"builtins.int **
failed
builtins.int"builtins.int ‡
assert_outcomes+_pytest.pytester_assertions.assert_outcomes"
None*ƒ
outcomesu
(builtins.dict[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.dict**
passed
builtins.int"builtins.int *+
skipped
builtins.int"builtins.int **
failed
builtins.int"builtins.int **
errors
builtins.int"builtins.int *+
xpassed
builtins.int"builtins.int *+
xfailed
builtins.int"builtins.int *T
warningsD
Union[builtins.int,None]
builtins.int"builtins.int
None *V

deselectedD
Union[builtins.int,None]
builtins.int"builtins.int
None *—
__annotations__+_pytest.pytester_assertions.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict