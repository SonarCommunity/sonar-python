
(torch._higher_order_ops.associative_scan‰
wrap_combine_fn_flat=torch._higher_order_ops.associative_scan.wrap_combine_fn_flat*
args*

combine_fn*
spec*

num_leavesÃ
associative_scan9torch._higher_order_ops.associative_scan.associative_scan",
torch._tensor.Tensor"torch._tensor.Tensor*[

combine_fnK
CallableType[builtins.function]&
builtins.function"builtins.function*B
input7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*%
dim
builtins.int"builtins.intŠ
trace_associative_scan?torch._higher_order_ops.associative_scan.trace_associative_scan"
Any*

proxy_mode
Any*
func_overload
Any*[

combine_fnK
CallableType[builtins.function]&
builtins.function"builtins.function*m
inputb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*%
dim
builtins.int"builtins.int*¤
__annotations__8torch._higher_order_ops.associative_scan.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
utilstorch._prims_common *
pytreetorch.utils._pytree *>
aten-torch._higher_order_ops.associative_scan.aten
Any*•
associative_scan_op<torch._higher_order_ops.associative_scan.associative_scan_op@
torch._ops.HigherOrderOperator"torch._ops.HigherOrderOperator