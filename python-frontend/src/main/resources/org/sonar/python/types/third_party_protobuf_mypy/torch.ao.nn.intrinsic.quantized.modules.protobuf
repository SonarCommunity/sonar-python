
'torch.ao.nn.intrinsic.quantized.modulesµ	

LinearReLU>torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU"+torch.ao.nn.quantized.modules.linear.Linear*™
__init__Gtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU.__init__*
self*
in_features*
out_features*

bias *
dtype *Â
forwardFtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU.forward",
torch._tensor.Tensor"torch._tensor.Tensor*‹
self€
>torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU">torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*_
	_get_nameHtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU._get_name*
self*œ

from_floatItorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*·
from_referenceMtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU.from_reference*
cls*
ref_linear_relu*
output_scale*
output_zero_point0:classmethodprž
_FLOAT_MODULELtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.typeâ

LinearLeakyReLUCtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU"+torch.ao.nn.quantized.modules.linear.Linear*²
__init__Ltorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU.__init__*
self*
in_features*
out_features*
negative_slope*

bias *
dtype *Ñ
forwardKtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU.forward",
torch._tensor.Tensor"torch._tensor.Tensor*•
selfŠ
Ctorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU"Ctorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*d
	_get_nameMtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU._get_name*
self*¡

from_floatNtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*´
from_referenceRtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU.from_reference*
cls*
ref_mod*
output_scale*
output_zero_point0:classmethodpr£
_FLOAT_MODULEQtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.typerm
negative_slopeRtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU.negative_slope
Any­	

LinearTanh>torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh"+torch.ao.nn.quantized.modules.linear.Linear*™
__init__Gtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh.__init__*
self*
in_features*
out_features*

bias *
dtype *Â
forwardFtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh.forward",
torch._tensor.Tensor"torch._tensor.Tensor*‹
self€
>torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh">torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*_
	_get_nameHtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh._get_name*
self*œ

from_floatItorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*¯
from_referenceMtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh.from_reference*
cls*
ref_mod*
output_scale*
output_zero_point0:classmethodprž
_FLOAT_MODULELtorch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.type°

ConvReLU1d<torch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU1d")torch.ao.nn.quantized.modules.conv.Conv1d*…
__init__Etorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU1d.__init__*
self*
in_channels*
out_channels*
kernel_size*
stride *
padding *
dilation *
groups *

bias *
padding_mode *
device *
dtype *d
forwardDtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU1d.forward*
self*	
input*]
	_get_nameFtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU1d._get_name*
self*š

from_floatGtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU1d.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*¯
from_referenceKtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU1d.from_reference*
cls*
	ref_qconv*
output_scale*
output_zero_point0:classmethodprœ
_FLOAT_MODULEJtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU1d._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.type°

ConvReLU2d<torch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU2d")torch.ao.nn.quantized.modules.conv.Conv2d*…
__init__Etorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU2d.__init__*
self*
in_channels*
out_channels*
kernel_size*
stride *
padding *
dilation *
groups *

bias *
padding_mode *
device *
dtype *d
forwardDtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU2d.forward*
self*	
input*]
	_get_nameFtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU2d._get_name*
self*š

from_floatGtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU2d.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*¯
from_referenceKtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU2d.from_reference*
cls*
	ref_qconv*
output_scale*
output_zero_point0:classmethodprœ
_FLOAT_MODULEJtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU2d._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.type°

ConvReLU3d<torch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU3d")torch.ao.nn.quantized.modules.conv.Conv3d*…
__init__Etorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU3d.__init__*
self*
in_channels*
out_channels*
kernel_size*
stride *
padding *
dilation *
groups *

bias *
padding_mode *
device *
dtype *d
forwardDtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU3d.forward*
self*	
input*]
	_get_nameFtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU3d._get_name*
self*š

from_floatGtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU3d.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*¯
from_referenceKtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU3d.from_reference*
cls*
	ref_qconv*
output_scale*
output_zero_point0:classmethodprœ
_FLOAT_MODULEJtorch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU3d._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.type¸
BNReLU2d8torch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU2d"3torch.ao.nn.quantized.modules.batchnorm.BatchNorm2d*Ÿ
__init__Atorch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU2d.__init__*
self*
num_features*	
eps *
momentum *
device *
dtype *`
forward@torch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU2d.forward*
self*	
input*Y
	_get_nameBtorch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU2d._get_name*
self*–

from_floatCtorch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU2d.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*©
from_referenceGtorch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU2d.from_reference*
cls*
bn_relu*
output_scale*
output_zero_point0:classmethodpr˜
_FLOAT_MODULEFtorch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU2d._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.type¸
BNReLU3d8torch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU3d"3torch.ao.nn.quantized.modules.batchnorm.BatchNorm3d*Ÿ
__init__Atorch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU3d.__init__*
self*
num_features*	
eps *
momentum *
device *
dtype *`
forward@torch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU3d.forward*
self*	
input*Y
	_get_nameBtorch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU3d._get_name*
self*–

from_floatCtorch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU3d.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*©
from_referenceGtorch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU3d.from_reference*
cls*
bn_relu*
output_scale*
output_zero_point0:classmethodpr˜
_FLOAT_MODULEFtorch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU3d._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.type²
	ConvAdd2d:torch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAdd2d")torch.ao.nn.quantized.modules.conv.Conv2d*ƒ
__init__Ctorch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAdd2d.__init__*
self*
in_channels*
out_channels*
kernel_size*
stride *
padding *
dilation *
groups *

bias *
padding_mode *
device *
dtype *s
forwardBtorch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAdd2d.forward*
self*	
input*
extra_input*[
	_get_nameDtorch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAdd2d._get_name*
self*˜

from_floatEtorch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAdd2d.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*­
from_referenceItorch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAdd2d.from_reference*
cls*
	ref_qconv*
output_scale*
output_zero_point0:classmethodprš
_FLOAT_MODULEHtorch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAdd2d._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.typeÒ
ConvAddReLU2d>torch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAddReLU2d")torch.ao.nn.quantized.modules.conv.Conv2d*‡
__init__Gtorch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAddReLU2d.__init__*
self*
in_channels*
out_channels*
kernel_size*
stride *
padding *
dilation *
groups *

bias *
padding_mode *
device *
dtype *w
forwardFtorch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAddReLU2d.forward*
self*	
input*
extra_input*_
	_get_nameHtorch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAddReLU2d._get_name*
self*œ

from_floatItorch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAddReLU2d.from_float*
cls*
mod* 
use_precomputed_fake_quant 0:classmethodp*±
from_referenceMtorch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAddReLU2d.from_reference*
cls*
	ref_qconv*
output_scale*
output_zero_point0:classmethodprž
_FLOAT_MODULELtorch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAddReLU2d._FLOAT_MODULE?
CallableType[builtins.type]
builtins.type"builtins.type*ˆ
__path__0torch.ao.nn.intrinsic.quantized.modules.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*£
__annotations__7torch.ao.nn.intrinsic.quantized.modules.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*†
__all__/torch.ao.nn.intrinsic.quantized.modules.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list