
torch._decompV
_add_op_to_registry!torch._decomp._add_op_to_registry*
registry*
op*
fn?
_convert_out_params!torch._decomp._convert_out_params*
fu
register_decomposition$torch._decomp.register_decomposition*
aten_op*
registry *

type *
unsafe ‹
get_decompositions torch._decomp.get_decompositions"ÿ
Fbuiltins.dict[torch._ops.OperatorBase,CallableType[builtins.function]]2
torch._ops.OperatorBase"torch._ops.OperatorBaseK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict*û
aten_opsè
Ktyping.Sequence[Union[torch._ops.OperatorBase,torch._ops.OpOverloadPacket]]Æ
:Union[torch._ops.OperatorBase,torch._ops.OpOverloadPacket]2
torch._ops.OperatorBase"torch._ops.OperatorBase:
torch._ops.OpOverloadPacket"torch._ops.OpOverloadPacket"typing.Sequence*(
type
builtins.str"builtins.str œ
remove_decompositions#torch._decomp.remove_decompositions"
None*Ì
decompositionsÿ
Fbuiltins.dict[torch._ops.OperatorBase,CallableType[builtins.function]]2
torch._ops.OperatorBase"torch._ops.OperatorBaseK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict*ñ
aten_opsá
Ityping.Sequence[Union[torch._ops.OpOverload,torch._ops.OpOverloadPacket]]®
8Union[torch._ops.OpOverload,torch._ops.OpOverloadPacket].
torch._ops.OpOverload"torch._ops.OpOverload:
torch._ops.OpOverloadPacket"torch._ops.OpOverloadPacket"typing.Sequenceù
core_aten_decompositions&torch._decomp.core_aten_decompositions"ÿ
Fbuiltins.dict[torch._ops.OperatorBase,CallableType[builtins.function]]2
torch._ops.OperatorBase"torch._ops.OperatorBaseK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict*n
__path__torch._decomp.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*â
__annotations__torch._decomp.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
pytreetorch.utils._pytree *l
__all__torch._decomp.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*µ
global_decomposition_table(torch._decomp.global_decomposition_tableÏ
bbuiltins.dict[builtins.str,builtins.dict[torch._ops.OperatorBase,CallableType[builtins.function]]]
builtins.str"builtins.strÿ
Fbuiltins.dict[torch._ops.OperatorBase,CallableType[builtins.function]]2
torch._ops.OperatorBase"torch._ops.OperatorBaseK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict"builtins.dict*ì
decomposition_table!torch._decomp.decomposition_tableÿ
Fbuiltins.dict[torch._ops.OperatorBase,CallableType[builtins.function]]2
torch._ops.OperatorBase"torch._ops.OperatorBaseK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict*≠
 pre_autograd_decomposition_table.torch._decomp.pre_autograd_decomposition_tableÿ
Fbuiltins.dict[torch._ops.OperatorBase,CallableType[builtins.function]]2
torch._ops.OperatorBase"torch._ops.OperatorBaseK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict*Å

meta_tabletorch._decomp.meta_tableÿ
Fbuiltins.dict[torch._ops.OperatorBase,CallableType[builtins.function]]2
torch._ops.OperatorBase"torch._ops.OperatorBaseK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict