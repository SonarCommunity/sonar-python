
dataclasses;
_MISSING_TYPEdataclasses._MISSING_TYPE"builtins.objectÛ

Fielddataclasses.Field"builtins.object*∆
__init__dataclasses.Field.__init__"
None*T
selfJ
!dataclasses.Field[dataclasses._T]
dataclasses._T"dataclasses.Field*
default
dataclasses._T*`
default_factoryK
CallableType[builtins.function]&
builtins.function"builtins.function*(
init
builtins.bool"builtins.bool*(
repr
builtins.bool"builtins.bool*Q
hashG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*+
compare
builtins.bool"builtins.bool*g
metadataY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingPr<
namedataclasses.Field.name
builtins.str"builtins.strrL
typedataclasses.Field.type,
Type[dataclasses._T]
dataclasses._Tr8
defaultdataclasses.Field.default
dataclasses._TrÅ
default_factory!dataclasses.Field.default_factoryK
CallableType[builtins.function]&
builtins.function"builtins.functionr>
reprdataclasses.Field.repr
builtins.bool"builtins.boolrg
hashdataclasses.Field.hashG
Union[builtins.bool,None]
builtins.bool"builtins.bool
Noner>
initdataclasses.Field.init
builtins.bool"builtins.boolrD
comparedataclasses.Field.compare
builtins.bool"builtins.boolrÅ
metadatadataclasses.Field.metadataY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingO
FrozenInstanceErrordataclasses.FrozenInstanceError"builtins.AttributeError»
InitVardataclasses.InitVar"builtins.object*ƒ
__init__dataclasses.InitVar.__init__"
None*X
selfN
#dataclasses.InitVar[dataclasses._T]
dataclasses._T"dataclasses.InitVar*6
type,
Type[dataclasses._T]
dataclasses._TPrN
typedataclasses.InitVar.type,
Type[dataclasses._T]
dataclasses._T¨
fieldsdataclasses.fields"n
&builtins.tuple[dataclasses.Field[Any]]4
dataclasses.Field[Any]
Any"dataclasses.Field"builtins.tuple*
class_or_instance
AnyZ
is_dataclassdataclasses.is_dataclass"
builtins.bool"builtins.bool*
obj
Any⁄	
make_dataclassdataclasses.make_dataclass"
builtins.type"builtins.type**
cls_name
builtins.str"builtins.str* 
fieldsΩ
typing.Iterable[Union[builtins.str,Tuple[builtins.str,builtins.type],Tuple[builtins.str,builtins.type,dataclasses.Field[Any]]]]®
nUnion[builtins.str,Tuple[builtins.str,builtins.type],Tuple[builtins.str,builtins.type,dataclasses.Field[Any]]]
builtins.str"builtins.strc
!Tuple[builtins.str,builtins.type]
builtins.str"builtins.str
builtins.type"builtins.type∞
8Tuple[builtins.str,builtins.type,dataclasses.Field[Any]]
builtins.str"builtins.str
builtins.type"builtins.type4
dataclasses.Field[Any]
Any"dataclasses.Field"typing.Iterable*\
basesO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple *§
	namespaceí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None **
init
builtins.bool"builtins.bool **
repr
builtins.bool"builtins.bool *(
eq
builtins.bool"builtins.bool *+
order
builtins.bool"builtins.bool *1
unsafe_hash
builtins.bool"builtins.bool *,
frozen
builtins.bool"builtins.bool e
replacedataclasses.replace"
dataclasses._T*
__obj
dataclasses._T*
changes
Any"Ê
asdictdataclasses.asdictï
asdictdataclasses.asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
obj
Any0:overloadXØ
asdictdataclasses.asdict"
dataclasses._T*
obj
Any*]
dict_factoryK
CallableType[builtins.function]&
builtins.function"builtins.function0:overloadX"√
astupledataclasses.astuplen
astupledataclasses.astuple".
builtins.tuple[Any]
Any"builtins.tuple*
obj
Any0:overloadX≤
astupledataclasses.astuple"
dataclasses._T*
obj
Any*^
tuple_factoryK
CallableType[builtins.function]&
builtins.function"builtins.function0:overloadX"›
	dataclassdataclasses.dataclassï
	dataclassdataclasses.dataclass",
Type[dataclasses._T]
dataclasses._T*5
__cls,
Type[dataclasses._T]
dataclasses._T0:overloadXê
	dataclassdataclasses.dataclass"K
CallableType[builtins.function]&
builtins.function"builtins.function*
__cls
None0:overloadXç
	dataclassdataclasses.dataclass"K
CallableType[builtins.function]&
builtins.function"builtins.function**
init
builtins.bool"builtins.bool **
repr
builtins.bool"builtins.bool *(
eq
builtins.bool"builtins.bool *+
order
builtins.bool"builtins.bool *1
unsafe_hash
builtins.bool"builtins.bool *,
frozen
builtins.bool"builtins.bool 0:overloadX"ﬁ
fielddataclasses.field‚
fielddataclasses.field"
dataclasses._T*
default
dataclasses._T**
init
builtins.bool"builtins.bool **
repr
builtins.bool"builtins.bool *S
hashG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
compare
builtins.bool"builtins.bool *¶
metadataï
,Union[typing.Mapping[builtins.str,Any],None]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping
None 0:overloadX£
fielddataclasses.field"
dataclasses._T*`
default_factoryK
CallableType[builtins.function]&
builtins.function"builtins.function**
init
builtins.bool"builtins.bool **
repr
builtins.bool"builtins.bool *S
hashG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
compare
builtins.bool"builtins.bool *¶
metadataï
,Union[typing.Mapping[builtins.str,Any],None]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping
None 0:overloadX∂
fielddataclasses.field"
Any**
init
builtins.bool"builtins.bool **
repr
builtins.bool"builtins.bool *S
hashG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
compare
builtins.bool"builtins.bool *¶
metadataï
,Union[typing.Mapping[builtins.str,Any],None]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping
None 0:overloadX*V
MISSINGdataclasses.MISSING6
dataclasses._MISSING_TYPE"dataclasses._MISSING_TYPE