
PIL._imaging¬
Sequencetyping.Sequence"typing.Collection"typing.Reversible*å
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*)
start
builtins.int"builtins.int *(
stop
builtins.int"builtins.int z35z36z37z38z39z310*∑
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Anyz35z36z37z38z39z310*⁄
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz35z36z37z38z39z310*Õ
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z310*’
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z3102ï
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"35"36"37"38"39"310Pj35j36j37j38j39j310Ô
_PathPIL._imaging._Path"builtins.object*ß
__getattr__PIL._imaging._Path.__getattr__"
Any*0
self(
PIL._imaging._Path"PIL._imaging._Path*$
item
builtins.str"builtins.strz35z36z37z38z39z310j35j36j37j38j39j310÷
pathPIL._imaging.path"(
PIL._imaging._Path"PIL._imaging._Path*˜
__xÔ
\Union[typing.Sequence[Tuple[builtins.float,builtins.float]],typing.Sequence[builtins.float]]∂
5typing.Sequence[Tuple[builtins.float,builtins.float]]l
$Tuple[builtins.float,builtins.float] 
builtins.float"builtins.float 
builtins.float"builtins.float"typing.SequenceT
typing.Sequence[builtins.float] 
builtins.float"builtins.float"typing.Sequencez35z36z37z38z39z310q
__getattr__PIL._imaging.__getattr__"
Any*&
__name
builtins.str"builtins.strz35z36z37z38z39z310*N
Any
typing.Any"
builtins.object"builtins.object*35*36*37*38*39*310*
Literaltyping_extensions.Literal@
typing_extensions._SpecialForm"typing_extensions._SpecialForm*35*36*37*38*39*310*É
DEFAULT_STRATEGYPIL._imaging.DEFAULT_STRATEGY7
Literal[builtins.int]	
builtins.int"builtins.int*35*36*37*38*39*310*s
FILTEREDPIL._imaging.FILTERED7
Literal[builtins.int]	
builtins.int"builtins.int*35*36*37*38*39*310*{
HUFFMAN_ONLYPIL._imaging.HUFFMAN_ONLY7
Literal[builtins.int]	
builtins.int"builtins.int*35*36*37*38*39*310*i
RLEPIL._imaging.RLE7
Literal[builtins.int]	
builtins.int"builtins.int*35*36*37*38*39*310*m
FIXEDPIL._imaging.FIXED7
Literal[builtins.int]	
builtins.int"builtins.int*35*36*37*38*39*310