
http.serverﬁ

HTTPServerhttp.server.HTTPServer"socketserver.TCPServerrO
server_name"http.server.HTTPServer.server_name
builtins.str"builtins.strrO
server_port"http.server.HTTPServer.server_port
builtins.int"builtins.intk
ThreadingHTTPServerhttp.server.ThreadingHTTPServer"socketserver.ThreadingMixIn"http.server.HTTPServerÚ-
BaseHTTPRequestHandler"http.server.BaseHTTPRequestHandler"!socketserver.StreamRequestHandler*©
handle_one_request5http.server.BaseHTTPRequestHandler.handle_one_request"
None*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*Ω
handle_expect_1004http.server.BaseHTTPRequestHandler.handle_expect_100"
builtins.bool"builtins.bool*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*Î

send_error-http.server.BaseHTTPRequestHandler.send_error"
None*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*&
code
builtins.int"builtins.int*S
messageD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
explainD
Union[builtins.str,None]
builtins.str"builtins.str
None *ú
send_response0http.server.BaseHTTPRequestHandler.send_response"
None*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*&
code
builtins.int"builtins.int*S
messageD
Union[builtins.str,None]
builtins.str"builtins.str
None *Ô
send_header.http.server.BaseHTTPRequestHandler.send_header"
None*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*)
keyword
builtins.str"builtins.str*'
value
builtins.str"builtins.str*¶
send_response_only5http.server.BaseHTTPRequestHandler.send_response_only"
None*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*&
code
builtins.int"builtins.int*S
messageD
Union[builtins.str,None]
builtins.str"builtins.str
None *õ
end_headers.http.server.BaseHTTPRequestHandler.end_headers"
None*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*ü
flush_headers0http.server.BaseHTTPRequestHandler.flush_headers"
None*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*˜
log_request.http.server.BaseHTTPRequestHandler.log_request"
None*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*l
code`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str *l
size`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str *‘
	log_error,http.server.BaseHTTPRequestHandler.log_error"
None*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*(
format
builtins.str"builtins.str*
args
Any*ÿ
log_message.http.server.BaseHTTPRequestHandler.log_message"
None*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*(
format
builtins.str"builtins.str*
args
Any*µ
version_string1http.server.BaseHTTPRequestHandler.version_string"
builtins.str"builtins.str*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*ê
date_time_string3http.server.BaseHTTPRequestHandler.date_time_string"
builtins.str"builtins.str*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*U
	timestampD
Union[builtins.int,None]
builtins.int"builtins.int
None *¡
log_date_time_string7http.server.BaseHTTPRequestHandler.log_date_time_string"
builtins.str"builtins.str*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*µ
address_string1http.server.BaseHTTPRequestHandler.address_string"
builtins.str"builtins.str*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandler*µ
parse_request0http.server.BaseHTTPRequestHandler.parse_request"
builtins.bool"builtins.bool*R
selfH
"http.server.BaseHTTPRequestHandler""http.server.BaseHTTPRequestHandlerr•
client_address1http.server.BaseHTTPRequestHandler.client_address`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.intrg
close_connection3http.server.BaseHTTPRequestHandler.close_connection
builtins.bool"builtins.boolr[
requestline.http.server.BaseHTTPRequestHandler.requestline
builtins.str"builtins.strrS
command*http.server.BaseHTTPRequestHandler.command
builtins.str"builtins.strrM
path'http.server.BaseHTTPRequestHandler.path
builtins.str"builtins.strrc
request_version2http.server.BaseHTTPRequestHandler.request_version
builtins.str"builtins.strre
headers*http.server.BaseHTTPRequestHandler.headers.
email.message.Message"email.message.Messagera
server_version1http.server.BaseHTTPRequestHandler.server_version
builtins.str"builtins.strr[
sys_version.http.server.BaseHTTPRequestHandler.sys_version
builtins.str"builtins.strrm
error_message_format7http.server.BaseHTTPRequestHandler.error_message_format
builtins.str"builtins.strri
error_content_type5http.server.BaseHTTPRequestHandler.error_content_type
builtins.str"builtins.strre
protocol_version3http.server.BaseHTTPRequestHandler.protocol_version
builtins.str"builtins.strr_
MessageClass/http.server.BaseHTTPRequestHandler.MessageClass
builtins.type"builtins.typerã
	responses,http.server.BaseHTTPRequestHandler.responsesœ
=typing.Mapping[builtins.int,Tuple[builtins.str,builtins.str]]
builtins.int"builtins.int`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.Mappingrs
default_request_version:http.server.BaseHTTPRequestHandler.default_request_version
builtins.str"builtins.strrç
weekdayname.http.server.BaseHTTPRequestHandler.weekdaynameN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequenceræ
	monthname,http.server.BaseHTTPRequestHandler.monthnameÇ
)typing.Sequence[Union[builtins.str,None]]D
Union[builtins.str,None]
builtins.str"builtins.str
None"typing.Sequence◊
SimpleHTTPRequestHandler$http.server.SimpleHTTPRequestHandler""http.server.BaseHTTPRequestHandler*µ
__init__-http.server.SimpleHTTPRequestHandler.__init__"
None*V
selfL
$http.server.SimpleHTTPRequestHandler"$http.server.SimpleHTTPRequestHandler*∫
request¨
CTypeAlias[Union[socket.socket,Tuple[builtins.bytes,socket.socket]]]«
8Union[socket.socket,Tuple[builtins.bytes,socket.socket]]
socket.socket"socket.socketi
#Tuple[builtins.bytes,socket.socket] 
builtins.bytes"builtins.bytes
socket.socket"socket.socket"socketserver._RequestType*D
client_address0
TypeAlias[Any]
Any"_socket._RetAddress*>
server2
socketserver.BaseServer"socketserver.BaseServer*U
	directoryD
Union[builtins.str,None]
builtins.str"builtins.str
None *ó
do_GET+http.server.SimpleHTTPRequestHandler.do_GET"
None*V
selfL
$http.server.SimpleHTTPRequestHandler"$http.server.SimpleHTTPRequestHandler*ô
do_HEAD,http.server.SimpleHTTPRequestHandler.do_HEAD"
None*V
selfL
$http.server.SimpleHTTPRequestHandler"$http.server.SimpleHTTPRequestHandler*á
	send_head.http.server.SimpleHTTPRequestHandler.send_head"r
&Union[io.BytesIO,typing.BinaryIO,None]

io.BytesIO"
io.BytesIO"
typing.BinaryIO"typing.BinaryIO
None*V
selfL
$http.server.SimpleHTTPRequestHandler"$http.server.SimpleHTTPRequestHandler*‘
list_directory3http.server.SimpleHTTPRequestHandler.list_directory">
Union[io.BytesIO,None]

io.BytesIO"
io.BytesIO
None*V
selfL
$http.server.SimpleHTTPRequestHandler"$http.server.SimpleHTTPRequestHandler*Ù
pathÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*„
translate_path3http.server.SimpleHTTPRequestHandler.translate_path"
builtins.str"builtins.str*V
selfL
$http.server.SimpleHTTPRequestHandler"$http.server.SimpleHTTPRequestHandler*&
path
builtins.str"builtins.str*œ
copyfile-http.server.SimpleHTTPRequestHandler.copyfile"
None*V
selfL
$http.server.SimpleHTTPRequestHandler"$http.server.SimpleHTTPRequestHandler*î
sourceá
%_typeshed.SupportsRead[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"_typeshed.SupportsRead*ö

outputfileâ
&_typeshed.SupportsWrite[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"_typeshed.SupportsWrite*™

guess_type/http.server.SimpleHTTPRequestHandler.guess_type"
builtins.str"builtins.str*V
selfL
$http.server.SimpleHTTPRequestHandler"$http.server.SimpleHTTPRequestHandler*Ù
pathÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPathrº
extensions_map3http.server.SimpleHTTPRequestHandler.extensions_mapu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dictÍ
CGIHTTPRequestHandler!http.server.CGIHTTPRequestHandler"$http.server.SimpleHTTPRequestHandler*ê
do_POST)http.server.CGIHTTPRequestHandler.do_POST"
None*P
selfF
!http.server.CGIHTTPRequestHandler"!http.server.CGIHTTPRequestHandler*§
is_cgi(http.server.CGIHTTPRequestHandler.is_cgi"
builtins.bool"builtins.bool*P
selfF
!http.server.CGIHTTPRequestHandler"!http.server.CGIHTTPRequestHandler*©
is_executable/http.server.CGIHTTPRequestHandler.is_executable"
builtins.bool"builtins.bool*P
selfF
!http.server.CGIHTTPRequestHandler"!http.server.CGIHTTPRequestHandler*Ù
pathÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*°
	is_python+http.server.CGIHTTPRequestHandler.is_python"
builtins.bool"builtins.bool*P
selfF
!http.server.CGIHTTPRequestHandler"!http.server.CGIHTTPRequestHandler*Ù
pathÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*ê
run_cgi)http.server.CGIHTTPRequestHandler.run_cgi"
None*P
selfF
!http.server.CGIHTTPRequestHandler"!http.server.CGIHTTPRequestHandlerrê
cgi_directories1http.server.CGIHTTPRequestHandler.cgi_directoriesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrX
	have_fork+http.server.CGIHTTPRequestHandler.have_fork
builtins.bool"builtins.boolª

executablehttp.server.executable"
builtins.bool"builtins.bool*Ù
pathÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*á
__annotations__http.server.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
emailemail *j
__all__http.server.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list