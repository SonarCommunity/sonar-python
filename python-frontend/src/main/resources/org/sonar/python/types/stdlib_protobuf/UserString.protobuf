

UserString√O

UserStringUserString.UserString"typing.Sequence*ü
__init__UserString.UserString.__init__"
None*8
self.
UserString.UserString"UserString.UserString*+
seq"
builtins.object"builtins.objectz27*Ç
__int__UserString.UserString.__int__"
builtins.int"builtins.int*6
self.
UserString.UserString"UserString.UserStringz27*Ñ
__long__UserString.UserString.__long__"
builtins.int"builtins.int*6
self.
UserString.UserString"UserString.UserStringz27*ä
	__float__UserString.UserString.__float__" 
builtins.float"builtins.float*6
self.
UserString.UserString"UserString.UserStringz27*í
__complex__!UserString.UserString.__complex__"$
builtins.complex"builtins.complex*6
self.
UserString.UserString"UserString.UserStringz27*Ü
__hash__UserString.UserString.__hash__"
builtins.int"builtins.int*8
self.
UserString.UserString"UserString.UserStringz27*Ç
__len__UserString.UserString.__len__"
builtins.int"builtins.int*6
self.
UserString.UserString"UserString.UserStringz27*p
__add__UserString.UserString.__add__"
UserString._UST*
self
UserString._UST*
other
Anyz27*r
__radd__UserString.UserString.__radd__"
UserString._UST*
self
UserString._UST*
other
Anyz27*Ö
__mul__UserString.UserString.__mul__"
UserString._UST*
self
UserString._UST*%
other
builtins.int"builtins.intz27*á
__rmul__UserString.UserString.__rmul__"
UserString._UST*
self
UserString._UST*%
other
builtins.int"builtins.intz27*o
__mod__UserString.UserString.__mod__"
UserString._UST*
self
UserString._UST*
args
Anyz27*f

capitalize UserString.UserString.capitalize"
UserString._UST*
self
UserString._USTz27*ö
centerUserString.UserString.center"
UserString._UST*
self
UserString._UST*'
width
builtins.int"builtins.int*
args
Anyz27*˚
countUserString.UserString.count"
builtins.int"builtins.int*8
self.
UserString.UserString"UserString.UserString*%
sub
builtins.int"builtins.int*)
start
builtins.int"builtins.int *'
end
builtins.int"builtins.int z27*à
decodeUserString.UserString.decode"
UserString._UST*
self
UserString._UST*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None z27*à
encodeUserString.UserString.encode"
UserString._UST*
self
UserString._UST*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None z27*¯
endswithUserString.UserString.endswith"
builtins.bool"builtins.bool*8
self.
UserString.UserString"UserString.UserString*…
suffixº
8Union[builtins.unicode,builtins.tuple[builtins.unicode]]$
builtins.unicode"builtins.unicodeX
 builtins.tuple[builtins.unicode]$
builtins.unicode"builtins.unicode"builtins.tuple*Q
startD
Union[builtins.int,None]
builtins.int"builtins.int
None *O
endD
Union[builtins.int,None]
builtins.int"builtins.int
None z27*ì

expandtabs UserString.UserString.expandtabs"
UserString._UST*
self
UserString._UST*+
tabsize
builtins.int"builtins.int z27*Å
findUserString.UserString.find"
builtins.int"builtins.int*8
self.
UserString.UserString"UserString.UserString*-
sub$
builtins.unicode"builtins.unicode*)
start
builtins.int"builtins.int *'
end
builtins.int"builtins.int z27*É
indexUserString.UserString.index"
builtins.int"builtins.int*8
self.
UserString.UserString"UserString.UserString*-
sub$
builtins.unicode"builtins.unicode*)
start
builtins.int"builtins.int *'
end
builtins.int"builtins.int z27*Ü
isalphaUserString.UserString.isalpha"
builtins.bool"builtins.bool*8
self.
UserString.UserString"UserString.UserStringz27*Ü
isalnumUserString.UserString.isalnum"
builtins.bool"builtins.bool*8
self.
UserString.UserString"UserString.UserStringz27*ä
	isdecimalUserString.UserString.isdecimal"
builtins.bool"builtins.bool*8
self.
UserString.UserString"UserString.UserStringz27*Ü
isdigitUserString.UserString.isdigit"
builtins.bool"builtins.bool*8
self.
UserString.UserString"UserString.UserStringz27*Ü
islowerUserString.UserString.islower"
builtins.bool"builtins.bool*8
self.
UserString.UserString"UserString.UserStringz27*ä
	isnumericUserString.UserString.isnumeric"
builtins.bool"builtins.bool*8
self.
UserString.UserString"UserString.UserStringz27*Ü
isspaceUserString.UserString.isspace"
builtins.bool"builtins.bool*8
self.
UserString.UserString"UserString.UserStringz27*Ü
istitleUserString.UserString.istitle"
builtins.bool"builtins.bool*8
self.
UserString.UserString"UserString.UserStringz27*Ü
isupperUserString.UserString.isupper"
builtins.bool"builtins.bool*8
self.
UserString.UserString"UserString.UserStringz27*Î
joinUserString.UserString.join"$
builtins.unicode"builtins.unicode*8
self.
UserString.UserString"UserString.UserString*c
seqZ
!typing.Iterable[builtins.unicode]$
builtins.unicode"builtins.unicode"typing.Iterablez27*ò
ljustUserString.UserString.ljust"
UserString._UST*
self
UserString._UST*'
width
builtins.int"builtins.int*
args
Anyz27*\
lowerUserString.UserString.lower"
UserString._UST*
self
UserString._USTz27*Ω
lstripUserString.UserString.lstrip"
UserString._UST*
self
UserString._UST*]
charsP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None z27*À
	partitionUserString.UserString.partition"Ø
9Tuple[builtins.unicode,builtins.unicode,builtins.unicode]$
builtins.unicode"builtins.unicode$
builtins.unicode"builtins.unicode$
builtins.unicode"builtins.unicode*8
self.
UserString.UserString"UserString.UserString*-
sep$
builtins.unicode"builtins.unicodez27*Ï
replaceUserString.UserString.replace"
UserString._UST*
self
UserString._UST*-
old$
builtins.unicode"builtins.unicode*-
new$
builtins.unicode"builtins.unicode*,
maxsplit
builtins.int"builtins.int z27*É
rfindUserString.UserString.rfind"
builtins.int"builtins.int*8
self.
UserString.UserString"UserString.UserString*-
sub$
builtins.unicode"builtins.unicode*)
start
builtins.int"builtins.int *'
end
builtins.int"builtins.int z27*Ö
rindexUserString.UserString.rindex"
builtins.int"builtins.int*8
self.
UserString.UserString"UserString.UserString*-
sub$
builtins.unicode"builtins.unicode*)
start
builtins.int"builtins.int *'
end
builtins.int"builtins.int z27*ò
rjustUserString.UserString.rjust"
UserString._UST*
self
UserString._UST*'
width
builtins.int"builtins.int*
args
Anyz27*Õ

rpartition UserString.UserString.rpartition"Ø
9Tuple[builtins.unicode,builtins.unicode,builtins.unicode]$
builtins.unicode"builtins.unicode$
builtins.unicode"builtins.unicode$
builtins.unicode"builtins.unicode*8
self.
UserString.UserString"UserString.UserString*-
sep$
builtins.unicode"builtins.unicodez27*Ω
rstripUserString.UserString.rstrip"
UserString._UST*
self
UserString._UST*]
charsP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None z27*≈
splitUserString.UserString.split"V
builtins.list[builtins.unicode]$
builtins.unicode"builtins.unicode"builtins.list*8
self.
UserString.UserString"UserString.UserString*[
sepP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None *,
maxsplit
builtins.int"builtins.int z27*«
rsplitUserString.UserString.rsplit"V
builtins.list[builtins.unicode]$
builtins.unicode"builtins.unicode"builtins.list*8
self.
UserString.UserString"UserString.UserString*[
sepP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None *,
maxsplit
builtins.int"builtins.int z27*Ú

splitlines UserString.UserString.splitlines"V
builtins.list[builtins.unicode]$
builtins.unicode"builtins.unicode"builtins.list*8
self.
UserString.UserString"UserString.UserString*,
keepends
builtins.int"builtins.int z27*¸

startswith UserString.UserString.startswith"
builtins.bool"builtins.bool*8
self.
UserString.UserString"UserString.UserString*…
prefixº
8Union[builtins.unicode,builtins.tuple[builtins.unicode]]$
builtins.unicode"builtins.unicodeX
 builtins.tuple[builtins.unicode]$
builtins.unicode"builtins.unicode"builtins.tuple*Q
startD
Union[builtins.int,None]
builtins.int"builtins.int
None *O
endD
Union[builtins.int,None]
builtins.int"builtins.int
None z27*ª
stripUserString.UserString.strip"
UserString._UST*
self
UserString._UST*]
charsP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None z27*b
swapcaseUserString.UserString.swapcase"
UserString._UST*
self
UserString._USTz27*\
titleUserString.UserString.title"
UserString._UST*
self
UserString._USTz27*w
	translateUserString.UserString.translate"
UserString._UST*
self
UserString._UST*
args
Anyz27*\
upperUserString.UserString.upper"
UserString._UST*
self
UserString._USTz27*Ö
zfillUserString.UserString.zfill"
UserString._UST*
self
UserString._UST*'
width
builtins.int"builtins.intz272‰
__getitem__!UserString.UserString.__getitem__ì
__getitem__!UserString.UserString.__getitem__"
UserString._UST*
self
UserString._UST*!
i
builtins.int"builtins.int0:overloadXó
__getitem__!UserString.UserString.__getitem__"
UserString._UST*
self
UserString._UST*%
s 
builtins.slice"builtins.slice0:overloadX"27j27rL
dataUserString.UserString.data$
builtins.unicode"builtins.unicode*27¿
MutableStringUserString.MutableString"UserString.UserString"typing.MutableSequence*Ä
__setitem__$UserString.MutableString.__setitem__"
None*<
self4
UserString.MutableString"UserString.MutableString*o
indexf
"Union[builtins.int,builtins.slice]
builtins.int"builtins.int 
builtins.slice"builtins.slice*
sub
Anyz27*
__delitem__$UserString.MutableString.__delitem__"
None*<
self4
UserString.MutableString"UserString.MutableString*o
indexf
"Union[builtins.int,builtins.slice]
builtins.int"builtins.int 
builtins.slice"builtins.slicez27*£
	immutable"UserString.MutableString.immutable".
UserString.UserString"UserString.UserString*>
self4
UserString.MutableString"UserString.MutableStringz27*u
__iadd__!UserString.MutableString.__iadd__"
UserString._MST*
self
UserString._MST*
other
Anyz27*ß
__imul__!UserString.MutableString.__imul__"
UserString._MST*<
self4
UserString.MutableString"UserString.MutableString*!
n
builtins.int"builtins.intz27*¥
insertUserString.MutableString.insert"
None*>
self4
UserString.MutableString"UserString.MutableString*'
index
builtins.int"builtins.int*
value
Anyz272Ì
__getitem__$UserString.MutableString.__getitem__ñ
__getitem__$UserString.MutableString.__getitem__"
UserString._MST*
self
UserString._MST*!
i
builtins.int"builtins.int0:overloadXö
__getitem__$UserString.MutableString.__getitem__"
UserString._MST*
self
UserString._MST*%
s 
builtins.slice"builtins.slice0:overloadX"27j27