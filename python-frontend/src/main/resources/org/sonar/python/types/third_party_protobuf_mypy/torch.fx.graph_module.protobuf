
torch.fx.graph_module©
_EvalCacheLoader&torch.fx.graph_module._EvalCacheLoader"builtins.object*E
__init__/torch.fx.graph_module._EvalCacheLoader.__init__*
self*Á
cache,torch.fx.graph_module._EvalCacheLoader.cache"
Any*Z
selfP
&torch.fx.graph_module._EvalCacheLoader"&torch.fx.graph_module._EvalCacheLoader*%
src
builtins.str"builtins.str*d
globalsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
	co_fields
Any *û

get_source1torch.fx.graph_module._EvalCacheLoader.get_source"D
Union[builtins.str,None]
builtins.str"builtins.str
None*Z
selfP
&torch.fx.graph_module._EvalCacheLoader"&torch.fx.graph_module._EvalCacheLoader*
module_name
Any*E
_get_key/torch.fx.graph_module._EvalCacheLoader._get_key*
selfrH

eval_cache1torch.fx.graph_module._EvalCacheLoader.eval_cache
AnyrB
next_id.torch.fx.graph_module._EvalCacheLoader.next_id
Any¨
_CodeOnlyModule%torch.fx.graph_module._CodeOnlyModule"torch.nn.modules.module.Module*N
__init__.torch.fx.graph_module._CodeOnlyModule.__init__*
self*
bodyÆ
_WrappedCall"torch.fx.graph_module._WrappedCall"builtins.object*X
__init__+torch.fx.graph_module._WrappedCall.__init__*
self*
cls*
cls_call*Ê
_generate_error_message:torch.fx.graph_module._WrappedCall._generate_error_message"
builtins.str"builtins.str*C
frame_summary0
traceback.FrameSummary"traceback.FrameSummary0:staticmethodh*`
__call__+torch.fx.graph_module._WrappedCall.__call__*
self*
obj*
args*

kwargsr6
cls&torch.fx.graph_module._WrappedCall.cls
Anyr@
cls_call+torch.fx.graph_module._WrappedCall.cls_call
Any¹0
GraphModule!torch.fx.graph_module.GraphModule"torch.nn.modules.module.Module*ê
__new__)torch.fx.graph_module.GraphModule.__new__"
Any*‚
clsy
'Type[torch.fx.graph_module.GraphModule]F
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule"type*
args
Any*
kwargs
Any*ï
__init__*torch.fx.graph_module.GraphModule.__init__"
None*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*ï
rootä
EUnion[torch.nn.modules.module.Module,builtins.dict[builtins.str,Any]]@
torch.nn.modules.module.Module"torch.nn.modules.module.ModuleW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*7
graph,
torch.fx.graph.Graph"torch.fx.graph.Graph*.

class_name
builtins.str"builtins.str 0*Ä
	to_folder+torch.fx.graph_module.GraphModule.to_folder"
Any*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*|
folderp
$Union[builtins.str,os.PathLike[Any]]
builtins.str"builtins.str(
os.PathLike[Any]
Any"os.PathLike*/
module_name
builtins.str"builtins.str 0*§
add_submodule/torch.fx.graph_module.GraphModule.add_submodule"
builtins.bool"builtins.bool*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*(
target
builtins.str"builtins.str*G
m@
torch.nn.modules.module.Module"torch.nn.modules.module.Module0*ä
delete_submodule2torch.fx.graph_module.GraphModule.delete_submodule"
builtins.bool"builtins.bool*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*(
target
builtins.str"builtins.str0*¼
delete_all_unused_submodules>torch.fx.graph_module.GraphModule.delete_all_unused_submodules"
None*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule0*¬
code&torch.fx.graph_module.GraphModule.code"
builtins.str"builtins.str*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule0:property`*Ä
	recompile+torch.fx.graph_module.GraphModule.recompile"6
torch.fx.graph.PythonCode"torch.fx.graph.PythonCode*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule0*õ
__reduce_deploy__3torch.fx.graph_module.GraphModule.__reduce_deploy__"
Any*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*P
importerB
torch.package.importer.Importer"torch.package.importer.Importer*•
__reduce_package__4torch.fx.graph_module.GraphModule.__reduce_package__"
Any*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*n
exporter`
.torch.package.package_exporter.PackageExporter".torch.package.package_exporter.PackageExporter*D

__reduce__,torch.fx.graph_module.GraphModule.__reduce__*
self*L
_deepcopy_init0torch.fx.graph_module.GraphModule._deepcopy_init*
self*R
__deepcopy__.torch.fx.graph_module.GraphModule.__deepcopy__*
self*
memo*@
__copy__*torch.fx.graph_module.GraphModule.__copy__*
self*Ž
print_readable0torch.fx.graph_module.GraphModule.print_readable*
self*
print_output *
include_stride *
include_device 0*œ
__str__)torch.fx.graph_module.GraphModule.__str__"
builtins.str"builtins.str*HF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*h
_replicate_for_data_parallel>torch.fx.graph_module.GraphModule._replicate_for_data_parallel*
self*v
_set_replace_hook3torch.fx.graph_module.GraphModule._set_replace_hook*
self*
f0:contextlib.contextmanager*k
_register_create_node_hook<torch.fx.graph_module.GraphModule._register_create_node_hook*
self*
f*o
_unregister_create_node_hook>torch.fx.graph_module.GraphModule._unregister_create_node_hook*
self*
f*i
_register_erase_node_hook;torch.fx.graph_module.GraphModule._register_erase_node_hook*
self*
f*m
_unregister_erase_node_hook=torch.fx.graph_module.GraphModule._unregister_erase_node_hook*
self*
f2Ç
graph'torch.fx.graph_module.GraphModule.graphÀ
graph'torch.fx.graph_module.GraphModule.graph",
torch.fx.graph.Graph"torch.fx.graph.Graph*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule0:propertyX`Ñ
graph'torch.fx.graph_module.GraphModule.graph"
None*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*3
g,
torch.fx.graph.Graph"torch.fx.graph.Graph0:graph.setter8r¤
__jit_unused_properties__;torch.fx.graph_module.GraphModule.__jit_unused_properties__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listró
_tracer_cls-torch.fx.graph_module.GraphModule._tracer_cls´
1Union[Type[torch.fx._symbolic_trace.Tracer],None]s
%Type[torch.fx._symbolic_trace.Tracer]B
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer"type
Noner›
_tracer_extras0torch.fx.graph_module.GraphModule._tracer_extrasW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr‡
meta&torch.fx.graph_module.GraphModule.metaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrJ
_replace_hook/torch.fx.graph_module.GraphModule._replace_hook
NonerÙ
_create_node_hooks4torch.fx.graph_module.GraphModule._create_node_hooksŒ
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.listr×
_erase_node_hooks3torch.fx.graph_module.GraphModule._erase_node_hooksŒ
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.listr;
_graph(torch.fx.graph_module.GraphModule._graph
Anyrt
_in_spec*torch.fx.graph_module.GraphModule._in_spec<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpecr®
	_out_spec+torch.fx.graph_module.GraphModule._out_spect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
Noner9
_code'torch.fx.graph_module.GraphModule._code
AnyrE
_lineno_map-torch.fx.graph_module.GraphModule._lineno_map
Anyû
KeepModules@183%torch.fx.graph_module.KeepModules@183"builtins.object*¯
is_leaf_module4torch.fx.graph_module.KeepModules@183.is_leaf_module"
builtins.bool"builtins.bool*X
selfN
%torch.fx.graph_module.KeepModules@183"%torch.fx.graph_module.KeepModules@183*G
_@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*$
__
builtins.str"builtins.strQ
GraphModuleImpl@347)torch.fx.graph_module.GraphModuleImpl@347"builtins.objectì
_exec_with_source'torch.fx.graph_module._exec_with_source"
Any*%
src
builtins.str"builtins.str*d
globalsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
	co_fields
Any ì
_forward_from_src'torch.fx.graph_module._forward_from_src"
Any*%
src
builtins.str"builtins.str*d
globalsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
	co_fields
Any Ý
_method_from_src&torch.fx.graph_module._method_from_src"K
CallableType[builtins.function]&
builtins.function"builtins.function*-
method_name
builtins.str"builtins.str*%
src
builtins.str"builtins.str*d
globalsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
	co_fields
Any ô
_format_import_statement.torch.fx.graph_module._format_import_statement"
builtins.str"builtins.str*&
name
builtins.str"builtins.str*
obj
Any*P
importerB
torch.package.importer.Importer"torch.package.importer.Importerƒ
_format_import_block*torch.fx.graph_module._format_import_block"
Any*d
globalsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*P
importerB
torch.package.importer.Importer"torch.package.importer.ImporterŠ
_deserialize_graph_module/torch.fx.graph_module._deserialize_graph_module"@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*
forward
Any*C
body9
builtins.dict[Any,Any]
Any
Any"builtins.dict*
graph_module_cls
Any …

_copy_attr torch.fx.graph_module._copy_attr"
Any*Q
from_module@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*O
	to_module@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*(
target
builtins.str"builtins.strÍ
_assign_attr"torch.fx.graph_module._assign_attr"
Any*
from_obj
Any*O
	to_module@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*(
target
builtins.str"builtins.str*‘
__annotations__%torch.fx.graph_module.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
nntorch.nn *t
__all__torch.fx.graph_module.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*t
_USER_PRESERVED_ATTRIBUTES_KEY4torch.fx.graph_module._USER_PRESERVED_ATTRIBUTES_KEY
builtins.str"builtins.str*z
_loadertorch.fx.graph_module._loaderP
&torch.fx.graph_module._EvalCacheLoader"&torch.fx.graph_module._EvalCacheLoader