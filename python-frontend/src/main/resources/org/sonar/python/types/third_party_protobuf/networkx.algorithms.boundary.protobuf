
networkx.algorithms.boundary"«y
edge_boundary*networkx.algorithms.boundary.edge_boundaryﬂ
edge_boundary*networkx.algorithms.boundary.edge_boundary"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *
data
Any *
keys
Any *
default
Any 0:overloadX¡

edge_boundary*networkx.algorithms.boundary.edge_boundary"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*
data
Any*
keys
Any *
default
Any 0:overloadX√

edge_boundary*networkx.algorithms.boundary.edge_boundary"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *
data
Any*
keys
Any *
default
Any 0:overloadXæ
edge_boundary*networkx.algorithms.boundary.edge_boundary"π
òtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]ı
|Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*&
data
builtins.str"builtins.str*
keys
Any *£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX¿
edge_boundary*networkx.algorithms.boundary.edge_boundary"π
òtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]ı
|Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *&
data
builtins.str"builtins.str*
keys
Any *£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadXë	
edge_boundary*networkx.algorithms.boundary.edge_boundary"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*
data
Any*
keys
Any*
default
Any 0:overloadXï	
edge_boundary*networkx.algorithms.boundary.edge_boundary"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *
data
Any *
keys
Any*
default
Any 0:overloadX˜

edge_boundary*networkx.algorithms.boundary.edge_boundary"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*
data
Any*
keys
Any*
default
Any 0:overloadX˘

edge_boundary*networkx.algorithms.boundary.edge_boundary"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *
data
Any*
keys
Any*
default
Any 0:overloadXı
edge_boundary*networkx.algorithms.boundary.edge_boundary"Ú
•typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]°
âTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*&
data
builtins.str"builtins.str*
keys
Any*£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX˜
edge_boundary*networkx.algorithms.boundary.edge_boundary"Ú
•typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]°
âTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *&
data
builtins.str"builtins.str*
keys
Any*£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX"36"37"ÒÄ
edge_boundary*networkx.algorithms.boundary.edge_boundary≈	
edge_boundary*networkx.algorithms.boundary.edge_boundary"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *F
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool *F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
default
Any 0:overloadXß
edge_boundary*networkx.algorithms.boundary.edge_boundary"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
default
Any 0:overloadX©
edge_boundary*networkx.algorithms.boundary.edge_boundary"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
default
Any 0:overloadXÒ
edge_boundary*networkx.algorithms.boundary.edge_boundary"π
òtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]ı
|Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*&
data
builtins.str"builtins.str*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadXÛ
edge_boundary*networkx.algorithms.boundary.edge_boundary"π
òtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]ı
|Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *&
data
builtins.str"builtins.str*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX˜	
edge_boundary*networkx.algorithms.boundary.edge_boundary"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadX˚	
edge_boundary*networkx.algorithms.boundary.edge_boundary"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *F
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool *D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadX›
edge_boundary*networkx.algorithms.boundary.edge_boundary"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadXﬂ
edge_boundary*networkx.algorithms.boundary.edge_boundary"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadX®
edge_boundary*networkx.algorithms.boundary.edge_boundary"Ú
•typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]°
âTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*&
data
builtins.str"builtins.str*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX™
edge_boundary*networkx.algorithms.boundary.edge_boundary"Ú
•typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]°
âTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *&
data
builtins.str"builtins.str*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX"38"39"310"311"312"313*º
__annotations__,networkx.algorithms.boundary.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313*@
Literal$networkx.algorithms.boundary.Literal
Any*36*37