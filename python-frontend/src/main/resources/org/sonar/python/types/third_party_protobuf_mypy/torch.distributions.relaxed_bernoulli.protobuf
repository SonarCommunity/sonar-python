
%torch.distributions.relaxed_bernoulli¦
LogitRelaxedBernoulli;torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli"-torch.distributions.distribution.Distribution*›
__init__Dtorch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.__init__*
self*
temperature*
probs *
logits *
validate_args *x
expandBtorch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.expand*
self*
batch_shape*
	_instance *h
_new@torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli._new*
self*
args*

kwargs*g
logitsBtorch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.logits*
self0:lazy_property*e
probsAtorch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.probs*
self0:lazy_property*n
param_shapeGtorch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.param_shape*
self0:property`*l
rsampleCtorch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.rsample*
self*
sample_shape *e
log_probDtorch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.log_prob*
self*	
valuer°
arg_constraintsKtorch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.arg_constraintsÏ
Fbuiltins.dict[builtins.str,torch.distributions.constraints.Constraint]
builtins.str"builtins.strX
*torch.distributions.constraints.Constraint"*torch.distributions.constraints.Constraint"builtins.dictrž
supportCtorch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.supportN
%torch.distributions.constraints._Real"%torch.distributions.constraints._Realr_
temperatureGtorch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.temperature
AnyrU
_paramBtorch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli._param
AnyŽ

RelaxedBernoulli6torch.distributions.relaxed_bernoulli.RelaxedBernoulli"Dtorch.distributions.transformed_distribution.TransformedDistribution*–
__init__?torch.distributions.relaxed_bernoulli.RelaxedBernoulli.__init__*
self*
temperature*
probs *
logits *
validate_args *s
expand=torch.distributions.relaxed_bernoulli.RelaxedBernoulli.expand*
self*
batch_shape*
	_instance *i
temperatureBtorch.distributions.relaxed_bernoulli.RelaxedBernoulli.temperature*
self0:property`*_
logits=torch.distributions.relaxed_bernoulli.RelaxedBernoulli.logits*
self0:property`*]
probs<torch.distributions.relaxed_bernoulli.RelaxedBernoulli.probs*
self0:property`r«
arg_constraintsFtorch.distributions.relaxed_bernoulli.RelaxedBernoulli.arg_constraintsÏ
Fbuiltins.dict[builtins.str,torch.distributions.constraints.Constraint]
builtins.str"builtins.strX
*torch.distributions.constraints.Constraint"*torch.distributions.constraints.Constraint"builtins.dictr¡
support>torch.distributions.relaxed_bernoulli.RelaxedBernoulli.supportV
)torch.distributions.constraints._Interval")torch.distributions.constraints._Intervalrq
has_rsampleBtorch.distributions.relaxed_bernoulli.RelaxedBernoulli.has_rsample
builtins.bool"builtins.bool*¡
__annotations__5torch.distributions.relaxed_bernoulli.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*„
__all__-torch.distributions.relaxed_bernoulli.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list