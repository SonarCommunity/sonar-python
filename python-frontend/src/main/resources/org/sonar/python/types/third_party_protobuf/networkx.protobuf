
networkx¶
NetworkXTreewidthBoundExceeded:networkx.algorithms.chordal.NetworkXTreewidthBoundExceeded"$networkx.exception.NetworkXExceptionj36j37j38j39j310j311j312j313Ä6
PlanarEmbedding-networkx.algorithms.planarity.PlanarEmbedding" networkx.classes.digraph.DiGraph*ü
get_data6networkx.algorithms.planarity.PlanarEmbedding.get_data"’
Wbuiltins.dict[networkx.classes.graph._Node,builtins.list[networkx.classes.graph._Node]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableì
+builtins.list[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list"builtins.dict*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbeddingz36z37z38z39z310z311z312z313*¬
set_data6networkx.algorithms.planarity.PlanarEmbedding.set_data"
None*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*Ó
data„
\typing.Mapping[networkx.classes.graph._Node,typing.Reversible[networkx.classes.graph._Node]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableõ
/typing.Reversible[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Reversible"typing.Mappingz36z37z38z39z310z311z312z313*Û
neighbors_cw_order@networkx.algorithms.planarity.PlanarEmbedding.neighbors_cw_order"∑
8typing.Generator[networkx.classes.graph._Node,None,None]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*ﬂ
check_structure=networkx.algorithms.planarity.PlanarEmbedding.check_structure"
None*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbeddingz36z37z38z39z310z311z312z313*û
add_half_edge_ccw?networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_ccw"
None*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*e

start_nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*c
end_nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*m
reference_neighborU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*ú
add_half_edge_cw>networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_cw"
None*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*e

start_nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*c
end_nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*m
reference_neighborU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*°
connect_components@networkx.algorithms.planarity.PlanarEmbedding.connect_components"
None*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
wU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*≥
add_half_edge_firstAnetworkx.algorithms.planarity.PlanarEmbedding.add_half_edge_first"
None*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*e

start_nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*c
end_nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*é
next_face_half_edgeAnetworkx.algorithms.planarity.PlanarEmbedding.next_face_half_edge"Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
wU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*ã	
traverse_face;networkx.algorithms.planarity.PlanarEmbedding.traverse_face"ì
+builtins.list[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
wU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*Â
mark_half_edgesÕ
_Union[typing.MutableSet[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],None]›
Styping.MutableSet[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSet
None z36z37z38z39z310z311z312z313Pj36j37j38j39j310j311j312j313π
ArborescenceIterator8networkx.algorithms.tree.branchings.ArborescenceIterator"builtins.object*Ÿ
__init__Anetworkx.algorithms.tree.branchings.ArborescenceIterator.__init__"
None*~
selft
8networkx.algorithms.tree.branchings.ArborescenceIterator"8networkx.algorithms.tree.branchings.ArborescenceIterator*
G
Any**
weight
builtins.str"builtins.str *-
minimum
builtins.bool"builtins.bool *q
init_partition[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313*–
__iter__Anetworkx.algorithms.tree.branchings.ArborescenceIterator.__iter__"e
typing.Iterator[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"typing.Iterator*vt
8networkx.algorithms.tree.branchings.ArborescenceIterator"8networkx.algorithms.tree.branchings.ArborescenceIteratorz36z37z38z39z310z311z312z313*{
__next__Anetworkx.algorithms.tree.branchings.ArborescenceIterator.__next__*
selfz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313rñ
G:networkx.algorithms.tree.branchings.ArborescenceIterator.G1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r†
weight?networkx.algorithms.tree.branchings.ArborescenceIterator.weight1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r¢
minimum@networkx.algorithms.tree.branchings.ArborescenceIterator.minimum1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r†
method?networkx.algorithms.tree.branchings.ArborescenceIterator.method1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rô
partition_keyFnetworkx.algorithms.tree.branchings.ArborescenceIterator.partition_key
builtins.str"builtins.str*36*37*38*39*310*311*312*313r∞
init_partitionGnetworkx.algorithms.tree.branchings.ArborescenceIterator.init_partition1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r≤
partition_queueHnetworkx.algorithms.tree.branchings.ArborescenceIterator.partition_queue1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313~
NotATree(networkx.algorithms.tree.coding.NotATree"$networkx.exception.NetworkXExceptionj36j37j38j39j310j311j312j313Ô
EdgePartition*networkx.algorithms.tree.mst.EdgePartition"	enum.EnumHj36j37j38j39j310j311j312j313ry
OPEN/networkx.algorithms.tree.mst.EdgePartition.OPEN
builtins.int"builtins.int*36*37*38*39*310*311*312*313rÅ
INCLUDED3networkx.algorithms.tree.mst.EdgePartition.INCLUDED
builtins.int"builtins.int*36*37*38*39*310*311*312*313rÅ
EXCLUDED3networkx.algorithms.tree.mst.EdgePartition.EXCLUDED
builtins.int"builtins.int*36*37*38*39*310*311*312*313Î
SpanningTreeIterator1networkx.algorithms.tree.mst.SpanningTreeIterator"builtins.object*É
__init__:networkx.algorithms.tree.mst.SpanningTreeIterator.__init__"
None*p
selff
1networkx.algorithms.tree.mst.SpanningTreeIterator"1networkx.algorithms.tree.mst.SpanningTreeIterator*
G
Any**
weight
builtins.str"builtins.str *-
minimum
builtins.bool"builtins.bool *0

ignore_nan
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*ª
__iter__:networkx.algorithms.tree.mst.SpanningTreeIterator.__iter__"e
typing.Iterator[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"typing.Iterator*hf
1networkx.algorithms.tree.mst.SpanningTreeIterator"1networkx.algorithms.tree.mst.SpanningTreeIteratorz36z37z38z39z310z311z312z313*t
__next__:networkx.algorithms.tree.mst.SpanningTreeIterator.__next__*
selfz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313rè
G3networkx.algorithms.tree.mst.SpanningTreeIterator.G1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rô
weight8networkx.algorithms.tree.mst.SpanningTreeIterator.weight1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rõ
minimum9networkx.algorithms.tree.mst.SpanningTreeIterator.minimum1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r°

ignore_nan<networkx.algorithms.tree.mst.SpanningTreeIterator.ignore_nan1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rí
partition_key?networkx.algorithms.tree.mst.SpanningTreeIterator.partition_key
builtins.str"builtins.str*36*37*38*39*310*311*312*313r´
partition_queueAnetworkx.algorithms.tree.mst.SpanningTreeIterator.partition_queue1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313ÌT
DiGraph networkx.classes.digraph.DiGraph"networkx.classes.graph.Graph*ä
succ%networkx.classes.digraph.DiGraph.succ"¯
énetworkx.classes.coreviews.AdjacencyView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"(networkx.classes.coreviews.AdjacencyView*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:cached_propertyz36z37*†
succ%networkx.classes.digraph.DiGraph.succ"¯
énetworkx.classes.coreviews.AdjacencyView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"(networkx.classes.coreviews.AdjacencyView*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:cached_property`z38z39z310z311z312z313*ä
pred%networkx.classes.digraph.DiGraph.pred"¯
énetworkx.classes.coreviews.AdjacencyView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"(networkx.classes.coreviews.AdjacencyView*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:cached_propertyz36z37*†
pred%networkx.classes.digraph.DiGraph.pred"¯
énetworkx.classes.coreviews.AdjacencyView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"(networkx.classes.coreviews.AdjacencyView*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:cached_property`z38z39z310z311z312z313*Ü
has_successor.networkx.classes.digraph.DiGraph.has_successor"
builtins.bool"builtins.bool*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*\
uU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*ä
has_predecessor0networkx.classes.digraph.DiGraph.has_predecessor"
builtins.bool"builtins.bool*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*\
uU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*ú

successors+networkx.classes.digraph.DiGraph.successors"ó
-typing.Iterator[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterator*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*\
nU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*†
predecessors-networkx.classes.digraph.DiGraph.predecessors"ó
-typing.Iterator[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterator*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*\
nU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*Â
	out_edges*networkx.classes.digraph.DiGraph.out_edges"…
Fnetworkx.classes.reportviews.OutEdgeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"(networkx.classes.reportviews.OutEdgeView*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:cached_propertyz36z37*˚
	out_edges*networkx.classes.digraph.DiGraph.out_edges"…
Fnetworkx.classes.reportviews.OutEdgeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"(networkx.classes.reportviews.OutEdgeView*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:cached_property`z38z39z310z311z312z313*„
in_edges)networkx.classes.digraph.DiGraph.in_edges"…
Fnetworkx.classes.reportviews.OutEdgeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"(networkx.classes.reportviews.OutEdgeView*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:cached_propertyz36z37*˘
in_edges)networkx.classes.digraph.DiGraph.in_edges"…
Fnetworkx.classes.reportviews.OutEdgeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"(networkx.classes.reportviews.OutEdgeView*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:cached_property`z38z39z310z311z312z313*Á
	in_degree*networkx.classes.digraph.DiGraph.in_degree"À
Gnetworkx.classes.reportviews.DiDegreeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable")networkx.classes.reportviews.DiDegreeView*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:cached_propertyz36z37*˝
	in_degree*networkx.classes.digraph.DiGraph.in_degree"À
Gnetworkx.classes.reportviews.DiDegreeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable")networkx.classes.reportviews.DiDegreeView*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:cached_property`z38z39z310z311z312z313*È

out_degree+networkx.classes.digraph.DiGraph.out_degree"À
Gnetworkx.classes.reportviews.DiDegreeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable")networkx.classes.reportviews.DiDegreeView*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:cached_propertyz36z37*ˇ

out_degree+networkx.classes.digraph.DiGraph.out_degree"À
Gnetworkx.classes.reportviews.DiDegreeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable")networkx.classes.reportviews.DiDegreeView*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:cached_property`z38z39z310z311z312z313*î
to_undirected.networkx.classes.digraph.DiGraph.to_undirected"
Any*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*0

reciprocal
builtins.bool"builtins.bool *-
as_view
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*Ü
reverse(networkx.classes.digraph.DiGraph.reverse"π
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph**
copy
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*É
copy%networkx.classes.digraph.DiGraph.copy"π
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*ƒ
selfπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*-
as_view
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313Pj36j37j38j39j310j311j312j313öù
Graphnetworkx.classes.graph.Graph"typing.Collection*≥
to_directed_class.networkx.classes.graph.Graph.to_directed_class"ä
DType[networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]]π
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph"type*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313*´
to_undirected_class0networkx.classes.graph.Graph.to_undirected_class"˛
@Type[networkx.classes.graph.Graph[networkx.classes.graph._Node]]±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"type*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313*ë$
__init__%networkx.classes.graph.Graph.__init__"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*›!
incoming_graph_data¡!
úUnion[TypeAlias[Union[networkx.classes.graph.Graph[networkx.classes.graph._Node],builtins.dict[networkx.classes.graph._Node,builtins.dict[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]],builtins.dict[networkx.classes.graph._Node,typing.Iterable[networkx.classes.graph._Node]],typing.Iterable[TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]],numpy.ndarray[Any,Any]]],None]ì
êTypeAlias[Union[networkx.classes.graph.Graph[networkx.classes.graph._Node],builtins.dict[networkx.classes.graph._Node,builtins.dict[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]],builtins.dict[networkx.classes.graph._Node,typing.Iterable[networkx.classes.graph._Node]],typing.Iterable[TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]],numpy.ndarray[Any,Any]]]›
ÖUnion[networkx.classes.graph.Graph[networkx.classes.graph._Node],builtins.dict[networkx.classes.graph._Node,builtins.dict[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]],builtins.dict[networkx.classes.graph._Node,typing.Iterable[networkx.classes.graph._Node]],typing.Iterable[TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]],numpy.ndarray[Any,Any]]±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.GraphÓ
wbuiltins.dict[networkx.classes.graph._Node,builtins.dict[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
Kbuiltins.dict[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"builtins.dict"builtins.dict€
Ybuiltins.dict[networkx.classes.graph._Node,typing.Iterable[networkx.classes.graph._Node]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable"builtins.dictí
⁄typing.Iterable[TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]]°

…TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]Æ
æUnion[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]‚
KTypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph._EdgeÉ
kTypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]Î
`Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"$networkx.classes.graph._EdgeWithData" networkx.classes.graph._EdgePlus"typing.Iterable9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray"networkx.classes.graph._Data
None *
attr
Anyz36z37z38z39z310z311z312z313*¸
adj networkx.classes.graph.Graph.adj"¯
énetworkx.classes.coreviews.AdjacencyView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"(networkx.classes.coreviews.AdjacencyView*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph0:cached_propertyz36z37*í
adj networkx.classes.graph.Graph.adj"¯
énetworkx.classes.coreviews.AdjacencyView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"(networkx.classes.coreviews.AdjacencyView*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph0:cached_property`z38z39z310z311z312z313*ﬁ
__getitem__(networkx.classes.graph.Graph.__getitem__"
änetworkx.classes.coreviews.AtlasView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"$networkx.classes.coreviews.AtlasView*¥±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*WU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*¶
__iter__%networkx.classes.graph.Graph.__iter__"ó
-typing.Iterator[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterator*¥±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313*⁄
__contains__)networkx.classes.graph.Graph.__contains__"
builtins.bool"builtins.bool*¥±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*$"
builtins.object"builtins.objectz36z37z38z39z310z311z312z313*®
__len__$networkx.classes.graph.Graph.__len__"
builtins.int"builtins.int*¥±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313*ù
add_node%networkx.classes.graph.Graph.add_node"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*j
node_for_addingU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*
attr
Anyz36z37z38z39z310z311z312z313*‰	
add_nodes_from+networkx.classes.graph.Graph.add_nodes_from"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*§
nodes_for_addingç
étyping.Iterable[TypeAlias[Union[networkx.classes.graph._Node,TypeAlias[Tuple[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]]Ë
}TypeAlias[Union[networkx.classes.graph._Node,TypeAlias[Tuple[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]¬
rUnion[networkx.classes.graph._Node,TypeAlias[Tuple[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableÚ
NTypeAlias[Tuple[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]˜
CTuple[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"$networkx.classes.graph._NodeWithData" networkx.classes.graph._NodePlus"typing.Iterable*
attr
Anyz36z37z38z39z310z311z312z313*Ç
remove_node(networkx.classes.graph.Graph.remove_node"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*\
nU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*÷
remove_nodes_from.networkx.classes.graph.Graph.remove_nodes_from"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*£
nodesó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterablez36z37z38z39z310z311z312z313*À
nodes"networkx.classes.graph.Graph.nodes"√
Cnetworkx.classes.reportviews.NodeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"%networkx.classes.reportviews.NodeView*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph0:cached_propertyz36z37*·
nodes"networkx.classes.graph.Graph.nodes"√
Cnetworkx.classes.reportviews.NodeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"%networkx.classes.reportviews.NodeView*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph0:cached_property`z38z39z310z311z312z313*¿
number_of_nodes,networkx.classes.graph.Graph.number_of_nodes"
builtins.int"builtins.int*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313*¨
order"networkx.classes.graph.Graph.order"
builtins.int"builtins.int*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313*í
has_node%networkx.classes.graph.Graph.has_node"
builtins.bool"builtins.bool*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*\
nU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*˝
add_edge%networkx.classes.graph.Graph.add_edge"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*d
	u_of_edgeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*d
	v_of_edgeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*
attr
Anyz36z37z38z39z310z311z312z313*Ê
add_edges_from+networkx.classes.graph.Graph.add_edges_from"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*¶
ebunch_to_addí
⁄typing.Iterable[TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]]°

…TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]Æ
æUnion[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]‚
KTypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph._EdgeÉ
kTypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]Î
`Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"$networkx.classes.graph._EdgeWithData" networkx.classes.graph._EdgePlus"typing.Iterable*
attr
Anyz36z37z38z39z310z311z312z313*º
add_weighted_edges_from4networkx.classes.graph.Graph.add_weighted_edges_from"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*æ
ebunch_to_add™
`typing.Iterable[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,TypeAlias[Any]]]¥
OTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,TypeAlias[Any]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable1
TypeAlias[Any]
Any"_typeshed.Incomplete"typing.Iterable**
weight
builtins.str"builtins.str *
attr
Anyz36z37z38z39z310z311z312z313*‡
remove_edge(networkx.classes.graph.Graph.remove_edge"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*\
uU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*“
remove_edges_from.networkx.classes.graph.Graph.remove_edges_from"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*ü
ebunchí
⁄typing.Iterable[TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]]°

…TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]Æ
æUnion[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]‚
KTypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph._EdgeÉ
kTypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]Î
`Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"$networkx.classes.graph._EdgeWithData" networkx.classes.graph._EdgePlus"typing.Iterablez36z37z38z39z310z311z312z313*
has_edge%networkx.classes.graph.Graph.has_edge"
builtins.bool"builtins.bool*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*\
uU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*é
	neighbors&networkx.classes.graph.Graph.neighbors"ó
-typing.Iterator[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterator*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*\
nU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*—
edges"networkx.classes.graph.Graph.edges"…
Fnetworkx.classes.reportviews.OutEdgeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"(networkx.classes.reportviews.OutEdgeView*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph0:cached_propertyz36z37*Á
edges"networkx.classes.graph.Graph.edges"…
Fnetworkx.classes.reportviews.OutEdgeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"(networkx.classes.reportviews.OutEdgeView*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph0:cached_property`z38z39z310z311z312z313*◊
get_edge_data*networkx.classes.graph.Graph.get_edge_data"é
+typing.Mapping[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"typing.Mapping*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*\
uU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*j
default[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313*È
	adjacency&networkx.classes.graph.Graph.adjacency"–
çtyping.Iterator[Tuple[networkx.classes.graph._Node,typing.Mapping[networkx.classes.graph._Node,typing.Mapping[builtins.str,TypeAlias[Any]]]]]¨
|Tuple[networkx.classes.graph._Node,typing.Mapping[networkx.classes.graph._Node,typing.Mapping[builtins.str,TypeAlias[Any]]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable“
Xtyping.Mapping[networkx.classes.graph._Node,typing.Mapping[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableé
+typing.Mapping[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"typing.Mapping"typing.Mapping"typing.Iterator*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313*’
degree#networkx.classes.graph.Graph.degree"À
Gnetworkx.classes.reportviews.DiDegreeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable")networkx.classes.reportviews.DiDegreeView*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph0:cached_propertyz36z37*Î
degree#networkx.classes.graph.Graph.degree"À
Gnetworkx.classes.reportviews.DiDegreeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable")networkx.classes.reportviews.DiDegreeView*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph0:cached_property`z38z39z310z311z312z313*ò
clear"networkx.classes.graph.Graph.clear"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313*§
clear_edges(networkx.classes.graph.Graph.clear_edges"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313*æ
is_multigraph*networkx.classes.graph.Graph.is_multigraph"
builtins.bool"builtins.bool*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313*∫
is_directed(networkx.classes.graph.Graph.is_directed"
builtins.bool"builtins.bool*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313*˚
copy!networkx.classes.graph.Graph.copy"˜
!networkx.classes.graph.Graph.Self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph*Ç
self˜
!networkx.classes.graph.Graph.Self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph*-
as_view
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*Ö
to_directed(networkx.classes.graph.Graph.to_directed"π
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*-
as_view
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*Å
to_undirected*networkx.classes.graph.Graph.to_undirected"±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*-
as_view
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*Ó
subgraph%networkx.classes.graph.Graph.subgraph"±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*£
nodesó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterablez36z37z38z39z310z311z312z313*µ
edge_subgraph*networkx.classes.graph.Graph.edge_subgraph"±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*‡
edges‘
\typing.Iterable[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]]]‚
KTypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph._Edge"typing.Iterablez36z37z38z39z310z311z312z313*Ù
number_of_edges,networkx.classes.graph.Graph.number_of_edges"
builtins.int"builtins.int*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*ó
uç
(Union[networkx.classes.graph._Node,None]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None *ó
vç
(Union[networkx.classes.graph._Node,None]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None z36z37z38z39z310z311z312z313*£
nbunch_iter(networkx.classes.graph.Graph.nbunch_iter"ó
-typing.Iterator[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterator*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*Ï
nbunch›
aTypeAlias[Union[networkx.classes.graph._Node,typing.Iterable[networkx.classes.graph._Node],None]]’
VUnion[networkx.classes.graph._Node,typing.Iterable[networkx.classes.graph._Node],None]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None"networkx.classes.graph._NBunch z36z37z38z39z310z311z312z3132è
name!networkx.classes.graph.Graph.nameñ
name!networkx.classes.graph.Graph.name"
builtins.str"builtins.str*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph0:propertyX`¶
name!networkx.classes.graph.Graph.name"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*#
s
builtins.str"builtins.str0:name.setter"36"37"38"39"310"311"312"3132≤
update#networkx.classes.graph.Graph.update€
update#networkx.classes.graph.Graph.update"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*Ω
edges±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
nodes
None 0:overloadXÄ
update#networkx.classes.graph.Graph.update"
None*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*á
edges˘
°Union[networkx.classes.graph.Graph[networkx.classes.graph._Node],typing.Iterable[TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]],None]±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphí
⁄typing.Iterable[TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]]°

…TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]Æ
æUnion[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]‚
KTypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph._EdgeÉ
kTypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]Î
`Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"$networkx.classes.graph._EdgeWithData" networkx.classes.graph._EdgePlus"typing.Iterable
None *Ô
nodes·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None 0:overloadX"36"37"38"39"310"311"312"3132¡
size!networkx.classes.graph.Graph.size¨
size!networkx.classes.graph.Graph.size"
builtins.int"builtins.int*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
weight
None 0:overloadX¬
size!networkx.classes.graph.Graph.size" 
builtins.float"builtins.float*º
self±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*(
weight
builtins.str"builtins.str0:overloadX"36"37"38"39"310"311"312"313Pj36j37j38j39j310j311j312j313râ
node_dict_factory.networkx.classes.graph.Graph.node_dict_factoryü
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function""networkx.classes.graph._MapFactory*36*37*38*39*310*311*312*313rì
node_attr_dict_factory3networkx.classes.graph.Graph.node_attr_dict_factoryü
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function""networkx.classes.graph._MapFactory*36*37*38*39*310*311*312*313rõ
adjlist_outer_dict_factory7networkx.classes.graph.Graph.adjlist_outer_dict_factoryü
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function""networkx.classes.graph._MapFactory*36*37*38*39*310*311*312*313rõ
adjlist_inner_dict_factory7networkx.classes.graph.Graph.adjlist_inner_dict_factoryü
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function""networkx.classes.graph._MapFactory*36*37*38*39*310*311*312*313rì
edge_attr_dict_factory3networkx.classes.graph.Graph.edge_attr_dict_factoryü
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function""networkx.classes.graph._MapFactory*36*37*38*39*310*311*312*313rï
graph_attr_dict_factory4networkx.classes.graph.Graph.graph_attr_dict_factoryü
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function""networkx.classes.graph._MapFactory*36*37*38*39*310*311*312*313r®
graph"networkx.classes.graph.Graph.graphW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313ıJ
MultiDiGraph*networkx.classes.multidigraph.MultiDiGraph"&networkx.classes.multigraph.MultiGraph" networkx.classes.digraph.DiGraph*≤
succ/networkx.classes.multidigraph.MultiDiGraph.succ"Ç
ìnetworkx.classes.coreviews.MultiAdjacencyView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"-networkx.classes.coreviews.MultiAdjacencyView*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph0:cached_propertyz36z37*»
succ/networkx.classes.multidigraph.MultiDiGraph.succ"Ç
ìnetworkx.classes.coreviews.MultiAdjacencyView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"-networkx.classes.coreviews.MultiAdjacencyView*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph0:cached_property`z38z39z310z311z312z313*≤
pred/networkx.classes.multidigraph.MultiDiGraph.pred"Ç
ìnetworkx.classes.coreviews.MultiAdjacencyView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"-networkx.classes.coreviews.MultiAdjacencyView*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph0:cached_propertyz36z37*»
pred/networkx.classes.multidigraph.MultiDiGraph.pred"Ç
ìnetworkx.classes.coreviews.MultiAdjacencyView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"-networkx.classes.coreviews.MultiAdjacencyView*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph0:cached_property`z38z39z310z311z312z313*ç
	out_edges4networkx.classes.multidigraph.MultiDiGraph.out_edges"”
Knetworkx.classes.reportviews.OutMultiEdgeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.classes.reportviews.OutMultiEdgeView*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph0:cached_propertyz36z37*£
	out_edges4networkx.classes.multidigraph.MultiDiGraph.out_edges"”
Knetworkx.classes.reportviews.OutMultiEdgeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.classes.reportviews.OutMultiEdgeView*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph0:cached_property`z38z39z310z311z312z313*ã
in_edges3networkx.classes.multidigraph.MultiDiGraph.in_edges"”
Knetworkx.classes.reportviews.OutMultiEdgeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.classes.reportviews.OutMultiEdgeView*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph0:cached_propertyz36z37*°
in_edges3networkx.classes.multidigraph.MultiDiGraph.in_edges"”
Knetworkx.classes.reportviews.OutMultiEdgeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.classes.reportviews.OutMultiEdgeView*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph0:cached_property`z38z39z310z311z312z313*è
	in_degree4networkx.classes.multidigraph.MultiDiGraph.in_degree"’
Lnetworkx.classes.reportviews.InMultiDegreeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable".networkx.classes.reportviews.InMultiDegreeView*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph0:cached_propertyz36z37*•
	in_degree4networkx.classes.multidigraph.MultiDiGraph.in_degree"’
Lnetworkx.classes.reportviews.InMultiDegreeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable".networkx.classes.reportviews.InMultiDegreeView*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph0:cached_property`z38z39z310z311z312z313*ì

out_degree5networkx.classes.multidigraph.MultiDiGraph.out_degree"◊
Mnetworkx.classes.reportviews.OutMultiDegreeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"/networkx.classes.reportviews.OutMultiDegreeView*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph0:cached_propertyz36z37*©

out_degree5networkx.classes.multidigraph.MultiDiGraph.out_degree"◊
Mnetworkx.classes.reportviews.OutMultiDegreeView[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"/networkx.classes.reportviews.OutMultiDegreeView*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph0:cached_property`z38z39z310z311z312z313*Ò
to_undirected8networkx.classes.multidigraph.MultiDiGraph.to_undirected"≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph*0

reciprocal
builtins.bool"builtins.bool *-
as_view
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*∏
reverse2networkx.classes.multidigraph.MultiDiGraph.reverse"Õ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph**
copy
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*µ
copy/networkx.classes.multidigraph.MultiDiGraph.copy"Õ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph*ÿ
selfÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph*-
as_view
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313Pj36j37j38j39j310j311j312j313Ä8

MultiGraph&networkx.classes.multigraph.MultiGraph"networkx.classes.graph.Graph*®
__init__/networkx.classes.multigraph.MultiGraph.__init__"
None*–
self≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*v
incoming_graph_data[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *_
multigraph_inputG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *
attr
Anyz36z37z38z39z310z311z312z313*§
adj*networkx.classes.multigraph.MultiGraph.adj"Ç
ìnetworkx.classes.coreviews.MultiAdjacencyView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"-networkx.classes.coreviews.MultiAdjacencyView*–
self≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph0:cached_propertyz36z37*∫
adj*networkx.classes.multigraph.MultiGraph.adj"Ç
ìnetworkx.classes.coreviews.MultiAdjacencyView[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict"-networkx.classes.coreviews.MultiAdjacencyView*–
self≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph0:cached_property`z38z39z310z311z312z313*î
new_edge_key3networkx.classes.multigraph.MultiGraph.new_edge_key"
builtins.int"builtins.int*–
self≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*\
uU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*Ë
add_edge/networkx.classes.multigraph.MultiGraph.add_edge"
Any*–
self≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*

u_for_edge
Any*

v_for_edge
Any*f
key[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
attr
Anyz36z37z38z39z310z311z312z313*…
remove_edge2networkx.classes.multigraph.MultiGraph.remove_edge"
Any*–
self≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*
u
Any*
v
Any*f
key[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313*√
has_edge/networkx.classes.multigraph.MultiGraph.has_edge"
Any*–
self≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*
u
Any*
v
Any*f
key[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313*π
get_edge_data4networkx.classes.multigraph.MultiGraph.get_edge_data"
Any*–
self≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*
u
Any*
v
Any*f
key[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *j
default[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313*°
copy+networkx.classes.multigraph.MultiGraph.copy"≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*–
self≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*-
as_view
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*∑
to_directed2networkx.classes.multigraph.MultiGraph.to_directed"Õ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph*–
self≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*-
as_view
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*≥
to_undirected4networkx.classes.multigraph.MultiGraph.to_undirected"≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*–
self≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*-
as_view
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*í
number_of_edges6networkx.classes.multigraph.MultiGraph.number_of_edges"
builtins.int"builtins.int*–
self≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*ó
uç
(Union[networkx.classes.graph._Node,None]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None *ó
vç
(Union[networkx.classes.graph._Node,None]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None z36z37z38z39z310z311z312z313Pj36j37j38j39j310j311j312j313q
NetworkXException$networkx.exception.NetworkXException"builtins.Exceptionj36j37j38j39j310j311j312j313{
NetworkXError networkx.exception.NetworkXError"$networkx.exception.NetworkXExceptionj36j37j38j39j310j311j312j313ë
NetworkXPointlessConcept+networkx.exception.NetworkXPointlessConcept"$networkx.exception.NetworkXExceptionj36j37j38j39j310j311j312j313ç
NetworkXAlgorithmError)networkx.exception.NetworkXAlgorithmError"$networkx.exception.NetworkXExceptionj36j37j38j39j310j311j312j313ä
NetworkXUnfeasible%networkx.exception.NetworkXUnfeasible")networkx.exception.NetworkXAlgorithmErrorj36j37j38j39j310j311j312j313~
NetworkXNoPath!networkx.exception.NetworkXNoPath"%networkx.exception.NetworkXUnfeasiblej36j37j38j39j310j311j312j313Ä
NetworkXNoCycle"networkx.exception.NetworkXNoCycle"%networkx.exception.NetworkXUnfeasiblej36j37j38j39j310j311j312j313s
	HasACyclenetworkx.exception.HasACycle"$networkx.exception.NetworkXExceptionj36j37j38j39j310j311j312j313à
NetworkXUnbounded$networkx.exception.NetworkXUnbounded")networkx.exception.NetworkXAlgorithmErrorj36j37j38j39j310j311j312j313ç
NetworkXNotImplemented)networkx.exception.NetworkXNotImplemented"$networkx.exception.NetworkXExceptionj36j37j38j39j310j311j312j313y
NodeNotFoundnetworkx.exception.NodeNotFound"$networkx.exception.NetworkXExceptionj36j37j38j39j310j311j312j313É
AmbiguousSolution$networkx.exception.AmbiguousSolution"$networkx.exception.NetworkXExceptionj36j37j38j39j310j311j312j313ã
ExceededMaxIterations(networkx.exception.ExceededMaxIterations"$networkx.exception.NetworkXExceptionj36j37j38j39j310j311j312j313–
PowerIterationFailedConvergence2networkx.exception.PowerIterationFailedConvergence"(networkx.exception.ExceededMaxIterations*™
__init__;networkx.exception.PowerIterationFailedConvergence.__init__"
None*r
selfh
2networkx.exception.PowerIterationFailedConvergence"2networkx.exception.PowerIterationFailedConvergence*
num_iterations
Any*
args
Any*
kw
Anyz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313Â%
GraphMLWriter(networkx.readwrite.graphml.GraphMLWriter""networkx.readwrite.graphml.GraphML*Å
__init__1networkx.readwrite.graphml.GraphMLWriter.__init__"
None*^
selfT
(networkx.readwrite.graphml.GraphMLWriter"(networkx.readwrite.graphml.GraphMLWriter*h
graph[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *,
encoding
builtins.str"builtins.str *1
prettyprint
builtins.bool"builtins.bool *9
infer_numeric_types
builtins.bool"builtins.bool *3
named_key_ids
builtins.bool"builtins.bool *y
edge_id_from_attribute[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313*ç
	attr_type2networkx.readwrite.graphml.GraphMLWriter.attr_type*
self*
name*	
scope*	
valuez36z37z38z39z310z311z312z313*ö
get_key0networkx.readwrite.graphml.GraphMLWriter.get_key*
self*
name*
	attr_type*	
scope*
defaultz36z37z38z39z310z311z312z313*£
add_data1networkx.readwrite.graphml.GraphMLWriter.add_data"
Any*^
selfT
(networkx.readwrite.graphml.GraphMLWriter"(networkx.readwrite.graphml.GraphMLWriter*
name
Any*
element_type
Any*
value
Any*)
scope
builtins.str"builtins.str *j
default[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313*™
add_attributes7networkx.readwrite.graphml.GraphMLWriter.add_attributes"
None*^
selfT
(networkx.readwrite.graphml.GraphMLWriter"(networkx.readwrite.graphml.GraphMLWriter*
scope
Any*
xml_obj
Any*
data
Any*
default
Anyz36z37z38z39z310z311z312z313*˘
	add_nodes2networkx.readwrite.graphml.GraphMLWriter.add_nodes"
None*^
selfT
(networkx.readwrite.graphml.GraphMLWriter"(networkx.readwrite.graphml.GraphMLWriter*
G
Any*
graph_element
Anyz36z37z38z39z310z311z312z313*˘
	add_edges2networkx.readwrite.graphml.GraphMLWriter.add_edges"
None*^
selfT
(networkx.readwrite.graphml.GraphMLWriter"(networkx.readwrite.graphml.GraphMLWriter*
G
Any*
graph_element
Anyz36z37z38z39z310z311z312z313*Ì
add_graph_element:networkx.readwrite.graphml.GraphMLWriter.add_graph_element"
None*^
selfT
(networkx.readwrite.graphml.GraphMLWriter"(networkx.readwrite.graphml.GraphMLWriter*
G
Anyz36z37z38z39z310z311z312z313*Ë

add_graphs3networkx.readwrite.graphml.GraphMLWriter.add_graphs"
None*^
selfT
(networkx.readwrite.graphml.GraphMLWriter"(networkx.readwrite.graphml.GraphMLWriter*

graph_list
Anyz36z37z38z39z310z311z312z313*ÿ
dump-networkx.readwrite.graphml.GraphMLWriter.dump"
None*^
selfT
(networkx.readwrite.graphml.GraphMLWriter"(networkx.readwrite.graphml.GraphMLWriter*
stream
Anyz36z37z38z39z310z311z312z313*Ö
indent/networkx.readwrite.graphml.GraphMLWriter.indent"
None*^
selfT
(networkx.readwrite.graphml.GraphMLWriter"(networkx.readwrite.graphml.GraphMLWriter*
elem
Any*)
level
builtins.int"builtins.int z36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313rñ
	myElement2networkx.readwrite.graphml.GraphMLWriter.myElement1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r™
infer_numeric_types<networkx.readwrite.graphml.GraphMLWriter.infer_numeric_types1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rö
prettyprint4networkx.readwrite.graphml.GraphMLWriter.prettyprint1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rû
named_key_ids6networkx.readwrite.graphml.GraphMLWriter.named_key_ids1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r∞
edge_id_from_attribute?networkx.readwrite.graphml.GraphMLWriter.edge_id_from_attribute1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rî
encoding1networkx.readwrite.graphml.GraphMLWriter.encoding1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rä
xml,networkx.readwrite.graphml.GraphMLWriter.xml1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rå
keys-networkx.readwrite.graphml.GraphMLWriter.keys1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rò

attributes3networkx.readwrite.graphml.GraphMLWriter.attributes1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r¢
attribute_types8networkx.readwrite.graphml.GraphMLWriter.attribute_types1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313Ã
GraphMLReader(networkx.readwrite.graphml.GraphMLReader""networkx.readwrite.graphml.GraphML*ª
__init__1networkx.readwrite.graphml.GraphMLReader.__init__"
None*^
selfT
(networkx.readwrite.graphml.GraphMLReader"(networkx.readwrite.graphml.GraphMLReader*
	node_type
Any *
edge_key_type
Any *6
force_multigraph
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*ù
__call__1networkx.readwrite.graphml.GraphMLReader.__call__"Ö
*typing.Generator[TypeAlias[Any],None,None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None
None"typing.Generator*^
selfT
(networkx.readwrite.graphml.GraphMLReader"(networkx.readwrite.graphml.GraphMLReader*g
path[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *i
string[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313*˛

make_graph3networkx.readwrite.graphml.GraphMLReader.make_graph"
Any*^
selfT
(networkx.readwrite.graphml.GraphMLReader"(networkx.readwrite.graphml.GraphMLReader*
	graph_xml
Any*
graphml_keys
Any*
defaults
Any*d
G[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313*§
add_node1networkx.readwrite.graphml.GraphMLReader.add_node"
None*^
selfT
(networkx.readwrite.graphml.GraphMLReader"(networkx.readwrite.graphml.GraphMLReader*
G
Any*
node_xml
Any*
graphml_keys
Any*
defaults
Anyz36z37z38z39z310z311z312z313*ë
add_edge1networkx.readwrite.graphml.GraphMLReader.add_edge"
None*^
selfT
(networkx.readwrite.graphml.GraphMLReader"(networkx.readwrite.graphml.GraphMLReader*
G
Any*
edge_element
Any*
graphml_keys
Anyz36z37z38z39z310z311z312z313*¢
decode_data_elements=networkx.readwrite.graphml.GraphMLReader.decode_data_elements*
self*
graphml_keys*
obj_xmlz36z37z38z39z310z311z312z313*ê
find_graphml_keys:networkx.readwrite.graphml.GraphMLReader.find_graphml_keys*
self*
graph_elementz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313rñ
	node_type2networkx.readwrite.graphml.GraphMLReader.node_type1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rû
edge_key_type6networkx.readwrite.graphml.GraphMLReader.edge_key_type1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rò

multigraph3networkx.readwrite.graphml.GraphMLReader.multigraph1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rî
edge_ids1networkx.readwrite.graphml.GraphMLReader.edge_ids1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rä
xml,networkx.readwrite.graphml.GraphMLReader.xml1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313í5
_dispatchable%networkx.utils.backends._dispatchable"builtins.object*»
__new__-networkx.utils.backends._dispatchable.__new__"°
*networkx.utils.backends._dispatchable.Self…
Inetworkx.utils.backends._dispatchable[Unknown,networkx.utils.backends._R] S
networkx.utils.backends._R"
builtins.object"builtins.object"builtins.object"%networkx.utils.backends._dispatchable"%networkx.utils.backends._dispatchable*Ë
clsﬁ
0Type[networkx.utils.backends._dispatchable.Self]°
*networkx.utils.backends._dispatchable.Self…
Inetworkx.utils.backends._dispatchable[Unknown,networkx.utils.backends._R] S
networkx.utils.backends._R"
builtins.object"builtins.object"builtins.object"%networkx.utils.backends._dispatchable"%networkx.utils.backends._dispatchable"type*ì
funcÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *ˆ
graphsÁ
BUnion[builtins.str,None,typing.Mapping[builtins.str,builtins.int]]
builtins.str"builtins.str
Nonew
)typing.Mapping[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Mapping *–

edge_attrsΩ
8Union[builtins.str,builtins.dict[builtins.str,Any],None]
builtins.str"builtins.strW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *–

node_attrsΩ
8Union[builtins.str,builtins.dict[builtins.str,Any],None]
builtins.str"builtins.strW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *9
preserve_edge_attrs
builtins.bool"builtins.bool *9
preserve_node_attrs
builtins.bool"builtins.bool *:
preserve_graph_attrs
builtins.bool"builtins.bool *8
preserve_all_attrs
builtins.bool"builtins.bool *3
mutates_input
builtins.bool"builtins.bool *3
returns_graph
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*Ä
__signature__3networkx.utils.backends._dispatchable.__signature__*
self0:property`z36z37z38z39z310z311z312z313*l

__reduce__0networkx.utils.backends._dispatchable.__reduce__*
selfz36z37z38z39z310z311z312z3132
__doc__-networkx.utils.backends._dispatchable.__doc__R
__doc__-networkx.utils.backends._dispatchable.__doc__*
self0:propertyX`Ω
__doc__-networkx.utils.backends._dispatchable.__doc__"
None*‘
self…
Inetworkx.utils.backends._dispatchable[Unknown,networkx.utils.backends._R] S
networkx.utils.backends._R"
builtins.object"builtins.object"builtins.object"%networkx.utils.backends._dispatchable*
val
Any0:__doc__.setter"36"37"38"39"310"311"312"3132¡
__call__.networkx.utils.backends._dispatchable.__call__é
__call__.networkx.utils.backends._dispatchable.__call__"S
networkx.utils.backends._R"
builtins.object"builtins.object"builtins.object*‘
self…
Inetworkx.utils.backends._dispatchable[Unknown,networkx.utils.backends._R] S
networkx.utils.backends._R"
builtins.object"builtins.object"builtins.object"%networkx.utils.backends._dispatchable*

args *
kwargs 0:overloadXœ
__call__.networkx.utils.backends._dispatchable.__call__"S
networkx.utils.backends._R"
builtins.object"builtins.object"builtins.object*‘
self…
Inetworkx.utils.backends._dispatchable[Unknown,networkx.utils.backends._R] S
networkx.utils.backends._R"
builtins.object"builtins.object"builtins.object"%networkx.utils.backends._dispatchable*
args
Any*)
backend
builtins.str"builtins.str*
backend_kwargs
Any0:overloadX"36"37"38"39"310"311"312"313Pj36j37j38j39j310j311j312j313rô
__defaults__2networkx.utils.backends._dispatchable.__defaults__1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rù
__kwdefaults__4networkx.utils.backends._dispatchable.__kwdefaults__1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rï

__module__0networkx.utils.backends._dispatchable.__module__1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rô
__qualname__2networkx.utils.backends._dispatchable.__qualname__1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313ró
__wrapped__1networkx.utils.backends._dispatchable.__wrapped__1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rÈ
	orig_func/networkx.utils.backends._dispatchable.orig_funcÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*36*37*38*39*310*311*312*313rt
name*networkx.utils.backends._dispatchable.name
builtins.str"builtins.str*36*37*38*39*310*311*312*313r˜

edge_attrs0networkx.utils.backends._dispatchable.edge_attrsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None*36*37*38*39*310*311*312*313r˜

node_attrs0networkx.utils.backends._dispatchable.node_attrsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None*36*37*38*39*310*311*312*313rî
preserve_edge_attrs9networkx.utils.backends._dispatchable.preserve_edge_attrs
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rî
preserve_node_attrs9networkx.utils.backends._dispatchable.preserve_node_attrs
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rñ
preserve_graph_attrs:networkx.utils.backends._dispatchable.preserve_graph_attrs
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rà
mutates_input3networkx.utils.backends._dispatchable.mutates_input
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rü
optional_graphs5networkx.utils.backends._dispatchable.optional_graphs1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313ró
list_graphs1networkx.utils.backends._dispatchable.list_graphs1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r—
graphs,networkx.utils.backends._dispatchable.graphsu
(builtins.dict[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.dict*36*37*38*39*310*311*312*313rÌ
backends.networkx.utils.backends._dispatchable.backendså
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict*36*37*38*39*310*311*312*313S
nodesnetworkx.classes.function.nodes*
Gz36z37z38z39z310z311z312z313–
edgesnetworkx.classes.function.edges"
Any*
G
Any*i
nbunch[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313Ω
degree networkx.classes.function.degree"
Any*
G
Any*i
nbunch[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *i
weight[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313b
	neighbors#networkx.classes.function.neighbors*
G*
nz36z37z38z39z310z311z312z313g
number_of_nodes)networkx.classes.function.number_of_nodes*
Gz36z37z38z39z310z311z312z313g
number_of_edges)networkx.classes.function.number_of_edges*
Gz36z37z38z39z310z311z312z313W
density!networkx.classes.function.density*
Gz36z37z38z39z310z311z312z313i
degree_histogram*networkx.classes.function.degree_histogram*
Gz36z37z38z39z310z311z312z313U
freeze networkx.classes.function.freeze*
Gz36z37z38z39z310z311z312z313[
	is_frozen#networkx.classes.function.is_frozen*
Gz36z37z38z39z310z311z312z313¶
add_star"networkx.classes.function.add_star"
None*
G_to_add_to
Any*
nodes_for_star
Any*
attr
Anyz36z37z38z39z310z311z312z313¶
add_path"networkx.classes.function.add_path"
None*
G_to_add_to
Any*
nodes_for_path
Any*
attr
Anyz36z37z38z39z310z311z312z313©
	add_cycle#networkx.classes.function.add_cycle"
None*
G_to_add_to
Any*
nodes_for_cycle
Any*
attr
Anyz36z37z38z39z310z311z312z313e
subgraph"networkx.classes.function.subgraph*
G*

nbunchz36z37z38z39z310z311z312z313ø
induced_subgraph*networkx.classes.function.induced_subgraph"±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*Í
nbunch›
aTypeAlias[Union[networkx.classes.graph._Node,typing.Iterable[networkx.classes.graph._Node],None]]’
VUnion[networkx.classes.graph._Node,typing.Iterable[networkx.classes.graph._Node],None]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None"networkx.classes.graph._NBunchz36z37z38z39z310z311z312z313n
edge_subgraph'networkx.classes.function.edge_subgraph*
G*	
edgesz36z37z38z39z310z311z312z313}
restricted_view)networkx.classes.function.restricted_view*
G*	
nodes*	
edgesz36z37z38z39z310z311z312z313c
to_directed%networkx.classes.function.to_directed*	
graphz36z37z38z39z310z311z312z313g
to_undirected'networkx.classes.function.to_undirected*	
graphz36z37z38z39z310z311z312z313Æ
create_empty_copy+networkx.classes.function.create_empty_copy"
Any*
G
Any*/
	with_data
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313º
get_node_attributes-networkx.classes.function.get_node_attributes"’
:builtins.dict[networkx.classes.graph._Node,TypeAlias[Any]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*&
name
builtins.str"builtins.str*
default
Any z36z37z38z39z310z311z312z313˛
get_edge_attributes-networkx.classes.function.get_edge_attributes"ó
^builtins.dict[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],TypeAlias[Any]]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*&
name
builtins.str"builtins.str*
default
Any z36z37z38z39z310z311z312z313ó
all_neighbors'networkx.classes.function.all_neighbors"ó
-typing.Iterator[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterator*Ω
graph±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*_
nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313∑
non_neighbors'networkx.classes.function.non_neighbors"∑
8typing.Generator[networkx.classes.graph._Node,None,None]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*Ω
graph±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*_
nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313ê
	non_edges#networkx.classes.function.non_edges"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*Ω
graph±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313î
common_neighbors*networkx.classes.function.common_neighbors"∑
8typing.Generator[networkx.classes.graph._Node,None,None]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*\
uU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313ø
is_weighted%networkx.classes.function.is_weighted"
builtins.bool"builtins.bool*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*‹
edgeœ
LUnion[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None **
weight
builtins.str"builtins.str z36z37z38z39z310z311z312z313Ï
is_empty"networkx.classes.function.is_empty"
builtins.bool"builtins.bool*x
Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313‡
nodes_with_selfloops.networkx.classes.function.nodes_with_selfloops"∑
8typing.Generator[networkx.classes.graph._Node,None,None]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313Ä
number_of_selfloops-networkx.classes.function.number_of_selfloops"
builtins.int"builtins.int*x
Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graphz36z37z38z39z310z311z312z313ì
is_path!networkx.classes.function.is_path"
builtins.bool"builtins.bool*
G
Any*
path
Anyz36z37z38z39z310z311z312z313Æ
path_weight%networkx.classes.function.path_weight"
builtins.int"builtins.int*
G
Any*
path
Any*
weight
Anyz36z37z38z39z310z311z312z313Ë
reverse_view(networkx.classes.graphviews.reverse_view"ø
networkx.classes.graphviews._Dy
1networkx.classes.digraph.DiGraph[typing.Hashable]"
typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph" networkx.classes.digraph.DiGraph*«
Gø
networkx.classes.graphviews._Dy
1networkx.classes.digraph.DiGraph[typing.Hashable]"
typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph" networkx.classes.digraph.DiGraphz36z37z38z39z310z311z312z313ı"
to_networkx_graph"networkx.convert.to_networkx_graph"±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*û
dataì
êTypeAlias[Union[networkx.classes.graph.Graph[networkx.classes.graph._Node],builtins.dict[networkx.classes.graph._Node,builtins.dict[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]],builtins.dict[networkx.classes.graph._Node,typing.Iterable[networkx.classes.graph._Node]],typing.Iterable[TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]],numpy.ndarray[Any,Any]]]›
ÖUnion[networkx.classes.graph.Graph[networkx.classes.graph._Node],builtins.dict[networkx.classes.graph._Node,builtins.dict[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]],builtins.dict[networkx.classes.graph._Node,typing.Iterable[networkx.classes.graph._Node]],typing.Iterable[TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]],numpy.ndarray[Any,Any]]±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.GraphÓ
wbuiltins.dict[networkx.classes.graph._Node,builtins.dict[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
Kbuiltins.dict[networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"builtins.dict"builtins.dict€
Ybuiltins.dict[networkx.classes.graph._Node,typing.Iterable[networkx.classes.graph._Node]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable"builtins.dictí
⁄typing.Iterable[TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]]°

…TypeAlias[Union[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]]Æ
æUnion[TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],TypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]]‚
KTypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph._EdgeÉ
kTypeAlias[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]]Î
`Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,Any]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"$networkx.classes.graph._EdgeWithData" networkx.classes.graph._EdgePlus"typing.Iterable9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray"networkx.classes.graph._Data*ä
create_usingı
fUnion[networkx.classes.graph.Graph[networkx.classes.graph._Node],CallableType[builtins.function],None]±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.GraphK
CallableType[builtins.function]&
builtins.function"builtins.function
None *6
multigraph_input
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313µ
to_dict_of_dicts!networkx.convert.to_dict_of_dicts"k
%builtins.dict[TypeAlias[Any],Unknown]1
TypeAlias[Any]
Any"_typeshed.Incomplete "builtins.dict*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
nodelist
Any *
	edge_data
Any z36z37z38z39z310z311z312z313
random_layout%networkx.drawing.layout.random_layout"
Any*
G
Any*i
center[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *'
dim
builtins.int"builtins.int *g
seed[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313∫
circular_layout'networkx.drawing.layout.circular_layout"
Any*
G
Any*-
scale 
builtins.float"builtins.float *i
center[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *'
dim
builtins.int"builtins.int z36z37z38z39z310z311z312z313â
shell_layout$networkx.drawing.layout.shell_layout"
Any*
G
Any*h
nlist[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *i
rotate[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *-
scale 
builtins.float"builtins.float *i
center[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *'
dim
builtins.int"builtins.int z36z37z38z39z310z311z312z313à
bipartite_layout(networkx.drawing.layout.bipartite_layout"
Any*
G
Any*
nodes
Any*)
align
builtins.str"builtins.str *-
scale 
builtins.float"builtins.float *i
center[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *4
aspect_ratio 
builtins.float"builtins.float z36z37z38z39z310z311z312z313Ê
spring_layout%networkx.drawing.layout.spring_layout"
Any*
G
Any*d
k[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *f
pos[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *h
fixed[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *.

iterations
builtins.int"builtins.int *1
	threshold 
builtins.float"builtins.float **
weight
builtins.str"builtins.str *-
scale 
builtins.float"builtins.float *i
center[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *'
dim
builtins.int"builtins.int *g
seed[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313ø
kamada_kawai_layout+networkx.drawing.layout.kamada_kawai_layout"
Any*
G
Any*g
dist[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *f
pos[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None **
weight
builtins.str"builtins.str *-
scale 
builtins.float"builtins.float *i
center[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *'
dim
builtins.int"builtins.int z36z37z38z39z310z311z312z313Ê
spectral_layout'networkx.drawing.layout.spectral_layout"
Any*
G
Any**
weight
builtins.str"builtins.str *-
scale 
builtins.float"builtins.float *i
center[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *'
dim
builtins.int"builtins.int z36z37z38z39z310z311z312z313∂
planar_layout%networkx.drawing.layout.planar_layout"
Any*
G
Any*-
scale 
builtins.float"builtins.float *i
center[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *'
dim
builtins.int"builtins.int z36z37z38z39z310z311z312z313ù
spiral_layout%networkx.drawing.layout.spiral_layout"
Any*
G
Any*-
scale 
builtins.float"builtins.float *i
center[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *'
dim
builtins.int"builtins.int *2

resolution 
builtins.float"builtins.float *1
equidistant
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313Ù
multipartite_layout+networkx.drawing.layout.multipartite_layout"
Any*
G
Any*.

subset_key
builtins.str"builtins.str *)
align
builtins.str"builtins.str *-
scale 
builtins.float"builtins.float *i
center[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313π

arf_layout"networkx.drawing.layout.arf_layout"
Any*
G
Any*f
pos[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None */
scaling 
builtins.float"builtins.float *)
a 
builtins.float"builtins.float *,
etol 
builtins.float"builtins.float **
dt 
builtins.float"builtins.float *,
max_iter
builtins.int"builtins.int z36z37z38z39z310z311z312z313¶
rescale_layout&networkx.drawing.layout.rescale_layout"
Any*
pos
Any*-
scale 
builtins.float"builtins.float z36z37z38z39z310z311z312z313∞
rescale_layout_dict+networkx.drawing.layout.rescale_layout_dict"
Any*
pos
Any*-
scale 
builtins.float"builtins.float z36z37z38z39z310z311z312z313æ
to_latex_raw&networkx.drawing.nx_latex.to_latex_raw"
Any*
G
Any*'
pos
builtins.str"builtins.str *0
tikz_options
builtins.str"builtins.str *8
default_node_options
builtins.str"builtins.str *0
node_options
builtins.str"builtins.str *.

node_label
builtins.str"builtins.str *8
default_edge_options
builtins.str"builtins.str *0
edge_options
builtins.str"builtins.str *.

edge_label
builtins.str"builtins.str *6
edge_label_options
builtins.str"builtins.str z36z37z38z39z310z311z312z313˘
to_latex"networkx.drawing.nx_latex.to_latex"
Any*
Gbunch
Any*'
pos
builtins.str"builtins.str *0
tikz_options
builtins.str"builtins.str *8
default_node_options
builtins.str"builtins.str *0
node_options
builtins.str"builtins.str *.

node_label
builtins.str"builtins.str *8
default_edge_options
builtins.str"builtins.str *0
edge_options
builtins.str"builtins.str *.

edge_label
builtins.str"builtins.str *6
edge_label_options
builtins.str"builtins.str *+
caption
builtins.str"builtins.str */
latex_label
builtins.str"builtins.str *o
sub_captions[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *m

sub_labels[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None **
n_rows
builtins.int"builtins.int *1
as_document
builtins.bool"builtins.bool *4
document_wrapper
builtins.str"builtins.str *2
figure_wrapper
builtins.str"builtins.str *5
subfigure_wrapper
builtins.str"builtins.str z36z37z38z39z310z311z312z313†
write_latex%networkx.drawing.nx_latex.write_latex"
None*
Gbunch
Any*
path
Any*
options
Anyz36z37z38z39z310z311z312z313∆
drawnetworkx.drawing.nx_pylab.draw"
None*
G
Any*f
pos[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *e
ax[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kwds
Anyz36z37z38z39z310z311z312z313è
draw_networkx'networkx.drawing.nx_pylab.draw_networkx"
None*
G
Any*f
pos[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *i
arrows[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *1
with_labels
builtins.bool"builtins.bool *
kwds
Anyz36z37z38z39z310z311z312z313›
draw_networkx_nodes-networkx.drawing.nx_pylab.draw_networkx_nodes"
Any*
G
Any*
pos
Any*k
nodelist[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *à
	node_sizew
"Union[TypeAlias[Any],builtins.int]1
TypeAlias[Any]
Any"_typeshed.Incomplete
builtins.int"builtins.int *.

node_color
builtins.str"builtins.str *.

node_shape
builtins.str"builtins.str *h
alpha[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *g
cmap[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *g
vmin[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *g
vmax[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *e
ax[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *m

linewidths[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *m

edgecolors[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *h
label[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *j
margins[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *0

hide_ticks
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313ï
draw_networkx_edges-networkx.drawing.nx_pylab.draw_networkx_edges"
Any*
G
Any*
pos
Any*k
edgelist[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *-
width 
builtins.float"builtins.float *.

edge_color
builtins.str"builtins.str *)
style
builtins.str"builtins.str *h
alpha[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *m

arrowstyle[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *-
	arrowsize
builtins.int"builtins.int *l
	edge_cmap[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *l
	edge_vmin[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *l
	edge_vmax[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *e
ax[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *i
arrows[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *h
label[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *à
	node_sizew
"Union[TypeAlias[Any],builtins.int]1
TypeAlias[Any]
Any"_typeshed.Incomplete
builtins.int"builtins.int *k
nodelist[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *.

node_shape
builtins.str"builtins.str *3
connectionstyle
builtins.str"builtins.str *5
min_source_margin
builtins.int"builtins.int *5
min_target_margin
builtins.int"builtins.int *0

hide_ticks
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313Ã
draw_networkx_labels.networkx.drawing.nx_pylab.draw_networkx_labels"
Any*
G
Any*
pos
Any*i
labels[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *-
	font_size
builtins.int"builtins.int *.

font_color
builtins.str"builtins.str */
font_family
builtins.str"builtins.str */
font_weight
builtins.str"builtins.str *h
alpha[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *g
bbox[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *7
horizontalalignment
builtins.str"builtins.str *5
verticalalignment
builtins.str"builtins.str *e
ax[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *-
clip_on
builtins.bool"builtins.bool *0

hide_ticks
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313ç

draw_networkx_edge_labels3networkx.drawing.nx_pylab.draw_networkx_edge_labels"
Any*
G
Any*
pos
Any*n
edge_labels[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *1
	label_pos 
builtins.float"builtins.float *-
	font_size
builtins.int"builtins.int *.

font_color
builtins.str"builtins.str */
font_family
builtins.str"builtins.str */
font_weight
builtins.str"builtins.str *h
alpha[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *g
bbox[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *7
horizontalalignment
builtins.str"builtins.str *5
verticalalignment
builtins.str"builtins.str *e
ax[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *,
rotate
builtins.bool"builtins.bool *-
clip_on
builtins.bool"builtins.bool *-
	node_size
builtins.int"builtins.int *k
nodelist[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *3
connectionstyle
builtins.str"builtins.str *0

hide_ticks
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313ã
draw_circular'networkx.drawing.nx_pylab.draw_circular"
None*
G
Any*
kwargs
Anyz36z37z38z39z310z311z312z313ì
draw_kamada_kawai+networkx.drawing.nx_pylab.draw_kamada_kawai"
None*
G
Any*
kwargs
Anyz36z37z38z39z310z311z312z313á
draw_random%networkx.drawing.nx_pylab.draw_random"
None*
G
Any*
kwargs
Anyz36z37z38z39z310z311z312z313ã
draw_spectral'networkx.drawing.nx_pylab.draw_spectral"
None*
G
Any*
kwargs
Anyz36z37z38z39z310z311z312z313á
draw_spring%networkx.drawing.nx_pylab.draw_spring"
None*
G
Any*
kwargs
Anyz36z37z38z39z310z311z312z313Ô

draw_shell$networkx.drawing.nx_pylab.draw_shell"
None*
G
Any*h
nlist[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kwargs
Anyz36z37z38z39z310z311z312z313á
draw_planar%networkx.drawing.nx_pylab.draw_planar"
None*
G
Any*
kwargs
Anyz36z37z38z39z310z311z312z313¬
_lazy_import"networkx.lazy_imports._lazy_import"“
FUnion[types.ModuleType,networkx.lazy_imports.DelayedImportErrorModule]$
types.ModuleType"types.ModuleType`
.networkx.lazy_imports.DelayedImportErrorModule".networkx.lazy_imports.DelayedImportErrorModule*
fullname
Anyz36z37z38z39z310z311z312z313™
generate_adjlist+networkx.readwrite.adjlist.generate_adjlist"Ö
*typing.Generator[TypeAlias[Any],None,None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None
None"typing.Generator*
G
Any*-
	delimiter
builtins.str"builtins.str z36z37z38z39z310z311z312z313ï
write_adjlist(networkx.readwrite.adjlist.write_adjlist"
None*
G
Any*
path
Any*,
comments
builtins.str"builtins.str *-
	delimiter
builtins.str"builtins.str *,
encoding
builtins.str"builtins.str z36z37z38z39z310z311z312z313Ÿ
generate_edgelist-networkx.readwrite.edgelist.generate_edgelist"Ö
*typing.Generator[TypeAlias[Any],None,None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None
None"typing.Generator*
G
Any*-
	delimiter
builtins.str"builtins.str **
data
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313ƒ
write_edgelist*networkx.readwrite.edgelist.write_edgelist"
None*
G
Any*
path
Any*,
comments
builtins.str"builtins.str *-
	delimiter
builtins.str"builtins.str **
data
builtins.bool"builtins.bool *,
encoding
builtins.str"builtins.str z36z37z38z39z310z311z312z313™
write_weighted_edgelist3networkx.readwrite.edgelist.write_weighted_edgelist"
None*
G
Any*
path
Any*,
comments
builtins.str"builtins.str *-
	delimiter
builtins.str"builtins.str *,
encoding
builtins.str"builtins.str z36z37z38z39z310z311z312z313è

write_gexf"networkx.readwrite.gexf.write_gexf"
None*
G
Any*
path
Any*,
encoding
builtins.str"builtins.str *1
prettyprint
builtins.bool"builtins.bool *+
version
builtins.str"builtins.str z36z37z38z39z310z311z312z313˚
generate_gexf%networkx.readwrite.gexf.generate_gexf"Ä
-typing.Generator[TypeAlias[Any],Unknown,None]1
TypeAlias[Any]
Any"_typeshed.Incomplete 
None"typing.Generator*
G
Any*,
encoding
builtins.str"builtins.str *1
prettyprint
builtins.bool"builtins.bool *+
version
builtins.str"builtins.str z36z37z38z39z310z311z312z313k
relabel_gexf_graph*networkx.readwrite.gexf.relabel_gexf_graph*
Gz36z37z38z39z310z311z312z313Ÿ
generate_gml#networkx.readwrite.gml.generate_gml"Ä
-typing.Generator[TypeAlias[Any],Unknown,None]1
TypeAlias[Any]
Any"_typeshed.Incomplete 
None"typing.Generator*
G
Any*m

stringizer[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313Ì
	write_gml networkx.readwrite.gml.write_gml"
None*
G
Any*
path
Any*m

stringizer[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313ë
to_graph6_bytes)networkx.readwrite.graph6.to_graph6_bytes"
Any*
G
Any*h
nodes[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *,
header
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313û
write_graph6&networkx.readwrite.graph6.write_graph6"
Any*
G
Any*
path
Any*h
nodes[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *,
header
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313ﬁ
write_graphml_xml,networkx.readwrite.graphml.write_graphml_xml"
None*
G
Any*
path
Any*,
encoding
builtins.str"builtins.str *1
prettyprint
builtins.bool"builtins.bool *9
infer_numeric_types
builtins.bool"builtins.bool *3
named_key_ids
builtins.bool"builtins.bool *y
edge_id_from_attribute[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313ﬂ
write_graphml_lxml-networkx.readwrite.graphml.write_graphml_lxml"
Any*
G
Any*
path
Any*,
encoding
builtins.str"builtins.str *1
prettyprint
builtins.bool"builtins.bool *9
infer_numeric_types
builtins.bool"builtins.bool *3
named_key_ids
builtins.bool"builtins.bool *y
edge_id_from_attribute[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313á
generate_graphml+networkx.readwrite.graphml.generate_graphml"Ä
-typing.Generator[TypeAlias[Any],Unknown,None]1
TypeAlias[Any]
Any"_typeshed.Incomplete 
None"typing.Generator*
G
Any*,
encoding
builtins.str"builtins.str *1
prettyprint
builtins.bool"builtins.bool *3
named_key_ids
builtins.bool"builtins.bool *y
edge_id_from_attribute[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313⁄
cytoscape_data6networkx.readwrite.json_graph.cytoscape.cytoscape_data"
Any*
G
Any*(
name
builtins.str"builtins.str *)
ident
builtins.str"builtins.str z36z37z38z39z310z311z312z313⁄
node_link_data6networkx.readwrite.json_graph.node_link.node_link_data"
Any*
G
Any**
source
builtins.str"builtins.str **
target
builtins.str"builtins.str *(
name
builtins.str"builtins.str *'
key
builtins.str"builtins.str *(
link
builtins.str"builtins.str z36z37z38z39z310z311z312z313‚
	tree_data,networkx.readwrite.json_graph.tree.tree_data"
Any*
G
Any*
root
Any*)
ident
builtins.str"builtins.str *,
children
builtins.str"builtins.str z36z37z38z39z310z311z312z313»
generate_multiline_adjlist?networkx.readwrite.multiline_adjlist.generate_multiline_adjlist"Ö
*typing.Generator[TypeAlias[Any],None,None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None
None"typing.Generator*
G
Any*-
	delimiter
builtins.str"builtins.str z36z37z38z39z310z311z312z313≥
write_multiline_adjlist<networkx.readwrite.multiline_adjlist.write_multiline_adjlist"
None*
G
Any*
path
Any*-
	delimiter
builtins.str"builtins.str *,
comments
builtins.str"builtins.str *,
encoding
builtins.str"builtins.str z36z37z38z39z310z311z312z313ı
generate_pajek'networkx.readwrite.pajek.generate_pajek"Ö
*typing.Generator[TypeAlias[Any],None,None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None
None"typing.Generator*
G
Anyz36z37z38z39z310z311z312z313≤
write_pajek$networkx.readwrite.pajek.write_pajek"
None*
G
Any*
path
Any*,
encoding
builtins.str"builtins.str z36z37z38z39z310z311z312z313î
to_sparse6_bytes+networkx.readwrite.sparse6.to_sparse6_bytes"
Any*
G
Any*h
nodes[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *,
header
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313¢
write_sparse6(networkx.readwrite.sparse6.write_sparse6"
None*
G
Any*
path
Any*h
nodes[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *,
header
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313˜
generate_network_text-networkx.readwrite.text.generate_network_text"Ä
-typing.Generator[TypeAlias[Any],None,Unknown]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None "typing.Generator*
graph
Any*1
with_labels
builtins.bool"builtins.bool *j
sources[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *l
	max_depth[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *0

ascii_only
builtins.bool"builtins.bool *5
vertical_chains
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313Û
write_network_text*networkx.readwrite.text.write_network_text"
None*
graph
Any*g
path[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *1
with_labels
builtins.bool"builtins.bool *j
sources[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *l
	max_depth[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *0

ascii_only
builtins.bool"builtins.bool *'
end
builtins.str"builtins.str *
vertical_chains
Any z36z37z38z39z310z311z312z313¨

forest_str"networkx.readwrite.text.forest_str"
Any*
graph
Any*1
with_labels
builtins.bool"builtins.bool *j
sources[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *h
write[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *0

ascii_only
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313n
_clear_cache networkx.utils.misc._clear_cache"
None*
G
Anyz36z37z38z39z310z311z312z313"«y
edge_boundary*networkx.algorithms.boundary.edge_boundaryﬂ
edge_boundary*networkx.algorithms.boundary.edge_boundary"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *
data
Any *
keys
Any *
default
Any 0:overloadX¡

edge_boundary*networkx.algorithms.boundary.edge_boundary"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*
data
Any*
keys
Any *
default
Any 0:overloadX√

edge_boundary*networkx.algorithms.boundary.edge_boundary"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *
data
Any*
keys
Any *
default
Any 0:overloadXæ
edge_boundary*networkx.algorithms.boundary.edge_boundary"π
òtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]ı
|Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*&
data
builtins.str"builtins.str*
keys
Any *£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX¿
edge_boundary*networkx.algorithms.boundary.edge_boundary"π
òtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]ı
|Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *&
data
builtins.str"builtins.str*
keys
Any *£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadXë	
edge_boundary*networkx.algorithms.boundary.edge_boundary"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*
data
Any*
keys
Any*
default
Any 0:overloadXï	
edge_boundary*networkx.algorithms.boundary.edge_boundary"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *
data
Any *
keys
Any*
default
Any 0:overloadX˜

edge_boundary*networkx.algorithms.boundary.edge_boundary"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*
data
Any*
keys
Any*
default
Any 0:overloadX˘

edge_boundary*networkx.algorithms.boundary.edge_boundary"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *
data
Any*
keys
Any*
default
Any 0:overloadXı
edge_boundary*networkx.algorithms.boundary.edge_boundary"Ú
•typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]°
âTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*&
data
builtins.str"builtins.str*
keys
Any*£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX˜
edge_boundary*networkx.algorithms.boundary.edge_boundary"Ú
•typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]°
âTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *&
data
builtins.str"builtins.str*
keys
Any*£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX"36"37"ÒÄ
edge_boundary*networkx.algorithms.boundary.edge_boundary≈	
edge_boundary*networkx.algorithms.boundary.edge_boundary"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *F
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool *F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
default
Any 0:overloadXß
edge_boundary*networkx.algorithms.boundary.edge_boundary"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
default
Any 0:overloadX©
edge_boundary*networkx.algorithms.boundary.edge_boundary"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
default
Any 0:overloadXÒ
edge_boundary*networkx.algorithms.boundary.edge_boundary"π
òtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]ı
|Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*&
data
builtins.str"builtins.str*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadXÛ
edge_boundary*networkx.algorithms.boundary.edge_boundary"π
òtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]ı
|Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *&
data
builtins.str"builtins.str*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX˜	
edge_boundary*networkx.algorithms.boundary.edge_boundary"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadX˚	
edge_boundary*networkx.algorithms.boundary.edge_boundary"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *F
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool *D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadX›
edge_boundary*networkx.algorithms.boundary.edge_boundary"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadXﬂ
edge_boundary*networkx.algorithms.boundary.edge_boundary"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadX®
edge_boundary*networkx.algorithms.boundary.edge_boundary"Ú
•typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]°
âTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*&
data
builtins.str"builtins.str*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX™
edge_boundary*networkx.algorithms.boundary.edge_boundary"Ú
•typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]°
âTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *&
data
builtins.str"builtins.str*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX"38"39"310"311"312"313"∏
local_bridges)networkx.algorithms.bridges.local_bridges€
local_bridges)networkx.algorithms.bridges.local_bridges"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
	with_span
Any*¿
weight±
8Union[builtins.str,CallableType[builtins.function],None]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXï
local_bridges)networkx.algorithms.bridges.local_bridges"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
	with_span
Any *¿
weight±
8Union[builtins.str,CallableType[builtins.function],None]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX"36"37"≤
local_bridges)networkx.algorithms.bridges.local_bridgesé
local_bridges)networkx.algorithms.bridges.local_bridges"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*I
	with_span:
Literal[builtins.bool]	
builtins.bool"builtins.bool*¿
weight±
8Union[builtins.str,CallableType[builtins.function],None]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX»
local_bridges)networkx.algorithms.bridges.local_bridges"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*K
	with_span:
Literal[builtins.bool]	
builtins.bool"builtins.bool *¿
weight±
8Union[builtins.str,CallableType[builtins.function],None]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX"38"39"310"311"312"313"°
node_clique_number-networkx.algorithms.clique.node_clique_number”
node_clique_number-networkx.algorithms.clique.node_clique_number"æ
8builtins.dict[networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int"builtins.dict*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*Ô
nodes·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *÷
cliques∆
JUnion[typing.Iterable[typing.Iterable[networkx.classes.graph._Node]],None]Î
>typing.Iterable[typing.Iterable[networkx.classes.graph._Node]]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable"typing.Iterable
None *8
separate_nodes"
builtins.object"builtins.object 0:overloadX·
node_clique_number-networkx.algorithms.clique.node_clique_number"
builtins.int"builtins.int*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*`
nodesU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*ó
cliquesá
)Union[typing.Iterable[typing.Sized],None]N
typing.Iterable[typing.Sized]
typing.Sized"typing.Sized"typing.Iterable
None *8
separate_nodes"
builtins.object"builtins.object 0:overloadX"36"37"38"39"310"311"312"313"
shortest_path8networkx.algorithms.shortest_paths.generic.shortest_pathÜ
shortest_path8networkx.algorithms.shortest_paths.generic.shortest_path"ì
+builtins.list[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*a
sourceU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*a
targetU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*i
weight[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None **
method
builtins.str"builtins.str 0:overloadX˙
shortest_path8networkx.algorithms.shortest_paths.generic.shortest_path"’
Wbuiltins.dict[networkx.classes.graph._Node,builtins.list[networkx.classes.graph._Node]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableì
+builtins.list[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list"builtins.dict*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*a
targetU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable**
method
builtins.str"builtins.str 0:overloadX˙
shortest_path8networkx.algorithms.shortest_paths.generic.shortest_path"’
Wbuiltins.dict[networkx.classes.graph._Node,builtins.list[networkx.classes.graph._Node]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableì
+builtins.list[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list"builtins.dict*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*a
sourceU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable**
method
builtins.str"builtins.str 0:overloadX"36"37"38"39"310"311"312"313"¡
is_directed%networkx.classes.function.is_directedÈ
is_directed%networkx.classes.function.is_directed"
Any*õ
Gì
>networkx.algorithms.planarity.PlanarEmbedding[typing.Hashable]"
typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding0:overloadXŒ
is_directed%networkx.classes.function.is_directed"
Any*Ä
Gy
1networkx.classes.digraph.DiGraph[typing.Hashable]"
typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:overloadX≈
is_directed%networkx.classes.function.is_directed"
Any*x
Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph0:overloadX"36"37"Ó
is_directed%networkx.classes.function.is_directedú
is_directed%networkx.classes.function.is_directed":
Literal[builtins.bool]	
builtins.bool"builtins.bool*õ
Gì
>networkx.algorithms.planarity.PlanarEmbedding[typing.Hashable]"
typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding0:overloadXÅ
is_directed%networkx.classes.function.is_directed":
Literal[builtins.bool]	
builtins.bool"builtins.bool*Ä
Gy
1networkx.classes.digraph.DiGraph[typing.Hashable]"
typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph0:overloadX¯
is_directed%networkx.classes.function.is_directed":
Literal[builtins.bool]	
builtins.bool"builtins.bool*x
Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph0:overloadX"38"39"310"311"312"313"∏
set_node_attributes-networkx.classes.function.set_node_attributesÈ
set_node_attributes-networkx.classes.function.set_node_attributes"
None*x
Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*Ë
values€
E_typeshed.SupportsItems[networkx.classes.graph._Node,builtins.object]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"
builtins.object"builtins.object"_typeshed.SupportsItems*&
name
builtins.str"builtins.str0:overloadX·
set_node_attributes-networkx.classes.function.set_node_attributes"
None*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*∞
values£
é_typeshed.SupportsItems[networkx.classes.graph._Node,Union[_typeshed.SupportsKeysAndGetItem[TypeAlias[Any],Unknown],typing.Iterable[Unknown]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableü
XUnion[_typeshed.SupportsKeysAndGetItem[TypeAlias[Any],Unknown],typing.Iterable[Unknown]]ë
8_typeshed.SupportsKeysAndGetItem[TypeAlias[Any],Unknown]1
TypeAlias[Any]
Any"_typeshed.Incomplete " _typeshed.SupportsKeysAndGetItem-
typing.Iterable[Unknown] "typing.Iterable"_typeshed.SupportsItems*
name
None 0:overloadX"36"37"38"39"310"311"312"313"Å
set_edge_attributes-networkx.classes.function.set_edge_attributes˚
set_edge_attributes-networkx.classes.function.set_edge_attributes"
None*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*∏
values´
h_typeshed.SupportsItems[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],TypeAlias[Any]]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable1
TypeAlias[Any]
Any"_typeshed.Incomplete"_typeshed.SupportsItems*&
name
builtins.str"builtins.str0:overloadXî
set_edge_attributes-networkx.classes.function.set_edge_attributes"
None*Õ
G≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*Ω
values∞
fbuiltins.dict[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,TypeAlias[Any]],Unknown]¥
OTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,TypeAlias[Any]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable1
TypeAlias[Any]
Any"_typeshed.Incomplete "builtins.dict*&
name
builtins.str"builtins.str0:overloadXÅ
set_edge_attributes-networkx.classes.function.set_edge_attributes"
None*x
Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
values
Any*
name
None 0:overloadX"36"37"38"39"310"311"312"313"ú1
selfloop_edges(networkx.classes.function.selfloop_edges¬
selfloop_edges(networkx.classes.function.selfloop_edges"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
data
Any *
keys
Any *
default
Any 0:overloadX¶
selfloop_edges(networkx.classes.function.selfloop_edges"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
data
Any*
keys
Any *
default
Any 0:overloadXÓ
selfloop_edges(networkx.classes.function.selfloop_edges"ä
ytyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,networkx.classes.function._U],None,None]Ê
]Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,networkx.classes.function._U]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.function._U"
builtins.object"builtins.object"builtins.object
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*&
data
builtins.str"builtins.str*
keys
Any *ù
defaultç
(Union[networkx.classes.function._U,None]U
networkx.classes.function._U"
builtins.object"builtins.object"builtins.object
None 0:overloadXˆ
selfloop_edges(networkx.classes.function.selfloop_edges"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
data
Any*
keys
Any*
default
Any 0:overloadX¯
selfloop_edges(networkx.classes.function.selfloop_edges"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
data
Any *
keys
Any*
default
Any 0:overloadX‹
selfloop_edges(networkx.classes.function.selfloop_edges"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
data
Any*
keys
Any*
default
Any 0:overloadX•
selfloop_edges(networkx.classes.function.selfloop_edges"√
Ütyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,networkx.classes.function._U],None,None]ë
jTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,networkx.classes.function._U]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intU
networkx.classes.function._U"
builtins.object"builtins.object"builtins.object
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*&
data
builtins.str"builtins.str*
keys
Any*ù
defaultç
(Union[networkx.classes.function._U,None]U
networkx.classes.function._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX"36"37"î6
selfloop_edges(networkx.classes.function.selfloop_edges®
selfloop_edges(networkx.classes.function.selfloop_edges"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*F
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool *F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
default
Any 0:overloadXå
selfloop_edges(networkx.classes.function.selfloop_edges"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
default
Any 0:overloadX°
selfloop_edges(networkx.classes.function.selfloop_edges"ä
ytyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,networkx.classes.function._U],None,None]Ê
]Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,networkx.classes.function._U]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.function._U"
builtins.object"builtins.object"builtins.object
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*&
data
builtins.str"builtins.str*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *ù
defaultç
(Union[networkx.classes.function._U,None]U
networkx.classes.function._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX‹
selfloop_edges(networkx.classes.function.selfloop_edges"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadXﬁ
selfloop_edges(networkx.classes.function.selfloop_edges"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*F
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool *D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadX¬
selfloop_edges(networkx.classes.function.selfloop_edges"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadXÿ
selfloop_edges(networkx.classes.function.selfloop_edges"√
Ütyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,networkx.classes.function._U],None,None]ë
jTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,networkx.classes.function._U]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intU
networkx.classes.function._U"
builtins.object"builtins.object"builtins.object
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*&
data
builtins.str"builtins.str*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*ù
defaultç
(Union[networkx.classes.function._U,None]U
networkx.classes.function._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX"38"39"310"311"312"313"∫
subgraph_view)networkx.classes.graphviews.subgraph_view∞
subgraph_view)networkx.classes.graphviews.subgraph_view"Õ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph*’
GÕ
Hnetworkx.classes.multidigraph.MultiDiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph*^
filter_nodeK
CallableType[builtins.function]&
builtins.function"builtins.function *^
filter_edgeK
CallableType[builtins.function]&
builtins.function"builtins.function 0:overloadX†
subgraph_view)networkx.classes.graphviews.subgraph_view"≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*Õ
G≈
Dnetworkx.classes.multigraph.MultiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*^
filter_nodeK
CallableType[builtins.function]&
builtins.function"builtins.function *^
filter_edgeK
CallableType[builtins.function]&
builtins.function"builtins.function 0:overloadXà
subgraph_view)networkx.classes.graphviews.subgraph_view"π
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*¡
Gπ
>networkx.classes.digraph.DiGraph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*^
filter_nodeK
CallableType[builtins.function]&
builtins.function"builtins.function *^
filter_edgeK
CallableType[builtins.function]&
builtins.function"builtins.function 0:overloadX¯
subgraph_view)networkx.classes.graphviews.subgraph_view"±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*^
filter_nodeK
CallableType[builtins.function]&
builtins.function"builtins.function *^
filter_edgeK
CallableType[builtins.function]&
builtins.function"builtins.function 0:overloadX"36"37"38"39"310"311"312"313"◊
from_pandas_adjacency-networkx.convert_matrix.from_pandas_adjacencyˆ
from_pandas_adjacency-networkx.convert_matrix.from_pandas_adjacency"Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph*|
dft
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete""networkx.convert_matrix._DataFrame*Ô
create_using‹
 Type[networkx.convert_matrix._G]Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph"type0:overloadXÒ
from_pandas_adjacency-networkx.convert_matrix.from_pandas_adjacency"
,networkx.classes.graph.Graph[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"networkx.classes.graph.Graph*|
dft
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete""networkx.convert_matrix._DataFrame*
create_using
None 0:overloadX"36"37"38"39"310"311"312"313"•!
from_pandas_edgelist,networkx.convert_matrix.from_pandas_edgelist√
from_pandas_edgelist,networkx.convert_matrix.from_pandas_edgelist"Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph*|
dft
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete""networkx.convert_matrix._DataFrame*l
source`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*l
target`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*ö
	edge_atträ
ÅUnion[builtins.str,builtins.int,builtins.list[Union[builtins.str,builtins.int]],Tuple[Union[builtins.str,builtins.int]],Any,None]
builtins.str"builtins.str
builtins.int"builtins.int¢
/builtins.list[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.listç
'Tuple[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
Any
None*Ô
create_using‹
 Type[networkx.convert_matrix._G]Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph"type*T
edge_keyD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX…
from_pandas_edgelist,networkx.convert_matrix.from_pandas_edgelist"Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph*|
dft
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete""networkx.convert_matrix._DataFrame*n
source`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int *n
target`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int *ú
	edge_atträ
ÅUnion[builtins.str,builtins.int,builtins.list[Union[builtins.str,builtins.int]],Tuple[Union[builtins.str,builtins.int]],Any,None]
builtins.str"builtins.str
builtins.int"builtins.int¢
/builtins.list[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.listç
'Tuple[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
Any
None *Ô
create_using‹
 Type[networkx.convert_matrix._G]Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph"type*T
edge_keyD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadXƒ	
from_pandas_edgelist,networkx.convert_matrix.from_pandas_edgelist"
,networkx.classes.graph.Graph[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"networkx.classes.graph.Graph*|
dft
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete""networkx.convert_matrix._DataFrame*n
source`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int *n
target`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int *ú
	edge_atträ
ÅUnion[builtins.str,builtins.int,builtins.list[Union[builtins.str,builtins.int]],Tuple[Union[builtins.str,builtins.int]],Any,None]
builtins.str"builtins.str
builtins.int"builtins.int¢
/builtins.list[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.listç
'Tuple[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
Any
None *
create_using
None *T
edge_keyD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX"36"37"ã#
from_pandas_edgelist,networkx.convert_matrix.from_pandas_edgelistâ
from_pandas_edgelist,networkx.convert_matrix.from_pandas_edgelist"Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph*|
dft
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete""networkx.convert_matrix._DataFrame*l
source`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*l
target`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*‡
	edge_attr–
îUnion[builtins.str,builtins.int,builtins.list[Union[builtins.str,builtins.int]],Tuple[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.str"builtins.str
builtins.int"builtins.int¢
/builtins.list[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.listç
'Tuple[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None*Ô
create_using‹
 Type[networkx.convert_matrix._G]Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph"type*T
edge_keyD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadXè
from_pandas_edgelist,networkx.convert_matrix.from_pandas_edgelist"Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph*|
dft
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete""networkx.convert_matrix._DataFrame*n
source`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int *n
target`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int *‚
	edge_attr–
îUnion[builtins.str,builtins.int,builtins.list[Union[builtins.str,builtins.int]],Tuple[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.str"builtins.str
builtins.int"builtins.int¢
/builtins.list[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.listç
'Tuple[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *Ô
create_using‹
 Type[networkx.convert_matrix._G]Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph"type*T
edge_keyD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadXä

from_pandas_edgelist,networkx.convert_matrix.from_pandas_edgelist"
,networkx.classes.graph.Graph[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"networkx.classes.graph.Graph*|
dft
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete""networkx.convert_matrix._DataFrame*n
source`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int *n
target`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int *‚
	edge_attr–
îUnion[builtins.str,builtins.int,builtins.list[Union[builtins.str,builtins.int]],Tuple[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.str"builtins.str
builtins.int"builtins.int¢
/builtins.list[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.listç
'Tuple[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *
create_using
None *T
edge_keyD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX"38"39"310"311"312"313"™
from_numpy_array(networkx.convert_matrix.from_numpy_arrayì
from_numpy_array(networkx.convert_matrix.from_numpy_array"
,networkx.classes.graph.Graph[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"networkx.classes.graph.Graph*r
Ak
%numpy.ndarray[TypeAlias[Any],Unknown]1
TypeAlias[Any]
Any"_typeshed.Incomplete "numpy.ndarray*4
parallel_edges
builtins.bool"builtins.bool *
create_using
None 0:overloadXò
from_numpy_array(networkx.convert_matrix.from_numpy_array"Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph*r
Ak
%numpy.ndarray[TypeAlias[Any],Unknown]1
TypeAlias[Any]
Any"_typeshed.Incomplete "numpy.ndarray*4
parallel_edges
builtins.bool"builtins.bool *Ô
create_using‹
 Type[networkx.convert_matrix._G]Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph"type0:overloadXñ
from_numpy_array(networkx.convert_matrix.from_numpy_array"Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph*r
Ak
%numpy.ndarray[TypeAlias[Any],Unknown]1
TypeAlias[Any]
Any"_typeshed.Incomplete "numpy.ndarray*2
parallel_edges
builtins.bool"builtins.bool*Ô
create_using‹
 Type[networkx.convert_matrix._G]Ø
networkx.convert_matrix._Gq
-networkx.classes.graph.Graph[typing.Hashable]"
typing.Hashable"typing.Hashable"networkx.classes.graph.Graph"networkx.classes.graph.Graph"type0:overloadX"36"37"38"39"310"311"312"313"Ç
random_clustered_graph;networkx.generators.random_clustered.random_clustered_graph≥
random_clustered_graph;networkx.generators.random_clustered.random_clustered_graph"|
4networkx.classes.multigraph.MultiGraph[builtins.int]
builtins.int"builtins.int"&networkx.classes.multigraph.MultiGraph*¬
joint_degree_sequence¶
1typing.Iterable[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"typing.Iterable*
create_using
None *Ï
seedﬂ
¿TypeAlias[Union[builtins.int,TypeAlias[Union[types.ModuleType,random.Random,numpy.random.mtrand.RandomState,numpy.random._generator.Generator,networkx.utils.misc.PythonRandomInterface]],None]]ı
µUnion[builtins.int,TypeAlias[Union[types.ModuleType,random.Random,numpy.random.mtrand.RandomState,numpy.random._generator.Generator,networkx.utils.misc.PythonRandomInterface]],None]
builtins.int"builtins.intê
úTypeAlias[Union[types.ModuleType,random.Random,numpy.random.mtrand.RandomState,numpy.random._generator.Generator,networkx.utils.misc.PythonRandomInterface]]¿
ëUnion[types.ModuleType,random.Random,numpy.random.mtrand.RandomState,numpy.random._generator.Generator,networkx.utils.misc.PythonRandomInterface]$
types.ModuleType"types.ModuleType
random.Random"random.RandomB
numpy.random.mtrand.RandomState"numpy.random.mtrand.RandomStateF
!numpy.random._generator.Generator"!numpy.random._generator.GeneratorV
)networkx.utils.misc.PythonRandomInterface")networkx.utils.misc.PythonRandomInterface"*networkx.utils.misc._RandomNumberGenerator
None" networkx.utils.misc._RandomState 0:overloadX–
random_clustered_graph;networkx.generators.random_clustered.random_clustered_graph"≥
'networkx.generators.random_clustered._Gh
*networkx.classes.graph.Graph[builtins.int]
builtins.int"builtins.int"networkx.classes.graph.Graph"networkx.classes.graph.Graph*¬
joint_degree_sequence¶
1typing.Iterable[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"typing.Iterable*Ä
create_usingÌ
-Type[networkx.generators.random_clustered._G]≥
'networkx.generators.random_clustered._Gh
*networkx.classes.graph.Graph[builtins.int]
builtins.int"builtins.int"networkx.classes.graph.Graph"networkx.classes.graph.Graph"type*Ï
seedﬂ
¿TypeAlias[Union[builtins.int,TypeAlias[Union[types.ModuleType,random.Random,numpy.random.mtrand.RandomState,numpy.random._generator.Generator,networkx.utils.misc.PythonRandomInterface]],None]]ı
µUnion[builtins.int,TypeAlias[Union[types.ModuleType,random.Random,numpy.random.mtrand.RandomState,numpy.random._generator.Generator,networkx.utils.misc.PythonRandomInterface]],None]
builtins.int"builtins.intê
úTypeAlias[Union[types.ModuleType,random.Random,numpy.random.mtrand.RandomState,numpy.random._generator.Generator,networkx.utils.misc.PythonRandomInterface]]¿
ëUnion[types.ModuleType,random.Random,numpy.random.mtrand.RandomState,numpy.random._generator.Generator,networkx.utils.misc.PythonRandomInterface]$
types.ModuleType"types.ModuleType
random.Random"random.RandomB
numpy.random.mtrand.RandomState"numpy.random.mtrand.RandomStateF
!numpy.random._generator.Generator"!numpy.random._generator.GeneratorV
)networkx.utils.misc.PythonRandomInterface")networkx.utils.misc.PythonRandomInterface"*networkx.utils.misc._RandomNumberGenerator
None" networkx.utils.misc._RandomState 0:overloadX"36"37"38"39"310"311"312"313"Û
relabel_nodesnetworkx.relabel.relabel_nodesÅ
relabel_nodesnetworkx.relabel.relabel_nodes"Ÿ
Znetworkx.classes.multidigraph.MultiDiGraph[Union[networkx.relabel._X,networkx.relabel._Y]]Œ
.Union[networkx.relabel._X,networkx.relabel._Y]L
networkx.relabel._X"
typing.Hashable"typing.Hashable"typing.HashableL
networkx.relabel._Y"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph*√
Gª
?networkx.classes.multidigraph.MultiDiGraph[networkx.relabel._X]L
networkx.relabel._X"
typing.Hashable"typing.Hashable"typing.Hashable"*networkx.classes.multidigraph.MultiDiGraph*Û
mappingÂ
7typing.Mapping[networkx.relabel._X,networkx.relabel._Y]L
networkx.relabel._X"
typing.Hashable"typing.Hashable"typing.HashableL
networkx.relabel._Y"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Mapping**
copy
builtins.bool"builtins.bool 0:overloadXŸ
relabel_nodesnetworkx.relabel.relabel_nodes"≈
Pnetworkx.classes.digraph.DiGraph[Union[networkx.relabel._X,networkx.relabel._Y]]Œ
.Union[networkx.relabel._X,networkx.relabel._Y]L
networkx.relabel._X"
typing.Hashable"typing.Hashable"typing.HashableL
networkx.relabel._Y"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*Ø
Gß
5networkx.classes.digraph.DiGraph[networkx.relabel._X]L
networkx.relabel._X"
typing.Hashable"typing.Hashable"typing.Hashable" networkx.classes.digraph.DiGraph*Û
mappingÂ
7typing.Mapping[networkx.relabel._X,networkx.relabel._Y]L
networkx.relabel._X"
typing.Hashable"typing.Hashable"typing.HashableL
networkx.relabel._Y"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Mapping**
copy
builtins.bool"builtins.bool 0:overloadXÒ
relabel_nodesnetworkx.relabel.relabel_nodes"—
Vnetworkx.classes.multigraph.MultiGraph[Union[networkx.relabel._X,networkx.relabel._Y]]Œ
.Union[networkx.relabel._X,networkx.relabel._Y]L
networkx.relabel._X"
typing.Hashable"typing.Hashable"typing.HashableL
networkx.relabel._Y"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*ª
G≥
;networkx.classes.multigraph.MultiGraph[networkx.relabel._X]L
networkx.relabel._X"
typing.Hashable"typing.Hashable"typing.Hashable"&networkx.classes.multigraph.MultiGraph*Û
mappingÂ
7typing.Mapping[networkx.relabel._X,networkx.relabel._Y]L
networkx.relabel._X"
typing.Hashable"typing.Hashable"typing.HashableL
networkx.relabel._Y"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Mapping**
copy
builtins.bool"builtins.bool 0:overloadX…
relabel_nodesnetworkx.relabel.relabel_nodes"Ω
Lnetworkx.classes.graph.Graph[Union[networkx.relabel._X,networkx.relabel._Y]]Œ
.Union[networkx.relabel._X,networkx.relabel._Y]L
networkx.relabel._X"
typing.Hashable"typing.Hashable"typing.HashableL
networkx.relabel._Y"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*ß
Gü
1networkx.classes.graph.Graph[networkx.relabel._X]L
networkx.relabel._X"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*Û
mappingÂ
7typing.Mapping[networkx.relabel._X,networkx.relabel._Y]L
networkx.relabel._X"
typing.Hashable"typing.Hashable"typing.HashableL
networkx.relabel._Y"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Mapping**
copy
builtins.bool"builtins.bool 0:overloadX"36"37"38"39"310"311"312"313*ç
__path__networkx.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*36*37*38*39*310*311*312*313*®
__annotations__networkx.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313*X
approximation!networkx.algorithms.approximation *36*37*38*39*310*311*312*313*X
assortativity!networkx.algorithms.assortativity *36*37*38*39*310*311*312*313*P
	bipartitenetworkx.algorithms.bipartite *36*37*38*39*310*311*312*313*R

centralitynetworkx.algorithms.centrality *36*37*38*39*310*311*312*313*L
chordalnetworkx.algorithms.chordal *36*37*38*39*310*311*312*313*J
cliquenetworkx.algorithms.clique *36*37*38*39*310*311*312*313*L
clusternetworkx.algorithms.cluster *36*37*38*39*310*311*312*313*N
coloringnetworkx.algorithms.coloring *36*37*38*39*310*311*312*313*P
	communitynetworkx.algorithms.community *36*37*38*39*310*311*312*313*R

componentsnetworkx.algorithms.components *36*37*38*39*310*311*312*313*V
connectivity networkx.algorithms.connectivity *36*37*38*39*310*311*312*313*F
flownetworkx.algorithms.flow *36*37*38*39*310*311*312*313*T
isomorphismnetworkx.algorithms.isomorphism *36*37*38*39*310*311*312*313*X
link_analysis!networkx.algorithms.link_analysis *36*37*38*39*310*311*312*313*l
lowest_common_ancestors+networkx.algorithms.lowest_common_ancestors *36*37*38*39*310*311*312*313*d
node_classification'networkx.algorithms.node_classification *36*37*38*39*310*311*312*313*P
	operatorsnetworkx.algorithms.operators *36*37*38*39*310*311*312*313*Z
shortest_paths"networkx.algorithms.shortest_paths *36*37*38*39*310*311*312*313*R

tournamentnetworkx.algorithms.tournament *36*37*38*39*310*311*312*313*P
	traversalnetworkx.algorithms.traversal *36*37*38*39*310*311*312*313*F
treenetworkx.algorithms.tree *36*37*38*39*310*311*312*313*Ú
information_centralityLnetworkx.algorithms.centrality.current_flow_closeness.information_centralityf
2networkx.utils.backends._dispatchable[Unknown,Any] 
Any"%networkx.utils.backends._dispatchable*36*37*38*39*310*311*312*313*“
load_centrality3networkx.algorithms.centrality.load.load_centralityf
2networkx.utils.backends._dispatchable[Unknown,Any] 
Any"%networkx.utils.backends._dispatchable*36*37*38*39*310*311*312*313*◊
identified_nodes7networkx.algorithms.minors.contraction.identified_nodesf
2networkx.utils.backends._dispatchable[Unknown,Any] 
Any"%networkx.utils.backends._dispatchable*36*37*38*39*310*311*312*313*M
	coreviewsnetworkx.classes.coreviews *36*37*38*39*310*311*312*313*I
filtersnetworkx.classes.filters *36*37*38*39*310*311*312*313*O

graphviewsnetworkx.classes.graphviews *36*37*38*39*310*311*312*313*Q
reportviewsnetworkx.classes.reportviews *36*37*38*39*310*311*312*313*M
	nx_agraphnetworkx.drawing.nx_agraph *36*37*38*39*310*311*312*313*K
nx_pydotnetworkx.drawing.nx_pydot *36*37*38*39*310*311*312*313*√
fruchterman_reingold_layout3networkx.drawing.layout.fruchterman_reingold_layoutK
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310*311*312*313*Œ
binomial_graph0networkx.generators.random_graphs.binomial_graphf
2networkx.utils.backends._dispatchable[Unknown,Any] 
Any"%networkx.utils.backends._dispatchable*36*37*38*39*310*311*312*313*‘
erdos_renyi_graph3networkx.generators.random_graphs.erdos_renyi_graphf
2networkx.utils.backends._dispatchable[Unknown,Any] 
Any"%networkx.utils.backends._dispatchable*36*37*38*39*310*311*312*313*N

attrmatrixnetworkx.linalg.attrmatrix *36*37*38*39*310*311*312*313*^
bethehessianmatrix"networkx.linalg.bethehessianmatrix *36*37*38*39*310*311*312*313*P
graphmatrixnetworkx.linalg.graphmatrix *36*37*38*39*310*311*312*313*X
laplacianmatrixnetworkx.linalg.laplacianmatrix *36*37*38*39*310*311*312*313*Z
modularitymatrix networkx.linalg.modularitymatrix *36*37*38*39*310*311*312*313*J
spectrumnetworkx.linalg.spectrum *36*37*38*39*310*311*312*313*™
write_graphml(networkx.readwrite.graphml.write_graphmlK
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310*311*312*313*õ
confignetworkx.utils.configs.configN
%networkx.utils.configs.NetworkXConfig"%networkx.utils.configs.NetworkXConfig*36*37*38*39*310*311*312*313*G

algorithmsnetworkx.algorithms *36*37*38*39*310*311*312*313*A
classesnetworkx.classes *36*37*38*39*310*311*312*313*A
convertnetworkx.convert *36*37*38*39*310*311*312*313*O
convert_matrixnetworkx.convert_matrix *36*37*38*39*310*311*312*313*A
drawingnetworkx.drawing *36*37*38*39*310*311*312*313*G

generatorsnetworkx.generators *36*37*38*39*310*311*312*313*?
linalgnetworkx.linalg *36*37*38*39*310*311*312*313*E
	readwritenetworkx.readwrite *36*37*38*39*310*311*312*313*A
relabelnetworkx.relabel *36*37*38*39*310*311*312*313*=
utilsnetworkx.utils *36*37*38*39*310*311*312*313