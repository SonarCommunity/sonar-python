
	mimetypesè
	MimeTypesmimetypes.MimeTypes"builtins.object*ı
__init__mimetypes.MimeTypes.__init__"
None*4
self*
mimetypes.MimeTypes"mimetypes.MimeTypes*]
	filenamesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple *,
strict
builtins.bool"builtins.bool *à
guess_extension#mimetypes.MimeTypes.guess_extension"D
Union[builtins.str,None]
builtins.str"builtins.str
None*4
self*
mimetypes.MimeTypes"mimetypes.MimeTypes*&
type
builtins.str"builtins.str*,
strict
builtins.bool"builtins.bool *—

guess_typemimetypes.MimeTypes.guess_type"»
8Tuple[Union[builtins.str,None],Union[builtins.str,None]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None*4
self*
mimetypes.MimeTypes"mimetypes.MimeTypes*Û
urlÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*,
strict
builtins.bool"builtins.bool *ò
guess_all_extensions(mimetypes.MimeTypes.guess_all_extensions"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*4
self*
mimetypes.MimeTypes"mimetypes.MimeTypes*&
type
builtins.str"builtins.str*,
strict
builtins.bool"builtins.bool *∫
readmimetypes.MimeTypes.read"
None*4
self*
mimetypes.MimeTypes"mimetypes.MimeTypes**
filename
builtins.str"builtins.str*,
strict
builtins.bool"builtins.bool *ﬁ
readfpmimetypes.MimeTypes.readfp"
None*4
self*
mimetypes.MimeTypes"mimetypes.MimeTypes*J
fpB
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO*,
strict
builtins.bool"builtins.bool r£

suffix_mapmimetypes.MimeTypes.suffix_mapu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dictr©
encodings_map!mimetypes.MimeTypes.encodings_mapu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dictr˜
	types_mapmimetypes.MimeTypes.types_map 
XTuple[builtins.dict[builtins.str,builtins.str],builtins.dict[builtins.str,builtins.str]]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dictu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dictrˇ
types_map_inv!mimetypes.MimeTypes.types_map_inv 
XTuple[builtins.dict[builtins.str,builtins.str],builtins.dict[builtins.str,builtins.str]]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dictu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dictë

guess_typemimetypes.guess_type"»
8Tuple[Union[builtins.str,None],Union[builtins.str,None]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None*Û
urlÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*,
strict
builtins.bool"builtins.bool ÿ
guess_all_extensionsmimetypes.guess_all_extensions"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*&
type
builtins.str"builtins.str*,
strict
builtins.bool"builtins.bool »
guess_extensionmimetypes.guess_extension"D
Union[builtins.str,None]
builtins.str"builtins.str
None*&
type
builtins.str"builtins.str*,
strict
builtins.bool"builtins.bool ∏
initmimetypes.init"
None*ï
filesá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None ê
read_mime_typesmimetypes.read_mime_types"π
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None*&
file
builtins.str"builtins.str•
add_typemimetypes.add_type"
None*&
type
builtins.str"builtins.str*%
ext
builtins.str"builtins.str*,
strict
builtins.bool"builtins.bool *Ö
__annotations__mimetypes.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*h
__all__mimetypes.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*:
initedmimetypes.inited
builtins.bool"builtins.bool*n

knownfilesmimetypes.knownfilesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ô

suffix_mapmimetypes.suffix_mapu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*ü
encodings_mapmimetypes.encodings_mapu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*ó
	types_mapmimetypes.types_mapu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*ù
common_typesmimetypes.common_typesu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict