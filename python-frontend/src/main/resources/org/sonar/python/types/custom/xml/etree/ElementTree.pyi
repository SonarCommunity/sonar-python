from typing import List, Optional

class Element(CustomStubBase):
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> None: ...
    def clear(self, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> Element: ...
    def extend(self, *args, **kwargs) -> None: ...
    def find(self, *args, **kwargs) -> Optional[Element]: ...
    def findall(self, *args, **kwargs) -> List[Element]: ...
    def findtext(self, *args, **kwargs) -> Optional[str]: ...
    def get(self, *args, **kwargs) -> Optional[str]: ...
    def getchildren(self, *args, **kwargs) -> List[Element]: ...
    def getiterator(self, *args, **kwargs) -> List[Element]: ...
    def insert(self, *args, **kwargs) -> None: ...
    def iterfind(self, *args, **kwargs) -> List[Element]: ...
    def makeelement(self, *args, **kwargs) -> Element: ...
    def remove(self, *args, **kwargs) -> None: ...
    def set(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> bool: ...
    def __delitem__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, *args, **kwargs) -> Element: ...
    def __len__(self, *args, **kwargs) -> int: ...
    def __setitem__(self, *args, **kwargs) -> None: ...


class ElementTree(CustomStubBase):
    def __init__(self, *args, **kwargs) -> None: ...
    def getroot(self, *args, **kwargs) -> Element: ...
    def parse(self, *args, **kwargs) -> Element: ...
    def getiterator(self, *args, **kwargs) -> List[Element]: ...
    def find(self, *args, **kwargs) -> Optional[Element]: ...
    def findtext(self, *args, **kwargs) -> Optional[str]: ...
    def findall(self, *args, **kwargs) -> List[Element]: ...
    def iterfind(self, *args, **kwargs) -> List[Element]: ...
    def write(self, *args, **kwargs) -> None: ...
    def write_c14n(self, *args, **kwargs) -> None: ...

def parse(self, *args, **kwargs) -> ElementTree: ...
def fromstring(self, *args, **kwargs) -> Element: ...
def fromstringlist(self, *args, **kwargs) -> Element: ...
