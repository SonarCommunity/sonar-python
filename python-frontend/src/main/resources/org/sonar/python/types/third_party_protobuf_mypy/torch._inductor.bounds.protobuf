
torch._inductor.boundsÙ
	BoundVars torch._inductor.bounds.BoundVars"builtins.object*⁄
__init__)torch._inductor.bounds.BoundVars.__init__"
None*N
selfD
 torch._inductor.bounds.BoundVars" torch._inductor.bounds.BoundVars*I
	loop_body:
torch._inductor.ir.LoopBody"torch._inductor.ir.LoopBody*î

get_bounds+torch._inductor.bounds.BoundVars.get_bounds"˜
Rbuiltins.dict[torch.fx.node.Node,torch.utils._sympy.value_ranges.ValueRanges[Any]](
torch.fx.node.Node"torch.fx.node.Nodeh
0torch.utils._sympy.value_ranges.ValueRanges[Any]
Any"+torch.utils._sympy.value_ranges.ValueRanges"builtins.dict*N
selfD
 torch._inductor.bounds.BoundVars" torch._inductor.bounds.BoundVars0:cache_on_self*ò
swap_submodules0torch._inductor.bounds.BoundVars.swap_submodules"∑
;builtins.dict[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict*N
selfD
 torch._inductor.bounds.BoundVars" torch._inductor.bounds.BoundVars*»

submodules∑
;builtins.dict[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict*«
masked_subblock0torch._inductor.bounds.BoundVars.masked_subblock"h
0torch.utils._sympy.value_ranges.ValueRanges[Any]
Any"+torch.utils._sympy.value_ranges.ValueRanges*N
selfD
 torch._inductor.bounds.BoundVars" torch._inductor.bounds.BoundVars*R
subblockD
 torch._inductor.ir.LoopBodyBlock" torch._inductor.ir.LoopBodyBlock*Å
env˜
Rbuiltins.dict[torch.fx.node.Node,torch.utils._sympy.value_ranges.ValueRanges[Any]](
torch.fx.node.Node"torch.fx.node.Nodeh
0torch.utils._sympy.value_ranges.ValueRanges[Any]
Any"+torch.utils._sympy.value_ranges.ValueRanges"builtins.dict*
mask
Any*
value
Any*»

submodules∑
;builtins.dict[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict*¸
set_indirect-torch._inductor.bounds.BoundVars.set_indirect"h
0torch.utils._sympy.value_ranges.ValueRanges[Any]
Any"+torch.utils._sympy.value_ranges.ValueRanges*N
selfD
 torch._inductor.bounds.BoundVars" torch._inductor.bounds.BoundVars*
old
Any*q
newh
0torch.utils._sympy.value_ranges.ValueRanges[Any]
Any"+torch.utils._sympy.value_ranges.ValueRanges*Ñ
	get_index*torch._inductor.bounds.BoundVars.get_index"h
0torch.utils._sympy.value_ranges.ValueRanges[Any]
Any"+torch.utils._sympy.value_ranges.ValueRanges*N
selfD
 torch._inductor.bounds.BoundVars" torch._inductor.bounds.BoundVars*
name
Anyrs
	loop_body*torch._inductor.bounds.BoundVars.loop_body:
torch._inductor.ir.LoopBody"torch._inductor.ir.LoopBodyrè
replacement_vals1torch._inductor.bounds.BoundVars.replacement_vals«
Cbuiltins.dict[Any,torch.utils._sympy.value_ranges.ValueRanges[Any]]
Anyh
0torch.utils._sympy.value_ranges.ValueRanges[Any]
Any"+torch.utils._sympy.value_ranges.ValueRanges"builtins.dictrù
unbounded_vars/torch._inductor.bounds.BoundVars.unbounded_varsZ
 builtins.set[torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node"builtins.setr≠
_bounds(torch._inductor.bounds.BoundVars._bounds˜
Rbuiltins.dict[torch.fx.node.Node,torch.utils._sympy.value_ranges.ValueRanges[Any]](
torch.fx.node.Node"torch.fx.node.Nodeh
0torch.utils._sympy.value_ranges.ValueRanges[Any]
Any"+torch.utils._sympy.value_ranges.ValueRanges"builtins.dict*í
__annotations__&torch._inductor.bounds.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*,
Exprtorch._inductor.bounds.Expr
Any*C
logtorch._inductor.bounds.log 
logging.Logger"logging.Logger