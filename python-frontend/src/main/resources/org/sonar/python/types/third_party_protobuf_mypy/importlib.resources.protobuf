
importlib.resourcesˆ
open_binaryimportlib.resources.open_binary""
typing.BinaryIO"typing.BinaryIO*Ã
packageæ
/TypeAlias[Union[builtins.str,types.ModuleType]]l
$Union[builtins.str,types.ModuleType]
builtins.str"builtins.str$
types.ModuleType"types.ModuleType"importlib.resources.Package*“
resource√
/TypeAlias[Union[builtins.str,os.PathLike[Any]]]p
$Union[builtins.str,os.PathLike[Any]]
builtins.str"builtins.str(
os.PathLike[Any]
Any"os.PathLike"importlib.resources.Resource»
	open_textimportlib.resources.open_text"
typing.TextIO"typing.TextIO*Ã
packageæ
/TypeAlias[Union[builtins.str,types.ModuleType]]l
$Union[builtins.str,types.ModuleType]
builtins.str"builtins.str$
types.ModuleType"types.ModuleType"importlib.resources.Package*“
resource√
/TypeAlias[Union[builtins.str,os.PathLike[Any]]]p
$Union[builtins.str,os.PathLike[Any]]
builtins.str"builtins.str(
os.PathLike[Any]
Any"os.PathLike"importlib.resources.Resource*,
encoding
builtins.str"builtins.str **
errors
builtins.str"builtins.str Ù
read_binaryimportlib.resources.read_binary" 
builtins.bytes"builtins.bytes*Ã
packageæ
/TypeAlias[Union[builtins.str,types.ModuleType]]l
$Union[builtins.str,types.ModuleType]
builtins.str"builtins.str$
types.ModuleType"types.ModuleType"importlib.resources.Package*“
resource√
/TypeAlias[Union[builtins.str,os.PathLike[Any]]]p
$Union[builtins.str,os.PathLike[Any]]
builtins.str"builtins.str(
os.PathLike[Any]
Any"os.PathLike"importlib.resources.Resource∆
	read_textimportlib.resources.read_text"
builtins.str"builtins.str*Ã
packageæ
/TypeAlias[Union[builtins.str,types.ModuleType]]l
$Union[builtins.str,types.ModuleType]
builtins.str"builtins.str$
types.ModuleType"types.ModuleType"importlib.resources.Package*“
resource√
/TypeAlias[Union[builtins.str,os.PathLike[Any]]]p
$Union[builtins.str,os.PathLike[Any]]
builtins.str"builtins.str(
os.PathLike[Any]
Any"os.PathLike"importlib.resources.Resource*,
encoding
builtins.str"builtins.str **
errors
builtins.str"builtins.str ∏
pathimportlib.resources.path"r
/contextlib.AbstractContextManager[pathlib.Path]
pathlib.Path"pathlib.Path"!contextlib.AbstractContextManager*Ã
packageæ
/TypeAlias[Union[builtins.str,types.ModuleType]]l
$Union[builtins.str,types.ModuleType]
builtins.str"builtins.str$
types.ModuleType"types.ModuleType"importlib.resources.Package*“
resource√
/TypeAlias[Union[builtins.str,os.PathLike[Any]]]p
$Union[builtins.str,os.PathLike[Any]]
builtins.str"builtins.str(
os.PathLike[Any]
Any"os.PathLike"importlib.resources.Resource≈
is_resourceimportlib.resources.is_resource"
builtins.bool"builtins.bool*Ã
packageæ
/TypeAlias[Union[builtins.str,types.ModuleType]]l
$Union[builtins.str,types.ModuleType]
builtins.str"builtins.str$
types.ModuleType"types.ModuleType"importlib.resources.Package*&
name
builtins.str"builtins.str«
contentsimportlib.resources.contents"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*Ã
packageæ
/TypeAlias[Union[builtins.str,types.ModuleType]]l
$Union[builtins.str,types.ModuleType]
builtins.str"builtins.str$
types.ModuleType"types.ModuleType"importlib.resources.Package*t
__path__importlib.resources.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*è
__annotations__#importlib.resources.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*r
__all__importlib.resources.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list