
torch._library.utils∂
Kerneltorch._library.utils.Kernel"builtins.object*P
__call__$torch._library.utils.Kernel.__call__*
self*
args*

kwargs*Å
__init__$torch._library.utils.Kernel.__init__"
None*D
self:
torch._library.utils.Kernel"torch._library.utils.Kernel*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*(
source
builtins.str"builtins.str8ru
func torch._library.utils.Kernel.funcK
CallableType[builtins.function]&
builtins.function"builtins.functionrJ
source"torch._library.utils.Kernel.source
builtins.str"builtins.strr‚
__dataclass_fields__0torch._library.utils.Kernel.__dataclass_fields__ó
2builtins.dict[builtins.str,dataclasses.Field[Any]]
builtins.str"builtins.str4
dataclasses.Field[Any]
Any"dataclasses.Field"builtins.dictâ
RegistrationHandle'torch._library.utils.RegistrationHandle"builtins.object*Å
__init__0torch._library.utils.RegistrationHandle.__init__"
None*\
selfR
'torch._library.utils.RegistrationHandle"'torch._library.utils.RegistrationHandle*[

on_destroyK
CallableType[builtins.function]&
builtins.function"builtins.function*¢
destroy/torch._library.utils.RegistrationHandle.destroy"
None*\
selfR
'torch._library.utils.RegistrationHandle"'torch._library.utils.RegistrationHandlerè
_on_destroy3torch._library.utils.RegistrationHandle._on_destroyK
CallableType[builtins.function]&
builtins.function"builtins.functiony

get_sourcetorch._library.utils.get_source"
builtins.str"builtins.str*,

stacklevel
builtins.int"builtins.int≈
parse_namespace$torch._library.utils.parse_namespace"`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str**
qualname
builtins.str"builtins.strá
	lookup_optorch._library.utils.lookup_op".
torch._ops.OpOverload"torch._ops.OpOverload**
qualname
builtins.str"builtins.strÖ

is_builtintorch._library.utils.is_builtin"
builtins.bool"builtins.bool*6
op.
torch._ops.OpOverload"torch._ops.OpOverloadv
is_functional_schema)torch._library.utils.is_functional_schema"
builtins.bool"builtins.bool*
schema
Anyy
is_tensorlist_like_type,torch._library.utils.is_tensorlist_like_type"
builtins.bool"builtins.bool*
typ
Anyq
is_tensor_like_type(torch._library.utils.is_tensor_like_type"
builtins.bool"builtins.bool*
typ
Anyî
mutates_and_returns_first_arg2torch._library.utils.mutates_and_returns_first_arg"
Any*6
op.
torch._ops.OpOverload"torch._ops.OpOverloadU
fill_defaults"torch._library.utils.fill_defaults*

schema*
args*

kwargs¢

zip_schematorch._library.utils.zip_schema"ì
-typing.Iterable[Tuple[torch._C.Argument,Any]]Q
Tuple[torch._C.Argument,Any]&
torch._C.Argument"torch._C.Argument
Any"typing.Iterable*>
schema2
torch._C.FunctionSchema"torch._C.FunctionSchema*8
args.
builtins.tuple[Any]
Any"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict≠
can_generate_trivial_fake_impl3torch._library.utils.can_generate_trivial_fake_impl"
builtins.bool"builtins.bool*6
op.
torch._ops.OpOverload"torch._ops.OpOverloadm
requires_set_python_module/torch._library.utils.requires_set_python_module"
builtins.bool"builtins.boolw
handle_dispatch_mode)torch._library.utils.handle_dispatch_mode*
	curr_mode*
op_overload*
args*

kwargsà
has_kwarg_only_args(torch._library.utils.has_kwarg_only_args"
Any*>
schema2
torch._C.FunctionSchema"torch._C.FunctionSchemaé
has_kwarg_only_tensors+torch._library.utils.has_kwarg_only_tensors"
Any*>
schema2
torch._C.FunctionSchema"torch._C.FunctionSchema*ê
__annotations__$torch._library.utils.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict**
_utils_internaltorch._utils_internal 