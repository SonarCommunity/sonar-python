
torch.fx.passes.reinplaceá
	_ViewType#torch.fx.passes.reinplace._ViewType"	enum.EnumHrT
NonView+torch.fx.passes.reinplace._ViewType.NonView
builtins.int"builtins.intrf
SingleOutputView4torch.fx.passes.reinplace._ViewType.SingleOutputView
builtins.int"builtins.intrd
MultiOutputView3torch.fx.passes.reinplace._ViewType.MultiOutputView
builtins.int"builtins.intÆ
_FunctionalizationMetadataProp8torch.fx.passes.reinplace._FunctionalizationMetadataProp" torch.fx.interpreter.Interpreter*Š
run_nodeAtorch.fx.passes.reinplace._FunctionalizationMetadataProp.run_node"
Any*~
selft
8torch.fx.passes.reinplace._FunctionalizationMetadataProp"8torch.fx.passes.reinplace._FunctionalizationMetadataProp*2
node(
torch.fx.node.Node"torch.fx.node.Node*c
	propagateBtorch.fx.passes.reinplace._FunctionalizationMetadataProp.propagate*
self*
args8rt
multi_output_view_nodesPtorch.fx.passes.reinplace._FunctionalizationMetadataProp.multi_output_view_nodes
Anyr^
node_counterEtorch.fx.passes.reinplace._FunctionalizationMetadataProp.node_counter
Any=
_is_view_op%torch.fx.passes.reinplace._is_view_op*
tgt˜
_get_view_type(torch.fx.passes.reinplace._get_view_type"J
#torch.fx.passes.reinplace._ViewType"#torch.fx.passes.reinplace._ViewType*
tgt
Anye
_schemas_match(torch.fx.passes.reinplace._schemas_match*
functional_schema*
inplace_schemaP
_maybe_get_inplace_op/torch.fx.passes.reinplace._maybe_get_inplace_op*
op÷
_get_all_later_node_usages4torch.fx.passes.reinplace._get_all_later_node_usages"
Any*n
tensor_aliasesZ
 builtins.set[torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node"builtins.set**
op_index
builtins.int"builtins.int•
_get_view_inverse_node_usages7torch.fx.passes.reinplace._get_view_inverse_node_usages"Z
 builtins.set[torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node"builtins.set*q
later_node_usagesZ
 builtins.set[torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node"builtins.set*l
self_aliasesZ
 builtins.set[torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node"builtins.set*•
__annotations__)torch.fx.passes.reinplace.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
pytreetorch.utils._pytree *x
__all__!torch.fx.passes.reinplace.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*{
_VIEW_INVERSE_MAP+torch.fx.passes.reinplace._VIEW_INVERSE_MAP9
builtins.dict[Any,Any]
Any
Any"builtins.dict