
torch.optim.adam×
Adamtorch.optim.adam.Adam"torch.optim.optimizer.Optimizer*Ò

__init__torch.optim.adam.Adam.__init__"
None*8
self.
torch.optim.adam.Adam"torch.optim.adam.Adam*ƒ
paramsö
hTypeAlias[Union[typing.Iterable[torch._tensor.Tensor],typing.Iterable[builtins.dict[builtins.str,Any]]]]è
]Union[typing.Iterable[torch._tensor.Tensor],typing.Iterable[builtins.dict[builtins.str,Any]]]f
%typing.Iterable[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Iterableœ
0typing.Iterable[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"typing.Iterable"torch.optim.optimizer.ParamsT*ˆ
lr~
*Union[builtins.float,torch._tensor.Tensor] 
builtins.float"builtins.float,
torch._tensor.Tensor"torch._tensor.Tensor *y
betasl
$Tuple[builtins.float,builtins.float] 
builtins.float"builtins.float 
builtins.float"builtins.float *+
eps 
builtins.float"builtins.float *4
weight_decay 
builtins.float"builtins.float *-
amsgrad
builtins.bool"builtins.bool *V
foreachG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *.
maximize
builtins.bool"builtins.bool *0

capturable
builtins.bool"builtins.bool *4
differentiable
builtins.bool"builtins.bool *T
fusedG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *G
__setstate__"torch.optim.adam.Adam.__setstate__*
self*	
state*«
_init_group!torch.optim.adam.Adam._init_group*
self*	
group*
params_with_grad*	
grads*
exp_avgs*
exp_avg_sqs*
max_exp_avg_sqs*
state_steps*[
steptorch.optim.adam.Adam.step*
self*
closure 0:_use_grad_for_differentiablern
_step_supports_amp_scaling0torch.optim.adam.Adam._step_supports_amp_scaling
builtins.bool"builtins.bool…
_single_tensor_adam$torch.optim.adam._single_tensor_adam"
Any*n
paramsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*m
gradsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*p
exp_avgsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*s
exp_avg_sqsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*w
max_exp_avg_sqsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*s
state_stepsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*l

grad_scale\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*k
	found_inf\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*+
amsgrad
builtins.bool"builtins.bool*/
has_complex
builtins.bool"builtins.bool*+
beta1 
builtins.float"builtins.float*+
beta2 
builtins.float"builtins.float*†
lr~
*Union[builtins.float,torch._tensor.Tensor] 
builtins.float"builtins.float,
torch._tensor.Tensor"torch._tensor.Tensor*2
weight_decay 
builtins.float"builtins.float*)
eps 
builtins.float"builtins.float*,
maximize
builtins.bool"builtins.bool*.

capturable
builtins.bool"builtins.bool*2
differentiable
builtins.bool"builtins.boolƒ
_multi_tensor_adam#torch.optim.adam._multi_tensor_adam"
Any*n
paramsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*m
gradsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*p
exp_avgsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*s
exp_avg_sqsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*w
max_exp_avg_sqsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*s
state_stepsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*l

grad_scale\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*k
	found_inf\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*+
amsgrad
builtins.bool"builtins.bool*/
has_complex
builtins.bool"builtins.bool*+
beta1 
builtins.float"builtins.float*+
beta2 
builtins.float"builtins.float*†
lr~
*Union[builtins.float,torch._tensor.Tensor] 
builtins.float"builtins.float,
torch._tensor.Tensor"torch._tensor.Tensor*2
weight_decay 
builtins.float"builtins.float*)
eps 
builtins.float"builtins.float*,
maximize
builtins.bool"builtins.bool*.

capturable
builtins.bool"builtins.bool*2
differentiable
builtins.bool"builtins.boolö
_fused_adamtorch.optim.adam._fused_adam"
None*n
paramsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*m
gradsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*p
exp_avgsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*s
exp_avg_sqsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*w
max_exp_avg_sqsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*s
state_stepsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*l

grad_scale\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*k
	found_inf\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*+
amsgrad
builtins.bool"builtins.bool*/
has_complex
builtins.bool"builtins.bool*+
beta1 
builtins.float"builtins.float*+
beta2 
builtins.float"builtins.float*†
lr~
*Union[builtins.float,torch._tensor.Tensor] 
builtins.float"builtins.float,
torch._tensor.Tensor"torch._tensor.Tensor*2
weight_decay 
builtins.float"builtins.float*)
eps 
builtins.float"builtins.float*,
maximize
builtins.bool"builtins.bool*.

capturable
builtins.bool"builtins.bool*2
differentiable
builtins.bool"builtins.bool*Œ
__annotations__ torch.optim.adam.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*o
__all__torch.optim.adam.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list