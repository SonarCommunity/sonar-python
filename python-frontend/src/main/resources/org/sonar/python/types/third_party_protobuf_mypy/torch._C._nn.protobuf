
torch._C._nn¶
adaptive_max_pool2d torch._C._nn.adaptive_max_pool2d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
output_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size¶
adaptive_max_pool3d torch._C._nn.adaptive_max_pool3d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
output_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size«

avg_pool2dtorch._C._nn.avg_pool2d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*¨
strideù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *û
paddingé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *7
count_include_pad
builtins.bool"builtins.bool *\
divisor_overrideD
Union[builtins.int,None]
builtins.int"builtins.int
None «

avg_pool3dtorch._C._nn.avg_pool3d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*¨
strideù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *û
paddingé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *7
count_include_pad
builtins.bool"builtins.bool *\
divisor_overrideD
Union[builtins.int,None]
builtins.int"builtins.int
None Ø
elu_torch._C._nn.elu_",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
alpha 
builtins.float"builtins.float ê
fractional_max_pool2d"torch._C._nn.fractional_max_pool2d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*†
output_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*A
_random_samples,
torch._tensor.Tensor"torch._tensor.Tensorê
fractional_max_pool3d"torch._C._nn.fractional_max_pool3d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*†
output_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*A
_random_samples,
torch._tensor.Tensor"torch._tensor.Tensor±
gelutorch._C._nn.gelu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*/
approximate
builtins.str"builtins.str ˜
hardsigmoidtorch._C._nn.hardsigmoid",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*g
out\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None ”
hardtanhtorch._C._nn.hardtanh",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*/
min_val 
builtins.float"builtins.float */
max_val 
builtins.float"builtins.float *g
out\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None Ï
	hardtanh_torch._C._nn.hardtanh_",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*/
min_val 
builtins.float"builtins.float */
max_val 
builtins.float"builtins.float ≠

leaky_relutorch._C._nn.leaky_relu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*6
negative_slope 
builtins.float"builtins.float *g
out\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None ∆
leaky_relu_torch._C._nn.leaky_relu_",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*6
negative_slope 
builtins.float"builtins.float ®
lineartorch._C._nn.linear",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None é
log_sigmoidtorch._C._nn.log_sigmoid",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor∏
one_hottorch._C._nn.one_hot",
torch._tensor.Tensor"torch._tensor.Tensor*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*/
num_classes
builtins.int"builtins.int ⁄
padtorch._C._nn.pad",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*W
padN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence*(
mode
builtins.str"builtins.str *W
valueJ
Union[builtins.float,None] 
builtins.float"builtins.float
None Ã
scaled_dot_product_attention)torch._C._nn.scaled_dot_product_attention",
torch._tensor.Tensor"torch._tensor.Tensor*7
query,
torch._tensor.Tensor"torch._tensor.Tensor*5
key,
torch._tensor.Tensor"torch._tensor.Tensor*7
value,
torch._tensor.Tensor"torch._tensor.Tensor*m
	attn_mask\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *1
	dropout_p 
builtins.float"builtins.float */
	is_causal
builtins.bool"builtins.bool *W
scaleJ
Union[builtins.float,None] 
builtins.float"builtins.float
None È
softplustorch._C._nn.softplus",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*,
beta 
builtins.float"builtins.float *1
	threshold 
builtins.float"builtins.float ª

softshrinktorch._C._nn.softshrink",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
lambd 
builtins.float"builtins.float ¥
mkldnn_lineartorch._C._nn.mkldnn_linear",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*f
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
Noneå
mkldnn_reorder_conv2d_weight)torch._C._nn.mkldnn_reorder_conv2d_weight",
torch._tensor.Tensor"torch._tensor.Tensor*6
self,
torch._tensor.Tensor"torch._tensor.Tensor*9
padding,
builtins.list[Any]
Any"builtins.list*8
stride,
builtins.list[Any]
Any"builtins.list*<

dilatation,
builtins.list[Any]
Any"builtins.list*(
groups
builtins.int"builtins.intå
mkldnn_reorder_conv3d_weight)torch._C._nn.mkldnn_reorder_conv3d_weight",
torch._tensor.Tensor"torch._tensor.Tensor*6
self,
torch._tensor.Tensor"torch._tensor.Tensor*9
padding,
builtins.list[Any]
Any"builtins.list*8
stride,
builtins.list[Any]
Any"builtins.list*<

dilatation,
builtins.list[Any]
Any"builtins.list*(
groups
builtins.int"builtins.int 
mkldnn_prelutorch._C._nn.mkldnn_prelu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor¥
pad_sequencetorch._C._nn.pad_sequence",
torch._tensor.Tensor"torch._tensor.Tensor*q
	sequencesb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*1
batch_first
builtins.bool"builtins.bool *5
padding_value 
builtins.float"builtins.float ⁄
flatten_dense_tensors"torch._C._nn.flatten_dense_tensors",
torch._tensor.Tensor"torch._tensor.Tensor*o
tensorsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.listÃ
unflatten_dense_tensors$torch._C._nn.unflatten_dense_tensors"b
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list*6
flat,
torch._tensor.Tensor"torch._tensor.Tensor*o
tensorsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.list"°
	_parse_totorch._C._nn._parse_toò
	_parse_totorch._C._nn._parse_to"Ê
JTuple[torch._C.device,torch._C.dtype,builtins.bool,torch._C.memory_format]"
torch._C.device"torch._C.device 
torch._C.dtype"torch._C.dtype
builtins.bool"builtins.bool0
torch._C.memory_format"torch._C.memory_format*.
device"
torch._C.device"torch._C.device*+
dtype 
torch._C.dtype"torch._C.dtype*0
non_blocking
builtins.bool"builtins.bool*(
copy
builtins.bool"builtins.bool*C
memory_format0
torch._C.memory_format"torch._C.memory_format0:overloadXË
	_parse_totorch._C._nn._parse_to"Ê
JTuple[torch._C.device,torch._C.dtype,builtins.bool,torch._C.memory_format]"
torch._C.device"torch._C.device 
torch._C.dtype"torch._C.dtype
builtins.bool"builtins.bool0
torch._C.memory_format"torch._C.memory_format*+
dtype 
torch._C.dtype"torch._C.dtype*0
non_blocking
builtins.bool"builtins.bool*(
copy
builtins.bool"builtins.bool*C
memory_format0
torch._C.memory_format"torch._C.memory_format0:overloadXı
	_parse_totorch._C._nn._parse_to"Ê
JTuple[torch._C.device,torch._C.dtype,builtins.bool,torch._C.memory_format]"
torch._C.device"torch._C.device 
torch._C.dtype"torch._C.dtype
builtins.bool"builtins.bool0
torch._C.memory_format"torch._C.memory_format*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*0
non_blocking
builtins.bool"builtins.bool*(
copy
builtins.bool"builtins.bool*C
memory_format0
torch._C.memory_format"torch._C.memory_format0:overloadX*à
__annotations__torch._C._nn.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict