
torch._exportÀ
CollectTracepointsPassDtorch._export.passes.collect_tracepoints_pass.CollectTracepointsPass"(torch.fx.passes.infra.pass_base.PassBase*£
__init__Mtorch._export.passes.collect_tracepoints_pass.CollectTracepointsPass.__init__"
None*ó
selfå
Dtorch._export.passes.collect_tracepoints_pass.CollectTracepointsPass"Dtorch._export.passes.collect_tracepoints_pass.CollectTracepointsPass*
specs
Any*
sig
Any*c
callItorch._export.passes.collect_tracepoints_pass.CollectTracepointsPass.call*
self*
gmr\
specsJtorch._export.passes.collect_tracepoints_pass.CollectTracepointsPass.specs
AnyrX
sigHtorch._export.passes.collect_tracepoints_pass.CollectTracepointsPass.sig
AnyÀ
-_AddRuntimeAssertionsForInlineConstraintsPassntorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass"(torch.fx.passes.infra.pass_base.PassBase*›
__init__wtorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass.__init__"
None*Î
self‡
ntorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass"ntorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass*ﬂ
range_constraints«
Cbuiltins.dict[Any,torch.utils._sympy.value_ranges.ValueRanges[Any]]
Anyh
0torch.utils._sympy.value_ranges.ValueRanges[Any]
Any"+torch.utils._sympy.value_ranges.ValueRanges"builtins.dict*ﬁ
_assert_range_constraintátorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass._assert_range_constraint*
self*
node*	
lower*	
upper*

assert_msg*„
_insert_assert_asyncÉtorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass._insert_assert_async*
self*
	last_node*
op*	
lower*	
upper*

assert_msg*ı
callstorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass.call"o
TypeAlias[Tuple[Any,Any]]$
Tuple[Any,Any]
Any
Any"*torch.fx.passes.infra.pass_base.PassResult*Î
self‡
ntorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass"ntorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass*
graph_module
Anyr‡
range_constraintsÄtorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass.range_constraints«
Cbuiltins.dict[Any,torch.utils._sympy.value_ranges.ValueRanges[Any]]
Anyh
0torch.utils._sympy.value_ranges.ValueRanges[Any]
Any"+torch.utils._sympy.value_ranges.ValueRanges"builtins.dictrÊ
#_asserts_generated_unbacked_symbolsítorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass._asserts_generated_unbacked_symbols*
builtins.set[Any]
Any"builtins.setrü
countervtorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass.counter
builtins.int"builtins.intrÚ
existing_inline_assertionsâtorch._export.passes.add_runtime_assertions_for_constraints_pass._AddRuntimeAssertionsForInlineConstraintsPass.existing_inline_assertions«
Cbuiltins.dict[Any,torch.utils._sympy.value_ranges.ValueRanges[Any]]
Anyh
0torch.utils._sympy.value_ranges.ValueRanges[Any]
Any"+torch.utils._sympy.value_ranges.ValueRanges"builtins.dictœ
ExportDynamoConfig torch._export.ExportDynamoConfig"builtins.object*¿
__init__)torch._export.ExportDynamoConfig.__init__"
None*N
selfD
 torch._export.ExportDynamoConfig" torch._export.ExportDynamoConfig*/
	allow_rnn
builtins.bool"builtins.bool 8rW
	allow_rnn*torch._export.ExportDynamoConfig.allow_rnn
builtins.bool"builtins.boolrÁ
__dataclass_fields__5torch._export.ExportDynamoConfig.__dataclass_fields__ó
2builtins.dict[builtins.str,dataclasses.Field[Any]]
builtins.str"builtins.str4
dataclasses.Field[Any]
Any"dataclasses.Field"builtins.dictπ
make_constraints/torch._export.non_strict_utils.make_constraints"
Any*k
	fake_mode\
,torch._subclasses.fake_tensor.FakeTensorMode",torch._subclasses.fake_tensor.FakeTensorMode*N
gmF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*j
combined_argsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*å
dynamic_shapes˜
IUnion[builtins.dict[builtins.str,Any],Tuple[Any],builtins.list[Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict

Tuple[Any]
Any,
builtins.list[Any]
Any"builtins.list
None*3
num_lifted_inputs
builtins.int"builtins.intß
savetorch._export.save"
None*f
ep^
-torch.export.exported_program.ExportedProgram"-torch.export.exported_program.ExportedProgram*ù
fï
/Union[builtins.str,os.PathLike[Any],io.BytesIO]
builtins.str"builtins.str(
os.PathLike[Any]
Any"os.PathLike

io.BytesIO"
io.BytesIO*¶
extra_filesí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *œ
opset_versionπ
4Union[builtins.dict[builtins.str,builtins.int],None]u
(builtins.dict[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.dict
None û
loadtorch._export.load"^
-torch.export.exported_program.ExportedProgram"-torch.export.exported_program.ExportedProgram*ù
fï
/Union[builtins.str,os.PathLike[Any],io.BytesIO]
builtins.str"builtins.str(
os.PathLike[Any]
Any"os.PathLike

io.BytesIO"
io.BytesIO*¶
extra_filesí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *ÿ
expected_opset_versionπ
4Union[builtins.dict[builtins.str,builtins.int],None]u
(builtins.dict[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.dict
None Í
aot_compiletorch._export.aot_compile"
builtins.str"builtins.str*R
fK
CallableType[builtins.function]&
builtins.function"builtins.function*!
args

Tuple[Any]
Any*°
kwargsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *©
dynamic_shapesí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *¢
optionsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *?
remove_runtime_assertions
builtins.bool"builtins.bool *?
disable_constraint_solver
builtins.bool"builtins.bool *4
same_signature
builtins.bool"builtins.bool ƒ
aot_loadtorch._export.aot_load"K
CallableType[builtins.function]&
builtins.function"builtins.function*)
so_path
builtins.str"builtins.str*(
device
builtins.str"builtins.str*n
__path__torch._export.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*â
__annotations__torch._export.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*%
sympytorch._export.sympy
Any*
pytreetorch.utils._pytree *$
fx_tracebacktorch.fx.traceback *:
logtorch._export.log 
logging.Logger"logging.Logger