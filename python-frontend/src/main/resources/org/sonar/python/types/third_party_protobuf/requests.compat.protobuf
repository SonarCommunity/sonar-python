
requests.compat≤i
bytesbuiltins.bytes"typing.ByteString*u

capitalizebuiltins.bytes.capitalize" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*»
centerbuiltins.bytes.center" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*'
__width
builtins.int"builtins.int*0

__fillchar 
builtins.bytes"builtins.bytes *
countbuiltins.bytes.count"
builtins.int"builtins.int**
self 
builtins.bytes"builtins.bytes*o
__subf
"Union[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *√
decodebuiltins.bytes.decode"
builtins.str"builtins.str**
self 
builtins.bytes"builtins.bytes*,
encoding
builtins.str"builtins.str **
errors
builtins.str"builtins.str *≈
endswithbuiltins.bytes.endswith"
builtins.bool"builtins.bool**
self 
builtins.bytes"builtins.bytes*ª
__suffixÆ
4Union[builtins.bytes,builtins.tuple[builtins.bytes]] 
builtins.bytes"builtins.bytesR
builtins.tuple[builtins.bytes] 
builtins.bytes"builtins.bytes"builtins.tuple*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *¢

expandtabsbuiltins.bytes.expandtabs" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*+
tabsize
builtins.int"builtins.int *Ó
findbuiltins.bytes.find"
builtins.int"builtins.int**
self 
builtins.bytes"builtins.bytes*o
__subf
"Union[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *â
hexbuiltins.bytes.hex"
builtins.str"builtins.str**
self 
builtins.bytes"builtins.bytes*q
sepf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes *1
bytes_per_sep
builtins.int"builtins.int *
indexbuiltins.bytes.index"
builtins.int"builtins.int**
self 
builtins.bytes"builtins.bytes*o
__subf
"Union[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *m
isalnumbuiltins.bytes.isalnum"
builtins.bool"builtins.bool**
self 
builtins.bytes"builtins.bytes*m
isalphabuiltins.bytes.isalpha"
builtins.bool"builtins.bool**
self 
builtins.bytes"builtins.bytes*m
isasciibuiltins.bytes.isascii"
builtins.bool"builtins.bool**
self 
builtins.bytes"builtins.bytes*m
isdigitbuiltins.bytes.isdigit"
builtins.bool"builtins.bool**
self 
builtins.bytes"builtins.bytes*m
islowerbuiltins.bytes.islower"
builtins.bool"builtins.bool**
self 
builtins.bytes"builtins.bytes*m
isspacebuiltins.bytes.isspace"
builtins.bool"builtins.bool**
self 
builtins.bytes"builtins.bytes*m
istitlebuiltins.bytes.istitle"
builtins.bool"builtins.bool**
self 
builtins.bytes"builtins.bytes*m
isupperbuiltins.bytes.isupper"
builtins.bool"builtins.bool**
self 
builtins.bytes"builtins.bytes*€
joinbuiltins.bytes.join" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*Ô
__iterable_of_bytes◊
=typing.Iterable[Union[typing.ByteString,builtins.memoryview]]Ñ
,Union[typing.ByteString,builtins.memoryview]&
typing.ByteString"typing.ByteString*
builtins.memoryview"builtins.memoryview"typing.Iterable*∆
ljustbuiltins.bytes.ljust" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*'
__width
builtins.int"builtins.int*0

__fillchar 
builtins.bytes"builtins.bytes *k
lowerbuiltins.bytes.lower" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*∆
lstripbuiltins.bytes.lstrip" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*W
__bytesJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None *ú
	partitionbuiltins.bytes.partition"ù
3Tuple[builtins.bytes,builtins.bytes,builtins.bytes] 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*)
__sep 
builtins.bytes"builtins.bytes*
replacebuiltins.bytes.replace" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*)
__old 
builtins.bytes"builtins.bytes*)
__new 
builtins.bytes"builtins.bytes*)
__count
builtins.int"builtins.int *
rfindbuiltins.bytes.rfind"
builtins.int"builtins.int**
self 
builtins.bytes"builtins.bytes*o
__subf
"Union[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *Ú
rindexbuiltins.bytes.rindex"
builtins.int"builtins.int**
self 
builtins.bytes"builtins.bytes*o
__subf
"Union[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *∆
rjustbuiltins.bytes.rjust" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*'
__width
builtins.int"builtins.int*0

__fillchar 
builtins.bytes"builtins.bytes *û

rpartitionbuiltins.bytes.rpartition"ù
3Tuple[builtins.bytes,builtins.bytes,builtins.bytes] 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*)
__sep 
builtins.bytes"builtins.bytes*¢
rsplitbuiltins.bytes.rsplit"P
builtins.list[builtins.bytes] 
builtins.bytes"builtins.bytes"builtins.list**
self 
builtins.bytes"builtins.bytes*U
sepJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None *,
maxsplit
builtins.int"builtins.int *∆
rstripbuiltins.bytes.rstrip" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*W
__bytesJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None *†
splitbuiltins.bytes.split"P
builtins.list[builtins.bytes] 
builtins.bytes"builtins.bytes"builtins.list**
self 
builtins.bytes"builtins.bytes*U
sepJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None *,
maxsplit
builtins.int"builtins.int *’

splitlinesbuiltins.bytes.splitlines"P
builtins.list[builtins.bytes] 
builtins.bytes"builtins.bytes"builtins.list**
self 
builtins.bytes"builtins.bytes*.
keepends
builtins.bool"builtins.bool *…

startswithbuiltins.bytes.startswith"
builtins.bool"builtins.bool**
self 
builtins.bytes"builtins.bytes*ª
__prefixÆ
4Union[builtins.bytes,builtins.tuple[builtins.bytes]] 
builtins.bytes"builtins.bytesR
builtins.tuple[builtins.bytes] 
builtins.bytes"builtins.bytes"builtins.tuple*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *ƒ
stripbuiltins.bytes.strip" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*W
__bytesJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None *q
swapcasebuiltins.bytes.swapcase" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*k
titlebuiltins.bytes.title" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*˙
	translatebuiltins.bytes.translate" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*U
__tableJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None*.
delete 
builtins.bytes"builtins.bytes *k
upperbuiltins.bytes.upper" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*î
zfillbuiltins.bytes.zfill" 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes*'
__width
builtins.int"builtins.int*æ
fromhexbuiltins.bytes.fromhex" 
builtins.bytes"builtins.bytes*C
cls:
Type[builtins.bytes] 
builtins.bytes"builtins.bytes*#
__s
builtins.str"builtins.str0:classmethodp*Æ
	maketransbuiltins.bytes.maketrans" 
builtins.bytes"builtins.bytes*)
__frm 
builtins.bytes"builtins.bytes*(
__to 
builtins.bytes"builtins.bytes0:staticmethodh*i
__len__builtins.bytes.__len__"
builtins.int"builtins.int*(
self 
builtins.bytes"builtins.bytes*ù
__iter__builtins.bytes.__iter__"N
typing.Iterator[builtins.int]
builtins.int"builtins.int"typing.Iterator*(
self 
builtins.bytes"builtins.bytes*i
__str__builtins.bytes.__str__"
builtins.str"builtins.str*(
self 
builtins.bytes"builtins.bytes*k
__repr__builtins.bytes.__repr__"
builtins.str"builtins.str*(
self 
builtins.bytes"builtins.bytes*m
__hash__builtins.bytes.__hash__"
builtins.int"builtins.int**
self 
builtins.bytes"builtins.bytes*î
__add__builtins.bytes.__add__" 
builtins.bytes"builtins.bytes*(
self 
builtins.bytes"builtins.bytes*%
s 
builtins.bytes"builtins.bytes*ê
__mul__builtins.bytes.__mul__" 
builtins.bytes"builtins.bytes*(
self 
builtins.bytes"builtins.bytes*!
n
builtins.int"builtins.int*í
__rmul__builtins.bytes.__rmul__" 
builtins.bytes"builtins.bytes*(
self 
builtins.bytes"builtins.bytes*!
n
builtins.int"builtins.int*
__mod__builtins.bytes.__mod__" 
builtins.bytes"builtins.bytes*(
self 
builtins.bytes"builtins.bytes*
value
Any*‚
__contains__builtins.bytes.__contains__"
builtins.bool"builtins.bool*(
self 
builtins.bytes"builtins.bytes*k
of
"Union[builtins.int,builtins.bytes]
builtins.int"builtins.int 
builtins.bytes"builtins.bytes*í
__eq__builtins.bytes.__eq__"
builtins.bool"builtins.bool*(
self 
builtins.bytes"builtins.bytes*'
x"
builtins.object"builtins.object*í
__ne__builtins.bytes.__ne__"
builtins.bool"builtins.bool*(
self 
builtins.bytes"builtins.bytes*'
x"
builtins.object"builtins.object*ê
__lt__builtins.bytes.__lt__"
builtins.bool"builtins.bool*(
self 
builtins.bytes"builtins.bytes*%
x 
builtins.bytes"builtins.bytes*ê
__le__builtins.bytes.__le__"
builtins.bool"builtins.bool*(
self 
builtins.bytes"builtins.bytes*%
x 
builtins.bytes"builtins.bytes*ê
__gt__builtins.bytes.__gt__"
builtins.bool"builtins.bool*(
self 
builtins.bytes"builtins.bytes*%
x 
builtins.bytes"builtins.bytes*ê
__ge__builtins.bytes.__ge__"
builtins.bool"builtins.bool*(
self 
builtins.bytes"builtins.bytes*%
x 
builtins.bytes"builtins.bytes*ò
__getnewargs__builtins.bytes.__getnewargs__";
Tuple[builtins.bytes] 
builtins.bytes"builtins.bytes**
self 
builtins.bytes"builtins.bytes2ü
__new__builtins.bytes.__new__À
__new__builtins.bytes.__new__"
builtins._T*/
cls&
Type[builtins._T]
builtins._T*X
intsN
typing.Iterable[builtins.int]
builtins.int"builtins.int"typing.Iterable0:overloadXÛ
__new__builtins.bytes.__new__"
builtins._T*/
cls&
Type[builtins._T]
builtins._T*(
string
builtins.str"builtins.str**
encoding
builtins.str"builtins.str**
errors
builtins.str"builtins.str 0:overloadXõ
__new__builtins.bytes.__new__"
builtins._T*/
cls&
Type[builtins._T]
builtins._T*(
length
builtins.int"builtins.int0:overloadXq
__new__builtins.bytes.__new__"
builtins._T*/
cls&
Type[builtins._T]
builtins._T0:overloadX¶
__new__builtins.bytes.__new__"
builtins._T*/
cls&
Type[builtins._T]
builtins._T*3
o,
typing.SupportsBytes"typing.SupportsBytes0:overloadX2˚
__getitem__builtins.bytes.__getitem__¢
__getitem__builtins.bytes.__getitem__"
builtins.int"builtins.int*(
self 
builtins.bytes"builtins.bytes*!
i
builtins.int"builtins.int0:overloadX™
__getitem__builtins.bytes.__getitem__" 
builtins.bytes"builtins.bytes*(
self 
builtins.bytes"builtins.bytes*%
s 
builtins.slice"builtins.slice0:overloadXÒi
strbuiltins.str"typing.Sequence*k

capitalizebuiltins.str.capitalize"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*g
casefoldbuiltins.str.casefold"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*∫
centerbuiltins.str.center"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*'
__width
builtins.int"builtins.int*,

__fillchar
builtins.str"builtins.str *û
countbuiltins.str.count"
builtins.int"builtins.int*&
self
builtins.str"builtins.str*#
x
builtins.str"builtins.str*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *¡
encodebuiltins.str.encode" 
builtins.bytes"builtins.bytes*&
self
builtins.str"builtins.str*,
encoding
builtins.str"builtins.str **
errors
builtins.str"builtins.str *±
endswithbuiltins.str.endswith"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*≠
__suffix†
0Union[builtins.str,builtins.tuple[builtins.str]]
builtins.str"builtins.strL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *ò

expandtabsbuiltins.str.expandtabs"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*+
tabsize
builtins.int"builtins.int *û
findbuiltins.str.find"
builtins.int"builtins.int*&
self
builtins.str"builtins.str*%
__sub
builtins.str"builtins.str*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *¡
formatbuiltins.str.format"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*,
args"
builtins.object"builtins.object*.
kwargs"
builtins.object"builtins.object*Æ

format_mapbuiltins.str.format_map"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*A
map8
builtins._FormatMapMapping"builtins._FormatMapMapping*†
indexbuiltins.str.index"
builtins.int"builtins.int*&
self
builtins.str"builtins.str*%
__sub
builtins.str"builtins.str*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *g
isalnumbuiltins.str.isalnum"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
isalphabuiltins.str.isalpha"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
isasciibuiltins.str.isascii"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*k
	isdecimalbuiltins.str.isdecimal"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
isdigitbuiltins.str.isdigit"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*q
isidentifierbuiltins.str.isidentifier"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
islowerbuiltins.str.islower"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*k
	isnumericbuiltins.str.isnumeric"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*o
isprintablebuiltins.str.isprintable"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
isspacebuiltins.str.isspace"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
istitlebuiltins.str.istitle"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
isupperbuiltins.str.isupper"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*Ω
joinbuiltins.str.join"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*\

__iterableN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*∏
ljustbuiltins.str.ljust"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*'
__width
builtins.int"builtins.int*,

__fillchar
builtins.str"builtins.str *a
lowerbuiltins.str.lower"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*∂
lstripbuiltins.str.lstrip"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*Q
__charsD
Union[builtins.str,None]
builtins.str"builtins.str
None *Ä
	partitionbuiltins.str.partition"ã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*&
self
builtins.str"builtins.str*%
__sep
builtins.str"builtins.str*ﬁ
replacebuiltins.str.replace"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*%
__old
builtins.str"builtins.str*%
__new
builtins.str"builtins.str*)
__count
builtins.int"builtins.int *†
rfindbuiltins.str.rfind"
builtins.int"builtins.int*&
self
builtins.str"builtins.str*%
__sub
builtins.str"builtins.str*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *¢
rindexbuiltins.str.rindex"
builtins.int"builtins.int*&
self
builtins.str"builtins.str*%
__sub
builtins.str"builtins.str*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *∏
rjustbuiltins.str.rjust"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*'
__width
builtins.int"builtins.int*,

__fillchar
builtins.str"builtins.str *Ç

rpartitionbuiltins.str.rpartition"ã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*&
self
builtins.str"builtins.str*%
__sep
builtins.str"builtins.str*ê
rsplitbuiltins.str.rsplit"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*&
self
builtins.str"builtins.str*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *,
maxsplit
builtins.int"builtins.int *∂
rstripbuiltins.str.rstrip"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*Q
__charsD
Union[builtins.str,None]
builtins.str"builtins.str
None *é
splitbuiltins.str.split"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*&
self
builtins.str"builtins.str*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *,
maxsplit
builtins.int"builtins.int *…

splitlinesbuiltins.str.splitlines"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*&
self
builtins.str"builtins.str*.
keepends
builtins.bool"builtins.bool *µ

startswithbuiltins.str.startswith"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*≠
__prefix†
0Union[builtins.str,builtins.tuple[builtins.str]]
builtins.str"builtins.strL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*ä
__start}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *à
__end}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *¥
stripbuiltins.str.strip"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*Q
__charsD
Union[builtins.str,None]
builtins.str"builtins.str
None *g
swapcasebuiltins.str.swapcase"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*a
titlebuiltins.str.title"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*†
	translatebuiltins.str.translate"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*¥
__table®
ÄUnion[typing.Mapping[builtins.int,Union[builtins.int,builtins.str,None]],typing.Sequence[Union[builtins.int,builtins.str,None]]]„
Btyping.Mapping[builtins.int,Union[builtins.int,builtins.str,None]]
builtins.int"builtins.into
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None"typing.Mapping∫
6typing.Sequence[Union[builtins.int,builtins.str,None]]o
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None"typing.Sequence*a
upperbuiltins.str.upper"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*ä
zfillbuiltins.str.zfill"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*'
__width
builtins.int"builtins.int*Ü
__add__builtins.str.__add__"
builtins.str"builtins.str*$
self
builtins.str"builtins.str*!
s
builtins.str"builtins.str*í
__contains__builtins.str.__contains__"
builtins.bool"builtins.bool*$
self
builtins.str"builtins.str*!
o
builtins.str"builtins.str*å
__eq__builtins.str.__eq__"
builtins.bool"builtins.bool*$
self
builtins.str"builtins.str*'
x"
builtins.object"builtins.object*Ü
__ge__builtins.str.__ge__"
builtins.bool"builtins.bool*$
self
builtins.str"builtins.str*!
x
builtins.str"builtins.str*ÿ
__getitem__builtins.str.__getitem__"
builtins.str"builtins.str*$
self
builtins.str"builtins.str*k
if
"Union[builtins.int,builtins.slice]
builtins.int"builtins.int 
builtins.slice"builtins.slice*Ü
__gt__builtins.str.__gt__"
builtins.bool"builtins.bool*$
self
builtins.str"builtins.str*!
x
builtins.str"builtins.str*g
__hash__builtins.str.__hash__"
builtins.int"builtins.int*&
self
builtins.str"builtins.str*ó
__iter__builtins.str.__iter__"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*$
self
builtins.str"builtins.str*Ü
__le__builtins.str.__le__"
builtins.bool"builtins.bool*$
self
builtins.str"builtins.str*!
x
builtins.str"builtins.str*c
__len__builtins.str.__len__"
builtins.int"builtins.int*$
self
builtins.str"builtins.str*Ü
__lt__builtins.str.__lt__"
builtins.bool"builtins.bool*$
self
builtins.str"builtins.str*!
x
builtins.str"builtins.str*q
__mod__builtins.str.__mod__"
builtins.str"builtins.str*$
self
builtins.str"builtins.str*
x
Any*Ü
__mul__builtins.str.__mul__"
builtins.str"builtins.str*$
self
builtins.str"builtins.str*!
n
builtins.int"builtins.int*å
__ne__builtins.str.__ne__"
builtins.bool"builtins.bool*$
self
builtins.str"builtins.str*'
x"
builtins.object"builtins.object*e
__repr__builtins.str.__repr__"
builtins.str"builtins.str*$
self
builtins.str"builtins.str*à
__rmul__builtins.str.__rmul__"
builtins.str"builtins.str*$
self
builtins.str"builtins.str*!
n
builtins.int"builtins.int*c
__str__builtins.str.__str__"
builtins.str"builtins.str*$
self
builtins.str"builtins.str*å
__getnewargs__builtins.str.__getnewargs__"5
Tuple[builtins.str]
builtins.str"builtins.str*&
self
builtins.str"builtins.str2≥
__new__builtins.str.__new__ú
__new__builtins.str.__new__"
builtins._T*/
cls&
Type[builtins._T]
builtins._T*+
o"
builtins.object"builtins.object 0:overloadXÚ
__new__builtins.str.__new__"
builtins._T*/
cls&
Type[builtins._T]
builtins._T*'
o 
builtins.bytes"builtins.bytes*,
encoding
builtins.str"builtins.str **
errors
builtins.str"builtins.str 0:overloadX2è	
	maketransbuiltins.str.maketrans‡
	maketransbuiltins.str.maketrans"g
'builtins.dict[builtins.int,builtins._T]
builtins.int"builtins.int
builtins._T"builtins.dict*≥
__x´
íUnion[builtins.dict[builtins.int,builtins._T],builtins.dict[builtins.str,builtins._T],builtins.dict[Union[builtins.str,builtins.int],builtins._T]]g
'builtins.dict[builtins.int,builtins._T]
builtins.int"builtins.int
builtins._T"builtins.dictg
'builtins.dict[builtins.str,builtins._T]
builtins.str"builtins.str
builtins._T"builtins.dictø
;builtins.dict[Union[builtins.str,builtins.int],builtins._T]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
builtins._T"builtins.dict0:staticmethod:overloadXhÜ
	maketransbuiltins.str.maketrans"©
4builtins.dict[builtins.int,Union[builtins.int,None]]
builtins.int"builtins.intD
Union[builtins.int,None]
builtins.int"builtins.int
None"builtins.dict*#
__x
builtins.str"builtins.str*#
__y
builtins.str"builtins.str*M
__zD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:staticmethod:overloadXhÄ
OrderedDictcollections.OrderedDict"builtins.dict"typing.Reversible*∂
popitemcollections.OrderedDict.popitem"T
&Tuple[collections._KT,collections._VT]
collections._KT
collections._VT*á
self}
8collections.OrderedDict[collections._KT,collections._VT]
collections._KT
collections._VT"collections.OrderedDict**
last
builtins.bool"builtins.bool *ê
move_to_end#collections.OrderedDict.move_to_end"
None*á
self}
8collections.OrderedDict[collections._KT,collections._VT]
collections._KT
collections._VT"collections.OrderedDict*
key
collections._KT**
last
builtins.bool"builtins.bool *V
copycollections.OrderedDict.copy"
collections._S*
self
collections._S*Ü
__reversed__$collections.OrderedDict.__reversed__"H
 typing.Iterator[collections._KT]
collections._KT"typing.Iterator*Ö
self}
8collections.OrderedDict[collections._KT,collections._VT]
collections._KT
collections._VT"collections.OrderedDict*ö
keyscollections.OrderedDict.keys"j
1collections._OrderedDictKeysView[collections._KT]
collections._KT" collections._OrderedDictKeysView*á
self}
8collections.OrderedDict[collections._KT,collections._VT]
collections._KT
collections._VT"collections.OrderedDict*ƒ
itemscollections.OrderedDict.items"ë
Bcollections._OrderedDictItemsView[collections._KT,collections._VT]
collections._KT
collections._VT"!collections._OrderedDictItemsView*á
self}
8collections.OrderedDict[collections._KT,collections._VT]
collections._KT
collections._VT"collections.OrderedDict*¢
valuescollections.OrderedDict.values"n
3collections._OrderedDictValuesView[collections._VT]
collections._VT""collections._OrderedDictValuesView*á
self}
8collections.OrderedDict[collections._KT,collections._VT]
collections._KT
collections._VT"collections.OrderedDictP¡
unquoteurllib.parse.unquote"
builtins.str"builtins.str*(
string
builtins.str"builtins.str*,
encoding
builtins.str"builtins.str **
errors
builtins.str"builtins.str À
unquote_plusurllib.parse.unquote_plus"
builtins.str"builtins.str*(
string
builtins.str"builtins.str*,
encoding
builtins.str"builtins.str **
errors
builtins.str"builtins.str •
	urlencodeurllib.parse.urlencode"
builtins.str"builtins.str*›
query—
òUnion[typing.Mapping[Any,Any],typing.Mapping[Any,typing.Sequence[Any]],typing.Sequence[Tuple[Any,Any]],typing.Sequence[Tuple[Any,typing.Sequence[Any]]]];
typing.Mapping[Any,Any]
Any
Any"typing.Mappingu
(typing.Mapping[Any,typing.Sequence[Any]]
Any0
typing.Sequence[Any]
Any"typing.Sequence"typing.MappingX
typing.Sequence[Tuple[Any,Any]]$
Tuple[Any,Any]
Any
Any"typing.Sequence£
0typing.Sequence[Tuple[Any,typing.Sequence[Any]]]^
Tuple[Any,typing.Sequence[Any]]
Any0
typing.Sequence[Any]
Any"typing.Sequence"typing.Sequence*+
doseq
builtins.bool"builtins.bool *
safe
typing.AnyStr *,
encoding
builtins.str"builtins.str **
errors
builtins.str"builtins.str *\
	quote_viaK
CallableType[builtins.function]&
builtins.function"builtins.function À
urljoinurllib.parse.urljoin"
typing.AnyStr*
base
typing.AnyStr*C
url:
Union[typing.AnyStr,None]
typing.AnyStr
None*5
allow_fragments
builtins.bool"builtins.bool û

getproxiesurllib.request.getproxies"u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict¢
parse_http_listurllib.request.parse_http_list"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*#
s
builtins.str"builtins.str´
proxy_bypassurllib.request.proxy_bypass"
Any*&
host
builtins.str"builtins.str*Ã
proxiesº
5Union[typing.Mapping[builtins.str,builtins.str],None]w
)typing.Mapping[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.Mapping
None "©
quoteurllib.parse.quote◊
quoteurllib.parse.quote"
builtins.str"builtins.str*(
string
builtins.str"builtins.str*π
safe¨
-TypeAlias[Union[builtins.bytes,builtins.str]]f
"Union[builtins.bytes,builtins.str] 
builtins.bytes"builtins.bytes
builtins.str"builtins.str"urllib.parse._Str *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX±
quoteurllib.parse.quote"
builtins.str"builtins.str*,
string 
builtins.bytes"builtins.bytes*π
safe¨
-TypeAlias[Union[builtins.bytes,builtins.str]]f
"Union[builtins.bytes,builtins.str] 
builtins.bytes"builtins.bytes
builtins.str"builtins.str"urllib.parse._Str 0:overloadX"«

quote_plusurllib.parse.quote_plus·

quote_plusurllib.parse.quote_plus"
builtins.str"builtins.str*(
string
builtins.str"builtins.str*π
safe¨
-TypeAlias[Union[builtins.bytes,builtins.str]]f
"Union[builtins.bytes,builtins.str] 
builtins.bytes"builtins.bytes
builtins.str"builtins.str"urllib.parse._Str *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadXª

quote_plusurllib.parse.quote_plus"
builtins.str"builtins.str*,
string 
builtins.bytes"builtins.bytes*π
safe¨
-TypeAlias[Union[builtins.bytes,builtins.str]]f
"Union[builtins.bytes,builtins.str] 
builtins.bytes"builtins.bytes
builtins.str"builtins.str"urllib.parse._Str 0:overloadX"Å
	urldefragurllib.parse.urldefragê
	urldefragurllib.parse.urldefrag"6
urllib.parse.DefragResult"urllib.parse.DefragResult*%
url
builtins.str"builtins.str0:overloadX»
	urldefragurllib.parse.urldefrag"@
urllib.parse.DefragResultBytes"urllib.parse.DefragResultBytes*S
urlJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None0:overloadX"ﬂ
urlparseurllib.parse.urlparse
urlparseurllib.parse.urlparse"å
TTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*%
url
builtins.str"builtins.str*R
schemeD
Union[builtins.str,None]
builtins.str"builtins.str
None *5
allow_fragments
builtins.bool"builtins.bool 0:overloadX»
urlparseurllib.parse.urlparse"∞
`Tuple[builtins.bytes,builtins.bytes,builtins.bytes,builtins.bytes,builtins.bytes,builtins.bytes] 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes*S
urlJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None*X
schemeJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None *5
allow_fragments
builtins.bool"builtins.bool 0:overloadX"É
urlspliturllib.parse.urlsplit≈
urlspliturllib.parse.urlsplit"·
GTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*%
url
builtins.str"builtins.str*R
schemeD
Union[builtins.str,None]
builtins.str"builtins.str
None *5
allow_fragments
builtins.bool"builtins.bool 0:overloadXó
urlspliturllib.parse.urlsplit"ˇ
QTuple[builtins.bytes,builtins.bytes,builtins.bytes,builtins.bytes,builtins.bytes] 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes*S
urlJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None*X
schemeJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None *5
allow_fragments
builtins.bool"builtins.bool 0:overloadX"Ê

urlunparseurllib.parse.urlunparseÈ

urlunparseurllib.parse.urlunparse"
typing.AnyStr*†

componentsè
¢Tuple[Union[typing.AnyStr,None],Union[typing.AnyStr,None],Union[typing.AnyStr,None],Union[typing.AnyStr,None],Union[typing.AnyStr,None],Union[typing.AnyStr,None]]:
Union[typing.AnyStr,None]
typing.AnyStr
None:
Union[typing.AnyStr,None]
typing.AnyStr
None:
Union[typing.AnyStr,None]
typing.AnyStr
None:
Union[typing.AnyStr,None]
typing.AnyStr
None:
Union[typing.AnyStr,None]
typing.AnyStr
None:
Union[typing.AnyStr,None]
typing.AnyStr
None0:overloadX“

urlunparseurllib.parse.urlunparse"
typing.AnyStr*â

componentsy
*typing.Sequence[Union[typing.AnyStr,None]]:
Union[typing.AnyStr,None]
typing.AnyStr
None"typing.Sequence0:overloadX*\
is_py2requests.compat.is_py2:
Literal[builtins.bool]	
builtins.bool"builtins.bool*\
is_py3requests.compat.is_py3:
Literal[builtins.bool]	
builtins.bool"builtins.bool*P
has_simplejsonrequests.compat.has_simplejson
builtins.bool"builtins.bool*F
builtin_strrequests.compat.builtin_str
UnboundType[TypeAlias]*y

basestringrequests.compat.basestringO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*
numeric_typesrequests.compat.numeric_typesO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*
integer_typesrequests.compat.integer_typesO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple