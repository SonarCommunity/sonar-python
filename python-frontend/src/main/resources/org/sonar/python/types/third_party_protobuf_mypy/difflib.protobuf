
difflibÄ
Matchdifflib.Match"builtins.tuple*Ó
_replacedifflib.Match._replace"
difflib.Match._NT* 
_self
difflib.Match._NT*%
a
builtins.int"builtins.int *%
b
builtins.int"builtins.int *(
size
builtins.int"builtins.int *ç
__new__difflib.Match.__new__"
difflib.Match._NT*<
_cls2
Type[difflib.Match._NT]
difflib.Match._NT*#
a
builtins.int"builtins.int*#
b
builtins.int"builtins.int*&
size
builtins.int"builtins.int*›
_asdictdifflib.Match._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict* 
_self
difflib.Match._NT*ê
_makedifflib.Match._make"
difflib.Match._NT*<
_cls2
Type[difflib.Match._NT]
difflib.Match._NT*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpr2
adifflib.Match.a
builtins.int"builtins.intr2
bdifflib.Match.b
builtins.int"builtins.intr8
sizedifflib.Match.size
builtins.int"builtins.intr2
adifflib.Match.a
builtins.int"builtins.intr2
bdifflib.Match.b
builtins.int"builtins.intr8
sizedifflib.Match.size
builtins.int"builtins.intr®
_fieldsdifflib.Match._fields‹
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrƒ
_field_typesdifflib.Match._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr‰
_field_defaultsdifflib.Match._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr>
_sourcedifflib.Match._source
builtins.str"builtins.strr‰
__annotations__difflib.Match.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÂ
SequenceMatcherdifflib.SequenceMatcher"builtins.object*ê
__init__ difflib.SequenceMatcher.__init__"
None*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*•
isjunk†
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *G
a>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence *G
b>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence *.
autojunk
builtins.bool"builtins.bool *ž
set_seqs difflib.SequenceMatcher.set_seqs"
None*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*E
a>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence*E
b>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence*×
set_seq1 difflib.SequenceMatcher.set_seq1"
None*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*E
a>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence*×
set_seq2 difflib.SequenceMatcher.set_seq2"
None*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*E
b>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence*Ä
find_longest_match*difflib.SequenceMatcher.find_longest_match"‹
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*%
alo
builtins.int"builtins.int*%
ahi
builtins.int"builtins.int*%
blo
builtins.int"builtins.int*%
bhi
builtins.int"builtins.int*ú
get_matching_blocks+difflib.SequenceMatcher.get_matching_blocks"Û
<builtins.list[Tuple[builtins.int,builtins.int,builtins.int]]‹
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*Ú
get_opcodes#difflib.SequenceMatcher.get_opcodes"Ë
Vbuiltins.list[Tuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]]á
GTuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*Ž
get_grouped_opcodes+difflib.SequenceMatcher.get_grouped_opcodes"È
gtyping.Iterable[builtins.list[Tuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]]]Ë
Vbuiltins.list[Tuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]]á
GTuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list"typing.Iterable*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*%
n
builtins.int"builtins.int *¢
ratiodifflib.SequenceMatcher.ratio" 
builtins.float"builtins.float*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*®
quick_ratio#difflib.SequenceMatcher.quick_ratio" 
builtins.float"builtins.float*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*¸
real_quick_ratio(difflib.SequenceMatcher.real_quick_ratio" 
builtins.float"builtins.float*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcherPá
Differdifflib.Differ"builtins.object*ç
__init__difflib.Differ.__init__"
None**
self 
difflib.Differ"difflib.Differ*„
linejunkó
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None *„
charjunkó
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None *Ë
comparedifflib.Differ.compare"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator**
self 
difflib.Differ"difflib.Differ*U
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*U
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence§
HtmlDiffdifflib.HtmlDiff"builtins.object*ò
__init__difflib.HtmlDiff.__init__"
None*.
self$
difflib.HtmlDiff"difflib.HtmlDiff*+
tabsize
builtins.int"builtins.int *V

wrapcolumnD
Union[builtins.int,None]
builtins.int"builtins.int
None *„
linejunkó
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None *„
charjunkó
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None *•
	make_filedifflib.HtmlDiff.make_file"
builtins.str"builtins.str*.
self$
difflib.HtmlDiff"difflib.HtmlDiff*]
	fromlinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*[
tolinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*,
fromdesc
builtins.str"builtins.str **
todesc
builtins.str"builtins.str *-
context
builtins.bool"builtins.bool *,
numlines
builtins.int"builtins.int *+
charset
builtins.str"builtins.str *ê

make_tabledifflib.HtmlDiff.make_table"
builtins.str"builtins.str*.
self$
difflib.HtmlDiff"difflib.HtmlDiff*]
	fromlinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*[
tolinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*,
fromdesc
builtins.str"builtins.str **
todesc
builtins.str"builtins.str *-
context
builtins.bool"builtins.bool *,
numlines
builtins.int"builtins.int €
IS_LINE_JUNKdifflib.IS_LINE_JUNK"
builtins.bool"builtins.bool*&
line
builtins.str"builtins.str*
pat
Any œ
IS_CHARACTER_JUNKdifflib.IS_CHARACTER_JUNK"
builtins.bool"builtins.bool*$
ch
builtins.str"builtins.str*&
ws
builtins.str"builtins.str ³
unified_diffdifflib.unified_diff"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*U
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*U
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*,
fromfile
builtins.str"builtins.str **
tofile
builtins.str"builtins.str *0
fromfiledate
builtins.str"builtins.str *.

tofiledate
builtins.str"builtins.str *%
n
builtins.int"builtins.int *,
lineterm
builtins.str"builtins.str ³
context_diffdifflib.context_diff"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*U
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*U
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*,
fromfile
builtins.str"builtins.str **
tofile
builtins.str"builtins.str *0
fromfiledate
builtins.str"builtins.str *.

tofiledate
builtins.str"builtins.str *%
n
builtins.int"builtins.int *,
lineterm
builtins.str"builtins.str ¢
ndiffdifflib.ndiff"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*U
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*U
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*„
linejunkó
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None *„
charjunkó
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None î
restoredifflib.restore"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*Y
deltaN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*'
which
builtins.int"builtins.int­

diff_bytesdifflib.diff_bytes"T
typing.Iterator[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Iterator*V
dfuncK
CallableType[builtins.function]&
builtins.function"builtins.function*[
aT
typing.Sequence[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Sequence*[
bT
typing.Sequence[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Sequence*0
fromfile 
builtins.bytes"builtins.bytes *.
tofile 
builtins.bytes"builtins.bytes *4
fromfiledate 
builtins.bytes"builtins.bytes *2

tofiledate 
builtins.bytes"builtins.bytes *%
n
builtins.int"builtins.int *0
lineterm 
builtins.bytes"builtins.bytes "î
get_close_matchesdifflib.get_close_matchesË
get_close_matchesdifflib.get_close_matches"@
builtins.list[typing.AnyStr]
typing.AnyStr"builtins.list*
word
typing.AnyStr*W
possibilitiesD
typing.Iterable[typing.AnyStr]
typing.AnyStr"typing.Iterable*%
n
builtins.int"builtins.int *.
cutoff 
builtins.float"builtins.float 0:overloadXï
get_close_matchesdifflib.get_close_matches"{
*builtins.list[typing.Sequence[difflib._T]]>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence"builtins.list*H
word>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence*’
possibilities
,typing.Iterable[typing.Sequence[difflib._T]]>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence"typing.Iterable*%
n
builtins.int"builtins.int *.
cutoff 
builtins.float"builtins.float 0:overloadX