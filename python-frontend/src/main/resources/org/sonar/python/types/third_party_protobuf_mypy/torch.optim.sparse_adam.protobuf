
torch.optim.sparse_adam¿

SparseAdam"torch.optim.sparse_adam.SparseAdam"torch.optim.optimizer.Optimizer*Ÿ
__init__+torch.optim.sparse_adam.SparseAdam.__init__"
None*R
selfH
"torch.optim.sparse_adam.SparseAdam""torch.optim.sparse_adam.SparseAdam*ƒ
paramsö
hTypeAlias[Union[typing.Iterable[torch._tensor.Tensor],typing.Iterable[builtins.dict[builtins.str,Any]]]]è
]Union[typing.Iterable[torch._tensor.Tensor],typing.Iterable[builtins.dict[builtins.str,Any]]]f
%typing.Iterable[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Iterableœ
0typing.Iterable[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"typing.Iterable"torch.optim.optimizer.ParamsT**
lr 
builtins.float"builtins.float *y
betasl
$Tuple[builtins.float,builtins.float] 
builtins.float"builtins.float 
builtins.float"builtins.float *+
eps 
builtins.float"builtins.float *.
maximize
builtins.bool"builtins.bool *J
step'torch.optim.sparse_adam.SparseAdam.step*
self*
closure 0*“
__annotations__'torch.optim.sparse_adam.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
Ftorch.optim._functional *v
__all__torch.optim.sparse_adam.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list