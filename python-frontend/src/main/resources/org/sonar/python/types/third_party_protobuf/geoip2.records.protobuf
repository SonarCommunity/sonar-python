
geoip2.recordsí
Mappingtyping.Mapping"typing.Collection*Â
__getitem__typing.Mapping.__getitem__"
typing._VT_co*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
k

typing._KT0:abstractmethod@z35z36z37z38z39z310*≥
itemstyping.Mapping.items"ë
3typing.AbstractSet[Tuple[typing._KT,typing._VT_co]]F
Tuple[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.AbstractSet*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz35z36z37z38z39z310*„
keystyping.Mapping.keys"D
typing.AbstractSet[typing._KT]

typing._KT"typing.AbstractSet*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz35z36z37z38z39z310*Î
valuestyping.Mapping.values"H
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesView*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz35z36z37z38z39z310*Ù
__contains__typing.Mapping.__contains__"
builtins.bool"builtins.bool*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*'
o"
builtins.object"builtins.objectz35z36z37z38z39z3102ﬂ
gettyping.Mapping.getÂ
gettyping.Mapping.get":
Union[typing._VT_co,None]
typing._VT_co
None*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
key

typing._KT0:overloadX¬
gettyping.Mapping.get"D
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
key

typing._KT*Q
defaultD
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T0:overloadX"35"36"37"38"39"310Pj35j36j37j38j39j310¬
Sequencetyping.Sequence"typing.Collection"typing.Reversible*å
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*)
start
builtins.int"builtins.int *(
stop
builtins.int"builtins.int z35z36z37z38z39z310*∑
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Anyz35z36z37z38z39z310*⁄
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz35z36z37z38z39z310*Õ
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z310*’
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z3102ï
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"35"36"37"38"39"310Pj35j36j37j38j39j310ê
SimpleEqualitygeoip2.mixins.SimpleEquality"builtins.object*Ÿ
__eq__#geoip2.mixins.SimpleEquality.__eq__"
builtins.bool"builtins.bool*D
self<
geoip2.mixins.SimpleEquality"geoip2.mixins.SimpleEquality*+
other"
builtins.object"builtins.objectz35z36z37z38z39z310*Ÿ
__ne__#geoip2.mixins.SimpleEquality.__ne__"
builtins.bool"builtins.bool*D
self<
geoip2.mixins.SimpleEquality"geoip2.mixins.SimpleEquality*+
other"
builtins.object"builtins.objectz35z36z37z38z39z310j35j36j37j38j39j310ª
Recordgeoip2.records.Record"geoip2.mixins.SimpleEquality*ú
__init__geoip2.records.Record.__init__"
None*8
self.
geoip2.records.Record"geoip2.records.Record*
kwargs
Anyz35z36z37z38z39z310*√
__setattr__!geoip2.records.Record.__setattr__"
None*6
self.
geoip2.records.Record"geoip2.records.Record*$
name
builtins.str"builtins.str*
value
Anyz35z36z37z38z39z310j35j36j37j38j39j310®
PlaceRecordgeoip2.records.PlaceRecord"geoip2.records.Record*ô
__init__#geoip2.records.PlaceRecord.__init__"
None*B
self8
geoip2.records.PlaceRecord"geoip2.records.PlaceRecord*Î
locales€
4TypeAlias[Union[typing.Sequence[builtins.str],None]]á
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None"geoip2.records._Locales *
kwargs
Anyz35z36z37z38z39z310*∞
namegeoip2.records.PlaceRecord.name"
builtins.str"builtins.str*B
self8
geoip2.records.PlaceRecord"geoip2.records.PlaceRecord0:property`z35z36z37z38z39z310j35j36j37j38j39j310£
Citygeoip2.records.City"geoip2.records.PlaceRecordj35j36j37j38j39j310rc

confidencegeoip2.records.City.confidence
builtins.int"builtins.int*35*36*37*38*39*310rc

geoname_idgeoip2.records.City.geoname_id
builtins.int"builtins.int*35*36*37*38*39*310rÜ
namesgeoip2.records.City.names»
4TypeAlias[typing.Mapping[builtins.str,builtins.str]]w
)typing.Mapping[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.Mapping"geoip2.records._Names*35*36*37*38*39*310∞
	Continentgeoip2.records.Continent"geoip2.records.PlaceRecordj35j36j37j38j39j310r\
codegeoip2.records.Continent.code
builtins.str"builtins.str*35*36*37*38*39*310rh

geoname_id#geoip2.records.Continent.geoname_id
builtins.int"builtins.int*35*36*37*38*39*310rã
namesgeoip2.records.Continent.names»
4TypeAlias[typing.Mapping[builtins.str,builtins.str]]w
)typing.Mapping[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.Mapping"geoip2.records._Names*35*36*37*38*39*310§	
Countrygeoip2.records.Country"geoip2.records.PlaceRecord*ç
__init__geoip2.records.Country.__init__"
None*:
self0
geoip2.records.Country"geoip2.records.Country*Î
locales€
4TypeAlias[Union[typing.Sequence[builtins.str],None]]á
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None"geoip2.records._Locales *
kwargs
Anyz35z36z37z38z39z310j35j36j37j38j39j310rf

confidence!geoip2.records.Country.confidence
builtins.int"builtins.int*35*36*37*38*39*310rf

geoname_id!geoip2.records.Country.geoname_id
builtins.int"builtins.int*35*36*37*38*39*310r|
is_in_european_union+geoip2.records.Country.is_in_european_union
builtins.bool"builtins.bool*35*36*37*38*39*310rb
iso_codegeoip2.records.Country.iso_code
builtins.str"builtins.str*35*36*37*38*39*310râ
namesgeoip2.records.Country.names»
4TypeAlias[typing.Mapping[builtins.str,builtins.str]]w
)typing.Mapping[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.Mapping"geoip2.records._Names*35*36*37*38*39*310œ
RepresentedCountry!geoip2.records.RepresentedCountry"geoip2.records.Countryj35j36j37j38j39j310re
type&geoip2.records.RepresentedCountry.type
builtins.str"builtins.str*35*36*37*38*39*310‘
Locationgeoip2.records.Location"geoip2.records.Recordj35j36j37j38j39j310ro
average_income&geoip2.records.Location.average_income
builtins.int"builtins.int*35*36*37*38*39*310rq
accuracy_radius'geoip2.records.Location.accuracy_radius
builtins.int"builtins.int*35*36*37*38*39*310rg
latitude geoip2.records.Location.latitude 
builtins.float"builtins.float*35*36*37*38*39*310ri
	longitude!geoip2.records.Location.longitude 
builtins.float"builtins.float*35*36*37*38*39*310rg

metro_code"geoip2.records.Location.metro_code
builtins.int"builtins.int*35*36*37*38*39*310rw
population_density*geoip2.records.Location.population_density
builtins.int"builtins.int*35*36*37*38*39*310re
	time_zone!geoip2.records.Location.time_zone
builtins.str"builtins.str*35*36*37*38*39*310«
MaxMindgeoip2.records.MaxMind"geoip2.records.Recordj35j36j37j38j39j310rt
queries_remaining(geoip2.records.MaxMind.queries_remaining
builtins.int"builtins.int*35*36*37*38*39*310ë
Postalgeoip2.records.Postal"geoip2.records.Recordj35j36j37j38j39j310rY
codegeoip2.records.Postal.code
builtins.str"builtins.str*35*36*37*38*39*310re

confidence geoip2.records.Postal.confidence
builtins.int"builtins.int*35*36*37*38*39*310Æ
Subdivisiongeoip2.records.Subdivision"geoip2.records.PlaceRecordj35j36j37j38j39j310rj

confidence%geoip2.records.Subdivision.confidence
builtins.int"builtins.int*35*36*37*38*39*310rj

geoname_id%geoip2.records.Subdivision.geoname_id
builtins.int"builtins.int*35*36*37*38*39*310rf
iso_code#geoip2.records.Subdivision.iso_code
builtins.str"builtins.str*35*36*37*38*39*310rç
names geoip2.records.Subdivision.names»
4TypeAlias[typing.Mapping[builtins.str,builtins.str]]w
)typing.Mapping[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.Mapping"geoip2.records._Names*35*36*37*38*39*310“
Subdivisionsgeoip2.records.Subdivisions"builtins.tuple*˘
__new__#geoip2.records.Subdivisions.__new__"_
!Tuple[geoip2.records.Subdivision]8
geoip2.records.Subdivision"geoip2.records.Subdivision*ñ
clså
'Type[Tuple[geoip2.records.Subdivision]]_
!Tuple[geoip2.records.Subdivision]8
geoip2.records.Subdivision"geoip2.records.Subdivision*È
locales€
4TypeAlias[Union[typing.Sequence[builtins.str],None]]á
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None"geoip2.records._Locales*J
subdivisions8
geoip2.records.Subdivision"geoip2.records.Subdivisionz35z36z37z38z39z310*ˆ
__init__$geoip2.records.Subdivisions.__init__"
None*i
self_
!Tuple[geoip2.records.Subdivision]8
geoip2.records.Subdivision"geoip2.records.Subdivision*È
locales€
4TypeAlias[Union[typing.Sequence[builtins.str],None]]á
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None"geoip2.records._Locales*J
subdivisions8
geoip2.records.Subdivision"geoip2.records.Subdivisionz35z36z37z38z39z310*Ü
most_specific)geoip2.records.Subdivisions.most_specific"8
geoip2.records.Subdivision"geoip2.records.Subdivision*i
self_
!Tuple[geoip2.records.Subdivision]8
geoip2.records.Subdivision"geoip2.records.Subdivision0:property`z35z36z37z38z39z310j35j36j37j38j39j310ö
Traitsgeoip2.records.Traits"geoip2.records.Record*ú
__init__geoip2.records.Traits.__init__"
None*8
self.
geoip2.records.Traits"geoip2.records.Traits*
kwargs
Anyz35z36z37z38z39z310j35j36j37j38j39j310rÅ
autonomous_system_number.geoip2.records.Traits.autonomous_system_number
builtins.int"builtins.int*35*36*37*38*39*310rç
autonomous_system_organization4geoip2.records.Traits.autonomous_system_organization
builtins.str"builtins.str*35*36*37*38*39*310ro
connection_type%geoip2.records.Traits.connection_type
builtins.str"builtins.str*35*36*37*38*39*310r]
domaingeoip2.records.Traits.domain
builtins.str"builtins.str*35*36*37*38*39*310re

ip_address geoip2.records.Traits.ip_address
builtins.str"builtins.str*35*36*37*38*39*310rk
is_anonymous"geoip2.records.Traits.is_anonymous
builtins.bool"builtins.bool*35*36*37*38*39*310rw
is_anonymous_proxy(geoip2.records.Traits.is_anonymous_proxy
builtins.bool"builtins.bool*35*36*37*38*39*310rs
is_anonymous_vpn&geoip2.records.Traits.is_anonymous_vpn
builtins.bool"builtins.bool*35*36*37*38*39*310ry
is_hosting_provider)geoip2.records.Traits.is_hosting_provider
builtins.bool"builtins.bool*35*36*37*38*39*310ry
is_legitimate_proxy)geoip2.records.Traits.is_legitimate_proxy
builtins.bool"builtins.bool*35*36*37*38*39*310rq
is_public_proxy%geoip2.records.Traits.is_public_proxy
builtins.bool"builtins.bool*35*36*37*38*39*310r}
is_satellite_provider+geoip2.records.Traits.is_satellite_provider
builtins.bool"builtins.bool*35*36*37*38*39*310rs
is_tor_exit_node&geoip2.records.Traits.is_tor_exit_node
builtins.bool"builtins.bool*35*36*37*38*39*310rW
ispgeoip2.records.Traits.isp
builtins.str"builtins.str*35*36*37*38*39*310ri
organization"geoip2.records.Traits.organization
builtins.str"builtins.str*35*36*37*38*39*310rc
	user_typegeoip2.records.Traits.user_type
builtins.str"builtins.str*35*36*37*38*39*310*N
Any
typing.Any"
builtins.object"builtins.object*35*36*37*38*39*310*`
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm*35*36*37*38*39*310*Z
Tupletyping.Tuple*
typing._SpecialForm"typing._SpecialForm*35*36*37*38*39*310