
torch.ao.ns.fx.n_shadows_utils∫

OutputProp)torch.ao.ns.fx.n_shadows_utils.OutputProp"builtins.object*Q
__init__2torch.ao.ns.fx.n_shadows_utils.OutputProp.__init__*
self*
mod*T
	propagate3torch.ao.ns.fx.n_shadows_utils.OutputProp.propagate*
self*
argsr=
mod-torch.ao.ns.fx.n_shadows_utils.OutputProp.mod
AnyrA
graph/torch.ao.ns.fx.n_shadows_utils.OutputProp.graph
AnyrE
modules1torch.ao.ns.fx.n_shadows_utils.OutputProp.modules
Anyó
M@282$torch.ao.ns.fx.n_shadows_utils.M@282"torch.nn.modules.module.Module*H
forward,torch.ao.ns.fx.n_shadows_utils.M@282.forward*
self*
xì
M$torch.ao.ns.fx.n_shadows_utils.M@282"torch.nn.modules.module.Module*H
forward,torch.ao.ns.fx.n_shadows_utils.M@282.forward*
self*
xm
_get_attr_name-torch.ao.ns.fx.n_shadows_utils._get_attr_name*
subgraph_idx*
subgraph_candidate_idx}
_get_attr_wrapper_name5torch.ao.ns.fx.n_shadows_utils._get_attr_wrapper_name*
subgraph_idx*
subgraph_candidate_idx∑
_get_dedup_subgraphs3torch.ao.ns.fx.n_shadows_utils._get_dedup_subgraphs" 
=builtins.dict[builtins.str,builtins.list[torch.fx.node.Node]]
builtins.str"builtins.str\
!builtins.list[torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node"builtins.list"builtins.dict*ú
matchesé
Åbuiltins.dict[builtins.str,TypeAlias[Tuple[torch.fx.node.Node,builtins.list[torch.fx.node.Node],Union[CallableType[builtins.function],Tuple[CallableType[builtins.function],CallableType[builtins.function]],Tuple[CallableType[builtins.function],Tuple[CallableType[builtins.function],CallableType[builtins.function]]],Any,None],torch.ao.quantization.fx.quantize_handler.QuantizeHandler]]]
builtins.str"builtins.str⁄
ÂTypeAlias[Tuple[torch.fx.node.Node,builtins.list[torch.fx.node.Node],Union[CallableType[builtins.function],Tuple[CallableType[builtins.function],CallableType[builtins.function]],Tuple[CallableType[builtins.function],Tuple[CallableType[builtins.function],CallableType[builtins.function]]],Any,None],torch.ao.quantization.fx.quantize_handler.QuantizeHandler]]∫
⁄Tuple[torch.fx.node.Node,builtins.list[torch.fx.node.Node],Union[CallableType[builtins.function],Tuple[CallableType[builtins.function],CallableType[builtins.function]],Tuple[CallableType[builtins.function],Tuple[CallableType[builtins.function],CallableType[builtins.function]]],Any,None],torch.ao.quantization.fx.quantize_handler.QuantizeHandler](
torch.fx.node.Node"torch.fx.node.Node\
!builtins.list[torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node"builtins.listÿ
‰Union[CallableType[builtins.function],Tuple[CallableType[builtins.function],CallableType[builtins.function]],Tuple[CallableType[builtins.function],Tuple[CallableType[builtins.function],CallableType[builtins.function]]],Any,None]K
CallableType[builtins.function]&
builtins.function"builtins.function‰
FTuple[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function•
mTuple[CallableType[builtins.function],Tuple[CallableType[builtins.function],CallableType[builtins.function]]]K
CallableType[builtins.function]&
builtins.function"builtins.function‰
FTuple[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
Any
Nonev
9torch.ao.quantization.fx.quantize_handler.QuantizeHandler"9torch.ao.quantization.fx.quantize_handler.QuantizeHandler"1torch.ao.quantization.fx.match_utils._MatchResult"builtins.dict†
_get_logger_for_subgraph7torch.ao.ns.fx.n_shadows_utils._get_logger_for_subgraph"@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*Q
modelF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*8

first_node(
torch.fx.node.Node"torch.fx.node.Node*7
	last_node(
torch.fx.node.Node"torch.fx.node.Node*.
subgraph_idx
builtins.int"builtins.int*8
subgraph_candidate_idx
builtins.int"builtins.int*-
qconfig_str
builtins.str"builtins.str*[

logger_clsK
CallableType[builtins.function]&
builtins.function"builtins.function*M
fqnD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÁ
create_submodule_from_subgraph=torch.ao.ns.fx.n_shadows_utils.create_submodule_from_subgraph"F
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*K
model@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*8

first_node(
torch.fx.node.Node"torch.fx.node.Node*7
	last_node(
torch.fx.node.Node"torch.fx.node.NodeŒ
2create_one_transformed_and_logged_copy_of_subgraphQtorch.ao.ns.fx.n_shadows_utils.create_one_transformed_and_logged_copy_of_subgraph"
None*N
mtF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*.
subgraph_idx
builtins.int"builtins.int*8
subgraph_candidate_idx
builtins.int"builtins.int*8

first_node(
torch.fx.node.Node"torch.fx.node.Node*7
	last_node(
torch.fx.node.Node"torch.fx.node.Node*M
fqnD
Union[builtins.str,None]
builtins.str"builtins.str
None*ê
list_of_node_name_to_qconfigÌ
[builtins.list[builtins.dict[builtins.str,TypeAlias[Union[TypeAlias[Tuple[Any,Any]],None]]]]˛
Lbuiltins.dict[builtins.str,TypeAlias[Union[TypeAlias[Tuple[Any,Any]],None]]]
builtins.str"builtins.strÄ
0TypeAlias[Union[TypeAlias[Tuple[Any,Any]],None]]ü
%Union[TypeAlias[Tuple[Any,Any]],None]j
TypeAlias[Tuple[Any,Any]]$
Tuple[Any,Any]
Any
Any"%torch.ao.quantization.qconfig.QConfig
None"(torch.ao.quantization.qconfig.QConfigAny"builtins.dict"builtins.list*
example_inputs
Any*∏
last_added_shadow_node_listñ
-builtins.list[Union[torch.fx.node.Node,None]]V
Union[torch.fx.node.Node,None](
torch.fx.node.Node"torch.fx.node.Node
None"builtins.list*†
custom_prepare_fnÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *∞
custom_prepare_kwargsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None Œ
2create_n_transformed_and_logged_copies_of_subgraphQtorch.ao.ns.fx.n_shadows_utils.create_n_transformed_and_logged_copies_of_subgraph"
None*N
mtF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*.
subgraph_idx
builtins.int"builtins.int*,

match_name
builtins.str"builtins.str*H
nodes_in_this_subgraph,
builtins.list[Any]
Any"builtins.list*Ÿ
qconfig_mappings¬
Cbuiltins.list[torch.ao.quantization.qconfig_mapping.QConfigMapping]l
4torch.ao.quantization.qconfig_mapping.QConfigMapping"4torch.ao.quantization.qconfig_mapping.QConfigMapping"builtins.list*ê
list_of_node_name_to_qconfigÌ
[builtins.list[builtins.dict[builtins.str,TypeAlias[Union[TypeAlias[Tuple[Any,Any]],None]]]]˛
Lbuiltins.dict[builtins.str,TypeAlias[Union[TypeAlias[Tuple[Any,Any]],None]]]
builtins.str"builtins.strÄ
0TypeAlias[Union[TypeAlias[Tuple[Any,Any]],None]]ü
%Union[TypeAlias[Tuple[Any,Any]],None]j
TypeAlias[Tuple[Any,Any]]$
Tuple[Any,Any]
Any
Any"%torch.ao.quantization.qconfig.QConfig
None"(torch.ao.quantization.qconfig.QConfigAny"builtins.dict"builtins.list*†
custom_prepare_fnÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *∞
custom_prepare_kwargsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None ≥
create_add_loggers_graph7torch.ao.ns.fx.n_shadows_utils.create_add_loggers_graph"
None*Q
modelF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*‡
subgraphs_dedup 
=builtins.dict[builtins.str,builtins.list[torch.fx.node.Node]]
builtins.str"builtins.str\
!builtins.list[torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node"builtins.list"builtins.dict*Å
qconfig_mappingl
4torch.ao.quantization.qconfig_mapping.QConfigMapping"4torch.ao.quantization.qconfig_mapping.QConfigMapping*ô
node_name_to_qconfig˛
Lbuiltins.dict[builtins.str,TypeAlias[Union[TypeAlias[Tuple[Any,Any]],None]]]
builtins.str"builtins.strÄ
0TypeAlias[Union[TypeAlias[Tuple[Any,Any]],None]]ü
%Union[TypeAlias[Tuple[Any,Any]],None]j
TypeAlias[Tuple[Any,Any]]$
Tuple[Any,Any]
Any
Any"%torch.ao.quantization.qconfig.QConfig
None"(torch.ao.quantization.qconfig.QConfigAny"builtins.dict 
$_get_weight_info_from_shadow_wrapperCtorch.ao.ns.fx.n_shadows_utils._get_weight_info_from_shadow_wrapper"
Any*T
shadow_wrapper@
torch.nn.modules.module.Module"torch.nn.modules.module.Moduleÿ
extract_weight_comparison8torch.ao.ns.fx.n_shadows_utils.extract_weight_comparison"±
òTypeAlias[builtins.dict[builtins.str,builtins.dict[builtins.str,builtins.dict[builtins.str,builtins.list[TypeAlias[builtins.dict[builtins.str,Any]]]]]]]Í
çbuiltins.dict[builtins.str,builtins.dict[builtins.str,builtins.dict[builtins.str,builtins.list[TypeAlias[builtins.dict[builtins.str,Any]]]]]]
builtins.str"builtins.str™
qbuiltins.dict[builtins.str,builtins.dict[builtins.str,builtins.list[TypeAlias[builtins.dict[builtins.str,Any]]]]]
builtins.str"builtins.strá
Ubuiltins.dict[builtins.str,builtins.list[TypeAlias[builtins.dict[builtins.str,Any]]]]
builtins.str"builtins.strÄ
9builtins.list[TypeAlias[builtins.dict[builtins.str,Any]]]≥
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"*torch.ao.ns.fx.ns_types.NSSingleResultType"builtins.list"builtins.dict"builtins.dict"builtins.dict"%torch.ao.ns.fx.ns_types.NSResultsType*M
mF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule†
group_results_by_subgraph8torch.ao.ns.fx.n_shadows_utils.group_results_by_subgraph"
Any*ø
results±
òTypeAlias[builtins.dict[builtins.str,builtins.dict[builtins.str,builtins.dict[builtins.str,builtins.list[TypeAlias[builtins.dict[builtins.str,Any]]]]]]]Í
çbuiltins.dict[builtins.str,builtins.dict[builtins.str,builtins.dict[builtins.str,builtins.list[TypeAlias[builtins.dict[builtins.str,Any]]]]]]
builtins.str"builtins.str™
qbuiltins.dict[builtins.str,builtins.dict[builtins.str,builtins.list[TypeAlias[builtins.dict[builtins.str,Any]]]]]
builtins.str"builtins.strá
Ubuiltins.dict[builtins.str,builtins.list[TypeAlias[builtins.dict[builtins.str,Any]]]]
builtins.str"builtins.strÄ
9builtins.list[TypeAlias[builtins.dict[builtins.str,Any]]]≥
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"*torch.ao.ns.fx.ns_types.NSSingleResultType"builtins.list"builtins.dict"builtins.dict"builtins.dict"%torch.ao.ns.fx.ns_types.NSResultsType|
create_results_comparison8torch.ao.ns.fx.n_shadows_utils.create_results_comparison"
Any*
results_grouped
Any|
print_n_shadows_summary6torch.ao.ns.fx.n_shadows_utils.print_n_shadows_summary"
None*
results_comparison
Any*ö
__annotations__.torch.ao.ns.fx.n_shadows_utils.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*o
SHADOW_NODE_NAME_PREFIX6torch.ao.ns.fx.n_shadows_utils.SHADOW_NODE_NAME_PREFIX
builtins.str"builtins.str*
SHADOW_WRAPPER_NODE_NAME_PREFIX>torch.ao.ns.fx.n_shadows_utils.SHADOW_WRAPPER_NODE_NAME_PREFIX
builtins.str"builtins.str*ú
BINARY_FUNCTIONS/torch.ao.ns.fx.n_shadows_utils.BINARY_FUNCTIONSW
builtins.set[builtins.function]&
builtins.function"builtins.function"builtins.set