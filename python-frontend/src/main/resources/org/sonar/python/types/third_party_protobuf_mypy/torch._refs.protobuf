
torch._refsP
is_noncontiguous_supported&torch._refs.is_noncontiguous_supported*

devicee
handle_noncontiguous_outputs(torch._refs.handle_noncontiguous_outputs*
input_tlist*

output?
_broadcast_shapestorch._refs._broadcast_shapes*
_shapes]
_maybe_broadcasttorch._refs._maybe_broadcast*
args*!
preserve_cpu_scalar_tensors Ù
!_make_elementwise_unary_reference-torch._refs._make_elementwise_unary_reference"K
CallableType[builtins.function]&
builtins.function"builtins.function* 
type_promotion_kind
Any*
aten_op
Any *

extra_meta
Any 8
_make_aliastorch._refs._make_alias*
fn*
name2
_make_inplacetorch._refs._make_inplace*
fn 
fill_torch._refs.fill_",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor* 
valueæ
LTypeAlias[Union[builtins.bool,builtins.int,builtins.float,builtins.complex]]À
AUnion[builtins.bool,builtins.int,builtins.float,builtins.complex]
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.float"builtins.float$
builtins.complex"builtins.complex"torch._prims_common.NumberType{
imagtorch._refs.imag",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor`
	_neg_metatorch._refs._neg_meta"
Any*3
a,
torch._tensor.Tensor"torch._tensor.TensorÉ
positivetorch._refs.positive",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor{
realtorch._refs.real",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensorî
view_as_complextorch._refs.view_as_complex",
torch._tensor.Tensor"torch._tensor.Tensor*6
self,
torch._tensor.Tensor"torch._tensor.Tensor∏
"_make_elementwise_binary_reference.torch._refs._make_elementwise_binary_reference"K
CallableType[builtins.function]&
builtins.function"builtins.function* 
type_promotion_kind
Any*
aten_op
Any *
name
Any *
has_out
Any *)
supports_lhs_python_scalar
Any *)
supports_rhs_python_scalar
Any **
supports_two_python_scalars
Any *,
should_register_decomposition
Any “
_floor_divide_integer!torch._refs._floor_divide_integer",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*3
b,
torch._tensor.Tensor"torch._tensor.TensorŒ
_floor_divide_floattorch._refs._floor_divide_float",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*3
b,
torch._tensor.Tensor"torch._tensor.Tensor¶
_check_close_argstorch._refs._check_close_args"
None*&
name
builtins.str"builtins.str*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*3
b,
torch._tensor.Tensor"torch._tensor.Tensor**
rtol 
builtins.float"builtins.float**
atol 
builtins.float"builtins.float√
isclosetorch._refs.isclose",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*3
b,
torch._tensor.Tensor"torch._tensor.Tensor*,
rtol 
builtins.float"builtins.float *,
atol 
builtins.float"builtins.float */
	equal_nan
builtins.bool"builtins.bool ¥
copy_totorch._refs.copy_to"
Any*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*3
b,
torch._tensor.Tensor"torch._tensor.Tensor*!
allow_cross_device
Any …
_to_will_aliastorch._refs._to_will_alias"
builtins.bool"builtins.bool*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *S
copyG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *[
layoutM
Union[torch._C.layout,None]"
torch._C.layout"torch._C.layout
None *w
memory_formatb
"Union[torch._C.memory_format,None]0
torch._C.memory_format"torch._C.memory_format
None *Y

pin_memoryG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *2
non_blocking
builtins.bool"builtins.bool Ã
_canonicalize_to_arguments&torch._refs._canonicalize_to_arguments"
Any*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*H
	to_kwargs9
builtins.dict[Any,Any]
Any
Any"builtins.dictü
totorch._refs.to",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*
args
Any*
kwargs
Any›

_reductiontorch._refs._reduction",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*U
primK
CallableType[builtins.function]&
builtins.function"builtins.function*2
has_identity
builtins.bool"builtins.bool *7
accepts_dim_tuple
builtins.bool"builtins.bool *§
dimsó
QUnion[builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
builtins.int"builtins.intJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None *.
keepdims
builtins.bool"builtins.bool *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *g
out\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *w
output_dtype_kind`
.torch._prims_common.REDUCTION_OUTPUT_TYPE_KIND".torch._prims_common.REDUCTION_OUTPUT_TYPE_KIND@
_make_copy_from_view torch._refs._make_copy_from_view*
fnù
sum_to_sizetorch._refs.sum_to_size",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*
shape
AnyM
_dim_var_dispatchtorch._refs._dim_var_dispatch*	
dim *
unbiased ü

atleast_1dtorch._refs.atleast_1d"ÿ
@Union[torch._tensor.Tensor,builtins.tuple[torch._tensor.Tensor]],
torch._tensor.Tensor"torch._tensor.Tensord
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*Â
arg€
AUnion[torch._tensor.Tensor,typing.Sequence[torch._tensor.Tensor]],
torch._tensor.Tensor"torch._tensor.Tensorf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*6
args,
torch._tensor.Tensor"torch._tensor.Tensorû
_unsqueeze_atleasttorch._refs._unsqueeze_atleast",
torch._tensor.Tensor"torch._tensor.Tensor*\
at_least_fnK
CallableType[builtins.function]&
builtins.function"builtins.function*%
dim
builtins.int"builtins.int*5
arg,
torch._tensor.Tensor"torch._tensor.Tensorü

atleast_2dtorch._refs.atleast_2d"ÿ
@Union[torch._tensor.Tensor,builtins.tuple[torch._tensor.Tensor]],
torch._tensor.Tensor"torch._tensor.Tensord
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*Â
arg€
AUnion[torch._tensor.Tensor,typing.Sequence[torch._tensor.Tensor]],
torch._tensor.Tensor"torch._tensor.Tensorf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*6
args,
torch._tensor.Tensor"torch._tensor.Tensorü

atleast_3dtorch._refs.atleast_3d"ÿ
@Union[torch._tensor.Tensor,builtins.tuple[torch._tensor.Tensor]],
torch._tensor.Tensor"torch._tensor.Tensord
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*Â
arg€
AUnion[torch._tensor.Tensor,typing.Sequence[torch._tensor.Tensor]],
torch._tensor.Tensor"torch._tensor.Tensorf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*6
args,
torch._tensor.Tensor"torch._tensor.Tensorÿ

as_stridedtorch._refs.as_strided",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*î
sizeâ
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.ShapeType*€
strideŒ
JTypeAlias[Union[builtins.list[builtins.int],builtins.tuple[builtins.int]]]›
?Union[builtins.list[builtins.int],builtins.tuple[builtins.int]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.StrideType*Z
storage_offsetD
Union[builtins.int,None]
builtins.int"builtins.int
None —
broadcast_shapestorch._refs.broadcast_shapes"â
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.ShapeType*
shapes
Any¢
broadcast_totorch._refs.broadcast_to",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*î
sizeâ
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.ShapeType
conjtorch._refs.conj",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.TensorŒ

contiguoustorch._refs.contiguous",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*E
memory_format0
torch._C.memory_format"torch._C.memory_format ∫
	expand_astorch._refs.expand_as",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*3
b,
torch._tensor.Tensor"torch._tensor.Tensorà
chunktorch._refs.chunk"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*(
chunks
builtins.int"builtins.int*'
dim
builtins.int"builtins.int ›
flattentorch._refs.flatten",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*-
	start_dim
builtins.int"builtins.int *+
end_dim
builtins.int"builtins.int 
fliplrtorch._refs.fliplr",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor
flipudtorch._refs.flipud",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor÷
narrowtorch._refs.narrow",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*%
dim
builtins.int"builtins.int*É
startx
(Union[builtins.int,torch._tensor.Tensor]
builtins.int"builtins.int,
torch._tensor.Tensor"torch._tensor.Tensor*(
length
builtins.int"builtins.intÒ

_normalizetorch._refs._normalize"”
ETuple[torch._tensor.Tensor,torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*î
	norm_dimsÑ
WTypeAlias[Union[builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]]à
LUnion[builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]
builtins.int"builtins.intJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.DimsType*)
eps 
builtins.float"builtins.floatı
_unsqueeze_multipletorch._refs._unsqueeze_multiple",
torch._tensor.Tensor"torch._tensor.Tensor*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*Z

dimensionsJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list¿
_get_unfold_shape_stride$torch._refs._get_unfold_shape_stride"
Any*ó
a_shapeâ
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.ShapeType*›
a_strideŒ
JTypeAlias[Union[builtins.list[builtins.int],builtins.tuple[builtins.int]]]›
?Union[builtins.list[builtins.int],builtins.tuple[builtins.int]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.StrideType*+
	dimension
builtins.int"builtins.int*&
size
builtins.int"builtins.int*&
step
builtins.int"builtins.intﬂ
_reshape_view_helper torch._refs._reshape_view_helper",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*
shape
Any*.

allow_copy
builtins.bool"builtins.boolô
reshapetorch._refs.reshape",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*ï
shapeâ
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.ShapeType√

reshape_astorch._refs.reshape_as",
torch._tensor.Tensor"torch._tensor.Tensor*6
self,
torch._tensor.Tensor"torch._tensor.Tensor*7
other,
torch._tensor.Tensor"torch._tensor.Tensor˜
_check_stack_inputstorch._refs._check_stack_inputs"
None*¥
tensors¶
ZTypeAlias[Union[builtins.list[torch._tensor.Tensor],builtins.tuple[torch._tensor.Tensor]]]ù
OUnion[builtins.list[torch._tensor.Tensor],builtins.tuple[torch._tensor.Tensor]]b
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.listd
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple"&torch._prims_common.TensorSequenceTypeƒ
	unflattentorch._refs.unflatten",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*%
dim
builtins.int"builtins.int*ï
sizesâ
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.ShapeType˛
index_copy_torch._refs.index_copy_"
Any*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor€
_index_filltorch._refs._index_fill"
Any*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*%
dim
builtins.int"builtins.int*7
index,
torch._tensor.Tensor"torch._tensor.Tensor*Á
value€
hUnion[TypeAlias[Union[builtins.bool,builtins.int,builtins.float,builtins.complex]],torch._tensor.Tensor]æ
LTypeAlias[Union[builtins.bool,builtins.int,builtins.float,builtins.complex]]À
AUnion[builtins.bool,builtins.int,builtins.float,builtins.complex]
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.float"builtins.float$
builtins.complex"builtins.complex"torch._prims_common.NumberType,
torch._tensor.Tensor"torch._tensor.Tensor*+
inplace
builtins.bool"builtins.boolµ
tensor_splittorch._refs.tensor_split"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*∆
indices_or_sections¨
sUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]]],
torch._tensor.Tensor"torch._tensor.TensorÑ
WTypeAlias[Union[builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]]à
LUnion[builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]
builtins.int"builtins.intJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.DimsType*'
dim
builtins.int"builtins.int ÿ
hsplittorch._refs.hsplit"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*û
indices_or_sectionsÑ
WTypeAlias[Union[builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]]à
LUnion[builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]
builtins.int"builtins.intJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.DimsTypeÿ
vsplittorch._refs.vsplit"d
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*û
indices_or_sectionsÑ
WTypeAlias[Union[builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]]à
LUnion[builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]
builtins.int"builtins.intJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.DimsType√

block_diagtorch._refs.block_diag",
torch._tensor.Tensor"torch._tensor.Tensor*o
tensorsb
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.listê
dsplittorch._refs.dsplit"¶
ZTypeAlias[Union[builtins.list[torch._tensor.Tensor],builtins.tuple[torch._tensor.Tensor]]]ù
OUnion[builtins.list[torch._tensor.Tensor],builtins.tuple[torch._tensor.Tensor]]b
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.listd
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple"&torch._prims_common.TensorSequenceType*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*ì
sectionsÑ
WTypeAlias[Union[builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]]à
LUnion[builtins.int,builtins.list[builtins.int],builtins.tuple[builtins.int]]
builtins.int"builtins.intJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.DimsTypeu
Ttorch._refs.T",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor¶
_cumsumprod_commontorch._refs._cumsumprod_common",
torch._tensor.Tensor"torch._tensor.Tensor*
func
Any*
init
Any*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*%
dim
builtins.int"builtins.int*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *g
out\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None Ω
view_astorch._refs.view_as",
torch._tensor.Tensor"torch._tensor.Tensor*6
self,
torch._tensor.Tensor"torch._tensor.Tensor*7
other,
torch._tensor.Tensor"torch._tensor.Tensor}
raveltorch._refs.ravel",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensorÿ
movedimtorch._refs.movedim",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*‰
source◊
^Union[builtins.int,TypeAlias[Union[builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int‘
JTypeAlias[Union[builtins.list[builtins.int],builtins.tuple[builtins.int]]]›
?Union[builtins.list[builtins.int],builtins.tuple[builtins.int]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"$torch._prims_common.DimsSequenceType*È
destination◊
^Union[builtins.int,TypeAlias[Union[builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int‘
JTypeAlias[Union[builtins.list[builtins.int],builtins.tuple[builtins.int]]]›
?Union[builtins.list[builtins.int],builtins.tuple[builtins.int]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"$torch._prims_common.DimsSequenceType
	full_liketorch._refs.full_like",
torch._tensor.Tensor"torch._tensor.Tensor*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*œ

fill_valueæ
LTypeAlias[Union[builtins.bool,builtins.int,builtins.float,builtins.complex]]À
AUnion[builtins.bool,builtins.int,builtins.float,builtins.complex]
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.float"builtins.float$
builtins.complex"builtins.complex"torch._prims_common.NumberType*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *[
layoutM
Union[torch._C.layout,None]"
torch._C.layout"torch._C.layout
None *≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *0

pin_memory
builtins.bool"builtins.bool *3
requires_grad
builtins.bool"builtins.bool *E
memory_format0
torch._C.memory_format"torch._C.memory_format ì
scalar_tensortorch._refs.scalar_tensor",
torch._tensor.Tensor"torch._tensor.Tensor*∆
aæ
LTypeAlias[Union[builtins.bool,builtins.int,builtins.float,builtins.complex]]À
AUnion[builtins.bool,builtins.int,builtins.float,builtins.complex]
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.float"builtins.float$
builtins.complex"builtins.complex"torch._prims_common.NumberType*W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *0
layout"
torch._C.layout"torch._C.layout *≤
device£
5Union[builtins.str,torch._C.device,builtins.int,None]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int
None *0

pin_memory
builtins.bool"builtins.bool Ú
_uniform_helpertorch._refs._uniform_helper",
torch._tensor.Tensor"torch._tensor.Tensor*ï
shapeâ
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch._prims_common.ShapeType*†
lowî
0Union[builtins.bool,builtins.int,builtins.float]
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.float"builtins.float *°
highî
0Union[builtins.bool,builtins.int,builtins.float]
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.float"builtins.float *+
dtype 
torch._C.dtype"torch._C.dtype*á
device˙
;TypeAlias[Union[builtins.str,torch._C.device,builtins.int]]î
0Union[builtins.str,torch._C.device,builtins.int]
builtins.str"builtins.str"
torch._C.device"torch._C.device
builtins.int"builtins.int""torch._prims_common.DeviceLikeType∑
allclosetorch._refs.allclose"
builtins.bool"builtins.bool*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*3
b,
torch._tensor.Tensor"torch._tensor.Tensor*,
rtol 
builtins.float"builtins.float *,
atol 
builtins.float"builtins.float */
	equal_nan
builtins.bool"builtins.bool §
equaltorch._refs.equal"
builtins.bool"builtins.bool*3
a,
torch._tensor.Tensor"torch._tensor.Tensor*3
b,
torch._tensor.Tensor"torch._tensor.Tensor?
_make_r_binary_optorch._refs._make_r_binary_op*
base_op¥
_get_tril_sizestorch._refs._get_tril_sizes"ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*%
row
builtins.int"builtins.int*%
col
builtins.int"builtins.int*(
offset
builtins.int"builtins.int∂
_trilu_checkstorch._refs._trilu_checks"
Any*&
name
builtins.str"builtins.str*%
row
builtins.int"builtins.int*%
col
builtins.int"builtins.int*+
dtype 
torch._C.dtype"torch._C.dtype*.
layout"
torch._C.layout"torch._C.layout*.

pin_memory
builtins.bool"builtins.bool¥
_get_triu_sizestorch._refs._get_triu_sizes"ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*%
row
builtins.int"builtins.int*%
col
builtins.int"builtins.int*(
offset
builtins.int"builtins.int9

_dot_checktorch._refs._dot_check*
self*	
other-

_isStoragetorch._refs._isStorage*
objF
_compute_sizestorch._refs._compute_sizes*
seq*
scalar_type=
_infer_scalar_typetorch._refs._infer_scalar_type*
objˇ

_recursive_buildtorch._refs._recursive_build"
Any*0

scalarType 
torch._C.dtype"torch._C.dtype*ë

objá

’Union[TypeAlias[Union[torch._tensor.Tensor,TypeAlias[Union[builtins.bool,builtins.int,builtins.float,builtins.complex]]]],TypeAlias[Union[builtins.list[torch._tensor.Tensor],builtins.tuple[torch._tensor.Tensor]]]]Å
sTypeAlias[Union[torch._tensor.Tensor,TypeAlias[Union[builtins.bool,builtins.int,builtins.float,builtins.complex]]]]€
hUnion[torch._tensor.Tensor,TypeAlias[Union[builtins.bool,builtins.int,builtins.float,builtins.complex]]],
torch._tensor.Tensor"torch._tensor.Tensoræ
LTypeAlias[Union[builtins.bool,builtins.int,builtins.float,builtins.complex]]À
AUnion[builtins.bool,builtins.int,builtins.float,builtins.complex]
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.float"builtins.float$
builtins.complex"builtins.complex"torch._prims_common.NumberType"*torch._prims_common.TensorOrNumberLikeType¶
ZTypeAlias[Union[builtins.list[torch._tensor.Tensor],builtins.tuple[torch._tensor.Tensor]]]ù
OUnion[builtins.list[torch._tensor.Tensor],builtins.tuple[torch._tensor.Tensor]]b
#builtins.list[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.listd
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple"&torch._prims_common.TensorSequenceType¿
_internal_new_from_data#torch._refs._internal_new_from_data*
options*
scalar_type*

device_opt*
data*
copy_variables*

copy_numpy*
type_inference*

pin_memory h
tensortorch._refs.tensor*
data*
dtype *
device *

pin_memory *
requires_grad "ú
meshgridtorch._refs.meshgridÿ
meshgridtorch._refs.meshgrid"
Any*s
tensorsf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence**
indexing
builtins.str"builtins.str0:overloadXû
meshgridtorch._refs.meshgrid"
Any*9
tensors,
torch._tensor.Tensor"torch._tensor.Tensor**
indexing
builtins.str"builtins.str0:overloadX*l
__path__torch._refs.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*á
__annotations__torch._refs.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
primstorch._prims *
utilstorch._prims_common *j
__all__torch._refs.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*!
atentorch._refs.aten
Any*N
infer_aten_optorch._refs.infer_aten_op"
builtins.object"builtins.object*)
mvlgammatorch._refs.mvlgamma
Any*%
py_alltorch._refs.py_all
Any*%
py_anytorch._refs.py_any
Any*/
narrow_copytorch._refs.narrow_copy
Any*3
diagonal_copytorch._refs.diagonal_copy
Any*+
	swap_axestorch._refs.swap_axes
Any*)
rtruedivtorch._refs.rtruediv
Any*+
	rfloordivtorch._refs.rfloordiv
Any*!
rpowtorch._refs.rpow
Any*!
abs_torch._refs.abs_
Any*#
acos_torch._refs.acos_
Any*%
acosh_torch._refs.acosh_
Any*!
add_torch._refs.add_
Any*)
addcmul_torch._refs.addcmul_
Any*)
addcdiv_torch._refs.addcdiv_
Any*#
asin_torch._refs.asin_
Any*%
asinh_torch._refs.asinh_
Any*#
atan_torch._refs.atan_
Any*%
atanh_torch._refs.atanh_
Any*%
atan2_torch._refs.atan2_
Any*1
bitwise_and_torch._refs.bitwise_and_
Any*?
bitwise_left_shift_torch._refs.bitwise_left_shift_
Any*1
bitwise_not_torch._refs.bitwise_not_
Any*/
bitwise_or_torch._refs.bitwise_or_
Any*A
bitwise_right_shift_ torch._refs.bitwise_right_shift_
Any*1
bitwise_xor_torch._refs.bitwise_xor_
Any*#
ceil_torch._refs.ceil_
Any*%
clamp_torch._refs.clamp_
Any*-

clamp_min_torch._refs.clamp_min_
Any*-

clamp_max_torch._refs.clamp_max_
Any*5
conj_physical_torch._refs.conj_physical_
Any*+
	copysign_torch._refs.copysign_
Any*!
cos_torch._refs.cos_
Any*#
cosh_torch._refs.cosh_
Any*'
cumsum_torch._refs.cumsum_
Any*)
cumprod_torch._refs.cumprod_
Any*)
deg2rad_torch._refs.deg2rad_
Any*)
digamma_torch._refs.digamma_
Any*!
div_torch._refs.div_
Any*
eq_torch._refs.eq_
Any*!
erf_torch._refs.erf_
Any*#
erfc_torch._refs.erfc_
Any*'
erfinv_torch._refs.erfinv_
Any*!
exp_torch._refs.exp_
Any*#
exp2_torch._refs.exp2_
Any*%
expm1_torch._refs.expm1_
Any*1
float_power_torch._refs.float_power_
Any*%
floor_torch._refs.floor_
Any*3
floor_divide_torch._refs.floor_divide_
Any*#
fmod_torch._refs.fmod_
Any*#
frac_torch._refs.frac_
Any*!
gcd_torch._refs.gcd_
Any*
ge_torch._refs.ge_
Any*
gt_torch._refs.gt_
Any*-

heaviside_torch._refs.heaviside_
Any*%
hypot_torch._refs.hypot_
Any*'
igamma_torch._refs.igamma_
Any*)
igammac_torch._refs.igammac_
Any*
i0_torch._refs.i0_
Any*!
lcm_torch._refs.lcm_
Any*
le_torch._refs.le_
Any*#
lerp_torch._refs.lerp_
Any*'
lgamma_torch._refs.lgamma_
Any*%
log10_torch._refs.log10_
Any*%
log1p_torch._refs.log1p_
Any*#
log2_torch._refs.log2_
Any*!
log_torch._refs.log_
Any*1
logical_and_torch._refs.logical_and_
Any*1
logical_not_torch._refs.logical_not_
Any*/
logical_or_torch._refs.logical_or_
Any*1
logical_xor_torch._refs.logical_xor_
Any*
lt_torch._refs.lt_
Any*!
mul_torch._refs.mul_
Any*+
	mvlgamma_torch._refs.mvlgamma_
Any*/
nan_to_num_torch._refs.nan_to_num_
Any*
ne_torch._refs.ne_
Any*!
neg_torch._refs.neg_
Any*-

nextafter_torch._refs.nextafter_
Any*!
pow_torch._refs.pow_
Any*)
rad2deg_torch._refs.rad2deg_
Any*/
reciprocal_torch._refs.reciprocal_
Any*-

remainder_torch._refs.remainder_
Any*%
rsqrt_torch._refs.rsqrt_
Any*!
sgn_torch._refs.sgn_
Any*)
sigmoid_torch._refs.sigmoid_
Any*#
sign_torch._refs.sign_
Any*!
sin_torch._refs.sin_
Any*#
sinc_torch._refs.sinc_
Any*#
sinh_torch._refs.sinh_
Any*#
sqrt_torch._refs.sqrt_
Any*'
square_torch._refs.square_
Any*!
sub_torch._refs.sub_
Any*!
tan_torch._refs.tan_
Any*#
tanh_torch._refs.tanh_
Any*#
tril_torch._refs.tril_
Any*#
triu_torch._refs.triu_
Any*1
true_divide_torch._refs.true_divide_
Any*%
trunc_torch._refs.trunc_
Any*%
xlogy_torch._refs.xlogy_
Any*'
cauchy_torch._refs.cauchy_
Any*1
exponential_torch._refs.exponential_
Any*-

geometric_torch._refs.geometric_
Any*/
log_normal_torch._refs.log_normal_
Any*#
zero_torch._refs.zero_
Any