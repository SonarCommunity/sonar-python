
_pytest.nodesª
NodeMeta_pytest.nodes.NodeMeta"builtins.type*D
__call___pytest.nodes.NodeMeta.__call__*
self*
k*
kw*B
_create_pytest.nodes.NodeMeta._create*
self*
k*
kwπB
Node_pytest.nodes.Node"builtins.object*’
__init___pytest.nodes.Node.__init__"
None*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*&
name
builtins.str"builtins.str*d
parentV
Union[_pytest.nodes.Node,None](
_pytest.nodes.Node"_pytest.nodes.Node
None *m
config_
!Union[_pytest.config.Config,None].
_pytest.config.Config"_pytest.config.Config
None *k
session\
 Union[_pytest.main.Session,None],
_pytest.main.Session"_pytest.main.Session
None *^
fspathP
$Union[UnboundType[LEGACY_PATH],None]
UnboundType[LEGACY_PATH]
None *P
pathD
Union[pathlib.Path,None]
pathlib.Path"pathlib.Path
None *R
nodeidD
Union[builtins.str,None]
builtins.str"builtins.str
None *Â
from_parent_pytest.nodes.Node.from_parent"
Any*U
clsL
Type[_pytest.nodes.Node](
_pytest.nodes.Node"_pytest.nodes.Node"type*4
parent(
_pytest.nodes.Node"_pytest.nodes.Node*
kw
Any0:classmethodp*9
ihook_pytest.nodes.Node.ihook*
self0:property`*q
__repr___pytest.nodes.Node.__repr__"
builtins.str"builtins.str**(
_pytest.nodes.Node"_pytest.nodes.Node*ê
warn_pytest.nodes.Node.warn"
None*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*1
warning$
builtins.Warning"builtins.Warning*É
nodeid_pytest.nodes.Node.nodeid"
builtins.str"builtins.str*2
self(
_pytest.nodes.Node"_pytest.nodes.Node0:property`*y
__hash___pytest.nodes.Node.__hash__"
builtins.int"builtins.int*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*_
setup_pytest.nodes.Node.setup"
None*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*e
teardown_pytest.nodes.Node.teardown"
None*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*ª
	listchain_pytest.nodes.Node.listchain"\
!builtins.list[_pytest.nodes.Node](
_pytest.nodes.Node"_pytest.nodes.Node"builtins.list*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*“

add_marker_pytest.nodes.Node.add_marker"
None*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*∏
marker´
9Union[builtins.str,_pytest.mark.structures.MarkDecorator]
builtins.str"builtins.strN
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*,
append
builtins.bool"builtins.bool *µ
iter_markers_pytest.nodes.Node.iter_markers"~
-typing.Iterator[_pytest.mark.structures.Mark]<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.Iterator*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *À
iter_markers_with_node)_pytest.nodes.Node.iter_markers_with_node"ˇ
Gtyping.Iterator[Tuple[_pytest.nodes.Node,_pytest.mark.structures.Mark]]¢
6Tuple[_pytest.nodes.Node,_pytest.mark.structures.Mark](
_pytest.nodes.Node"_pytest.nodes.Node<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.Iterator*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *∑
listextrakeywords$_pytest.nodes.Node.listextrakeywords"H
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*©
	listnames_pytest.nodes.Node.listnames"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*√
addfinalizer_pytest.nodes.Node.addfinalizer"
None*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*T
finK
CallableType[builtins.function]&
builtins.function"builtins.function*˚
	getparent_pytest.nodes.Node.getparent"å
#Union[_pytest.nodes._NodeType,None]Y
_pytest.nodes._NodeType(
_pytest.nodes.Node"_pytest.nodes.Node"_pytest.nodes.Node
None*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*å
clsÇ
Type[_pytest.nodes._NodeType]Y
_pytest.nodes._NodeType(
_pytest.nodes.Node"_pytest.nodes.Node"_pytest.nodes.Node"type*í
_prunetraceback"_pytest.nodes.Node._prunetraceback"
None*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*ú
excinfoé
8_pytest._code.code.ExceptionInfo[builtins.BaseException]0
builtins.BaseException"builtins.BaseException" _pytest._code.code.ExceptionInfo*¢
_repr_failure_py#_pytest.nodes.Node._repr_failure_py"B
_pytest._code.code.TerminalRepr"_pytest._code.code.TerminalRepr*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*ú
excinfoé
8_pytest._code.code.ExceptionInfo[builtins.BaseException]0
builtins.BaseException"builtins.BaseException" _pytest._code.code.ExceptionInfo*—
style√
•Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ú
repr_failure_pytest.nodes.Node.repr_failure"ô
3Union[builtins.str,_pytest._code.code.TerminalRepr]
builtins.str"builtins.strB
_pytest._code.code.TerminalRepr"_pytest._code.code.TerminalRepr*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*ú
excinfoé
8_pytest._code.code.ExceptionInfo[builtins.BaseException]0
builtins.BaseException"builtins.BaseException" _pytest._code.code.ExceptionInfo*—
style√
•Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None 2ä
get_closest_marker%_pytest.nodes.Node.get_closest_markerõ
get_closest_marker%_pytest.nodes.Node.get_closest_marker"t
(Union[_pytest.mark.structures.Mark,None]<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark
None*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*&
name
builtins.str"builtins.str0:overloadXÆ
get_closest_marker%_pytest.nodes.Node.get_closest_marker"<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark*2
self(
_pytest.nodes.Node"_pytest.nodes.Node*&
name
builtins.str"builtins.str*I
default<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark0:overloadX@b_pytest.nodes.NodeMetarA
fspath_pytest.nodes.Node.fspath
UnboundType[LEGACY_PATH]ré
	__slots___pytest.nodes.Node.__slots__‚
nTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strr=
name_pytest.nodes.Node.name
builtins.str"builtins.strr{
parent_pytest.nodes.Node.parentV
Union[_pytest.nodes.Node,None](
_pytest.nodes.Node"_pytest.nodes.Node
NonerS
config_pytest.nodes.Node.config.
_pytest.config.Config"_pytest.config.ConfigrS
session_pytest.nodes.Node.session,
_pytest.main.Session"_pytest.main.Sessionr=
path_pytest.nodes.Node.path
pathlib.Path"pathlib.Pathrê
keywords_pytest.nodes.Node.keywordsg
'typing.MutableMapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MutableMappingr©
own_markers_pytest.nodes.Node.own_markersz
+builtins.list[_pytest.mark.structures.Mark]<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"builtins.listrã
extra_keyword_matches(_pytest.nodes.Node.extra_keyword_matchesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setrC
_nodeid_pytest.nodes.Node._nodeid
builtins.str"builtins.strrM
stash_pytest.nodes.Node.stash*
_pytest.stash.Stash"_pytest.stash.StashrO
_store_pytest.nodes.Node._store*
_pytest.stash.Stash"_pytest.stash.StashÂ
	Collector_pytest.nodes.Collector"_pytest.nodes.Node*÷
collect_pytest.nodes.Collector.collect"Î
Btyping.Iterable[Union[_pytest.nodes.Item,_pytest.nodes.Collector]]ì
1Union[_pytest.nodes.Item,_pytest.nodes.Collector](
_pytest.nodes.Item"_pytest.nodes.Item2
_pytest.nodes.Collector"_pytest.nodes.Collector"typing.Iterable*<
self2
_pytest.nodes.Collector"_pytest.nodes.Collector*≠
repr_failure$_pytest.nodes.Collector.repr_failure"ô
3Union[builtins.str,_pytest._code.code.TerminalRepr]
builtins.str"builtins.strB
_pytest._code.code.TerminalRepr"_pytest._code.code.TerminalRepr*<
self2
_pytest.nodes.Collector"_pytest.nodes.Collector*ú
excinfoé
8_pytest._code.code.ExceptionInfo[builtins.BaseException]0
builtins.BaseException"builtins.BaseException" _pytest._code.code.ExceptionInfo*°
_prunetraceback'_pytest.nodes.Collector._prunetraceback"
None*<
self2
_pytest.nodes.Collector"_pytest.nodes.Collector*ú
excinfoé
8_pytest._code.code.ExceptionInfo[builtins.BaseException]0
builtins.BaseException"builtins.BaseException" _pytest._code.code.ExceptionInfoú
FSCollector_pytest.nodes.FSCollector"_pytest.nodes.Collector*Ø
__init__"_pytest.nodes.FSCollector.__init__"
None*@
self6
_pytest.nodes.FSCollector"_pytest.nodes.FSCollector*^
fspathP
$Union[UnboundType[LEGACY_PATH],None]
UnboundType[LEGACY_PATH]
None *ò
path_or_parentÅ
+Union[pathlib.Path,_pytest.nodes.Node,None]
pathlib.Path"pathlib.Path(
_pytest.nodes.Node"_pytest.nodes.Node
None *P
pathD
Union[pathlib.Path,None]
pathlib.Path"pathlib.Path
None *P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *d
parentV
Union[_pytest.nodes.Node,None](
_pytest.nodes.Node"_pytest.nodes.Node
None *m
config_
!Union[_pytest.config.Config,None].
_pytest.config.Config"_pytest.config.Config
None *k
session\
 Union[_pytest.main.Session,None],
_pytest.main.Session"_pytest.main.Session
None *R
nodeidD
Union[builtins.str,None]
builtins.str"builtins.str
None *í
from_parent%_pytest.nodes.FSCollector.from_parent"
Any*j
clsa
Type[_pytest.nodes.FSCollector]6
_pytest.nodes.FSCollector"_pytest.nodes.FSCollector"type*
parent
Any*^
fspathP
$Union[UnboundType[LEGACY_PATH],None]
UnboundType[LEGACY_PATH]
None *P
pathD
Union[pathlib.Path,None]
pathlib.Path"pathlib.Path
None *
kw
Any0:classmethodp*’
gethookproxy&_pytest.nodes.FSCollector.gethookproxy"
Any*@
self6
_pytest.nodes.FSCollector"_pytest.nodes.FSCollector*R
fspathF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike*π

isinitpath$_pytest.nodes.FSCollector.isinitpath"
builtins.bool"builtins.bool*@
self6
_pytest.nodes.FSCollector"_pytest.nodes.FSCollector*¢
pathó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike5
File_pytest.nodes.File"_pytest.nodes.FSCollector∏
Item_pytest.nodes.Item"_pytest.nodes.Node*–
__init___pytest.nodes.Item.__init__"
None*2
self(
_pytest.nodes.Item"_pytest.nodes.Item*
name
Any*
parent
Any *m
config_
!Union[_pytest.config.Config,None].
_pytest.config.Config"_pytest.config.Config
None *k
session\
 Union[_pytest.main.Session,None],
_pytest.main.Session"_pytest.main.Session
None *R
nodeidD
Union[builtins.str,None]
builtins.str"builtins.str
None *
kw
Any*Ø
-_check_item_and_collector_diamond_inheritance@_pytest.nodes.Item._check_item_and_collector_diamond_inheritance"
None*2
self(
_pytest.nodes.Item"_pytest.nodes.Item*c
runtest_pytest.nodes.Item.runtest"
None*2
self(
_pytest.nodes.Item"_pytest.nodes.Item*Û
add_report_section%_pytest.nodes.Item.add_report_section"
None*2
self(
_pytest.nodes.Item"_pytest.nodes.Item*&
when
builtins.str"builtins.str*%
key
builtins.str"builtins.str*)
content
builtins.str"builtins.str*æ

reportinfo_pytest.nodes.Item.reportinfo"‹
ZTuple[Union[os.PathLike[builtins.str],builtins.str],Union[builtins.int,None],builtins.str]ó
-Union[os.PathLike[builtins.str],builtins.str]F
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike
builtins.str"builtins.strD
Union[builtins.int,None]
builtins.int"builtins.int
None
builtins.str"builtins.str*2
self(
_pytest.nodes.Item"_pytest.nodes.Item*≤
location_pytest.nodes.Item.location"ø
9Tuple[builtins.str,Union[builtins.int,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.int,None]
builtins.int"builtins.int
None
builtins.str"builtins.str*2
self(
_pytest.nodes.Item"_pytest.nodes.Item0:cached_property`r1
nextitem_pytest.nodes.Item.nextitem
Nonerï
_report_sections#_pytest.nodes.Item._report_sections€
<builtins.list[Tuple[builtins.str,builtins.str,builtins.str]]ã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str"builtins.listrÊ
user_properties"_pytest.nodes.Item.user_propertiesÆ
2builtins.list[Tuple[builtins.str,builtins.object]]i
#Tuple[builtins.str,builtins.object]
builtins.str"builtins.str"
builtins.object"builtins.object"builtins.listÆ
iterparentnodeids_pytest.nodes.iterparentnodeids"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*(
nodeid
builtins.str"builtins.strÑ
_check_path_pytest.nodes._check_path"
None*&
path
pathlib.Path"pathlib.Path*(
fspath
UnboundType[LEGACY_PATH]—
_imply_path_pytest.nodes._imply_path"
pathlib.Path"pathlib.Path*[
	node_typeL
Type[_pytest.nodes.Node](
_pytest.nodes.Node"_pytest.nodes.Node"type*N
pathD
Union[pathlib.Path,None]
pathlib.Path"pathlib.Path
None*\
fspathP
$Union[UnboundType[LEGACY_PATH],None]
UnboundType[LEGACY_PATH]
NoneÂ
get_fslocation_from_item&_pytest.nodes.get_fslocation_from_item"Ï
@Tuple[Union[builtins.str,pathlib.Path],Union[builtins.int,None]]`
 Union[builtins.str,pathlib.Path]
builtins.str"builtins.str
pathlib.Path"pathlib.PathD
Union[builtins.int,None]
builtins.int"builtins.int
None*2
node(
_pytest.nodes.Node"_pytest.nodes.Node˘
_check_initialpaths_for_relpath-_pytest.nodes._check_initialpaths_for_relpath"D
Union[builtins.str,None]
builtins.str"builtins.str
None*9
session,
_pytest.main.Session"_pytest.main.Session*&
path
pathlib.Path"pathlib.Path*â
__annotations___pytest.nodes.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
_pytest_pytest *6
SEP_pytest.nodes.SEP
builtins.str"builtins.str*N
tracebackcutdir_pytest.nodes.tracebackcutdir
pathlib.Path"pathlib.Path