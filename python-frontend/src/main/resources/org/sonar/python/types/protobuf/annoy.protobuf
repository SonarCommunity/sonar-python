
annoy¿
_Vectorannoy._Vector"typing.Sized*ï
__getitem__annoy._Vector.__getitem__" 
builtins.float"builtins.float*&
self
annoy._Vector"annoy._Vector*!
i
builtins.int"builtins.intX≥/

AnnoyIndexannoy.AnnoyIndex"builtins.object*©
__init__annoy.AnnoyIndex.__init__"
None*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*#
f
builtins.int"builtins.int*¢
metricï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*ﬂ
loadannoy.AnnoyIndex.load":
Literal[builtins.bool]	
builtins.bool"builtins.bool*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*$
fn
builtins.str"builtins.str*.
prefault
builtins.bool"builtins.bool *ﬂ
saveannoy.AnnoyIndex.save":
Literal[builtins.bool]	
builtins.bool"builtins.bool*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*$
fn
builtins.str"builtins.str*.
prefault
builtins.bool"builtins.bool *⁄
get_item_vector annoy.AnnoyIndex.get_item_vector"P
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*#
__i
builtins.int"builtins.int*∞
add_itemannoy.AnnoyIndex.add_item"
None*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*#
i
builtins.int"builtins.int**
vector
annoy._Vector"annoy._Vector*¡
on_disk_buildannoy.AnnoyIndex.on_disk_build":
Literal[builtins.bool]	
builtins.bool"builtins.bool*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*$
fn
builtins.str"builtins.str*‚
buildannoy.AnnoyIndex.build":
Literal[builtins.bool]	
builtins.bool"builtins.bool*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*)
n_trees
builtins.int"builtins.int**
n_jobs
builtins.int"builtins.int *è
unbuildannoy.AnnoyIndex.unbuild":
Literal[builtins.bool]	
builtins.bool"builtins.bool*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*ç
unloadannoy.AnnoyIndex.unload":
Literal[builtins.bool]	
builtins.bool"builtins.bool*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*…
get_distanceannoy.AnnoyIndex.get_distance" 
builtins.float"builtins.float*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*#
__i
builtins.int"builtins.int*#
__j
builtins.int"builtins.int*y
get_n_itemsannoy.AnnoyIndex.get_n_items"
builtins.int"builtins.int*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*y
get_n_treesannoy.AnnoyIndex.get_n_trees"
builtins.int"builtins.int*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*∂
verboseannoy.AnnoyIndex.verbose":
Literal[builtins.bool]	
builtins.bool"builtins.bool*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*%
__v
builtins.bool"builtins.bool*Ñ
set_seedannoy.AnnoyIndex.set_seed"
None*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*#
__s
builtins.int"builtins.int2Ü
get_nns_by_item annoy.AnnoyIndex.get_nns_by_itemä
get_nns_by_item annoy.AnnoyIndex.get_nns_by_item"J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*#
i
builtins.int"builtins.int*#
n
builtins.int"builtins.int*,
search_k
builtins.int"builtins.int *S
include_distances:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadXü
get_nns_by_item annoy.AnnoyIndex.get_nns_by_item"‚
@Tuple[builtins.list[builtins.int],builtins.list[builtins.float]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*#
i
builtins.int"builtins.int*#
n
builtins.int"builtins.int**
search_k
builtins.int"builtins.int*Q
include_distances:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX°
get_nns_by_item annoy.AnnoyIndex.get_nns_by_item"‚
@Tuple[builtins.list[builtins.int],builtins.list[builtins.float]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex*#
i
builtins.int"builtins.int*#
n
builtins.int"builtins.int*,
search_k
builtins.int"builtins.int *Q
include_distances:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX2´
get_nns_by_vector"annoy.AnnoyIndex.get_nns_by_vectorï
get_nns_by_vector"annoy.AnnoyIndex.get_nns_by_vector"J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex**
vector
annoy._Vector"annoy._Vector*#
n
builtins.int"builtins.int*,
search_k
builtins.int"builtins.int *S
include_distances:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadX™
get_nns_by_vector"annoy.AnnoyIndex.get_nns_by_vector"‚
@Tuple[builtins.list[builtins.int],builtins.list[builtins.float]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex**
vector
annoy._Vector"annoy._Vector*#
n
builtins.int"builtins.int**
search_k
builtins.int"builtins.int*Q
include_distances:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX¨
get_nns_by_vector"annoy.AnnoyIndex.get_nns_by_vector"‚
@Tuple[builtins.list[builtins.int],builtins.list[builtins.float]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*.
self$
annoy.AnnoyIndex"annoy.AnnoyIndex**
vector
annoy._Vector"annoy._Vector*#
n
builtins.int"builtins.int*,
search_k
builtins.int"builtins.int *Q
include_distances:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX