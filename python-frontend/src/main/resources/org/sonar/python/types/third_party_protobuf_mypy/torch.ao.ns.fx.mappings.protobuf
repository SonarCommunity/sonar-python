
torch.ao.ns.fx.mappingsñ
$get_base_name_to_sets_of_related_ops<torch.ao.ns.fx.mappings.get_base_name_to_sets_of_related_ops"Š
hbuiltins.dict[builtins.str,builtins.set[TypeAlias[Union[CallableType[builtins.function],builtins.str]]]]
builtins.str"builtins.strð
Lbuiltins.set[TypeAlias[Union[CallableType[builtins.function],builtins.str]]]‘
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"(torch.ao.ns.fx.ns_types.NSNodeTargetType"builtins.set"builtins.dictÛ
get_base_name_for_op,torch.ao.ns.fx.mappings.get_base_name_for_op"D
Union[builtins.str,None]
builtins.str"builtins.str
None*±
 base_name_to_sets_of_related_opsŠ
hbuiltins.dict[builtins.str,builtins.set[TypeAlias[Union[CallableType[builtins.function],builtins.str]]]]
builtins.str"builtins.strð
Lbuiltins.set[TypeAlias[Union[CallableType[builtins.function],builtins.str]]]‘
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"(torch.ao.ns.fx.ns_types.NSNodeTargetType"builtins.set"builtins.dict*š
op‘
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"(torch.ao.ns.fx.ns_types.NSNodeTargetTypeö
add_op_to_sets_of_related_ops5torch.ao.ns.fx.mappings.add_op_to_sets_of_related_ops"
None*±
 base_name_to_sets_of_related_opsŠ
hbuiltins.dict[builtins.str,builtins.set[TypeAlias[Union[CallableType[builtins.function],builtins.str]]]]
builtins.str"builtins.strð
Lbuiltins.set[TypeAlias[Union[CallableType[builtins.function],builtins.str]]]‘
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"(torch.ao.ns.fx.ns_types.NSNodeTargetType"builtins.set"builtins.dict*š
op‘
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"(torch.ao.ns.fx.ns_types.NSNodeTargetType*Â

related_op±
8Union[CallableType[builtins.function],builtins.str,None]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str
Noneá
get_node_type_to_io_type_map4torch.ao.ns.fx.mappings.get_node_type_to_io_type_map"Š
hbuiltins.dict[builtins.str,builtins.set[TypeAlias[Union[CallableType[builtins.function],builtins.str]]]]
builtins.str"builtins.strð
Lbuiltins.set[TypeAlias[Union[CallableType[builtins.function],builtins.str]]]‘
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"(torch.ao.ns.fx.ns_types.NSNodeTargetType"builtins.set"builtins.dictÛ
get_unmatchable_types_map1torch.ao.ns.fx.mappings.get_unmatchable_types_map"Š
hbuiltins.dict[builtins.str,builtins.set[TypeAlias[Union[CallableType[builtins.function],builtins.str]]]]
builtins.str"builtins.strð
Lbuiltins.set[TypeAlias[Union[CallableType[builtins.function],builtins.str]]]‘
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"(torch.ao.ns.fx.ns_types.NSNodeTargetType"builtins.set"builtins.dict*“
__annotations__'torch.ao.ns.fx.mappings.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
nntorch.nn *
Ftorch.nn.functional *+
toqtorch.ao.ns.fx.mappings.toq
Any*
nnqtorch.ao.nn.quantized *'
nnqdtorch.ao.nn.quantized.dynamic *)
nniqtorch.ao.nn.intrinsic.quantized *2
nniqd'torch.ao.nn.intrinsic.quantized.dynamic *%
nniqattorch.ao.nn.intrinsic.qat *
nnitorch.ao.nn.intrinsic *
nnqattorch.ao.nn.qat *#
nnqatdtorch.ao.nn.qat.dynamic *O
_lower_to_native_backend1torch.ao.quantization.fx._lower_to_native_backend *F
quantization_mappings+torch.ao.quantization.quantization_mappings 