
torch._vmap_internals¿
_validate_and_get_batch_size2torch._vmap_internals._validate_and_get_batch_size"
builtins.int"builtins.int*ê
flat_in_dims~
'builtins.list[Union[builtins.int,None]]D
Union[builtins.int,None]
builtins.int"builtins.int
None"builtins.list*;
	flat_args,
builtins.list[Any]
Any"builtins.list¡
_num_outputs"torch._vmap_internals._num_outputs"
builtins.int"builtins.int*Ó
batched_outputsÿ
@Union[torch._tensor.Tensor,builtins.tuple[torch._tensor.Tensor]],
torch._tensor.Tensor"torch._tensor.Tensord
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tupleá
	_as_tupletorch._vmap_internals._as_tuple".
builtins.tuple[Any]
Any"builtins.tuple*
value
Any*.
num_elements
builtins.int"builtins.int*e
error_message_lambdaK
CallableType[builtins.function]&
builtins.function"builtins.function„
_create_batched_inputs,torch._vmap_internals._create_batched_inputs"y
'Tuple[builtins.tuple[Any],builtins.int].
builtins.tuple[Any]
Any"builtins.tuple
builtins.int"builtins.int*‡
in_dims“
2TypeAlias[Union[builtins.int,builtins.tuple[Any]]]y
'Union[builtins.int,builtins.tuple[Any]]
builtins.int"builtins.int.
builtins.tuple[Any]
Any"builtins.tuple"torch._vmap_internals.in_dims_t*8
args.
builtins.tuple[Any]
Any"builtins.tuple*,

vmap_level
builtins.int"builtins.int*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function·
_unwrap_batched%torch._vmap_internals._unwrap_batched".
builtins.tuple[Any]
Any"builtins.tuple*Ó
batched_outputsÿ
@Union[torch._tensor.Tensor,builtins.tuple[torch._tensor.Tensor]],
torch._tensor.Tensor"torch._tensor.Tensord
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*ì
out_dimsÑ
;TypeAlias[Union[builtins.int,builtins.tuple[builtins.int]]]†
0Union[builtins.int,builtins.tuple[builtins.int]]
builtins.int"builtins.intL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple" torch._vmap_internals.out_dims_t*,

vmap_level
builtins.int"builtins.int*,

batch_size
builtins.int"builtins.int*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*=
allow_none_pass_through
builtins.bool"builtins.bool ≥
_validate_outputs'torch._vmap_internals._validate_outputs"
None*
outputs
Any*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function◊
#_check_out_dims_is_int_or_int_tuple9torch._vmap_internals._check_out_dims_is_int_or_int_tuple"
None*ì
out_dimsÑ
;TypeAlias[Union[builtins.int,builtins.tuple[builtins.int]]]†
0Union[builtins.int,builtins.tuple[builtins.int]]
builtins.int"builtins.intL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple" torch._vmap_internals.out_dims_t*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.functionå
	_get_nametorch._vmap_internals._get_name"
Any*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.functionÑ
_vmaptorch._vmap_internals._vmap"K
CallableType[builtins.function]&
builtins.function"builtins.function*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*‚
in_dims“
2TypeAlias[Union[builtins.int,builtins.tuple[Any]]]y
'Union[builtins.int,builtins.tuple[Any]]
builtins.int"builtins.int.
builtins.tuple[Any]
Any"builtins.tuple"torch._vmap_internals.in_dims_t *ï
out_dimsÑ
;TypeAlias[Union[builtins.int,builtins.tuple[builtins.int]]]†
0Union[builtins.int,builtins.tuple[builtins.int]]
builtins.int"builtins.intL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple" torch._vmap_internals.out_dims_t *=
allow_none_pass_through
builtins.bool"builtins.bool *ë
__annotations__%torch._vmap_internals.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict