
'torch.distributions.relaxed_categorical‚
ExpRelaxedCategorical=torch.distributions.relaxed_categorical.ExpRelaxedCategorical"-torch.distributions.distribution.Distribution*ù
__init__Ftorch.distributions.relaxed_categorical.ExpRelaxedCategorical.__init__*
self*
temperature*
probs *
logits *
validate_args *z
expandDtorch.distributions.relaxed_categorical.ExpRelaxedCategorical.expand*
self*
batch_shape*
	_instance *j
_newBtorch.distributions.relaxed_categorical.ExpRelaxedCategorical._new*
self*
args*

kwargs*p
param_shapeItorch.distributions.relaxed_categorical.ExpRelaxedCategorical.param_shape*
self0:property`*f
logitsDtorch.distributions.relaxed_categorical.ExpRelaxedCategorical.logits*
self0:property`*d
probsCtorch.distributions.relaxed_categorical.ExpRelaxedCategorical.probs*
self0:property`*n
rsampleEtorch.distributions.relaxed_categorical.ExpRelaxedCategorical.rsample*
self*
sample_shape *g
log_probFtorch.distributions.relaxed_categorical.ExpRelaxedCategorical.log_prob*
self*	
valuer≤
arg_constraintsMtorch.distributions.relaxed_categorical.ExpRelaxedCategorical.arg_constraintsœ
Fbuiltins.dict[builtins.str,torch.distributions.constraints.Constraint]
builtins.str"builtins.strX
*torch.distributions.constraints.Constraint"*torch.distributions.constraints.Constraint"builtins.dictr¬
supportEtorch.distributions.relaxed_categorical.ExpRelaxedCategorical.supportp
6torch.distributions.constraints._IndependentConstraint"6torch.distributions.constraints._IndependentConstraintrx
has_rsampleItorch.distributions.relaxed_categorical.ExpRelaxedCategorical.has_rsample
builtins.bool"builtins.boolrc
_categoricalJtorch.distributions.relaxed_categorical.ExpRelaxedCategorical._categorical
Anyra
temperatureItorch.distributions.relaxed_categorical.ExpRelaxedCategorical.temperature
AnyÓ

RelaxedOneHotCategorical@torch.distributions.relaxed_categorical.RelaxedOneHotCategorical"Dtorch.distributions.transformed_distribution.TransformedDistribution*†
__init__Itorch.distributions.relaxed_categorical.RelaxedOneHotCategorical.__init__*
self*
temperature*
probs *
logits *
validate_args *}
expandGtorch.distributions.relaxed_categorical.RelaxedOneHotCategorical.expand*
self*
batch_shape*
	_instance *s
temperatureLtorch.distributions.relaxed_categorical.RelaxedOneHotCategorical.temperature*
self0:property`*i
logitsGtorch.distributions.relaxed_categorical.RelaxedOneHotCategorical.logits*
self0:property`*g
probsFtorch.distributions.relaxed_categorical.RelaxedOneHotCategorical.probs*
self0:property`rµ
arg_constraintsPtorch.distributions.relaxed_categorical.RelaxedOneHotCategorical.arg_constraintsœ
Fbuiltins.dict[builtins.str,torch.distributions.constraints.Constraint]
builtins.str"builtins.strX
*torch.distributions.constraints.Constraint"*torch.distributions.constraints.Constraint"builtins.dictr©
supportHtorch.distributions.relaxed_categorical.RelaxedOneHotCategorical.supportT
(torch.distributions.constraints._Simplex"(torch.distributions.constraints._Simplexr{
has_rsampleLtorch.distributions.relaxed_categorical.RelaxedOneHotCategorical.has_rsample
builtins.bool"builtins.bool*£
__annotations__7torch.distributions.relaxed_categorical.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ü
__all__/torch.distributions.relaxed_categorical.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list