
torch.utils.collect_envçC
	SystemEnv!torch.utils.collect_env.SystemEnv"builtins.tuple*Ë
_replace*torch.utils.collect_env.SystemEnv._replace"˚
%torch.utils.collect_env.SystemEnv._NTœ
jTuple[Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any]
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any*á
_self˚
%torch.utils.collect_env.SystemEnv._NTœ
jTuple[Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any]
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any*
torch_version
Any *
is_debug_build
Any *$
cuda_compiled_version
Any *
gcc_version
Any *
clang_version
Any *
cmake_version
Any *
os
Any *
libc_version
Any *
python_version
Any *
python_platform
Any * 
is_cuda_available
Any *#
cuda_runtime_version
Any *"
cuda_module_loading
Any *$
nvidia_driver_version
Any * 
nvidia_gpu_models
Any *
cudnn_version
Any *
pip_version
Any *
pip_packages
Any *
conda_packages
Any *#
hip_compiled_version
Any *"
hip_runtime_version
Any *%
miopen_runtime_version
Any *'
caching_allocator_config
Any *#
is_xnnpack_available
Any *
cpu_info
Any *Î
__new__)torch.utils.collect_env.SystemEnv.__new__"˚
%torch.utils.collect_env.SystemEnv._NTœ
jTuple[Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any]
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any*æ
_cls≥
+Type[torch.utils.collect_env.SystemEnv._NT]˚
%torch.utils.collect_env.SystemEnv._NTœ
jTuple[Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any]
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any"type*
torch_version
Any*
is_debug_build
Any*"
cuda_compiled_version
Any*
gcc_version
Any*
clang_version
Any*
cmake_version
Any*
os
Any*
libc_version
Any*
python_version
Any*
python_platform
Any*
is_cuda_available
Any*!
cuda_runtime_version
Any* 
cuda_module_loading
Any*"
nvidia_driver_version
Any*
nvidia_gpu_models
Any*
cudnn_version
Any*
pip_version
Any*
pip_packages
Any*
conda_packages
Any*!
hip_compiled_version
Any* 
hip_runtime_version
Any*#
miopen_runtime_version
Any*%
caching_allocator_config
Any*!
is_xnnpack_available
Any*
cpu_info
Any*ó
_asdict)torch.utils.collect_env.SystemEnv._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*á
_self˚
%torch.utils.collect_env.SystemEnv._NTœ
jTuple[Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any]
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any*Ë
_make'torch.utils.collect_env.SystemEnv._make"˚
%torch.utils.collect_env.SystemEnv._NTœ
jTuple[Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any]
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any*æ
_cls≥
+Type[torch.utils.collect_env.SystemEnv._NT]˚
%torch.utils.collect_env.SystemEnv._NTœ
jTuple[Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any]
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any
Any"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprI
torch_version/torch.utils.collect_env.SystemEnv.torch_version
AnyrK
is_debug_build0torch.utils.collect_env.SystemEnv.is_debug_build
AnyrY
cuda_compiled_version7torch.utils.collect_env.SystemEnv.cuda_compiled_version
AnyrE
gcc_version-torch.utils.collect_env.SystemEnv.gcc_version
AnyrI
clang_version/torch.utils.collect_env.SystemEnv.clang_version
AnyrI
cmake_version/torch.utils.collect_env.SystemEnv.cmake_version
Anyr3
os$torch.utils.collect_env.SystemEnv.os
AnyrG
libc_version.torch.utils.collect_env.SystemEnv.libc_version
AnyrK
python_version0torch.utils.collect_env.SystemEnv.python_version
AnyrM
python_platform1torch.utils.collect_env.SystemEnv.python_platform
AnyrQ
is_cuda_available3torch.utils.collect_env.SystemEnv.is_cuda_available
AnyrW
cuda_runtime_version6torch.utils.collect_env.SystemEnv.cuda_runtime_version
AnyrU
cuda_module_loading5torch.utils.collect_env.SystemEnv.cuda_module_loading
AnyrY
nvidia_driver_version7torch.utils.collect_env.SystemEnv.nvidia_driver_version
AnyrQ
nvidia_gpu_models3torch.utils.collect_env.SystemEnv.nvidia_gpu_models
AnyrI
cudnn_version/torch.utils.collect_env.SystemEnv.cudnn_version
AnyrE
pip_version-torch.utils.collect_env.SystemEnv.pip_version
AnyrG
pip_packages.torch.utils.collect_env.SystemEnv.pip_packages
AnyrK
conda_packages0torch.utils.collect_env.SystemEnv.conda_packages
AnyrW
hip_compiled_version6torch.utils.collect_env.SystemEnv.hip_compiled_version
AnyrU
hip_runtime_version5torch.utils.collect_env.SystemEnv.hip_runtime_version
Anyr[
miopen_runtime_version8torch.utils.collect_env.SystemEnv.miopen_runtime_version
Anyr_
caching_allocator_config:torch.utils.collect_env.SystemEnv.caching_allocator_config
AnyrW
is_xnnpack_available6torch.utils.collect_env.SystemEnv.is_xnnpack_available
Anyr?
cpu_info*torch.utils.collect_env.SystemEnv.cpu_info
Anyrı
_fields)torch.utils.collect_env.SystemEnv._fieldsæ
ÀTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strró
_field_types.torch.utils.collect_env.SystemEnv._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrù
_field_defaults1torch.utils.collect_env.SystemEnv._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrR
_source)torch.utils.collect_env.SystemEnv._source
builtins.str"builtins.strrù
__annotations__1torch.utils.collect_env.SystemEnv.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict/
runtorch.utils.collect_env.run*
commandY
run_and_read_all(torch.utils.collect_env.run_and_read_all*

run_lambda*
commandv
run_and_parse_first_match1torch.utils.collect_env.run_and_parse_first_match*

run_lambda*
command*	
regexk
run_and_return_first_line1torch.utils.collect_env.run_and_return_first_line*

run_lambda*
command`
get_conda_packages*torch.utils.collect_env.get_conda_packages*

run_lambda*
patterns J
get_gcc_version'torch.utils.collect_env.get_gcc_version*

run_lambdaN
get_clang_version)torch.utils.collect_env.get_clang_version*

run_lambdaN
get_cmake_version)torch.utils.collect_env.get_cmake_version*

run_lambda^
get_nvidia_driver_version1torch.utils.collect_env.get_nvidia_driver_version*

run_lambdaD
get_gpu_info$torch.utils.collect_env.get_gpu_info*

run_lambda\
get_running_cuda_version0torch.utils.collect_env.get_running_cuda_version*

run_lambdaN
get_cudnn_version)torch.utils.collect_env.get_cudnn_version*

run_lambda8
get_nvidia_smi&torch.utils.collect_env.get_nvidia_smiD
get_cpu_info$torch.utils.collect_env.get_cpu_info*

run_lambda4
get_platform$torch.utils.collect_env.get_platformJ
get_mac_version'torch.utils.collect_env.get_mac_version*

run_lambdaR
get_windows_version+torch.utils.collect_env.get_windows_version*

run_lambdaJ
get_lsb_version'torch.utils.collect_env.get_lsb_version*

run_lambdaP
check_release_file*torch.utils.collect_env.check_release_file*

run_lambda8
get_ostorch.utils.collect_env.get_os*

run_lambdaB
get_python_platform+torch.utils.collect_env.get_python_platform<
get_libc_version(torch.utils.collect_env.get_libc_version\
get_pip_packages(torch.utils.collect_env.get_pip_packages*

run_lambda*
patterns R
get_cachingallocator_config3torch.utils.collect_env.get_cachingallocator_configX
get_cuda_module_loading_config6torch.utils.collect_env.get_cuda_module_loading_configD
is_xnnpack_available,torch.utils.collect_env.is_xnnpack_available4
get_env_info$torch.utils.collect_env.get_env_info=

pretty_str"torch.utils.collect_env.pretty_str*
envinfoB
get_pretty_env_info+torch.utils.collect_env.get_pretty_env_info$
maintorch.utils.collect_env.main*ì
__annotations__'torch.utils.collect_env.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Z
TORCH_AVAILABLE'torch.utils.collect_env.TORCH_AVAILABLE
builtins.bool"builtins.bool*í
DEFAULT_CONDA_PATTERNS.torch.utils.collect_env.DEFAULT_CONDA_PATTERNSH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set*é
DEFAULT_PIP_PATTERNS,torch.utils.collect_env.DEFAULT_PIP_PATTERNSH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set*R
env_info_fmt$torch.utils.collect_env.env_info_fmt
builtins.str"builtins.str