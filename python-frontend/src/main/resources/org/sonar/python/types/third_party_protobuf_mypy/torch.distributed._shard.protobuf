
torch.distributed._shard¬
_shard_tensor*torch.distributed._shard.api._shard_tensor"v
9torch.distributed._shard.sharded_tensor.api.ShardedTensor"9torch.distributed._shard.sharded_tensor.api.ShardedTensor*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*…
sharding_specr
7torch.distributed._shard.sharding_spec.api.ShardingSpec"7torch.distributed._shard.sharding_spec.api.ShardingSpec*
src_rank
Any *
process_group
Any Å
shard_module)torch.distributed._shard.api.shard_module"
Any*L
module@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*|
planr
7torch.distributed._shard.sharding_plan.api.ShardingPlan"7torch.distributed._shard.sharding_plan.api.ShardingPlan*
src_rank
Any *
process_group
Any ƒ
shard_parameter,torch.distributed._shard.api.shard_parameter"
Any*L
module@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*,

param_name
builtins.str"builtins.str*…
sharding_specr
7torch.distributed._shard.sharding_spec.api.ShardingSpec"7torch.distributed._shard.sharding_spec.api.ShardingSpec*
src_rank
Any *
process_group
Any *y
__path__!torch.distributed._shard.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*”
__annotations__(torch.distributed._shard.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict