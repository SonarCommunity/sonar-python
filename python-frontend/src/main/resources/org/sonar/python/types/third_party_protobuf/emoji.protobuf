
emoji
emojizeemoji.core.emojize*

string*

delimiters *
variant *
language *
version *
handle_version r
demojizeemoji.core.demojize*

string*

delimiters *
language *
version *
handle_version S
replace_emojiemoji.core.replace_emoji*

string*
replace *
version /

emoji_listemoji.core.emoji_list*

stringA
distinct_emoji_listemoji.core.distinct_emoji_list*

string?
emoji_countemoji.core.emoji_count*

string*
unique +
is_emojiemoji.core.is_emoji*

string)
versionemoji.core.version*

stringN
get_emoji_unicode_dict*emoji.unicode_codes.get_emoji_unicode_dict*
langH
get_aliases_unicode_dict,emoji.unicode_codes.get_aliases_unicode_dict*¥
STATUS$emoji.unicode_codes.data_dict.STATUSu
(builtins.dict[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.dict*€
	LANGUAGES'emoji.unicode_codes.data_dict.LANGUAGESJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*¯

EMOJI_DATA(emoji.unicode_codes.data_dict.EMOJI_DATAö
Gbuiltins.dict[builtins.str,builtins.dict[builtins.str,builtins.object]]
builtins.str"builtins.str~
+builtins.dict[builtins.str,builtins.object]
builtins.str"builtins.str"
builtins.object"builtins.object"builtins.dict"builtins.dict*d
__all__emoji.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*>
__version__emoji.__version__
builtins.str"builtins.str*<

__author__emoji.__author__
builtins.str"builtins.str*:
	__email__emoji.__email__
builtins.str"builtins.str*<

__source__emoji.__source__
builtins.str"builtins.str*>
__license__emoji.__license__
builtins.str"builtins.str