
torch.fx.experimental.recordingè
ShapeEnvEvent-torch.fx.experimental.recording.ShapeEnvEvent"builtins.object*≈
run1torch.fx.experimental.recording.ShapeEnvEvent.run"
Any*h
self^
-torch.fx.experimental.recording.ShapeEnvEvent"-torch.fx.experimental.recording.ShapeEnvEvent*
	shape_env
Any *¿
__str__5torch.fx.experimental.recording.ShapeEnvEvent.__str__"
builtins.str"builtins.str*`^
-torch.fx.experimental.recording.ShapeEnvEvent"-torch.fx.experimental.recording.ShapeEnvEvent*
is_create_fx_call_functionHtorch.fx.experimental.recording.ShapeEnvEvent.is_create_fx_call_function"
builtins.bool"builtins.bool*h
self^
-torch.fx.experimental.recording.ShapeEnvEvent"-torch.fx.experimental.recording.ShapeEnvEvent*‹
is_evaluate_expr>torch.fx.experimental.recording.ShapeEnvEvent.is_evaluate_expr"
builtins.bool"builtins.bool*h
self^
-torch.fx.experimental.recording.ShapeEnvEvent"-torch.fx.experimental.recording.ShapeEnvEvent*Í
is_defer_runtime_assertEtorch.fx.experimental.recording.ShapeEnvEvent.is_defer_runtime_assert"
builtins.bool"builtins.bool*h
self^
-torch.fx.experimental.recording.ShapeEnvEvent"-torch.fx.experimental.recording.ShapeEnvEvent*Ÿ
__init__6torch.fx.experimental.recording.ShapeEnvEvent.__init__"
None*h
self^
-torch.fx.experimental.recording.ShapeEnvEvent"-torch.fx.experimental.recording.ShapeEnvEvent*R
fK
CallableType[builtins.function]&
builtins.function"builtins.function*f
argsZ
Union[builtins.list[Any],None],
builtins.list[Any]
Any"builtins.list
None *°
kwargsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *o
tracked_fakesZ
Union[builtins.list[Any],None],
builtins.list[Any]
Any"builtins.list
None *P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None 8rÅ
f/torch.fx.experimental.recording.ShapeEnvEvent.fK
CallableType[builtins.function]&
builtins.function"builtins.functionrñ
args2torch.fx.experimental.recording.ShapeEnvEvent.argsZ
Union[builtins.list[Any],None],
builtins.list[Any]
Any"builtins.list
Noner”
kwargs4torch.fx.experimental.recording.ShapeEnvEvent.kwargsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
Noner®
tracked_fakes;torch.fx.experimental.recording.ShapeEnvEvent.tracked_fakesZ
Union[builtins.list[Any],None],
builtins.list[Any]
Any"builtins.list
NonerÄ
name2torch.fx.experimental.recording.ShapeEnvEvent.nameD
Union[builtins.str,None]
builtins.str"builtins.str
NonerÙ
__dataclass_fields__Btorch.fx.experimental.recording.ShapeEnvEvent.__dataclass_fields__ó
2builtins.dict[builtins.str,dataclasses.Field[Any]]
builtins.str"builtins.str4
dataclasses.Field[Any]
Any"dataclasses.Field"builtins.dictï
FakeTensorMeta.torch.fx.experimental.recording.FakeTensorMeta"builtins.object*Œ
size3torch.fx.experimental.recording.FakeTensorMeta.size"§
0builtins.tuple[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"builtins.tuple*j
self`
.torch.fx.experimental.recording.FakeTensorMeta".torch.fx.experimental.recording.FakeTensorMeta*“
stride5torch.fx.experimental.recording.FakeTensorMeta.stride"§
0builtins.tuple[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"builtins.tuple*j
self`
.torch.fx.experimental.recording.FakeTensorMeta".torch.fx.experimental.recording.FakeTensorMeta*ù
storage_offset=torch.fx.experimental.recording.FakeTensorMeta.storage_offset"`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt*j
self`
.torch.fx.experimental.recording.FakeTensorMeta".torch.fx.experimental.recording.FakeTensorMeta*√
dim2torch.fx.experimental.recording.FakeTensorMeta.dim"
builtins.int"builtins.int*j
self`
.torch.fx.experimental.recording.FakeTensorMeta".torch.fx.experimental.recording.FakeTensorMeta*Ã
	from_fake8torch.fx.experimental.recording.FakeTensorMeta.from_fake"`
.torch.fx.experimental.recording.FakeTensorMeta".torch.fx.experimental.recording.FakeTensorMeta*
fake
Any0:staticmethodh*Ÿ
__init__7torch.fx.experimental.recording.FakeTensorMeta.__init__"
None*j
self`
.torch.fx.experimental.recording.FakeTensorMeta".torch.fx.experimental.recording.FakeTensorMeta*∂
tensor_size§
0builtins.tuple[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"builtins.tuple*∏
tensor_stride§
0builtins.tuple[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"builtins.tuple*{
tensor_storage_offset`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt*-
	is_nested
builtins.bool"builtins.bool8r
tensor_size:torch.fx.experimental.recording.FakeTensorMeta.tensor_size§
0builtins.tuple[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"builtins.tuplerÙ
tensor_stride<torch.fx.experimental.recording.FakeTensorMeta.tensor_stride§
0builtins.tuple[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"builtins.tuplerø
tensor_storage_offsetDtorch.fx.experimental.recording.FakeTensorMeta.tensor_storage_offset`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymIntre
	is_nested8torch.fx.experimental.recording.FakeTensorMeta.is_nested
builtins.bool"builtins.boolrı
__dataclass_fields__Ctorch.fx.experimental.recording.FakeTensorMeta.__dataclass_fields__ó
2builtins.dict[builtins.str,dataclasses.Field[Any]]
builtins.str"builtins.str4
dataclasses.Field[Any]
Any"dataclasses.Field"builtins.dict°
NotEqualError-torch.fx.experimental.recording.NotEqualError"builtins.Exception*Ã
__init__6torch.fx.experimental.recording.NotEqualError.__init__"
None*h
self^
-torch.fx.experimental.recording.NotEqualError"-torch.fx.experimental.recording.NotEqualError*%
msg
builtins.str"builtins.str*Ï

mismatched€
<builtins.list[Tuple[builtins.str,builtins.str,builtins.str]]ã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str"builtins.listÄ
#_extract_shape_env_and_assert_equalCtorch.fx.experimental.recording._extract_shape_env_and_assert_equal*
args*

kwargs’
record_shapeenv_event5torch.fx.experimental.recording.record_shapeenv_event"K
CallableType[builtins.function]&
builtins.function"builtins.function*8
save_tracked_fakes
builtins.bool"builtins.bool ^
replay_shape_env_events7torch.fx.experimental.recording.replay_shape_env_events*

eventsõ
shape_env_check_state_equal;torch.fx.experimental.recording.shape_env_check_state_equal*
env1*
env2*
non_state_variable_names*
	map_value*õ
__annotations__/torch.fx.experimental.recording.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
pytreetorch.utils._pytree *L
log#torch.fx.experimental.recording.log 
logging.Logger"logging.Logger*~
__all__'torch.fx.experimental.recording.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list