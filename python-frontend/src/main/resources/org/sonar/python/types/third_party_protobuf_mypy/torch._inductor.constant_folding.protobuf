
 torch._inductor.constant_foldingÀ
ConstantFolder/torch._inductor.constant_folding.ConstantFolder" torch.fx.interpreter.Interpreter*o
__init__8torch._inductor.constant_folding.ConstantFolder.__init__*
self*
gm*
skip_constructors *ñ
	is_impure9torch._inductor.constant_folding.ConstantFolder.is_impure"
Any*l
selfb
/torch._inductor.constant_folding.ConstantFolder"/torch._inductor.constant_folding.ConstantFolder*2
node(
torch.fx.node.Node"torch.fx.node.Node*t
node_to_last_non_output_useKtorch._inductor.constant_folding.ConstantFolder.node_to_last_non_output_use*
self*X
run_node8torch._inductor.constant_folding.ConstantFolder.run_node*
self*
node*ª
insertable_tensor_checkGtorch._inductor.constant_folding.ConstantFolder.insertable_tensor_check"
builtins.bool"builtins.bool*l
selfb
/torch._inductor.constant_folding.ConstantFolder"/torch._inductor.constant_folding.ConstantFolder*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*Â
add_node_replacementDtorch._inductor.constant_folding.ConstantFolder.add_node_replacement"
None*l
selfb
/torch._inductor.constant_folding.ConstantFolder"/torch._inductor.constant_folding.ConstantFolder*2
node(
torch.fx.node.Node"torch.fx.node.Node*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*D
run3torch._inductor.constant_folding.ConstantFolder.run*
selfrÁ
node_replacementsAtorch._inductor.constant_folding.ConstantFolder.node_replacementsi
%builtins.dict[torch.fx.node.Node,Any](
torch.fx.node.Node"torch.fx.node.Node
Any"builtins.dictrØ
replaced_uses=torch._inductor.constant_folding.ConstantFolder.replaced_uses‡
.builtins.dict[torch.fx.node.Node,builtins.int](
torch.fx.node.Node"torch.fx.node.Node
builtins.int"builtins.int"builtins.dictrW
unknown_value=torch._inductor.constant_folding.ConstantFolder.unknown_value
Anyrv
skip_constructorsAtorch._inductor.constant_folding.ConstantFolder.skip_constructors
builtins.bool"builtins.bool…
replace_node_with_constant;torch._inductor.constant_folding.replace_node_with_constant*
gm*
node*
constant*

name ñ
run_and_get_constant_graph;torch._inductor.constant_folding.run_and_get_constant_graph"F
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*N
gmF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*œ
__annotations__0torch._inductor.constant_folding.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
pytreetorch.utils._pytree *6
aten%torch._inductor.constant_folding.aten
Any*S
META_TAG)torch._inductor.constant_folding.META_TAG
builtins.str"builtins.str*W

MODULE_TAG+torch._inductor.constant_folding.MODULE_TAG
builtins.str"builtins.str*c
CONST_MODULE_TAG1torch._inductor.constant_folding.CONST_MODULE_TAG
builtins.str"builtins.str