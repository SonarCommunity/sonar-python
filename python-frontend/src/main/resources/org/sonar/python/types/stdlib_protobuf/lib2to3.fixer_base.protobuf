
lib2to3.fixer_base¨.
BaseFixlib2to3.fixer_base.BaseFix"builtins.object*î
__init__#lib2to3.fixer_base.BaseFix.__init__"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*™
optionsú
2typing.MutableMapping[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"typing.MutableMapping*S
logJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listz36z37z38z39z310*†
compile_pattern*lib2to3.fixer_base.BaseFix.compile_pattern"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFixz36z37z38z39z310*ï
set_filename'lib2to3.fixer_base.BaseFix.set_filename"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*¯
filenameÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPathz36z37z38z39z310*∂
match lib2to3.fixer_base.BaseFix.match"å
OUnion[Literal[builtins.bool],builtins.dict[builtins.str,lib2to3.fixer_base._N]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool{
1builtins.dict[builtins.str,lib2to3.fixer_base._N]
builtins.str"builtins.str
lib2to3.fixer_base._N"builtins.dict*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*#
node
lib2to3.fixer_base._Nz36z37z38z39z310*ã
	transform$lib2to3.fixer_base.BaseFix.transform"ô
3Union[lib2to3.pytree.Node,lib2to3.pytree.Leaf,None]*
lib2to3.pytree.Node"lib2to3.pytree.Node*
lib2to3.pytree.Leaf"lib2to3.pytree.Leaf
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*4
node*
lib2to3.pytree.Base"lib2to3.pytree.Base*ò
resultsä
/builtins.dict[builtins.str,lib2to3.pytree.Base]
builtins.str"builtins.str*
lib2to3.pytree.Base"lib2to3.pytree.Base"builtins.dict0:abstractmethod@z36z37z38z39z310*‘
new_name#lib2to3.fixer_base.BaseFix.new_name"
builtins.str"builtins.str*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*,
template
builtins.str"builtins.str z36z37z38z39z310*√
log_message&lib2to3.fixer_base.BaseFix.log_message"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*)
message
builtins.str"builtins.strz36z37z38z39z310*®
cannot_convert)lib2to3.fixer_base.BaseFix.cannot_convert"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*4
node*
lib2to3.pytree.Base"lib2to3.pytree.Base*R
reasonD
Union[builtins.str,None]
builtins.str"builtins.str
None z36z37z38z39z310*
warning"lib2to3.fixer_base.BaseFix.warning"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*4
node*
lib2to3.pytree.Base"lib2to3.pytree.Base*(
reason
builtins.str"builtins.strz36z37z38z39z310*«

start_tree%lib2to3.fixer_base.BaseFix.start_tree"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*4
tree*
lib2to3.pytree.Node"lib2to3.pytree.Node*¯
filenameÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPathz36z37z38z39z310*…
finish_tree&lib2to3.fixer_base.BaseFix.finish_tree"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*4
tree*
lib2to3.pytree.Node"lib2to3.pytree.Node*¯
filenameÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPathz36z37z38z39z310j36j37j38j39j310rà
PATTERN"lib2to3.fixer_base.BaseFix.PATTERND
Union[builtins.str,None]
builtins.str"builtins.str
None*36*37*38*39*310rü
pattern"lib2to3.fixer_base.BaseFix.pattern[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None*36*37*38*39*310r©
pattern_tree'lib2to3.fixer_base.BaseFix.pattern_tree[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None*36*37*38*39*310rü
options"lib2to3.fixer_base.BaseFix.options[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None*36*37*38*39*310r°
filename#lib2to3.fixer_base.BaseFix.filename[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None*36*37*38*39*310ru
numbers"lib2to3.fixer_base.BaseFix.numbers1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310r{

used_names%lib2to3.fixer_base.BaseFix.used_names1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310rÈ
order lib2to3.fixer_base.BaseFix.order®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*36*37*38*39*310rd
explicit#lib2to3.fixer_base.BaseFix.explicit
builtins.bool"builtins.bool*36*37*38*39*310rd
	run_order$lib2to3.fixer_base.BaseFix.run_order
builtins.int"builtins.int*36*37*38*39*310rr
keep_line_order*lib2to3.fixer_base.BaseFix.keep_line_order
builtins.bool"builtins.bool*36*37*38*39*310rn
BM_compatible(lib2to3.fixer_base.BaseFix.BM_compatible
builtins.bool"builtins.bool*36*37*38*39*310ro
symslib2to3.fixer_base.BaseFix.syms1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310rm
loglib2to3.fixer_base.BaseFix.log1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310rf
	first_log$lib2to3.fixer_base.BaseFix.first_log
builtins.bool"builtins.bool*36*37*38*39*310Ã
ConditionalFix!lib2to3.fixer_base.ConditionalFix"lib2to3.fixer_base.BaseFix*»

start_tree,lib2to3.fixer_base.ConditionalFix.start_tree"
None*P
selfF
!lib2to3.fixer_base.ConditionalFix"!lib2to3.fixer_base.ConditionalFix*,*
lib2to3.pytree.Node"lib2to3.pytree.Node*ÏÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPathz36z37z38z39z310*˘
should_skip-lib2to3.fixer_base.ConditionalFix.should_skip"
builtins.bool"builtins.bool*P
selfF
!lib2to3.fixer_base.ConditionalFix"!lib2to3.fixer_base.ConditionalFix*4
node*
lib2to3.pytree.Base"lib2to3.pytree.Basez36z37z38z39z310@babc.ABCMetaj36j37j38j39j310rè
skip_on)lib2to3.fixer_base.ConditionalFix.skip_onD
Union[builtins.str,None]
builtins.str"builtins.str
None*36*37*38*39*310*£
__annotations__"lib2to3.fixer_base.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310