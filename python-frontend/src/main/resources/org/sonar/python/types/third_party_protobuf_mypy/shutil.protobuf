
shutil'
Errorshutil.Error"builtins.OSError3
SameFileErrorshutil.SameFileError"shutil.Error=
SpecialFileErrorshutil.SpecialFileError"builtins.OSError/
	ExecErrorshutil.ExecError"builtins.OSError/
	ReadErrorshutil.ReadError"builtins.OSError9
RegistryErrorshutil.RegistryError"builtins.ExceptionË
_RmtreeTypeshutil._RmtreeType"builtins.object*Ã
__call__shutil._RmtreeType.__call__"
None*2
self(
shutil._RmtreeType"shutil._RmtreeType*¡
path∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*3
ignore_errors
builtins.bool"builtins.bool *Î
onerror€
6Union[TypeAlias[CallableType[builtins.function]],None]î
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"shutil._OnErrorCallback
None Xrc
avoids_symlink_attacks)shutil._RmtreeType.avoids_symlink_attacks
builtins.bool"builtins.boolç
_ntuple_diskusageshutil._ntuple_diskusage"builtins.tuple*˚
_replace!shutil._ntuple_diskusage._replace" 
shutil._ntuple_diskusage._NT*+
_self 
shutil._ntuple_diskusage._NT*)
total
builtins.int"builtins.int *(
used
builtins.int"builtins.int *(
free
builtins.int"builtins.int *ö
__new__ shutil._ntuple_diskusage.__new__" 
shutil._ntuple_diskusage._NT*R
_clsH
"Type[shutil._ntuple_diskusage._NT] 
shutil._ntuple_diskusage._NT*'
total
builtins.int"builtins.int*&
used
builtins.int"builtins.int*&
free
builtins.int"builtins.int*±
_asdict shutil._ntuple_diskusage._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*+
_self 
shutil._ntuple_diskusage._NT*ñ
_makeshutil._ntuple_diskusage._make" 
shutil._ntuple_diskusage._NT*R
_clsH
"Type[shutil._ntuple_diskusage._NT] 
shutil._ntuple_diskusage._NT*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprE
totalshutil._ntuple_diskusage.total
builtins.int"builtins.intrC
usedshutil._ntuple_diskusage.used
builtins.int"builtins.intrC
freeshutil._ntuple_diskusage.free
builtins.int"builtins.intrE
totalshutil._ntuple_diskusage.total
builtins.int"builtins.intrC
usedshutil._ntuple_diskusage.used
builtins.int"builtins.intrC
freeshutil._ntuple_diskusage.free
builtins.int"builtins.intrπ
_fields shutil._ntuple_diskusage._fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strré
_field_types%shutil._ntuple_diskusage._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrî
_field_defaults(shutil._ntuple_diskusage._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrI
_source shutil._ntuple_diskusage._source
builtins.str"builtins.strrî
__annotations__(shutil._ntuple_diskusage.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictï
copyfileobjshutil.copyfileobj"
None*\
fsrcR
%_typeshed.SupportsRead[typing.AnyStr]
typing.AnyStr"_typeshed.SupportsRead*^
fdstT
&_typeshed.SupportsWrite[typing.AnyStr]
typing.AnyStr"_typeshed.SupportsWrite**
length
builtins.int"builtins.int ÿ
copyfileshutil.copyfile"
shutil._StrOrBytesPathT*¿
src∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*$
dst
shutil._StrOrBytesPathT*5
follow_symlinks
builtins.bool"builtins.bool ‚
copymodeshutil.copymode"
None*¿
src∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*¿
dst∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*5
follow_symlinks
builtins.bool"builtins.bool ‚
copystatshutil.copystat"
None*¿
src∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*¿
dst∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*5
follow_symlinks
builtins.bool"builtins.bool Ò
ignore_patternsshutil.ignore_patterns"K
CallableType[builtins.function]&
builtins.function"builtins.function*¯
patternsÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPathƒ
copytreeshutil.copytree"/
TypeAlias[Any]
Any"shutil._PathReturn*Û
srcÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*Û
dstÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*.
symlinks
builtins.bool"builtins.bool *Ç
ignoreÛ
KUnion[None,CallableType[builtins.function],CallableType[builtins.function]]
NoneK
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function *`
copy_functionK
CallableType[builtins.function]&
builtins.function"builtins.function *>
ignore_dangling_symlinks
builtins.bool"builtins.bool *3
dirs_exist_ok
builtins.bool"builtins.bool ∆
moveshutil.move"/
TypeAlias[Any]
Any"shutil._PathReturn*%
src
builtins.str"builtins.str*Û
dstÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*‚
copy_functionÃ
QTypeAlias[Union[CallableType[builtins.function],CallableType[builtins.function]]]‰
FUnion[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function"shutil._CopyFn ê

disk_usageshutil.disk_usage"‰
8TypeAlias[Tuple[builtins.int,builtins.int,builtins.int]]ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"shutil._ntuple_diskusage*á
path¸
ÇTypeAlias[Union[builtins.int,TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]]]“
wUnion[builtins.int,TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]]
builtins.int"builtins.int∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath"_typeshed.FileDescriptorOrPathˆ
make_archiveshutil.make_archive"
builtins.str"builtins.str*+
	base_name
builtins.str"builtins.str*(
format
builtins.str"builtins.str*œ
root_diræ
DUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]È
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath
None *œ
base_diræ
DUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]È
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath
None *-
verbose
builtins.bool"builtins.bool *-
dry_run
builtins.bool"builtins.bool *Q
ownerD
Union[builtins.str,None]
builtins.str"builtins.str
None *Q
groupD
Union[builtins.str,None]
builtins.str"builtins.str
None *4
logger&
Union[Any,None]
Any
None ÷
get_archive_formatsshutil.get_archive_formats"¢
/builtins.list[Tuple[builtins.str,builtins.str]]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.listo
unregister_archive_format shutil.unregister_archive_format"
None*&
name
builtins.str"builtins.str’
unpack_archiveshutil.unpack_archive"
None*¯
filenameÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*“
extract_diræ
DUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]È
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath
None *R
formatD
Union[builtins.str,None]
builtins.str"builtins.str
None m
unregister_unpack_formatshutil.unregister_unpack_format"
None*&
name
builtins.str"builtins.strŸ
get_unpack_formatsshutil.get_unpack_formats"ß
Kbuiltins.list[Tuple[builtins.str,builtins.list[builtins.str],builtins.str]]»
<Tuple[builtins.str,builtins.list[builtins.str],builtins.str]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.str"builtins.str"builtins.list≈
get_terminal_sizeshutil.get_terminal_size"£
+TypeAlias[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"os.terminal_size*p
fallback`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int "´

copyshutil.copyı
copyshutil.copy"/
TypeAlias[Any]
Any"shutil._PathReturn*Û
srcÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*Û
dstÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*5
follow_symlinks
builtins.bool"builtins.bool 0:overloadXù
copyshutil.copy"/
TypeAlias[Any]
Any"shutil._PathReturn*á
src˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath*á
dst˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath*5
follow_symlinks
builtins.bool"builtins.bool 0:overloadX"±

copy2shutil.copy2˜
copy2shutil.copy2"/
TypeAlias[Any]
Any"shutil._PathReturn*Û
srcÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*Û
dstÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*5
follow_symlinks
builtins.bool"builtins.bool 0:overloadXü
copy2shutil.copy2"/
TypeAlias[Any]
Any"shutil._PathReturn*á
src˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath*á
dst˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath*5
follow_symlinks
builtins.bool"builtins.bool 0:overloadX"≈
chownshutil.chownÙ
chownshutil.chown"
None*¡
path∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*j
user`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*
group
None 0:overloadXÙ
chownshutil.chown"
None*¡
path∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*
user
None *k
group`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int0:overloadXÚ
chownshutil.chown"
None*¡
path∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*
user
None*k
group`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int0:overloadX 
chownshutil.chown"
None*¡
path∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*j
user`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*k
group`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int0:overloadX"‘
whichshutil.whichß
whichshutil.which"k
)Union[builtins.str,shutil._StrPathT,None]
builtins.str"builtins.str
shutil._StrPathT
None*
cmd
shutil._StrPathT*(
mode
builtins.int"builtins.int *À
pathæ
DUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]È
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath
None 0:overloadXí
whichshutil.which"J
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None*)
cmd 
builtins.bytes"builtins.bytes*(
mode
builtins.int"builtins.int *À
pathæ
DUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]È
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath
None 0:overloadX"¯
register_archive_formatshutil.register_archive_formatò
register_archive_formatshutil.register_archive_format"
None*&
name
builtins.str"builtins.str*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function*ê

extra_argsˇ
Btyping.Sequence[Union[Tuple[builtins.str,Any],builtins.list[Any]]]ß
1Union[Tuple[builtins.str,Any],builtins.list[Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any,
builtins.list[Any]
Any"builtins.list"typing.Sequence*/
description
builtins.str"builtins.str 0:overloadX°
register_archive_formatshutil.register_archive_format"
None*&
name
builtins.str"builtins.str*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function*

extra_args
None */
description
builtins.str"builtins.str 0:overloadX"©
register_unpack_formatshutil.register_unpack_formatÒ
register_unpack_formatshutil.register_unpack_format"
None*&
name
builtins.str"builtins.str*Z

extensionsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function*è

extra_args
(typing.Sequence[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Sequence*/
description
builtins.str"builtins.str 0:overloadX˚
register_unpack_formatshutil.register_unpack_format"
None*&
name
builtins.str"builtins.str*Z

extensionsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function*

extra_args
None */
description
builtins.str"builtins.str 0:overloadX*Ç
__annotations__shutil.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*e
__all__shutil.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*A
rmtreeshutil.rmtree(
shutil._RmtreeType"shutil._RmtreeType