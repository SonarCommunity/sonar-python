
torch.nn.modules.flattenà
Flatten torch.nn.modules.flatten.Flatten"torch.nn.modules.module.Module*Î
__init__)torch.nn.modules.flatten.Flatten.__init__"
None*N
selfD
 torch.nn.modules.flatten.Flatten" torch.nn.modules.flatten.Flatten*-
	start_dim
builtins.int"builtins.int *+
end_dim
builtins.int"builtins.int *Í
forward(torch.nn.modules.flatten.Flatten.forward",
torch._tensor.Tensor"torch._tensor.Tensor*N
selfD
 torch.nn.modules.flatten.Flatten" torch.nn.modules.flatten.Flatten*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*ß

extra_repr+torch.nn.modules.flatten.Flatten.extra_repr"
builtins.str"builtins.str*N
selfD
 torch.nn.modules.flatten.Flatten" torch.nn.modules.flatten.Flattenrã
__constants__.torch.nn.modules.flatten.Flatten.__constants__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrU
	start_dim*torch.nn.modules.flatten.Flatten.start_dim
builtins.int"builtins.intrQ
end_dim(torch.nn.modules.flatten.Flatten.end_dim
builtins.int"builtins.int‰
	Unflatten"torch.nn.modules.flatten.Unflatten"torch.nn.modules.module.Module*©
__init__+torch.nn.modules.flatten.Unflatten.__init__"
None*R
selfH
"torch.nn.modules.flatten.Unflatten""torch.nn.modules.flatten.Unflatten*i
dim`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*¶
unflattened_sizeè
íUnion[TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],TypeAlias[Tuple[Tuple[builtins.str,builtins.int]]]]˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._sizeı
2TypeAlias[Tuple[Tuple[builtins.str,builtins.int]]]ç
'Tuple[Tuple[builtins.str,builtins.int]]`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"-torch.nn.modules.flatten.Unflatten.NamedShape*d
_require_tuple_tuple7torch.nn.modules.flatten.Unflatten._require_tuple_tuple*
self*	
input*`
_require_tuple_int5torch.nn.modules.flatten.Unflatten._require_tuple_int*
self*	
input*
forward*torch.nn.modules.flatten.Unflatten.forward",
torch._tensor.Tensor"torch._tensor.Tensor*R
selfH
"torch.nn.modules.flatten.Unflatten""torch.nn.modules.flatten.Unflatten*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*≠

extra_repr-torch.nn.modules.flatten.Unflatten.extra_repr"
builtins.str"builtins.str*R
selfH
"torch.nn.modules.flatten.Unflatten""torch.nn.modules.flatten.Unflattenrç
__constants__0torch.nn.modules.flatten.Unflatten.__constants__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrè
dim&torch.nn.modules.flatten.Unflatten.dim`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strrŸ
unflattened_size3torch.nn.modules.flatten.Unflatten.unflattened_sizeè
íUnion[TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],TypeAlias[Tuple[Tuple[builtins.str,builtins.int]]]]˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._sizeı
2TypeAlias[Tuple[Tuple[builtins.str,builtins.int]]]ç
'Tuple[Tuple[builtins.str,builtins.int]]`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"-torch.nn.modules.flatten.Unflatten.NamedShape*î
__annotations__(torch.nn.modules.flatten.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*w
__all__ torch.nn.modules.flatten.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list