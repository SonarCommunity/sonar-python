
typing∫1
Matchre.Match"builtins.object*Å
posre.Match.pos"
builtins.int"builtins.int*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match0:property`*á
endposre.Match.endpos"
builtins.int"builtins.int*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match0:property`*µ
	lastindexre.Match.lastindex"D
Union[builtins.int,None]
builtins.int"builtins.int
None*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match0:property`*µ
	lastgroupre.Match.lastgroup"D
Union[builtins.str,None]
builtins.str"builtins.str
None*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match0:property`*|
stringre.Match.string"
typing.AnyStr*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match0:property`*ù
rere.Match.re":
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match0:property`*›
startre.Match.start"
builtins.int"builtins.int*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*d`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str *Ÿ
endre.Match.end"
builtins.int"builtins.int*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*d`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str *ü
spanre.Match.span"`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*d`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str *å
regsre.Match.regs"§
0builtins.tuple[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.tuple*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match0:property`*ó
__copy__re.Match.__copy__"6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*™
__deepcopy__re.Match.__deepcopy__"6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*	
Any2ˇ

expandre.Match.expandΩ
expandre.Match.expand"
builtins.str"builtins.str*J
self@
re.Match[builtins.str]
builtins.str"builtins.str"re.Match**
template
builtins.str"builtins.str0:overloadXÉ
expandre.Match.expand" 
builtins.bytes"builtins.bytes*P
selfF
re.Match[builtins.bytes] 
builtins.bytes"builtins.bytes"re.Match*Â
template÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer0:overloadXù
expandre.Match.expand"
typing.AnyStr*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*
template
typing.AnyStr0:overloadX2Ô
groupre.Match.group∑
groupre.Match.group"
typing.AnyStr*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*;7
Literal[builtins.int]	
builtins.int"builtins.int 0:overloadXÖ
groupre.Match.group"8
Union[typing.AnyStr,Any]
typing.AnyStr
Any*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*b`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int0:overloadXì
groupre.Match.group"t
(builtins.tuple[Union[typing.AnyStr,Any]]8
Union[typing.AnyStr,Any]
typing.AnyStr
Any"builtins.tuple*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*b`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*b`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*l
groups`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int0:overloadX2˚
groupsre.Match.groupsﬂ
groupsre.Match.groups"t
(builtins.tuple[Union[typing.AnyStr,Any]]8
Union[typing.AnyStr,Any]
typing.AnyStr
Any"builtins.tuple*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match0:overloadX˝
groupsre.Match.groups"z
*builtins.tuple[Union[typing.AnyStr,re._T]]<
Union[typing.AnyStr,re._T]
typing.AnyStr	
re._T"builtins.tuple*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*
default	
re._T0:overloadX2·
	groupdictre.Match.groupdictè
	groupdictre.Match.groupdict"ù
4builtins.dict[builtins.str,Union[typing.AnyStr,Any]]
builtins.str"builtins.str8
Union[typing.AnyStr,Any]
typing.AnyStr
Any"builtins.dict*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match0:overloadX≠
	groupdictre.Match.groupdict"£
6builtins.dict[builtins.str,Union[typing.AnyStr,re._T]]
builtins.str"builtins.str<
Union[typing.AnyStr,re._T]
typing.AnyStr	
re._T"builtins.dict*@
self6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*
default	
re._T0:overloadX2Î
__getitem__re.Match.__getitem__π
__getitem__re.Match.__getitem__"
typing.AnyStr*86
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*97
Literal[builtins.int]	
builtins.int"builtins.int0:overloadXâ
__getitem__re.Match.__getitem__"8
Union[typing.AnyStr,Any]
typing.AnyStr
Any*86
re.Match[typing.AnyStr]
typing.AnyStr"re.Match*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str0:overloadX8P±í
Pattern
re.Pattern"builtins.object*ã
flagsre.Pattern.flags"
builtins.int"builtins.int*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern0:property`*

groupindexre.Pattern.groupindex"w
)typing.Mapping[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Mapping*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern0:property`*ç
groupsre.Pattern.groups"
builtins.int"builtins.int*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern0:property`*Ñ
patternre.Pattern.pattern"
typing.AnyStr*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern0:property`*°
__copy__re.Pattern.__copy__":
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*¥
__deepcopy__re.Pattern.__deepcopy__":
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*	
Any2î
searchre.Pattern.searchÏ
searchre.Pattern.search"r
"Union[re.Match[builtins.str],None]@
re.Match[builtins.str]
builtins.str"builtins.str"re.Match
None*N
selfD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*(
string
builtins.str"builtins.str*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadX∂	
searchre.Pattern.search"z
$Union[re.Match[builtins.bytes],None]F
re.Match[builtins.bytes] 
builtins.bytes"builtins.bytes"re.Match
None*T
selfJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadXŒ
searchre.Pattern.search"i
#Union[re.Match[typing.AnyStr],None]6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match
None*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*
string
typing.AnyStr*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadX2å
matchre.Pattern.matchÍ
matchre.Pattern.match"r
"Union[re.Match[builtins.str],None]@
re.Match[builtins.str]
builtins.str"builtins.str"re.Match
None*N
selfD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*(
string
builtins.str"builtins.str*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadX¥	
matchre.Pattern.match"z
$Union[re.Match[builtins.bytes],None]F
re.Match[builtins.bytes] 
builtins.bytes"builtins.bytes"re.Match
None*T
selfJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadXÃ
matchre.Pattern.match"i
#Union[re.Match[typing.AnyStr],None]6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match
None*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*
string
typing.AnyStr*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadX2¨
	fullmatchre.Pattern.fullmatchÚ
	fullmatchre.Pattern.fullmatch"r
"Union[re.Match[builtins.str],None]@
re.Match[builtins.str]
builtins.str"builtins.str"re.Match
None*N
selfD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*(
string
builtins.str"builtins.str*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadXº	
	fullmatchre.Pattern.fullmatch"z
$Union[re.Match[builtins.bytes],None]F
re.Match[builtins.bytes] 
builtins.bytes"builtins.bytes"re.Match
None*T
selfJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadX‘
	fullmatchre.Pattern.fullmatch"i
#Union[re.Match[typing.AnyStr],None]6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match
None*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*
string
typing.AnyStr*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadX2≥
splitre.Pattern.splitÃ
splitre.Pattern.split"{
&builtins.list[Union[builtins.str,Any]]B
Union[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.list*N
selfD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*(
string
builtins.str"builtins.str*,
maxsplit
builtins.int"builtins.int 0:overloadXó	
splitre.Pattern.split"É
(builtins.list[Union[builtins.bytes,Any]]H
Union[builtins.bytes,Any] 
builtins.bytes"builtins.bytes
Any"builtins.list*T
selfJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*,
maxsplit
builtins.int"builtins.int 0:overloadXÆ
splitre.Pattern.split"r
'builtins.list[Union[typing.AnyStr,Any]]8
Union[typing.AnyStr,Any]
typing.AnyStr
Any"builtins.list*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*
string
typing.AnyStr*,
maxsplit
builtins.int"builtins.int 0:overloadX2ﬂ
findallre.Pattern.findall®
findallre.Pattern.findall",
builtins.list[Any]
Any"builtins.list*N
selfD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*(
string
builtins.str"builtins.str*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadXÍ
findallre.Pattern.findall",
builtins.list[Any]
Any"builtins.list*T
selfJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadXß
findallre.Pattern.findall"@
builtins.list[typing.AnyStr]
typing.AnyStr"builtins.list*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*
string
typing.AnyStr*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadX2√
finditerre.Pattern.finditer˙
finditerre.Pattern.finditer"|
'typing.Iterator[re.Match[builtins.str]]@
re.Match[builtins.str]
builtins.str"builtins.str"re.Match"typing.Iterator*N
selfD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*(
string
builtins.str"builtins.str*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadX≈	
finditerre.Pattern.finditer"Ñ
)typing.Iterator[re.Match[builtins.bytes]]F
re.Match[builtins.bytes] 
builtins.bytes"builtins.bytes"re.Match"typing.Iterator*T
selfJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadX‹
finditerre.Pattern.finditer"s
(typing.Iterator[re.Match[typing.AnyStr]]6
re.Match[typing.AnyStr]
typing.AnyStr"re.Match"typing.Iterator*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*
string
typing.AnyStr*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 0:overloadX2¬
subre.Pattern.subñ
subre.Pattern.sub"
builtins.str"builtins.str*N
selfD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*≠
repl¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function*(
string
builtins.str"builtins.str*)
count
builtins.int"builtins.int 0:overloadX¢
subre.Pattern.sub" 
builtins.bytes"builtins.bytes*T
selfJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*Û
replË
ΩUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferK
CallableType[builtins.function]&
builtins.function"builtins.function*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
count
builtins.int"builtins.int 0:overloadXÏ
subre.Pattern.sub"
typing.AnyStr*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*£
replò
4Union[typing.AnyStr,CallableType[builtins.function]]
typing.AnyStrK
CallableType[builtins.function]&
builtins.function"builtins.function*
string
typing.AnyStr*)
count
builtins.int"builtins.int 0:overloadX2ô
subnre.Pattern.subn‹
subnre.Pattern.subn"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*N
selfD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*≠
repl¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function*(
string
builtins.str"builtins.str*)
count
builtins.int"builtins.int 0:overloadXÍ
subnre.Pattern.subn"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*T
selfJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*Û
replË
ΩUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferK
CallableType[builtins.function]&
builtins.function"builtins.function*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
count
builtins.int"builtins.int 0:overloadX≥
subnre.Pattern.subn"V
!Tuple[typing.AnyStr,builtins.int]
typing.AnyStr
builtins.int"builtins.int*D
self:
re.Pattern[typing.AnyStr]
typing.AnyStr"
re.Pattern*£
replò
4Union[typing.AnyStr,CallableType[builtins.function]]
typing.AnyStrK
CallableType[builtins.function]&
builtins.function"builtins.function*
string
typing.AnyStr*)
count
builtins.int"builtins.int 0:overloadX8PÌ


_ParamSpectyping_extensions.ParamSpec"builtins.object*˙
__init__$typing_extensions.ParamSpec.__init__"
None*D
self:
typing_extensions.ParamSpec"typing_extensions.ParamSpec*&
name
builtins.str"builtins.str*s
boundf
"Union[None,Type[Any],builtins.str]
None
	Type[Any]
Any
builtins.str"builtins.str *3
contravariant
builtins.bool"builtins.bool */
	covariant
builtins.bool"builtins.bool *u
defaultf
"Union[Type[Any],builtins.str,None]
	Type[Any]
Any
builtins.str"builtins.str
None *¿
args typing_extensions.ParamSpec.args"B
typing_extensions.ParamSpecArgs"typing_extensions.ParamSpecArgs*D
self:
typing_extensions.ParamSpec"typing_extensions.ParamSpec0:property`*»
kwargs"typing_extensions.ParamSpec.kwargs"F
!typing_extensions.ParamSpecKwargs"!typing_extensions.ParamSpecKwargs*D
self:
typing_extensions.ParamSpec"typing_extensions.ParamSpec0:property`8ro
	__bound__%typing_extensions.ParamSpec.__bound__;
Union[Type[Any],None]
	Type[Any]
Any
NonerZ
__covariant__)typing_extensions.ParamSpec.__covariant__
builtins.bool"builtins.boolrb
__contravariant__-typing_extensions.ParamSpec.__contravariant__
builtins.bool"builtins.boolrs
__default__'typing_extensions.ParamSpec.__default__;
Union[Type[Any],None]
	Type[Any]
Any
NoneΩ
TypeVartyping.TypeVar"builtins.object*∂
__init__typing.TypeVar.__init__"
None**
self 
typing.TypeVar"typing.TypeVar*&
name
builtins.str"builtins.str*
constraints
Any*3
bound&
Union[Any,None]
Any
None */
	covariant
builtins.bool"builtins.bool *3
contravariant
builtins.bool"builtins.bool 8rM
	__bound__typing.TypeVar.__bound__&
Union[Any,None]
Any
Nonera
__constraints__typing.TypeVar.__constraints__.
builtins.tuple[Any]
Any"builtins.tuplerM
__covariant__typing.TypeVar.__covariant__
builtins.bool"builtins.boolrU
__contravariant__ typing.TypeVar.__contravariant__
builtins.bool"builtins.boolƒ
_SpecialFormtyping._SpecialForm"builtins.object*ã
__getitem__typing._SpecialForm.__getitem__""
builtins.object"builtins.object*,*
typing._SpecialForm"typing._SpecialForm*	
Any8à
_Aliastyping._Alias"builtins.object*^
__getitem__typing._Alias.__getitem__"
Any* 
typing._Alias"typing._Alias*	
Any2
_ProtocolMetatyping._ProtocolMeta"abc.ABCMetaÀ
SupportsInttyping.SupportsInt"builtins.object*É
__int__typing.SupportsInt.__int__"
builtins.int"builtins.int**(
typing.SupportsInt"typing.SupportsInt0:abstractmethod@8@Xbabc.ABCMeta›
SupportsFloattyping.SupportsFloat"builtins.object*ë
	__float__typing.SupportsFloat.__float__" 
builtins.float"builtins.float*.,
typing.SupportsFloat"typing.SupportsFloat0:abstractmethod@8@Xbabc.ABCMetaÔ
SupportsComplextyping.SupportsComplex"builtins.object*ü
__complex__"typing.SupportsComplex.__complex__"$
builtins.complex"builtins.complex*20
typing.SupportsComplex"typing.SupportsComplex0:abstractmethod@8@Xbabc.ABCMetaÂ
SupportsBytestyping.SupportsBytes"builtins.object*ô
	__bytes__typing.SupportsBytes.__bytes__" 
builtins.bytes"builtins.bytes*6
self,
typing.SupportsBytes"typing.SupportsBytes0:abstractmethod@8@Xbabc.ABCMeta·
SupportsIndextyping.SupportsIndex"builtins.object*ï
	__index__typing.SupportsIndex.__index__"
builtins.int"builtins.int*6
self,
typing.SupportsIndex"typing.SupportsIndex0:abstractmethod@8@Xbabc.ABCMeta“
SupportsAbstyping.SupportsAbs"builtins.object*ó
__abs__typing.SupportsAbs.__abs__"
typing._T_co*JH
 typing.SupportsAbs[typing._T_co]
typing._T_co"typing.SupportsAbs0:abstractmethod@8PXÜ
SupportsRoundtyping.SupportsRound"builtins.object2«
	__round__typing.SupportsRound.__round__¡
	__round__typing.SupportsRound.__round__"
builtins.int"builtins.int*V
selfL
"typing.SupportsRound[typing._T_co]
typing._T_co"typing.SupportsRound0:overload:abstractmethod@X’
	__round__typing.SupportsRound.__round__"
typing._T_co*V
selfL
"typing.SupportsRound[typing._T_co]
typing._T_co"typing.SupportsRound*
builtins.int"builtins.int0:overload:abstractmethod@X8PX¨
Sizedtyping.Sized"builtins.object*q
__len__typing.Sized.__len__"
builtins.int"builtins.int*
typing.Sized"typing.Sized0:abstractmethod@8@Xbabc.ABCMeta∆
Hashabletyping.Hashable"builtins.object*Ñ
__hash__typing.Hashable.__hash__"
builtins.int"builtins.int*,
self"
typing.Hashable"typing.Hashable0:abstractmethod@8@Xbabc.ABCMeta˜
Iterabletyping.Iterable"builtins.object*¬
__iter__typing.Iterable.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*DB
typing.Iterable[typing._T_co]
typing._T_co"typing.Iterable0:abstractmethod@8PX˛
Iteratortyping.Iterator"typing.Iterable*ò
__next__typing.Iterator.__next__"
typing._T_co*L
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator0:abstractmethod@*Æ
__iter__typing.Iterator.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*DB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator8PXâ

Reversibletyping.Reversible"typing.Iterable*–
__reversed__typing.Reversible.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*HF
typing.Reversible[typing._T_co]
typing._T_co"typing.Reversible0:abstractmethod@8PXê
	Generatortyping.Generator"typing.Iterator*œ
__next__typing.Generator.__next__"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*Û
sendtyping.Generator.send"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*
typing._T_contra0:abstractmethod@*¡
closetyping.Generator.close"
None*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*¬
__iter__typing.Generator.__iter__"ä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*çä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*Î
gi_codetyping.Generator.gi_code" 
types.CodeType"types.CodeType*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`*Ô
gi_frametyping.Generator.gi_frame""
types.FrameType"types.FrameType*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`*Ô

gi_runningtyping.Generator.gi_running"
builtins.bool"builtins.bool*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`*€
gi_yieldfromtyping.Generator.gi_yieldfrom"Ö
)Union[typing.Generator[Any,Any,Any],None]L
typing.Generator[Any,Any,Any]
Any
Any
Any"typing.Generator
None*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`2‹
throwtyping.Generator.throw≠
throwtyping.Generator.throw"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*TR
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException*åá
-Union[builtins.BaseException,builtins.object]0
builtins.BaseException"builtins.BaseException"
builtins.object"builtins.object *]Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@Xä
throwtyping.Generator.throw"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*20
builtins.BaseException"builtins.BaseException*
None *]Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@XP§
	Awaitabletyping.Awaitable"builtins.object*Ì
	__await__typing.Awaitable.__await__"`
'typing.Generator[Any,None,typing._T_co]
Any
None
typing._T_co"typing.Generator*N
selfD
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable0:abstractmethod@8PXÛ
	Coroutinetyping.Coroutine"typing.Awaitable*Û
cr_awaittyping.Coroutine.cr_await"&
Union[Any,None]
Any
None*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine0:property`*Î
cr_codetyping.Coroutine.cr_code" 
types.CodeType"types.CodeType*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine0:property`*Ô
cr_frametyping.Coroutine.cr_frame""
types.FrameType"types.FrameType*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine0:property`*Ô

cr_runningtyping.Coroutine.cr_running"
builtins.bool"builtins.bool*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine0:property`*Û
sendtyping.Coroutine.send"
typing._T_co*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine*
typing._T_contra0:abstractmethod@*’
closetyping.Coroutine.close"
None*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine0:abstractmethod@2‹
throwtyping.Coroutine.throw≠
throwtyping.Coroutine.throw"
typing._T_co*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine*TR
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException*åá
-Union[builtins.BaseException,builtins.object]0
builtins.BaseException"builtins.BaseException"
builtins.object"builtins.object *]Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@Xä
throwtyping.Coroutine.throw"
typing._T_co*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine*20
builtins.BaseException"builtins.BaseException*
None *]Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@XPrK
__qualname__typing.Coroutine.__qualname__
builtins.str"builtins.strf
AwaitableGeneratortyping.AwaitableGenerator"typing.Awaitable"typing.Generator8@Pbabc.ABCMeta§
AsyncIterabletyping.AsyncIterable"builtins.object*Â
	__aiter__typing.AsyncIterable.__aiter__"L
"typing.AsyncIterator[typing._T_co]
typing._T_co"typing.AsyncIterator*V
selfL
"typing.AsyncIterable[typing._T_co]
typing._T_co"typing.AsyncIterable0:abstractmethod@8PXı
AsyncIteratortyping.AsyncIterator"typing.AsyncIterable*›
	__anext__typing.AsyncIterator.__anext__"D
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable*V
selfL
"typing.AsyncIterator[typing._T_co]
typing._T_co"typing.AsyncIterator0:abstractmethod@*—
	__aiter__typing.AsyncIterator.__aiter__"L
"typing.AsyncIterator[typing._T_co]
typing._T_co"typing.AsyncIterator*V
selfL
"typing.AsyncIterator[typing._T_co]
typing._T_co"typing.AsyncIterator8PXæ
AsyncGeneratortyping.AsyncGenerator"typing.AsyncIterator*Û
	__anext__typing.AsyncGenerator.__anext__"D
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator*ó
asendtyping.AsyncGenerator.asend"D
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator*
typing._T_contra0:abstractmethod@*›
aclosetyping.AsyncGenerator.aclose"4
typing.Awaitable[None]
None"typing.Awaitable*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator*¬
ag_awaittyping.AsyncGenerator.ag_await"
Any*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator0:property`*Ÿ
ag_codetyping.AsyncGenerator.ag_code" 
types.CodeType"types.CodeType*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator0:property`*›
ag_frametyping.AsyncGenerator.ag_frame""
types.FrameType"types.FrameType*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator0:property`*›

ag_running typing.AsyncGenerator.ag_running"
builtins.bool"builtins.bool*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator0:property`2´
athrowtyping.AsyncGenerator.athrow—
athrowtyping.AsyncGenerator.athrow"D
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator*TR
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException*åá
-Union[builtins.BaseException,builtins.object]0
builtins.BaseException"builtins.BaseException"
builtins.object"builtins.object *]Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@XÆ
athrowtyping.AsyncGenerator.athrow"D
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator*20
builtins.BaseException"builtins.BaseException*
None *]Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@XPÜ
	Containertyping.Container"builtins.object*œ
__contains__typing.Container.__contains__"
builtins.bool"builtins.bool*FD
typing.Container[typing._T_co]
typing._T_co"typing.Container*$"
builtins.object"builtins.object0:abstractmethod@8PXÎ

Collectiontyping.Collection"typing.Iterable"typing.Container*†
__len__typing.Collection.__len__"
builtins.int"builtins.int*HF
typing.Collection[typing._T_co]
typing._T_co"typing.Collection0:abstractmethod@8PXÏ
Sequencetyping.Sequence"typing.Collection"typing.Reversible*Û
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*)
start
builtins.int"builtins.int *(
stop
builtins.int"builtins.int *û
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*∏
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*DB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*$"
builtins.object"builtins.object*Æ
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*DB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*∂
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*DB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence2Í
__getitem__typing.Sequence.__getitem__¬
__getitem__typing.Sequence.__getitem__"
typing._T_co*DB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
builtins.int"builtins.int0:overload:abstractmethod@X¯
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*DB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*" 
builtins.slice"builtins.slice0:overload:abstractmethod@XPª
MutableSequencetyping.MutableSequence"typing.Sequence*ﬁ
inserttyping.MutableSequence.insert"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*'
index
builtins.int"builtins.int*
value
	typing._T0:abstractmethod@*°
appendtyping.MutableSequence.append"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*
value
	typing._T*Ö
cleartyping.MutableSequence.clear"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*—
extendtyping.MutableSequence.extend"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*H
values<
typing.Iterable[typing._T]
	typing._T"typing.Iterable*â
reversetyping.MutableSequence.reverse"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*±
poptyping.MutableSequence.pop"
	typing._T*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*)
index
builtins.int"builtins.int *°
removetyping.MutableSequence.remove"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*
value
	typing._T*Ø
__iadd__typing.MutableSequence.__iadd__"
typing.MutableSequence.Self*!
typing.MutableSequence.Self*><
typing.Iterable[typing._T]
	typing._T"typing.Iterable2î
__getitem__"typing.MutableSequence.__getitem__Œ
__getitem__"typing.MutableSequence.__getitem__"
	typing._T*LJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*
builtins.int"builtins.int0:overload:abstractmethod@Xè
__getitem__"typing.MutableSequence.__getitem__"J
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*LJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*" 
builtins.slice"builtins.slice0:overload:abstractmethod@X2û
__setitem__"typing.MutableSequence.__setitem__⁄
__setitem__"typing.MutableSequence.__setitem__"
None*LJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*
builtins.int"builtins.int*
	typing._T0:overload:abstractmethod@Xç
__setitem__"typing.MutableSequence.__setitem__"
None*LJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*" 
builtins.slice"builtins.slice*><
typing.Iterable[typing._T]
	typing._T"typing.Iterable0:overload:abstractmethod@X2Õ
__delitem__"typing.MutableSequence.__delitem__…
__delitem__"typing.MutableSequence.__delitem__"
None*LJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*
builtins.int"builtins.int0:overload:abstractmethod@XÕ
__delitem__"typing.MutableSequence.__delitem__"
None*LJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*" 
builtins.slice"builtins.slice0:overload:abstractmethod@XP±
AbstractSettyping.AbstractSet"typing.Collection*’
__contains__typing.AbstractSet.__contains__"
builtins.bool"builtins.bool*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*$"
builtins.object"builtins.object0:abstractmethod@*ì
_hashtyping.AbstractSet._hash"
builtins.int"builtins.int*R
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*…
__le__typing.AbstractSet.__le__"
builtins.bool"builtins.bool*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*…
__lt__typing.AbstractSet.__lt__"
builtins.bool"builtins.bool*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*…
__gt__typing.AbstractSet.__gt__"
builtins.bool"builtins.bool*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*…
__ge__typing.AbstractSet.__ge__"
builtins.bool"builtins.bool*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*ı
__and__typing.AbstractSet.__and__"H
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*√
__or__typing.AbstractSet.__or__"ã
1typing.AbstractSet[Union[typing._T_co,typing._T]]B
Union[typing._T_co,typing._T]
typing._T_co
	typing._T"typing.AbstractSet*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*DB
typing.AbstractSet[typing._T]
	typing._T"typing.AbstractSet*ı
__sub__typing.AbstractSet.__sub__"H
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*≈
__xor__typing.AbstractSet.__xor__"ã
1typing.AbstractSet[Union[typing._T_co,typing._T]]B
Union[typing._T_co,typing._T]
typing._T_co
	typing._T"typing.AbstractSet*JH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*DB
typing.AbstractSet[typing._T]
	typing._T"typing.AbstractSet*‹

isdisjointtyping.AbstractSet.isdisjoint"
builtins.bool"builtins.bool*R
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*;
other0
typing.Iterable[Any]
Any"typing.IterablePì

MutableSettyping.MutableSet"typing.AbstractSet*†
addtyping.MutableSet.add"
None*J
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*
value
	typing._T0:abstractmethod@*®
discardtyping.MutableSet.discard"
None*J
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*
value
	typing._T0:abstractmethod@*v
cleartyping.MutableSet.clear"
None*J
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*w
poptyping.MutableSet.pop"
	typing._T*J
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*í
removetyping.MutableSet.remove"
None*J
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*
value
	typing._T*§
__ior__typing.MutableSet.__ior__"
typing.MutableSet.Self*
typing.MutableSet.Self*DB
typing.AbstractSet[typing._T]
	typing._T"typing.AbstractSet*ö
__iand__typing.MutableSet.__iand__"
typing.MutableSet.Self*
typing.MutableSet.Self*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*¶
__ixor__typing.MutableSet.__ixor__"
typing.MutableSet.Self*
typing.MutableSet.Self*DB
typing.AbstractSet[typing._T]
	typing._T"typing.AbstractSet*ö
__isub__typing.MutableSet.__isub__"
typing.MutableSet.Self*
typing.MutableSet.Self*86
typing.AbstractSet[Any]
Any"typing.AbstractSetP“
MappingViewtyping.MappingView"typing.Sized*Ø
__init__typing.MappingView.__init__"
None*2
self(
typing.MappingView"typing.MappingView*H
mapping;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*o
__len__typing.MappingView.__len__"
builtins.int"builtins.int**(
typing.MappingView"typing.MappingViewÕ 
	ItemsViewtyping.ItemsView"typing.MappingView"typing.AbstractSet*î
__init__typing.ItemsView.__init__"
None*q
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*p
mappingc
+typing.Mapping[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.Mapping*”
__and__typing.ItemsView.__and__"é
0builtins.set[Tuple[typing._KT_co,typing._VT_co]]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"builtins.set*ig
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*20
typing.Iterable[Any]
Any"typing.Iterable*à
__rand__typing.ItemsView.__rand__"6
builtins.set[typing._T]
	typing._T"builtins.set*ig
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*><
typing.Iterable[typing._T]
	typing._T"typing.Iterable*ﬁ
__contains__typing.ItemsView.__contains__"
builtins.bool"builtins.bool*ig
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*$"
builtins.object"builtins.object*ß
__iter__typing.ItemsView.__iter__"î
3typing.Iterator[Tuple[typing._KT_co,typing._VT_co]]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.Iterator*ig
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*Ø
__reversed__typing.ItemsView.__reversed__"î
3typing.Iterator[Tuple[typing._KT_co,typing._VT_co]]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.Iterator*ig
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*∑
__or__typing.ItemsView.__or__"Ë
Abuiltins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]î
3Union[Tuple[typing._KT_co,typing._VT_co],typing._T]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co
	typing._T"builtins.set*ig
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*><
typing.Iterable[typing._T]
	typing._T"typing.Iterable*π
__ror__typing.ItemsView.__ror__"Ë
Abuiltins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]î
3Union[Tuple[typing._KT_co,typing._VT_co],typing._T]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co
	typing._T"builtins.set*ig
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*><
typing.Iterable[typing._T]
	typing._T"typing.Iterable*”
__sub__typing.ItemsView.__sub__"é
0builtins.set[Tuple[typing._KT_co,typing._VT_co]]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"builtins.set*ig
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*20
typing.Iterable[Any]
Any"typing.Iterable*à
__rsub__typing.ItemsView.__rsub__"6
builtins.set[typing._T]
	typing._T"builtins.set*ig
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*><
typing.Iterable[typing._T]
	typing._T"typing.Iterable*π
__xor__typing.ItemsView.__xor__"Ë
Abuiltins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]î
3Union[Tuple[typing._KT_co,typing._VT_co],typing._T]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co
	typing._T"builtins.set*ig
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*><
typing.Iterable[typing._T]
	typing._T"typing.Iterable*ª
__rxor__typing.ItemsView.__rxor__"Ë
Abuiltins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]î
3Union[Tuple[typing._KT_co,typing._VT_co],typing._T]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co
	typing._T"builtins.set*ig
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*><
typing.Iterable[typing._T]
	typing._T"typing.IterableP´
KeysViewtyping.KeysView"typing.MappingView"typing.AbstractSet*‹
__init__typing.KeysView.__init__"
None*N
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*\
mappingO
!typing.Mapping[typing._KT_co,Any]
typing._KT_co
Any"typing.Mapping*ﬁ
__and__typing.KeysView.__and__">
builtins.set[typing._KT_co]
typing._KT_co"builtins.set*FD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*20
typing.Iterable[Any]
Any"typing.Iterable*‰
__rand__typing.KeysView.__rand__"6
builtins.set[typing._T]
	typing._T"builtins.set*FD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*><
typing.Iterable[typing._T]
	typing._T"typing.Iterable*∫
__contains__typing.KeysView.__contains__"
builtins.bool"builtins.bool*FD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*$"
builtins.object"builtins.object*≤
__iter__typing.KeysView.__iter__"D
typing.Iterator[typing._KT_co]
typing._KT_co"typing.Iterator*FD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*∫
__reversed__typing.KeysView.__reversed__"D
typing.Iterator[typing._KT_co]
typing._KT_co"typing.Iterator*FD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*≠
__or__typing.KeysView.__or__"Ç
,builtins.set[Union[typing._KT_co,typing._T]]D
Union[typing._KT_co,typing._T]
typing._KT_co
	typing._T"builtins.set*FD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*><
typing.Iterable[typing._T]
	typing._T"typing.Iterable*Ø
__ror__typing.KeysView.__ror__"Ç
,builtins.set[Union[typing._KT_co,typing._T]]D
Union[typing._KT_co,typing._T]
typing._KT_co
	typing._T"builtins.set*FD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*><
typing.Iterable[typing._T]
	typing._T"typing.Iterable*ﬁ
__sub__typing.KeysView.__sub__">
builtins.set[typing._KT_co]
typing._KT_co"builtins.set*FD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*20
typing.Iterable[Any]
Any"typing.Iterable*‰
__rsub__typing.KeysView.__rsub__"6
builtins.set[typing._T]
	typing._T"builtins.set*FD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*><
typing.Iterable[typing._T]
	typing._T"typing.Iterable*Ø
__xor__typing.KeysView.__xor__"Ç
,builtins.set[Union[typing._KT_co,typing._T]]D
Union[typing._KT_co,typing._T]
typing._KT_co
	typing._T"builtins.set*FD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*><
typing.Iterable[typing._T]
	typing._T"typing.Iterable*±
__rxor__typing.KeysView.__rxor__"Ç
,builtins.set[Union[typing._KT_co,typing._T]]D
Union[typing._KT_co,typing._T]
typing._KT_co
	typing._T"builtins.set*FD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*><
typing.Iterable[typing._T]
	typing._T"typing.IterablePÓ

ValuesViewtyping.ValuesView"typing.MappingView"typing.Collection*‚
__init__typing.ValuesView.__init__"
None*R
selfH
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesView*\
mappingO
!typing.Mapping[Any,typing._VT_co]
Any
typing._VT_co"typing.Mapping*¿
__contains__typing.ValuesView.__contains__"
builtins.bool"builtins.bool*JH
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesView*$"
builtins.object"builtins.object*∏
__iter__typing.ValuesView.__iter__"D
typing.Iterator[typing._VT_co]
typing._VT_co"typing.Iterator*JH
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesView*¿
__reversed__typing.ValuesView.__reversed__"D
typing.Iterator[typing._VT_co]
typing._VT_co"typing.Iterator*JH
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesViewPå
Mappingtyping.Mapping"typing.Collection*√
__getitem__typing.Mapping.__getitem__"
typing._VT_co*_]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*

typing._KT0:abstractmethod@*È
itemstyping.Mapping.items"a
*typing.ItemsView[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.ItemsView*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*ƒ
keystyping.Mapping.keys">
typing.KeysView[typing._KT]

typing._KT"typing.KeysView*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*“
valuestyping.Mapping.values"H
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesView*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*“
__contains__typing.Mapping.__contains__"
builtins.bool"builtins.bool*_]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*$"
builtins.object"builtins.object2∏
gettyping.Mapping.getﬁ
gettyping.Mapping.get":
Union[typing._VT_co,None]
typing._VT_co
None*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*

typing._KT0:overloadXª
gettyping.Mapping.get"D
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*

typing._KT*Q
defaultD
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T0:overloadXPÔ
MutableMappingtyping.MutableMapping"typing.Mapping*€
__setitem__!typing.MutableMapping.__setitem__"
None*ge
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*

typing._KT*

typing._VT0:abstractmethod@*…
__delitem__!typing.MutableMapping.__delitem__"
None*ge
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*

typing._KT0:abstractmethod@*ü
cleartyping.MutableMapping.clear"
None*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*€
popitemtyping.MutableMapping.popitem"@
Tuple[typing._KT,typing._VT]

typing._KT

typing._VT*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping2•
poptyping.MutableMapping.pop¡
poptyping.MutableMapping.pop"

typing._VT*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*

typing._KT0:overloadXæ
poptyping.MutableMapping.pop">
Union[typing._VT,typing._T]

typing._VT
	typing._T*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*

typing._KT*K
default>
Union[typing._VT,typing._T]

typing._VT
	typing._T0:overloadX2«

setdefault typing.MutableMapping.setdefault≤

setdefault typing.MutableMapping.setdefault"2
Union[typing._T,None]
	typing._T
None*ü
selfî
7typing.MutableMapping[typing._KT,Union[typing._T,None]]

typing._KT2
Union[typing._T,None]
	typing._T
None"typing.MutableMapping*

typing._KT*
None 0:overloadX·

setdefault typing.MutableMapping.setdefault"

typing._VT*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*

typing._KT*

typing._VT0:overloadX2ó
updatetyping.MutableMapping.update 
updatetyping.MutableMapping.update"
None*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*}{
7_typeshed.SupportsKeysAndGetItem[typing._KT,typing._VT]

typing._KT

typing._VT" _typeshed.SupportsKeysAndGetItem*
kwargs

typing._VT0:overloadX”
updatetyping.MutableMapping.update"
None*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*ÖÇ
-typing.Iterable[Tuple[typing._KT,typing._VT]]@
Tuple[typing._KT,typing._VT]

typing._KT

typing._VT"typing.Iterable*
kwargs

typing._VT0:overloadXÀ
updatetyping.MutableMapping.update"
None*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*
kwargs

typing._VT0:overloadXP©4
IO	typing.IO"typing.Iterator*Ü
modetyping.IO.mode"
builtins.str"builtins.str*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`*Ü
nametyping.IO.name"
builtins.str"builtins.str*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`*z
closetyping.IO.close"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*å
closedtyping.IO.closed"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`*ê
filenotyping.IO.fileno"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*z
flushtyping.IO.flush"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*í
isattytyping.IO.isatty"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*£
readtyping.IO.read"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO* 
builtins.int"builtins.int 0:abstractmethod@*ñ
readabletyping.IO.readable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*´
readlinetyping.IO.readline"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO* 
builtins.int"builtins.int 0:abstractmethod@*‹
	readlinestyping.IO.readlines"@
builtins.list[typing.AnyStr]
typing.AnyStr"builtins.list*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO* 
builtins.int"builtins.int 0:abstractmethod@*Œ
seektyping.IO.seek"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*
builtins.int"builtins.int* 
builtins.int"builtins.int 0:abstractmethod@*ñ
seekabletyping.IO.seekable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*å
telltyping.IO.tell"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*ﬁ
truncatetyping.IO.truncate"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*HD
Union[builtins.int,None]
builtins.int"builtins.int
None 0:abstractmethod@*ñ
writabletyping.IO.writable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*â
__next__typing.IO.__next__"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*¥
__iter__typing.IO.__iter__"D
typing.Iterator[typing.AnyStr]
typing.AnyStr"typing.Iterator*:8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*™
	__enter__typing.IO.__enter__"8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*:8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*À
__exit__typing.IO.__exit__"
None*:8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*çä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None0:abstractmethod@2ö
writetyping.IO.writeƒ
writetyping.IO.write"
builtins.int"builtins.int*L
selfB
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO*
builtins.str"builtins.str0:abstractmethod:overload@XÜ
writetyping.IO.write"
builtins.int"builtins.int*R
selfH
typing.IO[builtins.bytes] 
builtins.bytes"builtins.bytes"	typing.IO*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer0:abstractmethod:overload@XØ
writetyping.IO.write"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*
typing.AnyStr0:abstractmethod:overload@X2©

writelinestyping.IO.writelinesÏ

writelinestyping.IO.writelines"
None*L
selfB
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO*PN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable0:abstractmethod:overload@X∫	

writelinestyping.IO.writelines"
None*R
selfH
typing.IO[builtins.bytes] 
builtins.bytes"builtins.bytes"	typing.IO*óî
ßtyping.Iterable[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer"typing.Iterable0:abstractmethod:overload@Xÿ

writelinestyping.IO.writelines"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*FD
typing.Iterable[typing.AnyStr]
typing.AnyStr"typing.Iterable0:abstractmethod:overload@XP≠
BinaryIOtyping.BinaryIO"	typing.IO*Ñ
	__enter__typing.BinaryIO.__enter__""
typing.BinaryIO"typing.BinaryIO*$"
typing.BinaryIO"typing.BinaryIO0:abstractmethod@ü
TextIOtyping.TextIO"	typing.IO*z
buffertyping.TextIO.buffer""
typing.BinaryIO"typing.BinaryIO*(
self
typing.TextIO"typing.TextIO0:property`*x
encodingtyping.TextIO.encoding"
builtins.str"builtins.str*(
self
typing.TextIO"typing.TextIO0:property`*ú
errorstyping.TextIO.errors"D
Union[builtins.str,None]
builtins.str"builtins.str
None*(
self
typing.TextIO"typing.TextIO0:property`*Ñ
line_bufferingtyping.TextIO.line_buffering"
builtins.int"builtins.int*(
self
typing.TextIO"typing.TextIO0:property`*c
newlinestyping.TextIO.newlines"
Any*(
self
typing.TextIO"typing.TextIO0:property`*z
	__enter__typing.TextIO.__enter__"
typing.TextIO"typing.TextIO* 
typing.TextIO"typing.TextIO0:abstractmethod@?

ByteStringtyping.ByteString"typing.Sequence@babc.ABCMetaß

NamedTupletyping.NamedTuple"builtins.tuple*≠
_maketyping.NamedTuple._make"
	typing._T*+
cls"
Type[typing._T]
	typing._T*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable0:classmethodp*Ø
_asdicttyping.NamedTuple._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*0
self&
typing.NamedTuple"typing.NamedTuple*}
_replacetyping.NamedTuple._replace"
typing.NamedTuple.Self*$
self
typing.NamedTuple.Self*
kwargs
Any2°
__init__typing.NamedTuple.__init__¨
__init__typing.NamedTuple.__init__"
None*0
self&
typing.NamedTuple"typing.NamedTuple**
typename
builtins.str"builtins.str*ç
fields
(typing.Iterable[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Iterable 0:overloadX…
__init__typing.NamedTuple.__init__"
None*0
self&
typing.NamedTuple"typing.NamedTuple**
typename
builtins.str"builtins.str*
fields
None *
kwargs
Any0:overloadXr®
_field_typestyping.NamedTuple._field_typesx
)builtins.dict[builtins.str,builtins.type]
builtins.str"builtins.str
builtins.type"builtins.type"builtins.dictrç
_field_defaults!typing.NamedTuple._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrr
_fieldstyping.NamedTuple._fieldsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuplerB
_sourcetyping.NamedTuple._source
builtins.str"builtins.str˝

_TypedDicttyping._TypedDict"typing.Mapping*`
copytyping._TypedDict.copy"
typing._TypedDict.Self*$
self
typing._TypedDict.Self*∆

setdefaulttyping._TypedDict.setdefault""
builtins.object"builtins.object*0
self&
typing._TypedDict"typing._TypedDict*
k
NoReturn
*/
default"
builtins.object"builtins.object*•
poptyping._TypedDict.pop""
builtins.object"builtins.object*0
self&
typing._TypedDict"typing._TypedDict*
k
NoReturn
*
default
	typing._T *V
updatetyping._TypedDict.update"
None*
self
	typing._T*
	typing._T*p
__delitem__typing._TypedDict.__delitem__"
None*(&
typing._TypedDict"typing._TypedDict*
NoReturn
*Ô
itemstyping._TypedDict.items"ö
9_collections_abc.dict_items[builtins.str,builtins.object]
builtins.str"builtins.str"
builtins.object"builtins.object"_collections_abc.dict_items*0
self&
typing._TypedDict"typing._TypedDict*Î
keystyping._TypedDict.keys"ò
8_collections_abc.dict_keys[builtins.str,builtins.object]
builtins.str"builtins.str"
builtins.object"builtins.object"_collections_abc.dict_keys*0
self&
typing._TypedDict"typing._TypedDict*Û
valuestyping._TypedDict.values"ú
:_collections_abc.dict_values[builtins.str,builtins.object]
builtins.str"builtins.str"
builtins.object"builtins.object"_collections_abc.dict_values*0
self&
typing._TypedDict"typing._TypedDict8@babc.ABCMetarH
	__total__typing._TypedDict.__total__
builtins.bool"builtins.boolÓ

ForwardReftyping.ForwardRef"builtins.object*º
__init__typing.ForwardRef.__init__"
None*0
self&
typing.ForwardRef"typing.ForwardRef*%
arg
builtins.str"builtins.str*1
is_argument
builtins.bool"builtins.bool *…
	_evaluatetyping.ForwardRef._evaluate"&
Union[Any,None]
Any
None*0
self&
typing.ForwardRef"typing.ForwardRef*°
globalnsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None*†
localnsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None*í
__eq__typing.ForwardRef.__eq__"
builtins.bool"builtins.bool*(&
typing.ForwardRef"typing.ForwardRef*$"
builtins.object"builtins.object8rR
__forward_arg__!typing.ForwardRef.__forward_arg__
builtins.str"builtins.strrX
__forward_code__"typing.ForwardRef.__forward_code__ 
types.CodeType"types.CodeTyper`
__forward_evaluated__'typing.ForwardRef.__forward_evaluated__
builtins.bool"builtins.boolr`
__forward_value__#typing.ForwardRef.__forward_value__&
Union[Any,None]
Any
Nonerd
__forward_is_argument__)typing.ForwardRef.__forward_is_argument__
builtins.bool"builtins.boolr^
__forward_is_class__&typing.ForwardRef.__forward_is_class__
builtins.bool"builtins.boolrb
__forward_module__$typing.ForwardRef.__forward_module__&
Union[Any,None]
Any
None\
_finaltyping_extensions.final"
typing_extensions._F*
f
typing_extensions._FX
type_check_onlytyping.type_check_only"
	typing._F*
func_or_cls
	typing._FC
overloadtyping.overload"
	typing._F*
func
	typing._F:
finaltyping.final"
	typing._T*
f
	typing._T[
NewTypetyping.NewType"
Any*&
name
builtins.str"builtins.str*
tp
AnyL
no_type_checktyping.no_type_check"
	typing._F*
arg
	typing._F‚
no_type_check_decoratortyping.no_type_check_decorator"K
CallableType[builtins.function]&
builtins.function"builtins.function*Z
	decoratorK
CallableType[builtins.function]&
builtins.function"builtins.functionV
runtime_checkabletyping.runtime_checkable"

typing._TC*
cls

typing._TCã
get_type_hintstyping.get_type_hints"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ω
obj≥
ﬂTypeAlias[Union[builtins.object,CallableType[builtins.function],types.FunctionType,types.BuiltinFunctionType,types.MethodType,types.ModuleType,types.WrapperDescriptorType,types.MethodWrapperType,types.MethodDescriptorType]]¢
‘Union[builtins.object,CallableType[builtins.function],types.FunctionType,types.BuiltinFunctionType,types.MethodType,types.ModuleType,types.WrapperDescriptorType,types.MethodWrapperType,types.MethodDescriptorType]"
builtins.object"builtins.objectK
CallableType[builtins.function]&
builtins.function"builtins.function(
types.FunctionType"types.FunctionType6
types.BuiltinFunctionType"types.BuiltinFunctionType$
types.MethodType"types.MethodType$
types.ModuleType"types.ModuleType:
types.WrapperDescriptorType"types.WrapperDescriptorType2
types.MethodWrapperType"types.MethodWrapperType8
types.MethodDescriptorType"types.MethodDescriptorType"(typing._get_type_hints_obj_allowed_types*£
globalnsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *¢
localnsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None \
get_argstyping.get_args".
builtins.tuple[Any]
Any"builtins.tuple*
tp
AnyX

get_origintyping.get_origin"&
Union[Any,None]
Any
None*
tp
Anyj

_type_reprtyping._type_repr"
builtins.str"builtins.str*+
obj"
builtins.object"builtins.object"‘
casttyping.casto
casttyping.cast"
	typing._T*+
typ"
Type[typing._T]
	typing._T*
val
Any0:overloadXc
casttyping.cast"
Any*%
typ
builtins.str"builtins.str*
val
Any0:overloadXi
casttyping.cast"
Any*+
typ"
builtins.object"builtins.object*
val
Any0:overloadX*(
typing_extensionstyping_extensions *c
_Nevertyping_extensions.Never@
typing_extensions._SpecialForm"typing_extensions._SpecialForm*e
__all__typing.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*5
Any
typing.Any"
builtins.object"builtins.object*?
_promotetyping._promote"
builtins.object"builtins.object*A
Uniontyping.Union*
typing._SpecialForm"typing._SpecialForm*E
Generictyping.Generic*
typing._SpecialForm"typing._SpecialForm*G
Protocoltyping.Protocol*
typing._SpecialForm"typing._SpecialForm*G
Callabletyping.Callable*
typing._SpecialForm"typing._SpecialForm*?
Typetyping.Type*
typing._SpecialForm"typing._SpecialForm*G
NoReturntyping.NoReturn*
typing._SpecialForm"typing._SpecialForm*G
ClassVartyping.ClassVar*
typing._SpecialForm"typing._SpecialForm*G
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm*A
Tupletyping.Tuple*
typing._SpecialForm"typing._SpecialForm*A
Finaltyping.Final*
typing._SpecialForm"typing._SpecialForm*E
Literaltyping.Literal*
typing._SpecialForm"typing._SpecialForm*A
	TypedDicttyping.TypedDict"
builtins.object"builtins.object*E
TYPE_CHECKINGtyping.TYPE_CHECKING
builtins.bool"builtins.bool*Ç
__annotations__typing.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict