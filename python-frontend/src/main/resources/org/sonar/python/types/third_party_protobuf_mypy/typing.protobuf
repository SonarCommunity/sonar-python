
typing¥
TypeVartyping.TypeVar"builtins.object*Ö
__init__typing.TypeVar.__init__"
None**
self 
typing.TypeVar"typing.TypeVar*&
name
builtins.str"builtins.str*'
constraints
	Type[Any]
Any*s
boundf
"Union[None,Type[Any],builtins.str]
None
	Type[Any]
Any
builtins.str"builtins.str */
	covariant
builtins.bool"builtins.bool *3
contravariant
builtins.bool"builtins.bool rb
	__bound__typing.TypeVar.__bound__;
Union[Type[Any],None]
	Type[Any]
Any
Nonerv
__constraints__typing.TypeVar.__constraints__C
builtins.tuple[Type[Any]]
	Type[Any]
Any"builtins.tuplerM
__covariant__typing.TypeVar.__covariant__
builtins.bool"builtins.boolrU
__contravariant__ typing.TypeVar.__contravariant__
builtins.bool"builtins.bool“
_SpecialFormtyping._SpecialForm"builtins.object*õ
__getitem__typing._SpecialForm.__getitem__""
builtins.object"builtins.object*2
self*
typing._SpecialForm"typing._SpecialForm*
typeargs
Anyò
_Aliastyping._Alias"builtins.object*n
__getitem__typing._Alias.__getitem__"
Any*&
self
typing._Alias"typing._Alias*
typeargs
Any—
SupportsInttyping.SupportsInt"builtins.object*â
__int__typing.SupportsInt.__int__"
builtins.int"builtins.int*0
self(
typing.SupportsInt"typing.SupportsInt0:abstractmethod@8@Xbabc.ABCMeta„
SupportsFloattyping.SupportsFloat"builtins.object*ó
	__float__typing.SupportsFloat.__float__" 
builtins.float"builtins.float*4
self,
typing.SupportsFloat"typing.SupportsFloat0:abstractmethod@8@Xbabc.ABCMetaı
SupportsComplextyping.SupportsComplex"builtins.object*•
__complex__"typing.SupportsComplex.__complex__"$
builtins.complex"builtins.complex*8
self0
typing.SupportsComplex"typing.SupportsComplex0:abstractmethod@8@Xbabc.ABCMetaÂ
SupportsBytestyping.SupportsBytes"builtins.object*ô
	__bytes__typing.SupportsBytes.__bytes__" 
builtins.bytes"builtins.bytes*6
self,
typing.SupportsBytes"typing.SupportsBytes0:abstractmethod@8@Xbabc.ABCMeta·
SupportsIndextyping.SupportsIndex"builtins.object*ï
	__index__typing.SupportsIndex.__index__"
builtins.int"builtins.int*6
self,
typing.SupportsIndex"typing.SupportsIndex0:abstractmethod@8@Xbabc.ABCMetaÿ
SupportsAbstyping.SupportsAbs"builtins.object*ù
__abs__typing.SupportsAbs.__abs__"
typing._T_co*P
selfH
 typing.SupportsAbs[typing._T_co]
typing._T_co"typing.SupportsAbs0:abstractmethod@8PXë
SupportsRoundtyping.SupportsRound"builtins.object2“
	__round__typing.SupportsRound.__round__¡
	__round__typing.SupportsRound.__round__"
builtins.int"builtins.int*V
selfL
"typing.SupportsRound[typing._T_co]
typing._T_co"typing.SupportsRound0:overload:abstractmethod@X‡
	__round__typing.SupportsRound.__round__"
typing._T_co*V
selfL
"typing.SupportsRound[typing._T_co]
typing._T_co"typing.SupportsRound*)
ndigits
builtins.int"builtins.int0:overload:abstractmethod@X8PX≤
Sizedtyping.Sized"builtins.object*w
__len__typing.Sized.__len__"
builtins.int"builtins.int*$
self
typing.Sized"typing.Sized0:abstractmethod@8@Xbabc.ABCMeta∆
Hashabletyping.Hashable"builtins.object*Ñ
__hash__typing.Hashable.__hash__"
builtins.int"builtins.int*,
self"
typing.Hashable"typing.Hashable0:abstractmethod@8@Xbabc.ABCMeta˝
Iterabletyping.Iterable"builtins.object*»
__iter__typing.Iterable.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Iterable[typing._T_co]
typing._T_co"typing.Iterable0:abstractmethod@8PXÑ
Iteratortyping.Iterator"typing.Iterable*ò
__next__typing.Iterator.__next__"
typing._T_co*L
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator0:abstractmethod@*¥
__iter__typing.Iterator.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator8PXè

Reversibletyping.Reversible"typing.Iterable*÷
__reversed__typing.Reversible.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*N
selfF
typing.Reversible[typing._T_co]
typing._T_co"typing.Reversible0:abstractmethod@8PX«
	Generatortyping.Generator"typing.Iterator*œ
__next__typing.Generator.__next__"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*¸
sendtyping.Generator.send"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*
__value
typing._T_contra0:abstractmethod@*¡
closetyping.Generator.close"
None*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*»
__iter__typing.Generator.__iter__"ä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*ì
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*Î
gi_codetyping.Generator.gi_code" 
types.CodeType"types.CodeType*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`*Ô
gi_frametyping.Generator.gi_frame""
types.FrameType"types.FrameType*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`*Ô

gi_runningtyping.Generator.gi_running"
builtins.bool"builtins.bool*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`*€
gi_yieldfromtyping.Generator.gi_yieldfrom"Ö
)Union[typing.Generator[Any,Any,Any],None]L
typing.Generator[Any,Any,Any]
Any
Any
Any"typing.Generator
None*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`2Ñ
throwtyping.Generator.throw¡
throwtyping.Generator.throw"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*[
__typR
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException*ì
__valá
-Union[builtins.BaseException,builtins.object]0
builtins.BaseException"builtins.BaseException"
builtins.object"builtins.object *c
__tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@Xû
throwtyping.Generator.throw"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*9
__typ0
builtins.BaseException"builtins.BaseException*
__val
None *c
__tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@XP§
	Awaitabletyping.Awaitable"builtins.object*Ì
	__await__typing.Awaitable.__await__"`
'typing.Generator[Any,None,typing._T_co]
Any
None
typing._T_co"typing.Generator*N
selfD
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable0:abstractmethod@8PX§
	Coroutinetyping.Coroutine"typing.Awaitable*Û
cr_awaittyping.Coroutine.cr_await"&
Union[Any,None]
Any
None*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine0:property`*Î
cr_codetyping.Coroutine.cr_code" 
types.CodeType"types.CodeType*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine0:property`*Ô
cr_frametyping.Coroutine.cr_frame""
types.FrameType"types.FrameType*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine0:property`*Ô

cr_runningtyping.Coroutine.cr_running"
builtins.bool"builtins.bool*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine0:property`*¸
sendtyping.Coroutine.send"
typing._T_co*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine*
__value
typing._T_contra0:abstractmethod@*’
closetyping.Coroutine.close"
None*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine0:abstractmethod@2Ñ
throwtyping.Coroutine.throw¡
throwtyping.Coroutine.throw"
typing._T_co*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine*[
__typR
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException*ì
__valá
-Union[builtins.BaseException,builtins.object]0
builtins.BaseException"builtins.BaseException"
builtins.object"builtins.object *c
__tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@Xû
throwtyping.Coroutine.throw"
typing._T_co*ï
selfä
<typing.Coroutine[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Coroutine*9
__typ0
builtins.BaseException"builtins.BaseException*
__val
None *c
__tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@XPrK
__qualname__typing.Coroutine.__qualname__
builtins.str"builtins.strd
AwaitableGeneratortyping.AwaitableGenerator"typing.Awaitable"typing.Generator@Pbabc.ABCMeta§
AsyncIterabletyping.AsyncIterable"builtins.object*Â
	__aiter__typing.AsyncIterable.__aiter__"L
"typing.AsyncIterator[typing._T_co]
typing._T_co"typing.AsyncIterator*V
selfL
"typing.AsyncIterable[typing._T_co]
typing._T_co"typing.AsyncIterable0:abstractmethod@8PXı
AsyncIteratortyping.AsyncIterator"typing.AsyncIterable*›
	__anext__typing.AsyncIterator.__anext__"D
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable*V
selfL
"typing.AsyncIterator[typing._T_co]
typing._T_co"typing.AsyncIterator0:abstractmethod@*—
	__aiter__typing.AsyncIterator.__aiter__"L
"typing.AsyncIterator[typing._T_co]
typing._T_co"typing.AsyncIterator*V
selfL
"typing.AsyncIterator[typing._T_co]
typing._T_co"typing.AsyncIterator8PX“
AsyncGeneratortyping.AsyncGenerator"typing.AsyncIterator*á
	__anext__typing.AsyncGenerator.__anext__"D
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator0:abstractmethod@*†
asendtyping.AsyncGenerator.asend"D
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator*
__value
typing._T_contra0:abstractmethod@*Ò
aclosetyping.AsyncGenerator.aclose"4
typing.Awaitable[None]
None"typing.Awaitable*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator0:abstractmethod@*∏
	__aiter__typing.AsyncGenerator.__aiter__"u
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator0:abstractmethod@*¬
ag_awaittyping.AsyncGenerator.ag_await"
Any*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator0:property`*Ÿ
ag_codetyping.AsyncGenerator.ag_code" 
types.CodeType"types.CodeType*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator0:property`*›
ag_frametyping.AsyncGenerator.ag_frame""
types.FrameType"types.FrameType*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator0:property`*›

ag_running typing.AsyncGenerator.ag_running"
builtins.bool"builtins.bool*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator0:property`2”
athrowtyping.AsyncGenerator.athrowÂ
athrowtyping.AsyncGenerator.athrow"D
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator*[
__typR
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException*ì
__valá
-Union[builtins.BaseException,builtins.object]0
builtins.BaseException"builtins.BaseException"
builtins.object"builtins.object *c
__tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@X¬
athrowtyping.AsyncGenerator.athrow"D
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable*
selfu
4typing.AsyncGenerator[typing._T_co,typing._T_contra]
typing._T_co
typing._T_contra"typing.AsyncGenerator*9
__typ0
builtins.BaseException"builtins.BaseException*
__val
None *c
__tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@XPë
	Containertyping.Container"builtins.object*⁄
__contains__typing.Container.__contains__"
builtins.bool"builtins.bool*L
selfD
typing.Container[typing._T_co]
typing._T_co"typing.Container*)
__x"
builtins.object"builtins.object0:abstractmethod@8PXÒ

Collectiontyping.Collection"typing.Iterable"typing.Container*¶
__len__typing.Collection.__len__"
builtins.int"builtins.int*N
selfF
typing.Collection[typing._T_co]
typing._T_co"typing.Collection0:abstractmethod@8PXì
Sequencetyping.Sequence"typing.Collection"typing.Reversible*Û
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*)
start
builtins.int"builtins.int *(
stop
builtins.int"builtins.int *û
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*¡
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.object*¥
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*º
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence2¸
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@XP÷
MutableSequencetyping.MutableSequence"typing.Sequence*ﬁ
inserttyping.MutableSequence.insert"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*'
index
builtins.int"builtins.int*
value
	typing._T0:abstractmethod@*°
appendtyping.MutableSequence.append"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*
value
	typing._T*Ö
cleartyping.MutableSequence.clear"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*—
extendtyping.MutableSequence.extend"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*H
values<
typing.Iterable[typing._T]
	typing._T"typing.Iterable*â
reversetyping.MutableSequence.reverse"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*±
poptyping.MutableSequence.pop"
	typing._T*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*)
index
builtins.int"builtins.int *°
removetyping.MutableSequence.remove"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*
value
	typing._T*é
__iadd__typing.MutableSequence.__iadd__"J
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*A
x<
typing.Iterable[typing._T]
	typing._T"typing.Iterable2¶
__getitem__"typing.MutableSequence.__getitem__◊
__getitem__"typing.MutableSequence.__getitem__"
	typing._T*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@Xò
__getitem__"typing.MutableSequence.__getitem__"J
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X2∂
__setitem__"typing.MutableSequence.__setitem__Ê
__setitem__"typing.MutableSequence.__setitem__"
None*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*!
i
builtins.int"builtins.int*
o
	typing._T0:overload:abstractmethod@Xô
__setitem__"typing.MutableSequence.__setitem__"
None*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*%
s 
builtins.slice"builtins.slice*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterable0:overload:abstractmethod@X2ﬂ
__delitem__"typing.MutableSequence.__delitem__“
__delitem__"typing.MutableSequence.__delitem__"
None*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@X÷
__delitem__"typing.MutableSequence.__delitem__"
None*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*%
i 
builtins.slice"builtins.slice0:overload:abstractmethod@XPÏ
AbstractSettyping.AbstractSet"typing.Collection*ﬁ
__contains__typing.AbstractSet.__contains__"
builtins.bool"builtins.bool*P
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*'
x"
builtins.object"builtins.object0:abstractmethod@*“
__le__typing.AbstractSet.__le__"
builtins.bool"builtins.bool*P
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*;
s6
typing.AbstractSet[Any]
Any"typing.AbstractSet*“
__lt__typing.AbstractSet.__lt__"
builtins.bool"builtins.bool*P
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*;
s6
typing.AbstractSet[Any]
Any"typing.AbstractSet*“
__gt__typing.AbstractSet.__gt__"
builtins.bool"builtins.bool*P
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*;
s6
typing.AbstractSet[Any]
Any"typing.AbstractSet*“
__ge__typing.AbstractSet.__ge__"
builtins.bool"builtins.bool*P
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*;
s6
typing.AbstractSet[Any]
Any"typing.AbstractSet*˛
__and__typing.AbstractSet.__and__"H
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*P
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*;
s6
typing.AbstractSet[Any]
Any"typing.AbstractSet*Ã
__or__typing.AbstractSet.__or__"ã
1typing.AbstractSet[Union[typing._T_co,typing._T]]B
Union[typing._T_co,typing._T]
typing._T_co
	typing._T"typing.AbstractSet*P
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*G
sB
typing.AbstractSet[typing._T]
	typing._T"typing.AbstractSet*˛
__sub__typing.AbstractSet.__sub__"H
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*P
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*;
s6
typing.AbstractSet[Any]
Any"typing.AbstractSet*Œ
__xor__typing.AbstractSet.__xor__"ã
1typing.AbstractSet[Union[typing._T_co,typing._T]]B
Union[typing._T_co,typing._T]
typing._T_co
	typing._T"typing.AbstractSet*P
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*G
sB
typing.AbstractSet[typing._T]
	typing._T"typing.AbstractSet*‹

isdisjointtyping.AbstractSet.isdisjoint"
builtins.bool"builtins.bool*R
selfH
 typing.AbstractSet[typing._T_co]
typing._T_co"typing.AbstractSet*;
other0
typing.Iterable[Any]
Any"typing.IterablePÈ

MutableSettyping.MutableSet"typing.AbstractSet*†
addtyping.MutableSet.add"
None*J
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*
value
	typing._T0:abstractmethod@*®
discardtyping.MutableSet.discard"
None*J
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*
value
	typing._T0:abstractmethod@*v
cleartyping.MutableSet.clear"
None*J
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*w
poptyping.MutableSet.pop"
	typing._T*J
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*í
removetyping.MutableSet.remove"
None*J
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*
value
	typing._T*∫
__ior__typing.MutableSet.__ior__"Ä
-typing.MutableSet[Union[typing._T,typing._S]]<
Union[typing._T,typing._S]
	typing._T
	typing._S"typing.MutableSet*H
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*G
sB
typing.AbstractSet[typing._S]
	typing._S"typing.AbstractSet*Ô
__iand__typing.MutableSet.__iand__"@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*H
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*;
s6
typing.AbstractSet[Any]
Any"typing.AbstractSet*º
__ixor__typing.MutableSet.__ixor__"Ä
-typing.MutableSet[Union[typing._T,typing._S]]<
Union[typing._T,typing._S]
	typing._T
	typing._S"typing.MutableSet*H
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*G
sB
typing.AbstractSet[typing._S]
	typing._S"typing.AbstractSet*Ô
__isub__typing.MutableSet.__isub__"@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*H
self@
typing.MutableSet[typing._T]
	typing._T"typing.MutableSet*;
s6
typing.AbstractSet[Any]
Any"typing.AbstractSetPÿ
MappingViewtyping.MappingView"typing.Sized*Ø
__init__typing.MappingView.__init__"
None*2
self(
typing.MappingView"typing.MappingView*H
mapping;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*u
__len__typing.MappingView.__len__"
builtins.int"builtins.int*0
self(
typing.MappingView"typing.MappingView™!
	ItemsViewtyping.ItemsView"typing.MappingView"typing.AbstractSet*î
__init__typing.ItemsView.__init__"
None*q
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*p
mappingc
+typing.Mapping[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.Mapping*‹
__and__typing.ItemsView.__and__"é
0builtins.set[Tuple[typing._KT_co,typing._VT_co]]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*5
o0
typing.Iterable[Any]
Any"typing.Iterable*ë
__rand__typing.ItemsView.__rand__"6
builtins.set[typing._T]
	typing._T"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterable*Á
__contains__typing.ItemsView.__contains__"
builtins.bool"builtins.bool*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*'
o"
builtins.object"builtins.object*≠
__iter__typing.ItemsView.__iter__"î
3typing.Iterator[Tuple[typing._KT_co,typing._VT_co]]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.Iterator*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*µ
__reversed__typing.ItemsView.__reversed__"î
3typing.Iterator[Tuple[typing._KT_co,typing._VT_co]]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.Iterator*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*¿
__or__typing.ItemsView.__or__"Ë
Abuiltins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]î
3Union[Tuple[typing._KT_co,typing._VT_co],typing._T]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co
	typing._T"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterable*¬
__ror__typing.ItemsView.__ror__"Ë
Abuiltins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]î
3Union[Tuple[typing._KT_co,typing._VT_co],typing._T]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co
	typing._T"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterable*‹
__sub__typing.ItemsView.__sub__"é
0builtins.set[Tuple[typing._KT_co,typing._VT_co]]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*5
o0
typing.Iterable[Any]
Any"typing.Iterable*ë
__rsub__typing.ItemsView.__rsub__"6
builtins.set[typing._T]
	typing._T"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterable*¬
__xor__typing.ItemsView.__xor__"Ë
Abuiltins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]î
3Union[Tuple[typing._KT_co,typing._VT_co],typing._T]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co
	typing._T"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterable*ƒ
__rxor__typing.ItemsView.__rxor__"Ë
Abuiltins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]î
3Union[Tuple[typing._KT_co,typing._VT_co],typing._T]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co
	typing._T"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.IterablePà
KeysViewtyping.KeysView"typing.MappingView"typing.AbstractSet*‹
__init__typing.KeysView.__init__"
None*N
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*\
mappingO
!typing.Mapping[typing._KT_co,Any]
typing._KT_co
Any"typing.Mapping*Á
__and__typing.KeysView.__and__">
builtins.set[typing._KT_co]
typing._KT_co"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*5
o0
typing.Iterable[Any]
Any"typing.Iterable*Ì
__rand__typing.KeysView.__rand__"6
builtins.set[typing._T]
	typing._T"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterable*√
__contains__typing.KeysView.__contains__"
builtins.bool"builtins.bool*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*'
o"
builtins.object"builtins.object*∏
__iter__typing.KeysView.__iter__"D
typing.Iterator[typing._KT_co]
typing._KT_co"typing.Iterator*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*¿
__reversed__typing.KeysView.__reversed__"D
typing.Iterator[typing._KT_co]
typing._KT_co"typing.Iterator*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*∂
__or__typing.KeysView.__or__"Ç
,builtins.set[Union[typing._KT_co,typing._T]]D
Union[typing._KT_co,typing._T]
typing._KT_co
	typing._T"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterable*∏
__ror__typing.KeysView.__ror__"Ç
,builtins.set[Union[typing._KT_co,typing._T]]D
Union[typing._KT_co,typing._T]
typing._KT_co
	typing._T"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterable*Á
__sub__typing.KeysView.__sub__">
builtins.set[typing._KT_co]
typing._KT_co"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*5
o0
typing.Iterable[Any]
Any"typing.Iterable*Ì
__rsub__typing.KeysView.__rsub__"6
builtins.set[typing._T]
	typing._T"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterable*∏
__xor__typing.KeysView.__xor__"Ç
,builtins.set[Union[typing._KT_co,typing._T]]D
Union[typing._KT_co,typing._T]
typing._KT_co
	typing._T"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterable*∫
__rxor__typing.KeysView.__rxor__"Ç
,builtins.set[Union[typing._KT_co,typing._T]]D
Union[typing._KT_co,typing._T]
typing._KT_co
	typing._T"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.IterablePÅ

ValuesViewtyping.ValuesView"typing.MappingView"typing.Iterable*‚
__init__typing.ValuesView.__init__"
None*R
selfH
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesView*\
mappingO
!typing.Mapping[Any,typing._VT_co]
Any
typing._VT_co"typing.Mapping*…
__contains__typing.ValuesView.__contains__"
builtins.bool"builtins.bool*P
selfH
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesView*'
o"
builtins.object"builtins.object*æ
__iter__typing.ValuesView.__iter__"D
typing.Iterator[typing._VT_co]
typing._VT_co"typing.Iterator*P
selfH
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesView*∆
__reversed__typing.ValuesView.__reversed__"D
typing.Iterator[typing._VT_co]
typing._VT_co"typing.Iterator*P
selfH
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesViewPû
ContextManagertyping.ContextManager"builtins.object*ñ
	__enter__typing.ContextManager.__enter__"
typing._T_co*V
selfN
#typing.ContextManager[typing._T_co]
typing._T_co"typing.ContextManager*ƒ
__exit__typing.ContextManager.__exit__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*V
selfN
#typing.ContextManager[typing._T_co]
typing._T_co"typing.ContextManager*ô

__exc_typeä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*q
__exc_valueb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*h
__tracebackY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None8PXƒ
AsyncContextManagertyping.AsyncContextManager"builtins.object*›

__aenter__%typing.AsyncContextManager.__aenter__"D
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable*b
selfX
(typing.AsyncContextManager[typing._T_co]
typing._T_co"typing.AsyncContextManager*ô
	__aexit__$typing.AsyncContextManager.__aexit__"à
+typing.Awaitable[Union[builtins.bool,None]]G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None"typing.Awaitable*b
selfX
(typing.AsyncContextManager[typing._T_co]
typing._T_co"typing.AsyncContextManager*ô
exc_typeä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*q
	exc_valueb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*h
	tracebackY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None8PX„
Mappingtyping.Mapping"typing.Collection*Ã
__getitem__typing.Mapping.__getitem__"
typing._VT_co*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
k

typing._KT0:abstractmethod@*ö
itemstyping.Mapping.items"ë
3typing.AbstractSet[Tuple[typing._KT,typing._VT_co]]F
Tuple[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.AbstractSet*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping* 
keystyping.Mapping.keys"D
typing.AbstractSet[typing._KT]

typing._KT"typing.AbstractSet*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*“
valuestyping.Mapping.values"H
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesView*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*€
__contains__typing.Mapping.__contains__"
builtins.bool"builtins.bool*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*'
o"
builtins.object"builtins.object2∆
gettyping.Mapping.getÂ
gettyping.Mapping.get":
Union[typing._VT_co,None]
typing._VT_co
None*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
key

typing._KT0:overloadX¬
gettyping.Mapping.get"D
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
key

typing._KT*Q
defaultD
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T0:overloadXPö
MutableMappingtyping.MutableMapping"typing.Mapping*Á
__setitem__!typing.MutableMapping.__setitem__"
None*m
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*
k

typing._KT*
v

typing._VT0:abstractmethod@*“
__delitem__!typing.MutableMapping.__delitem__"
None*m
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*
v

typing._KT0:abstractmethod@*ü
cleartyping.MutableMapping.clear"
None*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*€
popitemtyping.MutableMapping.popitem"@
Tuple[typing._KT,typing._VT]

typing._KT

typing._VT*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*Á

setdefault typing.MutableMapping.setdefault"

typing._VT*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*
key

typing._KT*
default

typing._VT 2µ
poptyping.MutableMapping.pop»
poptyping.MutableMapping.pop"

typing._VT*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*
key

typing._KT0:overloadX«
poptyping.MutableMapping.pop">
Union[typing._VT,typing._T]

typing._VT
	typing._T*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*
key

typing._KT*M
default>
Union[typing._VT,typing._T]

typing._VT
	typing._T 0:overloadX2˝
updatetyping.MutableMapping.update´
updatetyping.MutableMapping.update"
None*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*^
__mW
%typing.Mapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.Mapping*
kwargs

typing._VT0:overloadXÿ
updatetyping.MutableMapping.update"
None*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*ä
__mÇ
-typing.Iterable[Tuple[typing._KT,typing._VT]]@
Tuple[typing._KT,typing._VT]

typing._KT

typing._VT"typing.Iterable*
kwargs

typing._VT0:overloadXÀ
updatetyping.MutableMapping.update"
None*o
selfe
,typing.MutableMapping[typing._KT,typing._VT]

typing._KT

typing._VT"typing.MutableMapping*
kwargs

typing._VT0:overloadXP˚
IO	typing.IO"typing.Iterator*Ü
modetyping.IO.mode"
builtins.str"builtins.str*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`*Ü
nametyping.IO.name"
builtins.str"builtins.str*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`*z
closetyping.IO.close"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*å
closedtyping.IO.closed"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`*ê
filenotyping.IO.fileno"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*z
flushtyping.IO.flush"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*í
isattytyping.IO.isatty"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*®
readtyping.IO.read"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*%
n
builtins.int"builtins.int 0:abstractmethod@*ñ
readabletyping.IO.readable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*¥
readlinetyping.IO.readline"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*)
limit
builtins.int"builtins.int 0:abstractmethod@*‰
	readlinestyping.IO.readlines"@
builtins.list[typing.AnyStr]
typing.AnyStr"builtins.list*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*(
hint
builtins.int"builtins.int 0:abstractmethod@*‚
seektyping.IO.seek"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*(
offset
builtins.int"builtins.int**
whence
builtins.int"builtins.int 0:abstractmethod@*ñ
seekabletyping.IO.seekable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*å
telltyping.IO.tell"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*Ê
truncatetyping.IO.truncate"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None 0:abstractmethod@*ñ
writabletyping.IO.writable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*®
writetyping.IO.write"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*
s
typing.AnyStr0:abstractmethod@*’

writelinestyping.IO.writelines"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*O
linesD
typing.Iterable[typing.AnyStr]
typing.AnyStr"typing.Iterable0:abstractmethod@*â
__next__typing.IO.__next__"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*∫
__iter__typing.IO.__iter__"D
typing.Iterator[typing.AnyStr]
typing.AnyStr"typing.Iterator*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*∞
	__enter__typing.IO.__enter__"8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@*•
__exit__typing.IO.__exit__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*ê
tä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*k
valueb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*f
	tracebackY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None0:abstractmethod@P≥
BinaryIOtyping.BinaryIO"	typing.IO*ä
	__enter__typing.BinaryIO.__enter__""
typing.BinaryIO"typing.BinaryIO**
self"
typing.BinaryIO"typing.BinaryIO0:abstractmethod@¶
TextIOtyping.TextIO"	typing.IO*z
buffertyping.TextIO.buffer""
typing.BinaryIO"typing.BinaryIO*(
self
typing.TextIO"typing.TextIO0:property`*x
encodingtyping.TextIO.encoding"
builtins.str"builtins.str*(
self
typing.TextIO"typing.TextIO0:property`*ú
errorstyping.TextIO.errors"D
Union[builtins.str,None]
builtins.str"builtins.str
None*(
self
typing.TextIO"typing.TextIO0:property`*Ñ
line_bufferingtyping.TextIO.line_buffering"
builtins.int"builtins.int*(
self
typing.TextIO"typing.TextIO0:property`*c
newlinestyping.TextIO.newlines"
Any*(
self
typing.TextIO"typing.TextIO0:property`*Ä
	__enter__typing.TextIO.__enter__"
typing.TextIO"typing.TextIO*&
self
typing.TextIO"typing.TextIO0:abstractmethod@?

ByteStringtyping.ByteString"typing.Sequence@babc.ABCMeta¢
Matchtyping.Match"builtins.object*õ
expandtyping.Match.expand"
typing.AnyStr*H
self>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match*
template
typing.AnyStr*œ
groupstyping.Match.groups"D
typing.Sequence[typing.AnyStr]
typing.AnyStr"typing.Sequence*H
self>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match* 
default
typing.AnyStr *¸
	groupdicttyping.Match.groupdict"k
)builtins.dict[builtins.str,typing.AnyStr]
builtins.str"builtins.str
typing.AnyStr"builtins.dict*H
self>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match* 
default
typing.AnyStr *Ú
starttyping.Match.start"
builtins.int"builtins.int*H
self>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match*m
__group`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str *Ó
endtyping.Match.end"
builtins.int"builtins.int*H
self>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match*m
__group`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str *¥
spantyping.Match.span"`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*H
self>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match*m
__group`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str *ò
regstyping.Match.regs"§
0builtins.tuple[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.tuple*H
self>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match0:property`*È
__getitem__typing.Match.__getitem__"
typing.AnyStr*F
self>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match*e
g`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str2ó
grouptyping.Match.groupı
grouptyping.Match.group"
typing.AnyStr*H
self>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match*m
__group`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int 0:overloadXÅ
grouptyping.Match.group"B
builtins.tuple[typing.AnyStr]
typing.AnyStr"builtins.tuple*H
self>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match*l
__group1`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*l
__group2`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*l
groups`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int0:overloadXPr5
postyping.Match.pos
builtins.int"builtins.intr;
endpostyping.Match.endpos
builtins.int"builtins.intri
	lastindextyping.Match.lastindexD
Union[builtins.int,None]
builtins.int"builtins.int
Noner_
	lastgrouptyping.Match.lastgroup:
Union[typing.AnyStr,None]
typing.AnyStr
Noner0
stringtyping.Match.string
typing.AnyStrrY
retyping.Match.reB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Patternî
Patterntyping.Pattern"builtins.object*ÿ
searchtyping.Pattern.search"u
'Union[typing.Match[typing.AnyStr],None]>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match
None*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
string
typing.AnyStr*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *÷
matchtyping.Pattern.match"u
'Union[typing.Match[typing.AnyStr],None]>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match
None*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
string
typing.AnyStr*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *ﬁ
	fullmatchtyping.Pattern.fullmatch"u
'Union[typing.Match[typing.AnyStr],None]>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match
None*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
string
typing.AnyStr*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *˙
splittyping.Pattern.split"@
builtins.list[typing.AnyStr]
typing.AnyStr"builtins.list*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
string
typing.AnyStr*,
maxsplit
builtins.int"builtins.int *ë
findalltyping.Pattern.findall",
builtins.list[Any]
Any"builtins.list*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
string
typing.AnyStr*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *Ê
finditertyping.Pattern.finditer"
,typing.Iterator[typing.Match[typing.AnyStr]]>
typing.Match[typing.AnyStr]
typing.AnyStr"typing.Match"typing.Iterator*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
string
typing.AnyStr*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int 2∑
subtyping.Pattern.subÔ
subtyping.Pattern.sub"
typing.AnyStr*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
repl
typing.AnyStr*
string
typing.AnyStr*)
count
builtins.int"builtins.int 0:overloadX©
subtyping.Pattern.sub"
typing.AnyStr*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*U
replK
CallableType[builtins.function]&
builtins.function"builtins.function*
string
typing.AnyStr*)
count
builtins.int"builtins.int 0:overloadX2«
subntyping.Pattern.subn∂
subntyping.Pattern.subn"V
!Tuple[typing.AnyStr,builtins.int]
typing.AnyStr
builtins.int"builtins.int*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
repl
typing.AnyStr*
string
typing.AnyStr*)
count
builtins.int"builtins.int 0:overloadX
subntyping.Pattern.subn"V
!Tuple[typing.AnyStr,builtins.int]
typing.AnyStr
builtins.int"builtins.int*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*U
replK
CallableType[builtins.function]&
builtins.function"builtins.function*
string
typing.AnyStr*)
count
builtins.int"builtins.int 0:overloadXPr;
flagstyping.Pattern.flags
builtins.int"builtins.intr†

groupindextyping.Pattern.groupindexw
)typing.Mapping[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Mappingr=
groupstyping.Pattern.groups
builtins.int"builtins.intr4
patterntyping.Pattern.pattern
typing.AnyStr®


NamedTupletyping.NamedTuple"builtins.tuple*≥
__init__typing.NamedTuple.__init__"
None*0
self&
typing.NamedTuple"typing.NamedTuple**
typename
builtins.str"builtins.str*ç
fields
(typing.Iterable[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Iterable *
kwargs
Any*≠
_maketyping.NamedTuple._make"
	typing._T*+
cls"
Type[typing._T]
	typing._T*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable0:classmethodp*Ø
_asdicttyping.NamedTuple._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*0
self&
typing.NamedTuple"typing.NamedTuple*c
_replacetyping.NamedTuple._replace"
	typing._T*
self
	typing._T*
kwargs
Anyr±
_field_typestyping.NamedTuple._field_typesÄ
/collections.OrderedDict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"collections.OrderedDictrç
_field_defaults!typing.NamedTuple._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrr
_fieldstyping.NamedTuple._fieldsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuplerB
_sourcetyping.NamedTuple._source
builtins.str"builtins.strÃ

_TypedDicttyping._TypedDict"typing.Mapping*F
copytyping._TypedDict.copy"
	typing._T*
self
	typing._T*∆

setdefaulttyping._TypedDict.setdefault""
builtins.object"builtins.object*0
self&
typing._TypedDict"typing._TypedDict*
k
NoReturn
*/
default"
builtins.object"builtins.object*•
poptyping._TypedDict.pop""
builtins.object"builtins.object*0
self&
typing._TypedDict"typing._TypedDict*
k
NoReturn
*
default
	typing._T *[
updatetyping._TypedDict.update"
None*
self
	typing._T*
__m
	typing._T*y
__delitem__typing._TypedDict.__delitem__"
None*.
self&
typing._TypedDict"typing._TypedDict*
k
NoReturn
*Ÿ
itemstyping._TypedDict.items"Ñ
.typing.ItemsView[builtins.str,builtins.object]
builtins.str"builtins.str"
builtins.object"builtins.object"typing.ItemsView*0
self&
typing._TypedDict"typing._TypedDict*†
keystyping._TypedDict.keys"N
typing.KeysView[builtins.str]
builtins.str"builtins.str"typing.KeysView*0
self&
typing._TypedDict"typing._TypedDict*±
valuestyping._TypedDict.values"[
"typing.ValuesView[builtins.object]"
builtins.object"builtins.object"typing.ValuesView*0
self&
typing._TypedDict"typing._TypedDict*b
__or__typing._TypedDict.__or__"
	typing._T*
self
	typing._T*
__value
	typing._T*d
__ior__typing._TypedDict.__ior__"
	typing._T*
self
	typing._T*
__value
	typing._T@babc.ABCMetaà

ForwardReftyping.ForwardRef"builtins.object*º
__init__typing.ForwardRef.__init__"
None*0
self&
typing.ForwardRef"typing.ForwardRef*%
arg
builtins.str"builtins.str*1
is_argument
builtins.bool"builtins.bool *…
	_evaluatetyping.ForwardRef._evaluate"&
Union[Any,None]
Any
None*0
self&
typing.ForwardRef"typing.ForwardRef*°
globalnsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None*†
localnsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None*Ñ
__eq__typing.ForwardRef.__eq__"
builtins.bool"builtins.bool*.
self&
typing.ForwardRef"typing.ForwardRef*
other
Any*v
__hash__typing.ForwardRef.__hash__"
builtins.int"builtins.int*0
self&
typing.ForwardRef"typing.ForwardRef*t
__repr__typing.ForwardRef.__repr__"
builtins.str"builtins.str*.
self&
typing.ForwardRef"typing.ForwardRefrR
__forward_arg__!typing.ForwardRef.__forward_arg__
builtins.str"builtins.strrX
__forward_code__"typing.ForwardRef.__forward_code__ 
types.CodeType"types.CodeTyper`
__forward_evaluated__'typing.ForwardRef.__forward_evaluated__
builtins.bool"builtins.boolr`
__forward_value__#typing.ForwardRef.__forward_value__&
Union[Any,None]
Any
Nonerd
__forward_is_argument__)typing.ForwardRef.__forward_is_argument__
builtins.bool"builtins.boolC
overloadtyping.overload"
	typing._F*
func
	typing._F:
finaltyping.final"
	typing._F*
f
	typing._FL
no_type_checktyping.no_type_check"
	typing._F*
arg
	typing._Ff
no_type_check_decoratortyping.no_type_check_decorator"
	typing._F*
	decorator
	typing._FV
runtime_checkabletyping.runtime_checkable"

typing._TC*
cls

typing._TCã
get_type_hintstyping.get_type_hints"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ω
obj≥
ﬂTypeAlias[Union[builtins.object,CallableType[builtins.function],types.FunctionType,types.BuiltinFunctionType,types.MethodType,types.ModuleType,types.WrapperDescriptorType,types.MethodWrapperType,types.MethodDescriptorType]]¢
‘Union[builtins.object,CallableType[builtins.function],types.FunctionType,types.BuiltinFunctionType,types.MethodType,types.ModuleType,types.WrapperDescriptorType,types.MethodWrapperType,types.MethodDescriptorType]"
builtins.object"builtins.objectK
CallableType[builtins.function]&
builtins.function"builtins.function(
types.FunctionType"types.FunctionType6
types.BuiltinFunctionType"types.BuiltinFunctionType$
types.MethodType"types.MethodType$
types.ModuleType"types.ModuleType:
types.WrapperDescriptorType"types.WrapperDescriptorType2
types.MethodWrapperType"types.MethodWrapperType8
types.MethodDescriptorType"types.MethodDescriptorType"(typing._get_type_hints_obj_allowed_types*£
globalnsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *¢
localnsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None X

get_origintyping.get_origin"&
Union[Any,None]
Any
None*
tp
Any\
get_argstyping.get_args".
builtins.tuple[Any]
Any"builtins.tuple*
tp
Anyë
NewTypetyping.NewType""
Type[typing._T]
	typing._T*&
name
builtins.str"builtins.str**
tp"
Type[typing._T]
	typing._TX
type_check_onlytyping.type_check_only"
	typing._F*
func_or_cls
	typing._F"‘
casttyping.casto
casttyping.cast"
	typing._T*+
typ"
Type[typing._T]
	typing._T*
val
Any0:overloadXc
casttyping.cast"
Any*%
typ
builtins.str"builtins.str*
val
Any0:overloadXi
casttyping.cast"
Any*+
typ"
builtins.object"builtins.object*
val
Any0:overloadX*5
Any
typing.Any"
builtins.object"builtins.object*?
_promotetyping._promote"
builtins.object"builtins.object*A
Uniontyping.Union*
typing._SpecialForm"typing._SpecialForm*G
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm*A
Tupletyping.Tuple*
typing._SpecialForm"typing._SpecialForm*E
Generictyping.Generic*
typing._SpecialForm"typing._SpecialForm*G
Protocoltyping.Protocol*
typing._SpecialForm"typing._SpecialForm*G
Callabletyping.Callable*
typing._SpecialForm"typing._SpecialForm*?
Typetyping.Type*
typing._SpecialForm"typing._SpecialForm*G
ClassVartyping.ClassVar*
typing._SpecialForm"typing._SpecialForm*A
Finaltyping.Final*
typing._SpecialForm"typing._SpecialForm*E
Literaltyping.Literal*
typing._SpecialForm"typing._SpecialForm*A
	TypedDicttyping.TypedDict"
builtins.object"builtins.object*E
TYPE_CHECKINGtyping.TYPE_CHECKING
builtins.bool"builtins.bool