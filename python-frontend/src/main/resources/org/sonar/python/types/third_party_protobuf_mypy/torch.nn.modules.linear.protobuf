
torch.nn.modules.linearó
Identity torch.nn.modules.linear.Identity"torch.nn.modules.module.Module*·
__init__)torch.nn.modules.linear.Identity.__init__"
None*N
selfD
 torch.nn.modules.linear.Identity" torch.nn.modules.linear.Identity*
args
Any*
kwargs
Any*ê
forward(torch.nn.modules.linear.Identity.forward",
torch._tensor.Tensor"torch._tensor.Tensor*N
selfD
 torch.nn.modules.linear.Identity" torch.nn.modules.linear.Identity*7
input,
torch._tensor.Tensor"torch._tensor.Tensor½
Lineartorch.nn.modules.linear.Linear"torch.nn.modules.module.Module*Á
__init__'torch.nn.modules.linear.Linear.__init__"
None*J
self@
torch.nn.modules.linear.Linear"torch.nn.modules.linear.Linear*-
in_features
builtins.int"builtins.int*.
out_features
builtins.int"builtins.int**
bias
builtins.bool"builtins.bool *
device
Any *
dtype
Any *™
reset_parameters/torch.nn.modules.linear.Linear.reset_parameters"
None*J
self@
torch.nn.modules.linear.Linear"torch.nn.modules.linear.Linear*ä
forward&torch.nn.modules.linear.Linear.forward",
torch._tensor.Tensor"torch._tensor.Tensor*J
self@
torch.nn.modules.linear.Linear"torch.nn.modules.linear.Linear*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*¡

extra_repr)torch.nn.modules.linear.Linear.extra_repr"
builtins.str"builtins.str*J
self@
torch.nn.modules.linear.Linear"torch.nn.modules.linear.Linearr‰
__constants__,torch.nn.modules.linear.Linear.__constants__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrW
in_features*torch.nn.modules.linear.Linear.in_features
builtins.int"builtins.intrY
out_features+torch.nn.modules.linear.Linear.out_features
builtins.int"builtins.intr]
weight%torch.nn.modules.linear.Linear.weight,
torch._tensor.Tensor"torch._tensor.Tensorri
bias#torch.nn.modules.linear.Linear.bias<
torch.nn.parameter.Parameter"torch.nn.parameter.Parameter‰
NonDynamicallyQuantizableLinear7torch.nn.modules.linear.NonDynamicallyQuantizableLinear"torch.nn.modules.linear.Linear*Œ
__init__@torch.nn.modules.linear.NonDynamicallyQuantizableLinear.__init__"
None*|
selfr
7torch.nn.modules.linear.NonDynamicallyQuantizableLinear"7torch.nn.modules.linear.NonDynamicallyQuantizableLinear*-
in_features
builtins.int"builtins.int*.
out_features
builtins.int"builtins.int**
bias
builtins.bool"builtins.bool *
device
Any *
dtype
Any ®
Bilinear torch.nn.modules.linear.Bilinear"torch.nn.modules.module.Module*ø
__init__)torch.nn.modules.linear.Bilinear.__init__"
None*N
selfD
 torch.nn.modules.linear.Bilinear" torch.nn.modules.linear.Bilinear*.
in1_features
builtins.int"builtins.int*.
in2_features
builtins.int"builtins.int*.
out_features
builtins.int"builtins.int**
bias
builtins.bool"builtins.bool *
device
Any *
dtype
Any *Ÿ
reset_parameters1torch.nn.modules.linear.Bilinear.reset_parameters"
None*N
selfD
 torch.nn.modules.linear.Bilinear" torch.nn.modules.linear.Bilinear*¥
forward(torch.nn.modules.linear.Bilinear.forward",
torch._tensor.Tensor"torch._tensor.Tensor*N
selfD
 torch.nn.modules.linear.Bilinear" torch.nn.modules.linear.Bilinear*8
input1,
torch._tensor.Tensor"torch._tensor.Tensor*8
input2,
torch._tensor.Tensor"torch._tensor.Tensor*§

extra_repr+torch.nn.modules.linear.Bilinear.extra_repr"
builtins.str"builtins.str*N
selfD
 torch.nn.modules.linear.Bilinear" torch.nn.modules.linear.Bilinearr‹
__constants__.torch.nn.modules.linear.Bilinear.__constants__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr[
in1_features-torch.nn.modules.linear.Bilinear.in1_features
builtins.int"builtins.intr[
in2_features-torch.nn.modules.linear.Bilinear.in2_features
builtins.int"builtins.intr[
out_features-torch.nn.modules.linear.Bilinear.out_features
builtins.int"builtins.intr_
weight'torch.nn.modules.linear.Bilinear.weight,
torch._tensor.Tensor"torch._tensor.Tensorrk
bias%torch.nn.modules.linear.Bilinear.bias<
torch.nn.parameter.Parameter"torch.nn.parameter.Parameter£	

LazyLinear"torch.nn.modules.linear.LazyLinear"%torch.nn.modules.lazy.LazyModuleMixin"torch.nn.modules.linear.Linear*ž
__init__+torch.nn.modules.linear.LazyLinear.__init__"
None*R
selfH
"torch.nn.modules.linear.LazyLinear""torch.nn.modules.linear.LazyLinear*.
out_features
builtins.int"builtins.int**
bias
builtins.bool"builtins.bool *
device
Any *
dtype
Any *¥
reset_parameters3torch.nn.modules.linear.LazyLinear.reset_parameters"
None*R
selfH
"torch.nn.modules.linear.LazyLinear""torch.nn.modules.linear.LazyLinear*Ã
initialize_parameters8torch.nn.modules.linear.LazyLinear.initialize_parameters"
None*R
selfH
"torch.nn.modules.linear.LazyLinear""torch.nn.modules.linear.LazyLinear*
input
Anyr‚
cls_to_become0torch.nn.modules.linear.LazyLinear.cls_to_become?
CallableType[builtins.type]
builtins.type"builtins.typer‹
weight)torch.nn.modules.linear.LazyLinear.weightV
)torch.nn.parameter.UninitializedParameter")torch.nn.parameter.UninitializedParameterr‡
bias'torch.nn.modules.linear.LazyLinear.biasV
)torch.nn.parameter.UninitializedParameter")torch.nn.parameter.UninitializedParameter*“
__annotations__'torch.nn.modules.linear.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
Ftorch.nn.functional *v
__all__torch.nn.modules.linear.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list