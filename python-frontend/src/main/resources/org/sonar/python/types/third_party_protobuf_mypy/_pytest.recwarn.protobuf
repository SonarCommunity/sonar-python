
_pytest.recwarn§
WarningsRecorder _pytest.recwarn.WarningsRecorder"warnings.catch_warnings*¿
__init__)_pytest.recwarn.WarningsRecorder.__init__"
None*N
selfD
 _pytest.recwarn.WarningsRecorder" _pytest.recwarn.WarningsRecorder*/
	_ispytest
builtins.bool"builtins.bool *¯
list%_pytest.recwarn.WarningsRecorder.list"k
&builtins.list[warnings.WarningMessage]2
warnings.WarningMessage"warnings.WarningMessage"builtins.list*N
selfD
 _pytest.recwarn.WarningsRecorder" _pytest.recwarn.WarningsRecorder0:property`*◊
__getitem__,_pytest.recwarn.WarningsRecorder.__getitem__"2
warnings.WarningMessage"warnings.WarningMessage*FD
 _pytest.recwarn.WarningsRecorder" _pytest.recwarn.WarningsRecorder*
builtins.int"builtins.int*Ó
__iter__)_pytest.recwarn.WarningsRecorder.__iter__"o
(typing.Iterator[warnings.WarningMessage]2
warnings.WarningMessage"warnings.WarningMessage"typing.Iterator*FD
 _pytest.recwarn.WarningsRecorder" _pytest.recwarn.WarningsRecorder*ô
__len__(_pytest.recwarn.WarningsRecorder.__len__"
builtins.int"builtins.int*FD
 _pytest.recwarn.WarningsRecorder" _pytest.recwarn.WarningsRecorder*Ç
pop$_pytest.recwarn.WarningsRecorder.pop"2
warnings.WarningMessage"warnings.WarningMessage*N
selfD
 _pytest.recwarn.WarningsRecorder" _pytest.recwarn.WarningsRecorder*Q
clsF
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"type *â
clear&_pytest.recwarn.WarningsRecorder.clear"
None*N
selfD
 _pytest.recwarn.WarningsRecorder" _pytest.recwarn.WarningsRecorder*≈
	__enter__*_pytest.recwarn.WarningsRecorder.__enter__"D
 _pytest.recwarn.WarningsRecorder" _pytest.recwarn.WarningsRecorder*FD
 _pytest.recwarn.WarningsRecorder" _pytest.recwarn.WarningsRecorder*‡
__exit__)_pytest.recwarn.WarningsRecorder.__exit__"
None*FD
 _pytest.recwarn.WarningsRecorder" _pytest.recwarn.WarningsRecorder*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
NonerU
_entered)_pytest.recwarn.WarningsRecorder._entered
builtins.bool"builtins.boolrú
_list&_pytest.recwarn.WarningsRecorder._listk
&builtins.list[warnings.WarningMessage]2
warnings.WarningMessage"warnings.WarningMessage"builtins.list€
WarningsChecker_pytest.recwarn.WarningsChecker" _pytest.recwarn.WarningsRecorder*¥
__init__(_pytest.recwarn.WarningsChecker.__init__"
None*L
selfB
_pytest.recwarn.WarningsChecker"_pytest.recwarn.WarningsChecker*ª
expected_warning¢
IUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]],None]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"typeÄ
&builtins.tuple[Type[builtins.Warning]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"type"builtins.tuple
None *∂

match_expr£
1Union[builtins.str,re.Pattern[builtins.str],None]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern
None */
	_ispytest
builtins.bool"builtins.bool *›
__exit__(_pytest.recwarn.WarningsChecker.__exit__"
None*DB
_pytest.recwarn.WarningsChecker"_pytest.recwarn.WarningsChecker*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None8rä
expected_warning0_pytest.recwarn.WarningsChecker.expected_warning√
2Union[builtins.tuple[Type[builtins.Warning]],None]Ä
&builtins.tuple[Type[builtins.Warning]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"type"builtins.tuple
Nonerﬁ

match_expr*_pytest.recwarn.WarningsChecker.match_expr£
1Union[builtins.str,re.Pattern[builtins.str],None]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern
None"˝
deprecated_call_pytest.recwarn.deprecated_call∫
deprecated_call_pytest.recwarn.deprecated_call"D
 _pytest.recwarn.WarningsRecorder" _pytest.recwarn.WarningsRecorder*±
match£
1Union[builtins.str,re.Pattern[builtins.str],None]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern
None 0:overloadXã
deprecated_call_pytest.recwarn.deprecated_call"J
_pytest.recwarn.T"
builtins.object"builtins.object"builtins.object*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX"õ	
warns_pytest.recwarn.warns”
warns_pytest.recwarn.warns"B
_pytest.recwarn.WarningsChecker"_pytest.recwarn.WarningsChecker*¨
expected_warningì
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"typeÄ
&builtins.tuple[Type[builtins.Warning]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"type"builtins.tuple *±
match£
1Union[builtins.str,re.Pattern[builtins.str],None]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern
None 0:overloadX§
warns_pytest.recwarn.warns"J
_pytest.recwarn.T"
builtins.object"builtins.object"builtins.object*™
expected_warningì
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"typeÄ
&builtins.tuple[Type[builtins.Warning]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"type"builtins.tuple*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX*ã
__annotations___pytest.recwarn.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict