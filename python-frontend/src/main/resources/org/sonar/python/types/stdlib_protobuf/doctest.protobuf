
doctestÆ
TestResultsdoctest.TestResults"builtins.tuple*ß
_replacedoctest.TestResults._replace"}
doctest.TestResults._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*à
_self}
doctest.TestResults._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int**
failed
builtins.int"builtins.int *-
	attempted
builtins.int"builtins.int z36z37z38z39z310z311*ƒ
__new__doctest.TestResults.__new__"}
doctest.TestResults._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*´
_cls†
Type[doctest.TestResults._NT]}
doctest.TestResults._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*(
failed
builtins.int"builtins.int*+
	attempted
builtins.int"builtins.intz36z37z38z39z310z311*§
_asdictdoctest.TestResults._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*à
_self}
doctest.TestResults._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.intz36z37z38z39z310z311*‚
_makedoctest.TestResults._make"}
doctest.TestResults._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*´
_cls†
Type[doctest.TestResults._NT]}
doctest.TestResults._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpz36z37z38z39z310z311j36j37j38j39j310j311rv
faileddoctest.TestResults.failed
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311r|
	attempteddoctest.TestResults.attempted
builtins.int"builtins.int*36*36*37*37*38*38*39*39*310*310*311*311r¢
_fieldsdoctest.TestResults._fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str*36*37*38*39*310*311r£
_field_types doctest.TestResults._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311r©
_field_defaults#doctest.TestResults._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311r^
_sourcedoctest.TestResults._source
builtins.str"builtins.str*36*37*38*39*310*311r©
__annotations__#doctest.TestResults.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311rÈ
__match_args__"doctest.TestResults.__match_args__®
2Tuple[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*310*311ÿ
Exampledoctest.Example"builtins.object*≈
__init__doctest.Example.__init__"
None*,
self"
doctest.Example"doctest.Example*(
source
builtins.str"builtins.str*&
want
builtins.str"builtins.str*S
exc_msgD
Union[builtins.str,None]
builtins.str"builtins.str
None **
lineno
builtins.int"builtins.int **
indent
builtins.int"builtins.int *Õ
optionsΩ
5Union[builtins.dict[builtins.int,builtins.bool],None]x
)builtins.dict[builtins.int,builtins.bool]
builtins.int"builtins.int
builtins.bool"builtins.bool"builtins.dict
None z36z37z38z39z310z311*¶
__eq__doctest.Example.__eq__"
builtins.bool"builtins.bool*$"
doctest.Example"doctest.Example*$"
builtins.object"builtins.objectz36z37z38z39z310z311j36j37j38j39j310j311rX
sourcedoctest.Example.source
builtins.str"builtins.str*36*37*38*39*310*311rT
wantdoctest.Example.want
builtins.str"builtins.str*36*37*38*39*310*311rÇ
exc_msgdoctest.Example.exc_msgD
Union[builtins.str,None]
builtins.str"builtins.str
None*36*37*38*39*310*311rX
linenodoctest.Example.lineno
builtins.int"builtins.int*36*37*38*39*310*311rX
indentdoctest.Example.indent
builtins.int"builtins.int*36*37*38*39*310*311r∂
optionsdoctest.Example.optionsx
)builtins.dict[builtins.int,builtins.bool]
builtins.int"builtins.int
builtins.bool"builtins.bool"builtins.dict*36*37*38*39*310*311ç
DocTestdoctest.DocTest"builtins.object*‡
__init__doctest.DocTest.__init__"
None*,
self"
doctest.DocTest"doctest.DocTest*a
examplesS
builtins.list[doctest.Example]"
doctest.Example"doctest.Example"builtins.list*b
globsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*&
name
builtins.str"builtins.str*R
filenameD
Union[builtins.str,None]
builtins.str"builtins.str
None*P
linenoD
Union[builtins.int,None]
builtins.int"builtins.int
None*S
	docstringD
Union[builtins.str,None]
builtins.str"builtins.str
Nonez36z37z38z39z310z311*¶
__lt__doctest.DocTest.__lt__"
builtins.bool"builtins.bool*$"
doctest.DocTest"doctest.DocTest*$"
doctest.DocTest"doctest.DocTestz36z37z38z39z310z311*¶
__eq__doctest.DocTest.__eq__"
builtins.bool"builtins.bool*$"
doctest.DocTest"doctest.DocTest*$"
builtins.object"builtins.objectz36z37z38z39z310z311j36j37j38j39j310j311rì
examplesdoctest.DocTest.examplesS
builtins.list[doctest.Example]"
doctest.Example"doctest.Example"builtins.list*36*37*38*39*310*311rë
globsdoctest.DocTest.globsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311rT
namedoctest.DocTest.name
builtins.str"builtins.str*36*37*38*39*310*311rÑ
filenamedoctest.DocTest.filenameD
Union[builtins.str,None]
builtins.str"builtins.str
None*36*37*38*39*310*311rÄ
linenodoctest.DocTest.linenoD
Union[builtins.int,None]
builtins.int"builtins.int
None*36*37*38*39*310*311rÜ
	docstringdoctest.DocTest.docstringD
Union[builtins.str,None]
builtins.str"builtins.str
None*36*37*38*39*310*311ä

DocTestParserdoctest.DocTestParser"builtins.object*˝
parsedoctest.DocTestParser.parse"Æ
2builtins.list[Union[builtins.str,doctest.Example]]i
#Union[builtins.str,doctest.Example]
builtins.str"builtins.str"
doctest.Example"doctest.Example"builtins.list*8
self.
doctest.DocTestParser"doctest.DocTestParser*(
string
builtins.str"builtins.str*(
name
builtins.str"builtins.str z36z37z38z39z310z311*Ñ
get_doctest!doctest.DocTestParser.get_doctest""
doctest.DocTest"doctest.DocTest*8
self.
doctest.DocTestParser"doctest.DocTestParser*(
string
builtins.str"builtins.str*b
globsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*&
name
builtins.str"builtins.str*R
filenameD
Union[builtins.str,None]
builtins.str"builtins.str
None*P
linenoD
Union[builtins.int,None]
builtins.int"builtins.int
Nonez36z37z38z39z310z311*Ø
get_examples"doctest.DocTestParser.get_examples"S
builtins.list[doctest.Example]"
doctest.Example"doctest.Example"builtins.list*8
self.
doctest.DocTestParser"doctest.DocTestParser*(
string
builtins.str"builtins.str*(
name
builtins.str"builtins.str z36z37z38z39z310z311j36j37j38j39j310j311‘	
DocTestFinderdoctest.DocTestFinder"builtins.object*Ÿ
__init__doctest.DocTestFinder.__init__"
None*8
self.
doctest.DocTestFinder"doctest.DocTestFinder*-
verbose
builtins.bool"builtins.bool *<
parser.
doctest.DocTestParser"doctest.DocTestParser *-
recurse
builtins.bool"builtins.bool *3
exclude_empty
builtins.bool"builtins.bool z36z37z38z39z310z311*§
finddoctest.DocTestFinder.find"S
builtins.list[doctest.DocTest]"
doctest.DocTest"doctest.DocTest"builtins.list*8
self.
doctest.DocTestFinder"doctest.DocTestFinder*+
obj"
builtins.object"builtins.object*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *å
module~
*Union[None,builtins.bool,types.ModuleType]
None
builtins.bool"builtins.bool$
types.ModuleType"types.ModuleType *†
globsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *•

extraglobsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None z36z37z38z39z310z311j36j37j38j39j310j311‹"
DocTestRunnerdoctest.DocTestRunner"builtins.object*Å
__init__doctest.DocTestRunner.__init__"
None*8
self.
doctest.DocTestRunner"doctest.DocTestRunner*n
checker_
!Union[doctest.OutputChecker,None].
doctest.OutputChecker"doctest.OutputChecker
None *V
verboseG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None */
optionflags
builtins.int"builtins.int z36z37z38z39z310z311*Ö
report_start"doctest.DocTestRunner.report_start"
None*8
self.
doctest.DocTestRunner"doctest.DocTestRunner*ì
outâ
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"doctest._Out*,
test"
doctest.DocTest"doctest.DocTest*/
example"
doctest.Example"doctest.Examplez36z37z38z39z310z311*∞
report_success$doctest.DocTestRunner.report_success"
None*8
self.
doctest.DocTestRunner"doctest.DocTestRunner*ì
outâ
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"doctest._Out*,
test"
doctest.DocTest"doctest.DocTest*/
example"
doctest.Example"doctest.Example*%
got
builtins.str"builtins.strz36z37z38z39z310z311*∞
report_failure$doctest.DocTestRunner.report_failure"
None*8
self.
doctest.DocTestRunner"doctest.DocTestRunner*ì
outâ
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"doctest._Out*,
test"
doctest.DocTest"doctest.DocTest*/
example"
doctest.Example"doctest.Example*%
got
builtins.str"builtins.strz36z37z38z39z310z311*¨
report_unexpected_exception1doctest.DocTestRunner.report_unexpected_exception"
None*8
self.
doctest.DocTestRunner"doctest.DocTestRunner*ì
outâ
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"doctest._Out*,
test"
doctest.DocTest"doctest.DocTest*/
example"
doctest.Example"doctest.Example*Ü
exc_info˜
YTypeAlias[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]Ñ
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType"_typeshed.ExcInfoz36z37z38z39z310z311*∑
rundoctest.DocTestRunner.run"¶
+TypeAlias[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"doctest.TestResults*8
self.
doctest.DocTestRunner"doctest.DocTestRunner*,
test"
doctest.DocTest"doctest.DocTest*X
compileflagsD
Union[builtins.int,None]
builtins.int"builtins.int
None *‹
out–
6Union[TypeAlias[CallableType[builtins.function]],None]â
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"doctest._Out
None *1
clear_globs
builtins.bool"builtins.bool z36z37z38z39z310z311*Å
	summarizedoctest.DocTestRunner.summarize"¶
+TypeAlias[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"doctest.TestResults*8
self.
doctest.DocTestRunner"doctest.DocTestRunner*V
verboseG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None z36z37z38z39z310z311*Ω
mergedoctest.DocTestRunner.merge"
None*8
self.
doctest.DocTestRunner"doctest.DocTestRunner*9
other.
doctest.DocTestRunner"doctest.DocTestRunnerz36z37z38z39z310z311j36j37j38j39j310j311r`
DIVIDERdoctest.DocTestRunner.DIVIDER
builtins.str"builtins.str*36*37*38*39*310*311rh
optionflags!doctest.DocTestRunner.optionflags
builtins.int"builtins.int*36*37*38*39*310*311rz
original_optionflags*doctest.DocTestRunner.original_optionflags
builtins.int"builtins.int*36*37*38*39*310*311r\
triesdoctest.DocTestRunner.tries
builtins.int"builtins.int*36*37*38*39*310*311rb
failuresdoctest.DocTestRunner.failures
builtins.int"builtins.int*36*37*38*39*310*311r`
testdoctest.DocTestRunner.test"
doctest.DocTest"doctest.DocTest*36*37*38*39*310*311∞
OutputCheckerdoctest.OutputChecker"builtins.object*§
check_output"doctest.OutputChecker.check_output"
builtins.bool"builtins.bool*8
self.
doctest.OutputChecker"doctest.OutputChecker*&
want
builtins.str"builtins.str*%
got
builtins.str"builtins.str*-
optionflags
builtins.int"builtins.intz36z37z38z39z310z311*µ
output_difference'doctest.OutputChecker.output_difference"
builtins.str"builtins.str*8
self.
doctest.OutputChecker"doctest.OutputChecker*/
example"
doctest.Example"doctest.Example*%
got
builtins.str"builtins.str*-
optionflags
builtins.int"builtins.intz36z37z38z39z310z311j36j37j38j39j310j311ë
DocTestFailuredoctest.DocTestFailure"builtins.Exception*ë
__init__doctest.DocTestFailure.__init__"
None*:
self0
doctest.DocTestFailure"doctest.DocTestFailure*,
test"
doctest.DocTest"doctest.DocTest*/
example"
doctest.Example"doctest.Example*%
got
builtins.str"builtins.strz36z37z38z39z310z311j36j37j38j39j310j311ra
testdoctest.DocTestFailure.test"
doctest.DocTest"doctest.DocTest*36*37*38*39*310*311rg
exampledoctest.DocTestFailure.example"
doctest.Example"doctest.Example*36*37*38*39*310*311rY
gotdoctest.DocTestFailure.got
builtins.str"builtins.str*36*37*38*39*310*311Ç
UnexpectedExceptiondoctest.UnexpectedException"builtins.Exception*Ç
__init__$doctest.UnexpectedException.__init__"
None*D
self:
doctest.UnexpectedException"doctest.UnexpectedException*,
test"
doctest.DocTest"doctest.DocTest*/
example"
doctest.Example"doctest.Example*Ü
exc_info˜
YTypeAlias[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]Ñ
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType"_typeshed.ExcInfoz36z37z38z39z310z311j36j37j38j39j310j311rf
test doctest.UnexpectedException.test"
doctest.DocTest"doctest.DocTest*36*37*38*39*310*311rl
example#doctest.UnexpectedException.example"
doctest.Example"doctest.Example*36*37*38*39*310*311rƒ
exc_info$doctest.UnexpectedException.exc_info˜
YTypeAlias[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]Ñ
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType"_typeshed.ExcInfo*36*37*38*39*310*311S
DebugRunnerdoctest.DebugRunner"doctest.DocTestRunnerj36j37j38j39j310j311›	
DocTestCasedoctest.DocTestCase"unittest.case.TestCase*Ç
__init__doctest.DocTestCase.__init__"
None*4
self*
doctest.DocTestCase"doctest.DocTestCase*,
test"
doctest.DocTest"doctest.DocTest*/
optionflags
builtins.int"builtins.int *î
setUpÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ó
tearDownÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *n
checker_
!Union[doctest.OutputChecker,None].
doctest.OutputChecker"doctest.OutputChecker
None z36z37z38z39z310z311*Ä
runTestdoctest.DocTestCase.runTest"
None*4
self*
doctest.DocTestCase"doctest.DocTestCasez36z37z38z39z310z311*…
format_failure"doctest.DocTestCase.format_failure"
builtins.str"builtins.str*4
self*
doctest.DocTestCase"doctest.DocTestCase*%
err
builtins.str"builtins.strz36z37z38z39z310z311*≤
__eq__doctest.DocTestCase.__eq__"
builtins.bool"builtins.bool*,*
doctest.DocTestCase"doctest.DocTestCase*$"
builtins.object"builtins.objectz36z37z38z39z310z311j36j37j38j39j310j311Ø
SkipDocTestCasedoctest.SkipDocTestCase"doctest.DocTestCase*¿
__init__ doctest.SkipDocTestCase.__init__"
None*<
self2
doctest.SkipDocTestCase"doctest.SkipDocTestCase*0
module$
types.ModuleType"types.ModuleTypez36z37z38z39z310z311*ê
	test_skip!doctest.SkipDocTestCase.test_skip"
None*<
self2
doctest.SkipDocTestCase"doctest.SkipDocTestCasez36z37z38z39z310z311j36j37j38j39j310j311Z
_DocTestSuitedoctest._DocTestSuite"unittest.suite.TestSuitej36j37j38j39j310j311Q
DocFileCasedoctest.DocFileCase"doctest.DocTestCasej36j37j38j39j310j311í
register_optionflagdoctest.register_optionflag"
builtins.int"builtins.int*&
name
builtins.str"builtins.strz36z37z38z39z310z311˜
testmoddoctest.testmod"¶
+TypeAlias[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"doctest.TestResults*Y
mP
Union[types.ModuleType,None]$
types.ModuleType"types.ModuleType
None *P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *†
globsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *V
verboseG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *,
report
builtins.bool"builtins.bool */
optionflags
builtins.int"builtins.int *•

extraglobsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *4
raise_on_error
builtins.bool"builtins.bool *3
exclude_empty
builtins.bool"builtins.bool z36z37z38z39z310z311Ì	
testfiledoctest.testfile"¶
+TypeAlias[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"doctest.TestResults**
filename
builtins.str"builtins.str*5
module_relative
builtins.bool"builtins.bool *P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *ä
package{
)Union[None,builtins.str,types.ModuleType]
None
builtins.str"builtins.str$
types.ModuleType"types.ModuleType *†
globsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *V
verboseG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *,
report
builtins.bool"builtins.bool */
optionflags
builtins.int"builtins.int *•

extraglobsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *4
raise_on_error
builtins.bool"builtins.bool *<
parser.
doctest.DocTestParser"doctest.DocTestParser *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None z36z37z38z39z310z311œ
run_docstring_examplesdoctest.run_docstring_examples"
None*)
f"
builtins.object"builtins.object*b
globsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*-
verbose
builtins.bool"builtins.bool *(
name
builtins.str"builtins.str *X
compileflagsD
Union[builtins.int,None]
builtins.int"builtins.int
None */
optionflags
builtins.int"builtins.int z36z37z38z39z310z311ù
set_unittest_reportflags doctest.set_unittest_reportflags"
builtins.int"builtins.int*'
flags
builtins.int"builtins.intz36z37z38z39z310z311œ
DocTestSuitedoctest.DocTestSuite".
doctest._DocTestSuite"doctest._DocTestSuite*â
module{
)Union[None,builtins.str,types.ModuleType]
None
builtins.str"builtins.str$
types.ModuleType"types.ModuleType *†
globsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *•

extraglobsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *r
test_finder_
!Union[doctest.DocTestFinder,None].
doctest.DocTestFinder"doctest.DocTestFinder
None *
options
Anyz36z37z38z39z310z311°
DocFileTestdoctest.DocFileTest"*
doctest.DocFileCase"doctest.DocFileCase*&
path
builtins.str"builtins.str*5
module_relative
builtins.bool"builtins.bool *ä
package{
)Union[None,builtins.str,types.ModuleType]
None
builtins.str"builtins.str$
types.ModuleType"types.ModuleType *†
globsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *<
parser.
doctest.DocTestParser"doctest.DocTestParser *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *
options
Anyz36z37z38z39z310z311®
DocFileSuitedoctest.DocFileSuite".
doctest._DocTestSuite"doctest._DocTestSuite*'
paths
builtins.str"builtins.str*
kw
Anyz36z37z38z39z310z311ë
script_from_examplesdoctest.script_from_examples"
builtins.str"builtins.str*#
s
builtins.str"builtins.strz36z37z38z39z310z311ä

testsourcedoctest.testsource"
builtins.str"builtins.str*á
module{
)Union[None,builtins.str,types.ModuleType]
None
builtins.str"builtins.str$
types.ModuleType"types.ModuleType*&
name
builtins.str"builtins.strz36z37z38z39z310z311∂
	debug_srcdoctest.debug_src"
None*%
src
builtins.str"builtins.str*(
pm
builtins.bool"builtins.bool *†
globsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None z36z37z38z39z310z311º
debug_scriptdoctest.debug_script"
None*%
src
builtins.str"builtins.str*(
pm
builtins.bool"builtins.bool *†
globsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None z36z37z38z39z310z311ñ
debugdoctest.debug"
None*á
module{
)Union[None,builtins.str,types.ModuleType]
None
builtins.str"builtins.str$
types.ModuleType"types.ModuleType*&
name
builtins.str"builtins.str*(
pm
builtins.bool"builtins.bool z36z37z38z39z310z311*ù
__annotations__doctest.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*Ä
__all__doctest.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*36*37*38*39*310*311*√
OPTIONFLAGS_BY_NAMEdoctest.OPTIONFLAGS_BY_NAMEu
(builtins.dict[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.dict*36*37*38*39*310*311*p
DONT_ACCEPT_TRUE_FOR_1doctest.DONT_ACCEPT_TRUE_FOR_1
builtins.int"builtins.int*36*37*38*39*310*311*n
DONT_ACCEPT_BLANKLINEdoctest.DONT_ACCEPT_BLANKLINE
builtins.int"builtins.int*36*37*38*39*310*311*l
NORMALIZE_WHITESPACEdoctest.NORMALIZE_WHITESPACE
builtins.int"builtins.int*36*37*38*39*310*311*T
ELLIPSISdoctest.ELLIPSIS
builtins.int"builtins.int*36*37*38*39*310*311*L
SKIPdoctest.SKIP
builtins.int"builtins.int*36*37*38*39*310*311*r
IGNORE_EXCEPTION_DETAILdoctest.IGNORE_EXCEPTION_DETAIL
builtins.int"builtins.int*36*37*38*39*310*311*d
COMPARISON_FLAGSdoctest.COMPARISON_FLAGS
builtins.int"builtins.int*36*37*38*39*310*311*\
REPORT_UDIFFdoctest.REPORT_UDIFF
builtins.int"builtins.int*36*37*38*39*310*311*\
REPORT_CDIFFdoctest.REPORT_CDIFF
builtins.int"builtins.int*36*37*38*39*310*311*\
REPORT_NDIFFdoctest.REPORT_NDIFF
builtins.int"builtins.int*36*37*38*39*310*311*v
REPORT_ONLY_FIRST_FAILURE!doctest.REPORT_ONLY_FIRST_FAILURE
builtins.int"builtins.int*36*37*38*39*310*311*V
	FAIL_FASTdoctest.FAIL_FAST
builtins.int"builtins.int*36*37*38*39*310*311*b
REPORTING_FLAGSdoctest.REPORTING_FLAGS
builtins.int"builtins.int*36*37*38*39*310*311*d
BLANKLINE_MARKERdoctest.BLANKLINE_MARKER
builtins.str"builtins.str*36*37*38*39*310*311*b
ELLIPSIS_MARKERdoctest.ELLIPSIS_MARKER
builtins.str"builtins.str*36*37*38*39*310*311*ì
masterdoctest.master_
!Union[doctest.DocTestRunner,None].
doctest.DocTestRunner"doctest.DocTestRunner
None*36*37*38*39*310*311