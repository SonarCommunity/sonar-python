
numpy._pytesttesterÀ	
PytestTester numpy._pytesttester.PytestTester"builtins.object*æ
__init__)numpy._pytesttester.PytestTester.__init__"
None*N
selfD
 numpy._pytesttester.PytestTester" numpy._pytesttester.PytestTester*-
module_name
builtins.str"builtins.str*Î
__call__)numpy._pytesttester.PytestTester.__call__"
builtins.bool"builtins.bool*N
selfD
 numpy._pytesttester.PytestTester" numpy._pytesttester.PytestTester*∂
label®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *+
verbose
builtins.int"builtins.int *ö

extra_argvá
)Union[None,typing.Iterable[builtins.str]]
NoneN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable *J
doctests:
Literal[builtins.bool]	
builtins.bool"builtins.bool *.
coverage
builtins.bool"builtins.bool *-
	durations
builtins.int"builtins.int *ï
testsá
)Union[None,typing.Iterable[builtins.str]]
NoneN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable rY
module_name,numpy._pytesttester.PytestTester.module_name
builtins.str"builtins.str*è
__annotations__#numpy._pytesttester.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*?
Ltyping.Literal*
typing._SpecialForm"typing._SpecialForm*r
__all__numpy._pytesttester.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list