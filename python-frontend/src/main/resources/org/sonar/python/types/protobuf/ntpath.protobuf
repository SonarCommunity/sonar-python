
ntpathntpath"M
abspathntpath.abspath"
typing.AnyStr*
path
typing.AnyStrz27"L
basenamentpath.basename"
typing.AnyStr*
p
typing.AnyStrz27"J
dirnamentpath.dirname"
typing.AnyStr*
p
typing.AnyStrz27"S

expanduserntpath.expanduser"
typing.AnyStr*
path
typing.AnyStrz27"S

expandvarsntpath.expandvars"
typing.AnyStr*
path
typing.AnyStrz27"L
normcasentpath.normcase"
typing.AnyStr*
s
typing.AnyStrz27"O
normpathntpath.normpath"
typing.AnyStr*
path
typing.AnyStrz27"O
realpathntpath.realpath"
typing.AnyStr*
path
typing.AnyStrz27"ì
commonprefixntpath.commonprefix"
Any*a
mZ
!typing.Sequence[builtins.unicode]$
builtins.unicode"builtins.unicode"typing.Sequencez27"m
lexistsntpath.lexists"
builtins.bool"builtins.bool*.
path$
builtins.unicode"builtins.unicodez27"u
getatimentpath.getatime" 
builtins.float"builtins.float*2
filename$
builtins.unicode"builtins.unicodez27"u
getmtimentpath.getmtime" 
builtins.float"builtins.float*2
filename$
builtins.unicode"builtins.unicodez27"u
getctimentpath.getctime" 
builtins.float"builtins.float*2
filename$
builtins.unicode"builtins.unicodez27"o
getsizentpath.getsize"
builtins.int"builtins.int*2
filename$
builtins.unicode"builtins.unicodez27"f
isabsntpath.isabs"
builtins.bool"builtins.bool*+
s$
builtins.unicode"builtins.unicodez27"k
isfilentpath.isfile"
builtins.bool"builtins.bool*.
path$
builtins.unicode"builtins.unicodez27"f
isdirntpath.isdir"
builtins.bool"builtins.bool*+
s$
builtins.unicode"builtins.unicodez27"k
islinkntpath.islink"
builtins.bool"builtins.bool*.
path$
builtins.unicode"builtins.unicodez27"m
ismountntpath.ismount"
builtins.bool"builtins.bool*.
path$
builtins.unicode"builtins.unicodez27"õ
samefilentpath.samefile"
builtins.bool"builtins.bool*,
f1$
builtins.unicode"builtins.unicode*,
f2$
builtins.unicode"builtins.unicodez27"ï
sameopenfilentpath.sameopenfile"
builtins.bool"builtins.bool*%
fp1
builtins.int"builtins.int*%
fp2
builtins.int"builtins.intz27"ü
samestatntpath.samestat"
builtins.bool"builtins.bool*.
s1&
posix.stat_result"posix.stat_result*.
s2&
posix.stat_result"posix.stat_resultz27"Å
splitntpath.split"L
"Tuple[typing.AnyStr,typing.AnyStr]
typing.AnyStr
typing.AnyStr*
p
typing.AnyStrz27"ã

splitdriventpath.splitdrive"L
"Tuple[typing.AnyStr,typing.AnyStr]
typing.AnyStr
typing.AnyStr*
p
typing.AnyStrz27"á
splitextntpath.splitext"L
"Tuple[typing.AnyStr,typing.AnyStr]
typing.AnyStr
typing.AnyStr*
p
typing.AnyStrz27"è
splituncntpath.splitunc"L
"Tuple[typing.AnyStr,typing.AnyStr]
typing.AnyStr
typing.AnyStr*
p
typing.AnyStrz27z35z36"Æ
walkntpath.walk"
None*
path
typing.AnyStr*V
visitK
CallableType[builtins.function]&
builtins.function"builtins.function*
arg
	ntpath._Tz27*ú
joinntpath.joinä
joinntpath.join"
builtins.str"builtins.str*$
__p1
builtins.str"builtins.str*#
p
builtins.str"builtins.str0:overloadXî
joinntpath.join"$
builtins.unicode"builtins.unicode*$
__p1
builtins.str"builtins.str*$
__p2
builtins.str"builtins.str*$
__p3
builtins.str"builtins.str*,
__p4$
builtins.unicode"builtins.unicode*+
p$
builtins.unicode"builtins.unicode0:overloadXÓ
joinntpath.join"$
builtins.unicode"builtins.unicode*$
__p1
builtins.str"builtins.str*$
__p2
builtins.str"builtins.str*,
__p3$
builtins.unicode"builtins.unicode*+
p$
builtins.unicode"builtins.unicode0:overloadX»
joinntpath.join"$
builtins.unicode"builtins.unicode*$
__p1
builtins.str"builtins.str*,
__p2$
builtins.unicode"builtins.unicode*+
p$
builtins.unicode"builtins.unicode0:overloadX¢
joinntpath.join"$
builtins.unicode"builtins.unicode*,
__p1$
builtins.unicode"builtins.unicode*+
p$
builtins.unicode"builtins.unicode0:overloadX"27*µ	
joinntpath.joinÆ
joinntpath.join"
builtins.str"builtins.str*Ù
pathÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*ı
pathsÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath0:overloadX⁄
joinntpath.join" 
builtins.bytes"builtins.bytes*à
path˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath*â
paths˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath0:overloadX"35"36"37"38"39*ø
relpathntpath.relpath¿
relpathntpath.relpath"
builtins.str"builtins.str*&
path
builtins.str"builtins.str*Q
startD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX‹
relpathntpath.relpath"$
builtins.unicode"builtins.unicode*.
path$
builtins.unicode"builtins.unicode*]
startP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None 0:overloadX"27*ë
realpathntpath.realpathÑ
realpathntpath.realpath"
typing.AnyStr*F
path<
os.PathLike[typing.AnyStr]
typing.AnyStr"os.PathLike0:overloadXY
realpathntpath.realpath"
typing.AnyStr*
path
typing.AnyStr0:overloadX"35"36"37"38"39