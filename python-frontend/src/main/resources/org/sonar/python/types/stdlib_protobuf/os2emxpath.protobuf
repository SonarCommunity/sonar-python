

os2emxpathp
existsgenericpath.exists"
builtins.bool"builtins.bool*.
path$
builtins.unicode"builtins.unicodez27Q
abspathos2emxpath.abspath"
typing.AnyStr*
path
typing.AnyStrz27P
basenameos2emxpath.basename"
typing.AnyStr*
p
typing.AnyStrz27N
dirnameos2emxpath.dirname"
typing.AnyStr*
p
typing.AnyStrz27W

expanduseros2emxpath.expanduser"
typing.AnyStr*
path
typing.AnyStrz27W

expandvarsos2emxpath.expandvars"
typing.AnyStr*
path
typing.AnyStrz27P
normcaseos2emxpath.normcase"
typing.AnyStr*
s
typing.AnyStrz27S
normpathos2emxpath.normpath"
typing.AnyStr*
path
typing.AnyStrz27W
realpathos2emxpath.realpath"
typing.AnyStr*
filename
typing.AnyStrz27ó
commonprefixos2emxpath.commonprefix"
Any*a
mZ
!typing.Sequence[builtins.unicode]$
builtins.unicode"builtins.unicode"typing.Sequencez27q
lexistsos2emxpath.lexists"
builtins.bool"builtins.bool*.
path$
builtins.unicode"builtins.unicodez27y
getatimeos2emxpath.getatime" 
builtins.float"builtins.float*2
filename$
builtins.unicode"builtins.unicodez27y
getmtimeos2emxpath.getmtime" 
builtins.float"builtins.float*2
filename$
builtins.unicode"builtins.unicodez27y
getctimeos2emxpath.getctime" 
builtins.float"builtins.float*2
filename$
builtins.unicode"builtins.unicodez27s
getsizeos2emxpath.getsize"
builtins.int"builtins.int*2
filename$
builtins.unicode"builtins.unicodez27j
isabsos2emxpath.isabs"
builtins.bool"builtins.bool*+
s$
builtins.unicode"builtins.unicodez27o
isfileos2emxpath.isfile"
builtins.bool"builtins.bool*.
path$
builtins.unicode"builtins.unicodez27j
isdiros2emxpath.isdir"
builtins.bool"builtins.bool*+
s$
builtins.unicode"builtins.unicodez27o
islinkos2emxpath.islink"
builtins.bool"builtins.bool*.
path$
builtins.unicode"builtins.unicodez27q
ismountos2emxpath.ismount"
builtins.bool"builtins.bool*.
path$
builtins.unicode"builtins.unicodez27ü
samefileos2emxpath.samefile"
builtins.bool"builtins.bool*,
f1$
builtins.unicode"builtins.unicode*,
f2$
builtins.unicode"builtins.unicodez27ô
sameopenfileos2emxpath.sameopenfile"
builtins.bool"builtins.bool*%
fp1
builtins.int"builtins.int*%
fp2
builtins.int"builtins.intz27£
samestatos2emxpath.samestat"
builtins.bool"builtins.bool*.
s1&
posix.stat_result"posix.stat_result*.
s2&
posix.stat_result"posix.stat_resultz27Ö
splitos2emxpath.split"L
"Tuple[typing.AnyStr,typing.AnyStr]
typing.AnyStr
typing.AnyStr*
p
typing.AnyStrz27è

splitdriveos2emxpath.splitdrive"L
"Tuple[typing.AnyStr,typing.AnyStr]
typing.AnyStr
typing.AnyStr*
p
typing.AnyStrz27ã
splitextos2emxpath.splitext"L
"Tuple[typing.AnyStr,typing.AnyStr]
typing.AnyStr
typing.AnyStr*
p
typing.AnyStrz27∂
walkos2emxpath.walk"
None*
path
typing.AnyStr*V
visitK
CallableType[builtins.function]&
builtins.function"builtins.function*
arg
os2emxpath._Tz27"¥
joinos2emxpath.joiné
joinos2emxpath.join"
builtins.str"builtins.str*$
__p1
builtins.str"builtins.str*#
p
builtins.str"builtins.str0:overloadXò
joinos2emxpath.join"$
builtins.unicode"builtins.unicode*$
__p1
builtins.str"builtins.str*$
__p2
builtins.str"builtins.str*$
__p3
builtins.str"builtins.str*,
__p4$
builtins.unicode"builtins.unicode*+
p$
builtins.unicode"builtins.unicode0:overloadXÚ
joinos2emxpath.join"$
builtins.unicode"builtins.unicode*$
__p1
builtins.str"builtins.str*$
__p2
builtins.str"builtins.str*,
__p3$
builtins.unicode"builtins.unicode*+
p$
builtins.unicode"builtins.unicode0:overloadXÃ
joinos2emxpath.join"$
builtins.unicode"builtins.unicode*$
__p1
builtins.str"builtins.str*,
__p2$
builtins.unicode"builtins.unicode*+
p$
builtins.unicode"builtins.unicode0:overloadX¶
joinos2emxpath.join"$
builtins.unicode"builtins.unicode*,
__p1$
builtins.unicode"builtins.unicode*+
p$
builtins.unicode"builtins.unicode0:overloadX"27"À
relpathos2emxpath.relpathƒ
relpathos2emxpath.relpath"
builtins.str"builtins.str*&
path
builtins.str"builtins.str*Q
startD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX‡
relpathos2emxpath.relpath"$
builtins.unicode"builtins.unicode*.
path$
builtins.unicode"builtins.unicode*]
startP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None 0:overloadX"27*g
supports_unicode_filenames%os2emxpath.supports_unicode_filenames
builtins.bool"builtins.bool*27*=
curdiros2emxpath.curdir
builtins.str"builtins.str*27*=
pardiros2emxpath.pardir
builtins.str"builtins.str*27*7
sepos2emxpath.sep
builtins.str"builtins.str*27*e
altsepos2emxpath.altsepD
Union[builtins.str,None]
builtins.str"builtins.str
None*27*=
extsepos2emxpath.extsep
builtins.str"builtins.str*27*?
pathsepos2emxpath.pathsep
builtins.str"builtins.str*27*?
defpathos2emxpath.defpath
builtins.str"builtins.str*27*?
devnullos2emxpath.devnull
builtins.str"builtins.str*27