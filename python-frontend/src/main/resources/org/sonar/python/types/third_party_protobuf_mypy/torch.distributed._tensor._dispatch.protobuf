
#torch.distributed._tensor._dispatch÷
OpDispatcher0torch.distributed._tensor._dispatch.OpDispatcher"builtins.object*¿
__init__9torch.distributed._tensor._dispatch.OpDispatcher.__init__"
None*n
selfd
0torch.distributed._tensor._dispatch.OpDispatcher"0torch.distributed._tensor._dispatch.OpDispatcher*„
dispatch9torch.distributed._tensor._dispatch.OpDispatcher.dispatch""
builtins.object"builtins.object*n
selfd
0torch.distributed._tensor._dispatch.OpDispatcher"0torch.distributed._tensor._dispatch.OpDispatcher*;
op_call.
torch._ops.OpOverload"torch._ops.OpOverload*_
argsU
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple*Š
kwargs~
+builtins.dict[builtins.str,builtins.object]
builtins.str"builtins.str"
builtins.object"builtins.object"builtins.dict*ä
redistribute_local_argsHtorch.distributed._tensor._dispatch.OpDispatcher.redistribute_local_args"
None*g
op_infoZ
+torch.distributed._tensor._op_schema.OpInfo"+torch.distributed._tensor._op_schema.OpInfo*z
suggested_input_schema^
-torch.distributed._tensor._op_schema.OpSchema"-torch.distributed._tensor._op_schema.OpSchema0:staticmethodh*Î
unwrap_to_op_infoBtorch.distributed._tensor._dispatch.OpDispatcher.unwrap_to_op_info"Z
+torch.distributed._tensor._op_schema.OpInfo"+torch.distributed._tensor._op_schema.OpInfo*n
selfd
0torch.distributed._tensor._dispatch.OpDispatcher"0torch.distributed._tensor._dispatch.OpDispatcher*;
op_call.
torch._ops.OpOverload"torch._ops.OpOverload*_
argsU
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple*Š
kwargs~
+builtins.dict[builtins.str,builtins.object]
builtins.str"builtins.str"
builtins.object"builtins.object"builtins.dict*Ç
wrap5torch.distributed._tensor._dispatch.OpDispatcher.wrap""
builtins.object"builtins.object*+
res"
builtins.object"builtins.object*¤
spec™
ŸTypeAlias[Union[torch.distributed._tensor.placement_types.DTensorSpec,typing.Sequence[Union[torch.distributed._tensor.placement_types.DTensorSpec,None]],None]]½
”Union[torch.distributed._tensor.placement_types.DTensorSpec,typing.Sequence[Union[torch.distributed._tensor.placement_types.DTensorSpec,None]],None]n
5torch.distributed._tensor.placement_types.DTensorSpec"5torch.distributed._tensor.placement_types.DTensorSpec§
Rtyping.Sequence[Union[torch.distributed._tensor.placement_types.DTensorSpec,None]]¿
AUnion[torch.distributed._tensor.placement_types.DTensorSpec,None]n
5torch.distributed._tensor.placement_types.DTensorSpec"5torch.distributed._tensor.placement_types.DTensorSpec
None"typing.Sequence
None"3torch.distributed._tensor._op_schema.OutputSpecType0:staticmethodhr×
sharding_propagatorDtorch.distributed._tensor._dispatch.OpDispatcher.sharding_propagatorz
;torch.distributed._tensor._sharding_prop.ShardingPropagator";torch.distributed._tensor._sharding_prop.ShardingPropagatorrw
_random_ops<torch.distributed._tensor._dispatch.OpDispatcher._random_ops*
builtins.set[Any]
Any"builtins.setr÷
_custom_op_handlersDtorch.distributed._tensor._dispatch.OpDispatcher._custom_op_handlers™
2builtins.dict[Any,CallableType[builtins.function]]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dictr‹
_allow_implicit_replicationLtorch.distributed._tensor._dispatch.OpDispatcher._allow_implicit_replication
builtins.bool"builtins.bool™
decompose_handler5torch.distributed._tensor._dispatch.decompose_handler""
builtins.object"builtins.object*;
op_call.
torch._ops.OpOverload"torch._ops.OpOverload*_
argsU
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple*Š
kwargs~
+builtins.dict[builtins.str,builtins.object]
builtins.str"builtins.str"
builtins.object"builtins.object"builtins.dict›
is_same_size_handler8torch.distributed._tensor._dispatch.is_same_size_handler"
builtins.bool"builtins.bool*;
op_call.
torch._ops.OpOverload"torch._ops.OpOverload*_
argsU
builtins.tuple[builtins.object]"
builtins.object"builtins.object"builtins.tuple*Š
kwargs~
+builtins.dict[builtins.str,builtins.object]
builtins.str"builtins.str"
builtins.object"builtins.object"builtins.dict*Ÿ
__annotations__3torch.distributed._tensor._dispatch.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
disttorch.distributed **
dtensortorch.distributed._tensor.api *,
random torch.distributed._tensor.random *#
pytreetorch.utils._cxx_pytree *9
aten(torch.distributed._tensor._dispatch.aten
Any