

simplejsonÇ#
JSONDecodersimplejson.decoder.JSONDecoder"builtins.object*˙
__init__'simplejson.decoder.JSONDecoder.__init__"
None*J
self@
simplejson.decoder.JSONDecoder"simplejson.decoder.JSONDecoder*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *ö
object_hookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ö
parse_floatÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ò
	parse_intÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ù
parse_constantÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *,
strict
builtins.bool"builtins.bool *†
object_pairs_hookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None */
	allow_nan
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*ù
decode%simplejson.decoder.JSONDecoder.decode"
Any*J
self@
simplejson.decoder.JSONDecoder"simplejson.decoder.JSONDecoder*#
s
builtins.str"builtins.str*U
_wK
CallableType[builtins.function]&
builtins.function"builtins.function *
_PY3
Any z36z37*‰
decode%simplejson.decoder.JSONDecoder.decode"
Any*J
self@
simplejson.decoder.JSONDecoder"simplejson.decoder.JSONDecoder*#
s
builtins.str"builtins.str*U
_wK
CallableType[builtins.function]&
builtins.function"builtins.function *F
_PY3:
Literal[builtins.bool]	
builtins.bool"builtins.bool z38z39z310z311z312z313*â

raw_decode)simplejson.decoder.JSONDecoder.raw_decode"B
Tuple[Any,builtins.int]
Any
builtins.int"builtins.int*J
self@
simplejson.decoder.JSONDecoder"simplejson.decoder.JSONDecoder*#
s
builtins.str"builtins.str*'
idx
builtins.int"builtins.int *U
_wK
CallableType[builtins.function]&
builtins.function"builtins.function *
_PY3
Any z36z37*–

raw_decode)simplejson.decoder.JSONDecoder.raw_decode"B
Tuple[Any,builtins.int]
Any
builtins.int"builtins.int*J
self@
simplejson.decoder.JSONDecoder"simplejson.decoder.JSONDecoder*#
s
builtins.str"builtins.str*'
idx
builtins.int"builtins.int *U
_wK
CallableType[builtins.function]&
builtins.function"builtins.function *F
_PY3:
Literal[builtins.bool]	
builtins.bool"builtins.bool z38z39z310z311z312z313j36j37j38j39j310j311j312j313ru
encoding'simplejson.decoder.JSONDecoder.encoding
builtins.str"builtins.str*36*37*38*39*310*311*312*313rÊ
object_hook*simplejson.decoder.JSONDecoder.object_hookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*36*37*38*39*310*311*312*313rÊ
parse_float*simplejson.decoder.JSONDecoder.parse_floatÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*36*37*38*39*310*311*312*313r‚
	parse_int(simplejson.decoder.JSONDecoder.parse_intÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*36*37*38*39*310*311*312*313rÏ
parse_constant-simplejson.decoder.JSONDecoder.parse_constantÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*36*37*38*39*310*311*312*313rs
strict%simplejson.decoder.JSONDecoder.strict
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rÚ
object_pairs_hook0simplejson.decoder.JSONDecoder.object_pairs_hookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*36*37*38*39*310*311*312*313rä
memo#simplejson.decoder.JSONDecoder.memo9
builtins.dict[Any,Any]
Any
Any"builtins.dict*36*37*38*39*310*311*312*313r¶
	scan_once(simplejson.decoder.JSONDecoder.scan_onceK
CallableType[builtins.function]&
builtins.function"builtins.function*36*37*38*39*310*311*312*313Œ%
JSONEncodersimplejson.encoder.JSONEncoder"builtins.object*ú
__init__'simplejson.encoder.JSONEncoder.__init__"
None*J
self@
simplejson.encoder.JSONEncoder"simplejson.encoder.JSONEncoder*.
skipkeys
builtins.bool"builtins.bool *2
ensure_ascii
builtins.bool"builtins.bool *4
check_circular
builtins.bool"builtins.bool */
	allow_nan
builtins.bool"builtins.bool */
	sort_keys
builtins.bool"builtins.bool *}
indento
%Union[builtins.str,builtins.int,None]
builtins.str"builtins.str
builtins.int"builtins.int
None *Ø

separatorsú
,Union[Tuple[builtins.str,builtins.str],None]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
None *,
encoding
builtins.str"builtins.str *ñ
defaultÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *1
use_decimal
builtins.bool"builtins.bool *:
namedtuple_as_object
builtins.bool"builtins.bool *4
tuple_as_array
builtins.bool"builtins.bool *6
bigint_as_string
builtins.bool"builtins.bool *ú
item_sort_keyÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *.
for_json
builtins.bool"builtins.bool *0

ignore_nan
builtins.bool"builtins.bool *b
int_as_string_bitcountD
Union[builtins.int,None]
builtins.int"builtins.int
None *7
iterable_as_array
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*Õ
encode%simplejson.encoder.JSONEncoder.encode"
builtins.str"builtins.str*J
self@
simplejson.encoder.JSONEncoder"simplejson.encoder.JSONEncoder*
o
Anyz36z37z38z39z310z311z312z313*ø
default&simplejson.encoder.JSONEncoder.default"
NoReturn
*J
self@
simplejson.encoder.JSONEncoder"simplejson.encoder.JSONEncoder*
o
Anyz36z37z38z39z310z311z312z313*á

iterencode)simplejson.encoder.JSONEncoder.iterencode"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*J
self@
simplejson.encoder.JSONEncoder"simplejson.encoder.JSONEncoder*
o
Anyz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313rÅ
item_separator-simplejson.encoder.JSONEncoder.item_separator
builtins.str"builtins.str*36*37*38*39*310*311*312*313r
key_separator,simplejson.encoder.JSONEncoder.key_separator
builtins.str"builtins.str*36*37*38*39*310*311*312*313rw
skipkeys'simplejson.encoder.JSONEncoder.skipkeys
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313r
ensure_ascii+simplejson.encoder.JSONEncoder.ensure_ascii
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rÉ
check_circular-simplejson.encoder.JSONEncoder.check_circular
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313ry
	allow_nan(simplejson.encoder.JSONEncoder.allow_nan
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313ry
	sort_keys(simplejson.encoder.JSONEncoder.sort_keys
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rq
indent%simplejson.encoder.JSONEncoder.indent
builtins.str"builtins.str*36*37*38*39*310*311*312*313ru
encoding'simplejson.encoder.JSONEncoder.encoding
builtins.str"builtins.str*36*37*38*39*310*311*312*313r}
use_decimal*simplejson.encoder.JSONEncoder.use_decimal
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rè
namedtuple_as_object3simplejson.encoder.JSONEncoder.namedtuple_as_object
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rÉ
tuple_as_array-simplejson.encoder.JSONEncoder.tuple_as_array
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rá
bigint_as_string/simplejson.encoder.JSONEncoder.bigint_as_string
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rÍ
item_sort_key,simplejson.encoder.JSONEncoder.item_sort_keyÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*36*37*38*39*310*311*312*313rw
for_json'simplejson.encoder.JSONEncoder.for_json
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313r{

ignore_nan)simplejson.encoder.JSONEncoder.ignore_nan
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313rπ
int_as_string_bitcount5simplejson.encoder.JSONEncoder.int_as_string_bitcountD
Union[builtins.int,None]
builtins.int"builtins.int
None*36*37*38*39*310*311*312*313râ
iterable_as_array0simplejson.encoder.JSONEncoder.iterable_as_array
builtins.bool"builtins.bool*36*37*38*39*310*311*312*313
JSONEncoderForHTML%simplejson.encoder.JSONEncoderForHTML"simplejson.encoder.JSONEncoderj36j37j38j39j310j311j312j313Æ
RawJSONsimplejson.raw_json.RawJSON"builtins.object*‘
__init__$simplejson.raw_json.RawJSON.__init__"
None*D
self:
simplejson.raw_json.RawJSON"simplejson.raw_json.RawJSON*.
encoded_json
builtins.str"builtins.strz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313rz
encoded_json(simplejson.raw_json.RawJSON.encoded_json
builtins.str"builtins.str*36*37*38*39*310*311*312*313ë	
JSONDecodeError"simplejson.scanner.JSONDecodeError"builtins.ValueErrorj36j37j38j39j310j311j312j313ro
msg&simplejson.scanner.JSONDecodeError.msg
builtins.str"builtins.str*36*37*38*39*310*311*312*313ro
doc&simplejson.scanner.JSONDecodeError.doc
builtins.str"builtins.str*36*37*38*39*310*311*312*313ro
pos&simplejson.scanner.JSONDecodeError.pos
builtins.int"builtins.int*36*37*38*39*310*311*312*313ró
end&simplejson.scanner.JSONDecodeError.endD
Union[builtins.int,None]
builtins.int"builtins.int
None*36*37*38*39*310*311*312*313ru
lineno)simplejson.scanner.JSONDecodeError.lineno
builtins.int"builtins.int*36*37*38*39*310*311*312*313rs
colno(simplejson.scanner.JSONDecodeError.colno
builtins.int"builtins.int*36*37*38*39*310*311*312*313r£
	endlineno,simplejson.scanner.JSONDecodeError.endlinenoD
Union[builtins.int,None]
builtins.int"builtins.int
None*36*37*38*39*310*311*312*313r°
endcolno+simplejson.scanner.JSONDecodeError.endcolnoD
Union[builtins.int,None]
builtins.int"builtins.int
None*36*37*38*39*310*311*312*313¸
simple_firstsimplejson.simple_first"é
"Tuple[builtins.bool,simplejson._T]
builtins.bool"builtins.boolF
simplejson._T"
builtins.object"builtins.object"builtins.object*ù
kvî
$Tuple[simplejson._T,builtins.object]F
simplejson._T"
builtins.object"builtins.object"builtins.object"
builtins.object"builtins.objectz36z37z38z39z310z311z312z313"Í
dumpssimplejson.dumps˙
dumpssimplejson.dumps"
builtins.str"builtins.str*
obj
Any*.
skipkeys
builtins.bool"builtins.bool *2
ensure_ascii
builtins.bool"builtins.bool *4
check_circular
builtins.bool"builtins.bool */
	allow_nan
builtins.bool"builtins.bool *y
clsp
$Type[simplejson.encoder.JSONEncoder]@
simplejson.encoder.JSONEncoder"simplejson.encoder.JSONEncoder"type*}
indento
%Union[builtins.str,builtins.int,None]
builtins.str"builtins.str
builtins.int"builtins.int
None *Ø

separatorsú
,Union[Tuple[builtins.str,builtins.str],None]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *ñ
defaultÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *1
use_decimal
builtins.bool"builtins.bool *:
namedtuple_as_object
builtins.bool"builtins.bool *4
tuple_as_array
builtins.bool"builtins.bool *6
bigint_as_string
builtins.bool"builtins.bool */
	sort_keys
builtins.bool"builtins.bool *ú
item_sort_keyÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *.
for_json
builtins.bool"builtins.bool *0

ignore_nan
builtins.bool"builtins.bool *b
int_as_string_bitcountD
Union[builtins.int,None]
builtins.int"builtins.int
None *7
iterable_as_array
builtins.bool"builtins.bool *
kw
Any0:overloadX≠
dumpssimplejson.dumps"
builtins.str"builtins.str*
obj
Any*.
skipkeys
builtins.bool"builtins.bool *2
ensure_ascii
builtins.bool"builtins.bool *4
check_circular
builtins.bool"builtins.bool */
	allow_nan
builtins.bool"builtins.bool *º
cls∞
0Union[Type[simplejson.encoder.JSONEncoder],None]p
$Type[simplejson.encoder.JSONEncoder]@
simplejson.encoder.JSONEncoder"simplejson.encoder.JSONEncoder"type
None *}
indento
%Union[builtins.str,builtins.int,None]
builtins.str"builtins.str
builtins.int"builtins.int
None *Ø

separatorsú
,Union[Tuple[builtins.str,builtins.str],None]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *ñ
defaultÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *1
use_decimal
builtins.bool"builtins.bool *:
namedtuple_as_object
builtins.bool"builtins.bool *4
tuple_as_array
builtins.bool"builtins.bool *6
bigint_as_string
builtins.bool"builtins.bool */
	sort_keys
builtins.bool"builtins.bool *ú
item_sort_keyÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *.
for_json
builtins.bool"builtins.bool *0

ignore_nan
builtins.bool"builtins.bool *b
int_as_string_bitcountD
Union[builtins.int,None]
builtins.int"builtins.int
None *7
iterable_as_array
builtins.bool"builtins.bool 0:overloadX"36"37"38"39"310"311"312"313"‘
dumpsimplejson.dump∞
dumpsimplejson.dump"
None*
obj
Any*J
fpB
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO*.
skipkeys
builtins.bool"builtins.bool *2
ensure_ascii
builtins.bool"builtins.bool *4
check_circular
builtins.bool"builtins.bool */
	allow_nan
builtins.bool"builtins.bool *y
clsp
$Type[simplejson.encoder.JSONEncoder]@
simplejson.encoder.JSONEncoder"simplejson.encoder.JSONEncoder"type*}
indento
%Union[builtins.str,builtins.int,None]
builtins.str"builtins.str
builtins.int"builtins.int
None *Ø

separatorsú
,Union[Tuple[builtins.str,builtins.str],None]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *ñ
defaultÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *1
use_decimal
builtins.bool"builtins.bool *:
namedtuple_as_object
builtins.bool"builtins.bool *4
tuple_as_array
builtins.bool"builtins.bool *6
bigint_as_string
builtins.bool"builtins.bool */
	sort_keys
builtins.bool"builtins.bool *ú
item_sort_keyÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *.
for_json
builtins.bool"builtins.bool *0

ignore_nan
builtins.bool"builtins.bool *b
int_as_string_bitcountD
Union[builtins.int,None]
builtins.int"builtins.int
None *7
iterable_as_array
builtins.bool"builtins.bool *
kw
Any0:overloadX„
dumpsimplejson.dump"
None*
obj
Any*J
fpB
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO*.
skipkeys
builtins.bool"builtins.bool *2
ensure_ascii
builtins.bool"builtins.bool *4
check_circular
builtins.bool"builtins.bool */
	allow_nan
builtins.bool"builtins.bool *º
cls∞
0Union[Type[simplejson.encoder.JSONEncoder],None]p
$Type[simplejson.encoder.JSONEncoder]@
simplejson.encoder.JSONEncoder"simplejson.encoder.JSONEncoder"type
None *}
indento
%Union[builtins.str,builtins.int,None]
builtins.str"builtins.str
builtins.int"builtins.int
None *Ø

separatorsú
,Union[Tuple[builtins.str,builtins.str],None]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *ñ
defaultÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *1
use_decimal
builtins.bool"builtins.bool *:
namedtuple_as_object
builtins.bool"builtins.bool *4
tuple_as_array
builtins.bool"builtins.bool *6
bigint_as_string
builtins.bool"builtins.bool */
	sort_keys
builtins.bool"builtins.bool *ú
item_sort_keyÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *.
for_json
builtins.bool"builtins.bool *0

ignore_nan
builtins.bool"builtins.bool *b
int_as_string_bitcountD
Union[builtins.int,None]
builtins.int"builtins.int
None *7
iterable_as_array
builtins.bool"builtins.bool 0:overloadX"36"37"38"39"310"311"312"313"Æ
loadssimplejson.loadsú
loadssimplejson.loads"
Any*ã
sÉ
@TypeAlias[Union[builtins.str,builtins.bytes,builtins.bytearray]]£
5Union[builtins.str,builtins.bytes,builtins.bytearray]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray"simplejson._LoadsString*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *y
clsp
$Type[simplejson.decoder.JSONDecoder]@
simplejson.decoder.JSONDecoder"simplejson.decoder.JSONDecoder"type*ö
object_hookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ö
parse_floatÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ò
	parse_intÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ù
parse_constantÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *†
object_pairs_hookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *1
use_decimal
builtins.bool"builtins.bool */
	allow_nan
builtins.bool"builtins.bool *
kw
Any0:overloadXœ
loadssimplejson.loads"
Any*ã
sÉ
@TypeAlias[Union[builtins.str,builtins.bytes,builtins.bytearray]]£
5Union[builtins.str,builtins.bytes,builtins.bytearray]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray"simplejson._LoadsString*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *º
cls∞
0Union[Type[simplejson.decoder.JSONDecoder],None]p
$Type[simplejson.decoder.JSONDecoder]@
simplejson.decoder.JSONDecoder"simplejson.decoder.JSONDecoder"type
None *ö
object_hookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ö
parse_floatÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ò
	parse_intÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ù
parse_constantÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *†
object_pairs_hookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *1
use_decimal
builtins.bool"builtins.bool */
	allow_nan
builtins.bool"builtins.bool 0:overloadX"36"37"38"39"310"311"312"313"§
loadsimplejson.loadÿ	
loadsimplejson.load"
Any*J
fpB
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *y
clsp
$Type[simplejson.decoder.JSONDecoder]@
simplejson.decoder.JSONDecoder"simplejson.decoder.JSONDecoder"type*ö
object_hookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ö
parse_floatÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ò
	parse_intÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ù
parse_constantÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *†
object_pairs_hookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *1
use_decimal
builtins.bool"builtins.bool */
	allow_nan
builtins.bool"builtins.bool *
kw
Any0:overloadXã

loadsimplejson.load"
Any*J
fpB
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *º
cls∞
0Union[Type[simplejson.decoder.JSONDecoder],None]p
$Type[simplejson.decoder.JSONDecoder]@
simplejson.decoder.JSONDecoder"simplejson.decoder.JSONDecoder"type
None *ö
object_hookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ö
parse_floatÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ò
	parse_intÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ù
parse_constantÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *†
object_pairs_hookÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *1
use_decimal
builtins.bool"builtins.bool */
	allow_nan
builtins.bool"builtins.bool 0:overloadX"36"37"38"39"310"311"312"313*è
__path__simplejson.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*36*37*38*39*310*311*312*313*™
__annotations__simplejson.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313