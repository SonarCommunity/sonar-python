
torch.utils._pytree≥
KeyEntrytorch.utils._pytree.KeyEntry"builtins.object*ô
__hash__%torch.utils._pytree.KeyEntry.__hash__"
builtins.int"builtins.int*F
self<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry@*µ
__eq__#torch.utils._pytree.KeyEntry.__eq__"
builtins.bool"builtins.bool*><
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry*$"
builtins.object"builtins.object@*è
__str__$torch.utils._pytree.KeyEntry.__str__"
builtins.str"builtins.str*><
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry@*è
get torch.utils._pytree.KeyEntry.get"
Any*F
self<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry*
parent
Any@XïM
NodeDeftorch.utils._pytree.NodeDef"builtins.tuple*á
_replace$torch.utils._pytree.NodeDef._replace"î
torch.utils._pytree.NodeDef._NTÓ
ùTuple[Type[Any],TypeAlias[CallableType[builtins.function]],TypeAlias[CallableType[builtins.function]],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"typeú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFuncû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFuncÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
None*†
_selfî
torch.utils._pytree.NodeDef._NTÓ
ùTuple[Type[Any],TypeAlias[CallableType[builtins.function]],TypeAlias[CallableType[builtins.function]],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"typeú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFuncû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFuncÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
None*(
type
	Type[Any]
Any"type *Ø

flatten_fnú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFunc *≥
unflatten_fnû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFunc *à
flatten_with_keys_fnÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
None *Æ
__new__#torch.utils._pytree.NodeDef.__new__"î
torch.utils._pytree.NodeDef._NTÓ
ùTuple[Type[Any],TypeAlias[CallableType[builtins.function]],TypeAlias[CallableType[builtins.function]],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"typeú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFuncû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFuncÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
None*—
_cls∆
%Type[torch.utils._pytree.NodeDef._NT]î
torch.utils._pytree.NodeDef._NTÓ
ùTuple[Type[Any],TypeAlias[CallableType[builtins.function]],TypeAlias[CallableType[builtins.function]],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"typeú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFuncû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFuncÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
None"type*&
type
	Type[Any]
Any"type*≠

flatten_fnú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFunc*±
unflatten_fnû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFunc*Ü
flatten_with_keys_fnÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
None*™
_asdict#torch.utils._pytree.NodeDef._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*†
_selfî
torch.utils._pytree.NodeDef._NTÓ
ùTuple[Type[Any],TypeAlias[CallableType[builtins.function]],TypeAlias[CallableType[builtins.function]],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"typeú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFuncû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFuncÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
None*é
_make!torch.utils._pytree.NodeDef._make"î
torch.utils._pytree.NodeDef._NTÓ
ùTuple[Type[Any],TypeAlias[CallableType[builtins.function]],TypeAlias[CallableType[builtins.function]],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"typeú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFuncû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFuncÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
None*—
_cls∆
%Type[torch.utils._pytree.NodeDef._NT]î
torch.utils._pytree.NodeDef._NTÓ
ùTuple[Type[Any],TypeAlias[CallableType[builtins.function]],TypeAlias[CallableType[builtins.function]],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"typeú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFuncû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFuncÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
None"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprF
type torch.utils._pytree.NodeDef.type
	Type[Any]
Any"typer”

flatten_fn&torch.utils._pytree.NodeDef.flatten_fnú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFuncrŸ
unflatten_fn(torch.utils._pytree.NodeDef.unflatten_fnû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFuncr∂
flatten_with_keys_fn0torch.utils._pytree.NodeDef.flatten_with_keys_fnÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
NonerF
type torch.utils._pytree.NodeDef.type
	Type[Any]
Any"typer”

flatten_fn&torch.utils._pytree.NodeDef.flatten_fnú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFuncrŸ
unflatten_fn(torch.utils._pytree.NodeDef.unflatten_fnû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFuncr∂
flatten_with_keys_fn0torch.utils._pytree.NodeDef.flatten_with_keys_fnÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
NonerÁ
_fields#torch.utils._pytree.NodeDef._fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrë
_field_types(torch.utils._pytree.NodeDef._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictró
_field_defaults+torch.utils._pytree.NodeDef._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrL
_source#torch.utils._pytree.NodeDef._source
builtins.str"builtins.strró
__annotations__+torch.utils._pytree.NodeDef.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÎJ
_SerializeNodeDef%torch.utils._pytree._SerializeNodeDef"builtins.tuple*˚
_replace.torch.utils._pytree._SerializeNodeDef._replace"⁄
)torch.utils._pytree._SerializeNodeDef._NT™
ãTuple[Type[Any],builtins.str,Union[TypeAlias[CallableType[builtins.function]],None],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"type
builtins.str"builtins.strÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
NoneÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
None*Ê
_self⁄
)torch.utils._pytree._SerializeNodeDef._NT™
ãTuple[Type[Any],builtins.str,Union[TypeAlias[CallableType[builtins.function]],None],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"type
builtins.str"builtins.strÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
NoneÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
None*'
typ
	Type[Any]
Any"type *8
serialized_type_name
builtins.str"builtins.str *á
to_dumpable_contextÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
None *ã
from_dumpable_contextÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
None *¨
__new__-torch.utils._pytree._SerializeNodeDef.__new__"⁄
)torch.utils._pytree._SerializeNodeDef._NT™
ãTuple[Type[Any],builtins.str,Union[TypeAlias[CallableType[builtins.function]],None],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"type
builtins.str"builtins.strÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
NoneÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
None*°
_clsñ
/Type[torch.utils._pytree._SerializeNodeDef._NT]⁄
)torch.utils._pytree._SerializeNodeDef._NT™
ãTuple[Type[Any],builtins.str,Union[TypeAlias[CallableType[builtins.function]],None],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"type
builtins.str"builtins.strÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
NoneÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
None"type*%
typ
	Type[Any]
Any"type*6
serialized_type_name
builtins.str"builtins.str*Ö
to_dumpable_contextÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
None*â
from_dumpable_contextÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
None*˙
_asdict-torch.utils._pytree._SerializeNodeDef._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ê
_self⁄
)torch.utils._pytree._SerializeNodeDef._NT™
ãTuple[Type[Any],builtins.str,Union[TypeAlias[CallableType[builtins.function]],None],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"type
builtins.str"builtins.strÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
NoneÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
None*Æ
_make+torch.utils._pytree._SerializeNodeDef._make"⁄
)torch.utils._pytree._SerializeNodeDef._NT™
ãTuple[Type[Any],builtins.str,Union[TypeAlias[CallableType[builtins.function]],None],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"type
builtins.str"builtins.strÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
NoneÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
None*°
_clsñ
/Type[torch.utils._pytree._SerializeNodeDef._NT]⁄
)torch.utils._pytree._SerializeNodeDef._NT™
ãTuple[Type[Any],builtins.str,Union[TypeAlias[CallableType[builtins.function]],None],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"type
builtins.str"builtins.strÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
NoneÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
None"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprN
typ)torch.utils._pytree._SerializeNodeDef.typ
	Type[Any]
Any"typerp
serialized_type_name:torch.utils._pytree._SerializeNodeDef.serialized_type_name
builtins.str"builtins.strræ
to_dumpable_context9torch.utils._pytree._SerializeNodeDef.to_dumpable_contextÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
Nonerƒ
from_dumpable_context;torch.utils._pytree._SerializeNodeDef.from_dumpable_contextÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
NonerN
typ)torch.utils._pytree._SerializeNodeDef.typ
	Type[Any]
Any"typerp
serialized_type_name:torch.utils._pytree._SerializeNodeDef.serialized_type_name
builtins.str"builtins.strræ
to_dumpable_context9torch.utils._pytree._SerializeNodeDef.to_dumpable_contextÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
Nonerƒ
from_dumpable_context;torch.utils._pytree._SerializeNodeDef.from_dumpable_contextÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
NonerÒ
_fields-torch.utils._pytree._SerializeNodeDef._fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrõ
_field_types2torch.utils._pytree._SerializeNodeDef._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr°
_field_defaults5torch.utils._pytree._SerializeNodeDef._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrV
_source-torch.utils._pytree._SerializeNodeDef._source
builtins.str"builtins.strr°
__annotations__5torch.utils._pytree._SerializeNodeDef.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÊ

SequenceKeytorch.utils._pytree.SequenceKey"builtins.object*ˇ
__str__'torch.utils._pytree.SequenceKey.__str__"
builtins.str"builtins.str*¨©
6torch.utils._pytree.SequenceKey[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"torch.utils._pytree.SequenceKey*Ã
get#torch.utils._pytree.SequenceKey.get"N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object*¥
self©
6torch.utils._pytree.SequenceKey[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"torch.utils._pytree.SequenceKey*ò
sequenceâ
&typing.Sequence[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"typing.Sequence*ú
__init__(torch.utils._pytree.SequenceKey.__init__"
None*¥
self©
6torch.utils._pytree.SequenceKey[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"torch.utils._pytree.SequenceKey*%
idx
builtins.int"builtins.int8PrH
idx#torch.utils._pytree.SequenceKey.idx
builtins.int"builtins.intrÊ
__dataclass_fields__4torch.utils._pytree.SequenceKey.__dataclass_fields__ó
2builtins.dict[builtins.str,dataclasses.Field[Any]]
builtins.str"builtins.str4
dataclasses.Field[Any]
Any"dataclasses.Field"builtins.dict“

MappingKeytorch.utils._pytree.MappingKey"builtins.object*‚
__str__&torch.utils._pytree.MappingKey.__str__"
builtins.str"builtins.str*êç
Ktorch.utils._pytree.MappingKey[torch.utils._pytree.K,torch.utils._pytree.T]N
torch.utils._pytree.K"
typing.Hashable"typing.Hashable"typing.HashableN
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"torch.utils._pytree.MappingKey*í
get"torch.utils._pytree.MappingKey.get"N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object*ò
selfç
Ktorch.utils._pytree.MappingKey[torch.utils._pytree.K,torch.utils._pytree.T]N
torch.utils._pytree.K"
typing.Hashable"typing.Hashable"typing.HashableN
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"torch.utils._pytree.MappingKey*˚
mappingÌ
;typing.Mapping[torch.utils._pytree.K,torch.utils._pytree.T]N
torch.utils._pytree.K"
typing.Hashable"typing.Hashable"typing.HashableN
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"typing.Mapping*±
__init__'torch.utils._pytree.MappingKey.__init__"
None*ò
selfç
Ktorch.utils._pytree.MappingKey[torch.utils._pytree.K,torch.utils._pytree.T]N
torch.utils._pytree.K"
typing.Hashable"typing.Hashable"typing.HashableN
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"torch.utils._pytree.MappingKey*W
keyN
torch.utils._pytree.K"
typing.Hashable"typing.Hashable"typing.Hashable8Pry
key"torch.utils._pytree.MappingKey.keyN
torch.utils._pytree.K"
typing.Hashable"typing.Hashable"typing.HashablerÂ
__dataclass_fields__3torch.utils._pytree.MappingKey.__dataclass_fields__ó
2builtins.dict[builtins.str,dataclasses.Field[Any]]
builtins.str"builtins.str4
dataclasses.Field[Any]
Any"dataclasses.Field"builtins.dictœ

GetAttrKeytorch.utils._pytree.GetAttrKey"builtins.object*ì
__str__&torch.utils._pytree.GetAttrKey.__str__"
builtins.str"builtins.str*B@
torch.utils._pytree.GetAttrKey"torch.utils._pytree.GetAttrKey*ê
get"torch.utils._pytree.GetAttrKey.get"
Any*J
self@
torch.utils._pytree.GetAttrKey"torch.utils._pytree.GetAttrKey*
obj
Any*±
__init__'torch.utils._pytree.GetAttrKey.__init__"
None*J
self@
torch.utils._pytree.GetAttrKey"torch.utils._pytree.GetAttrKey*&
name
builtins.str"builtins.str8rI
name#torch.utils._pytree.GetAttrKey.name
builtins.str"builtins.strrÂ
__dataclass_fields__3torch.utils._pytree.GetAttrKey.__dataclass_fields__ó
2builtins.dict[builtins.str,dataclasses.Field[Any]]
builtins.str"builtins.str4
dataclasses.Field[Any]
Any"dataclasses.Field"builtins.dictÕ
TreeSpectorch.utils._pytree.TreeSpec"builtins.object*ç
__post_init__*torch.utils._pytree.TreeSpec.__post_init__"
None*F
self<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*±
__repr__%torch.utils._pytree.TreeSpec.__repr__"
builtins.str"builtins.str*><
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec* 
builtins.int"builtins.int *ó
is_leaf$torch.utils._pytree.TreeSpec.is_leaf"
builtins.bool"builtins.bool*F
self<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*◊
_flatten_up_to_helper2torch.utils._pytree.TreeSpec._flatten_up_to_helper"
None*F
self<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*u
subtreesg
builtins.list[TypeAlias[Any]]7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree"builtins.list*Ø
flatten_up_to*torch.utils._pytree.TreeSpec.flatten_up_to"g
builtins.list[TypeAlias[Any]]7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree"builtins.list*F
self<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*Ú
	unflatten&torch.utils._pytree.TreeSpec.unflatten"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*F
self<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*<
leaves0
typing.Iterable[Any]
Any"typing.Iterable*Ó
__init__%torch.utils._pytree.TreeSpec.__init__"
None*F
self<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*
type
Any*E
context8
TypeAlias[Any]
Any"torch.utils._pytree.Context*é
children_specsz
+builtins.list[torch.utils._pytree.TreeSpec]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec"builtins.list8r2
type!torch.utils._pytree.TreeSpec.type
Anyri
context$torch.utils._pytree.TreeSpec.context8
TypeAlias[Any]
Any"torch.utils._pytree.Contextrπ
children_specs+torch.utils._pytree.TreeSpec.children_specsz
+builtins.list[torch.utils._pytree.TreeSpec]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec"builtins.listrQ
	num_nodes&torch.utils._pytree.TreeSpec.num_nodes
builtins.int"builtins.intrS

num_leaves'torch.utils._pytree.TreeSpec.num_leaves
builtins.int"builtins.intrW
num_children)torch.utils._pytree.TreeSpec.num_children
builtins.int"builtins.intr„
__dataclass_fields__1torch.utils._pytree.TreeSpec.__dataclass_fields__ó
2builtins.dict[builtins.str,dataclasses.Field[Any]]
builtins.str"builtins.str4
dataclasses.Field[Any]
Any"dataclasses.Field"builtins.dictê
LeafSpectorch.utils._pytree.LeafSpec"torch.utils._pytree.TreeSpec*É
__init__%torch.utils._pytree.LeafSpec.__init__"
None*F
self<
torch.utils._pytree.LeafSpec"torch.utils._pytree.LeafSpec*ç
__post_init__*torch.utils._pytree.LeafSpec.__post_init__"
None*F
self<
torch.utils._pytree.LeafSpec"torch.utils._pytree.LeafSpec*±
__repr__%torch.utils._pytree.LeafSpec.__repr__"
builtins.str"builtins.str*><
torch.utils._pytree.LeafSpec"torch.utils._pytree.LeafSpec* 
builtins.int"builtins.int ﬂ	
_TreeSpecSchema#torch.utils._pytree._TreeSpecSchema"builtins.object*›
__init__,torch.utils._pytree._TreeSpecSchema.__init__"
None*T
selfJ
#torch.utils._pytree._TreeSpecSchema"#torch.utils._pytree._TreeSpecSchema*N
typeD
Union[builtins.str,None]
builtins.str"builtins.str
None*M
context@
TypeAlias[Any]
Any"#torch.utils._pytree.DumpableContext*£
children_specè
2builtins.list[torch.utils._pytree._TreeSpecSchema]J
#torch.utils._pytree._TreeSpecSchema"#torch.utils._pytree._TreeSpecSchema"builtins.list8rv
type(torch.utils._pytree._TreeSpecSchema.typeD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerx
context+torch.utils._pytree._TreeSpecSchema.context@
TypeAlias[Any]
Any"#torch.utils._pytree.DumpableContextr‘
children_spec1torch.utils._pytree._TreeSpecSchema.children_specè
2builtins.list[torch.utils._pytree._TreeSpecSchema]J
#torch.utils._pytree._TreeSpecSchema"#torch.utils._pytree._TreeSpecSchema"builtins.listrÍ
__dataclass_fields__8torch.utils._pytree._TreeSpecSchema.__dataclass_fields__ó
2builtins.dict[builtins.str,dataclasses.Field[Any]]
builtins.str"builtins.str4
dataclasses.Field[Any]
Any"dataclasses.Field"builtins.dictê!
_ProtocolFntorch.utils._pytree._ProtocolFn"builtins.tuple*¨
_replace(torch.utils._pytree._ProtocolFn._replace"é
#torch.utils._pytree._ProtocolFn._NT‰
FTuple[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function*ö
_selfé
#torch.utils._pytree._ProtocolFn._NT‰
FTuple[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function*c
treespec_to_jsonK
CallableType[builtins.function]&
builtins.function"builtins.function *c
json_to_treespecK
CallableType[builtins.function]&
builtins.function"builtins.function *€
__new__'torch.utils._pytree._ProtocolFn.__new__"é
#torch.utils._pytree._ProtocolFn._NT‰
FTuple[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function*œ
_clsƒ
)Type[torch.utils._pytree._ProtocolFn._NT]é
#torch.utils._pytree._ProtocolFn._NT‰
FTuple[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function"type*a
treespec_to_jsonK
CallableType[builtins.function]&
builtins.function"builtins.function*a
json_to_treespecK
CallableType[builtins.function]&
builtins.function"builtins.function*®
_asdict'torch.utils._pytree._ProtocolFn._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*ö
_selfé
#torch.utils._pytree._ProtocolFn._NT‰
FTuple[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function*ä
_make%torch.utils._pytree._ProtocolFn._make"é
#torch.utils._pytree._ProtocolFn._NT‰
FTuple[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function*œ
_clsƒ
)Type[torch.utils._pytree._ProtocolFn._NT]é
#torch.utils._pytree._ProtocolFn._NT‰
FTuple[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprë
treespec_to_json0torch.utils._pytree._ProtocolFn.treespec_to_jsonK
CallableType[builtins.function]&
builtins.function"builtins.functionrë
json_to_treespec0torch.utils._pytree._ProtocolFn.json_to_treespecK
CallableType[builtins.function]&
builtins.function"builtins.functionrë
treespec_to_json0torch.utils._pytree._ProtocolFn.treespec_to_jsonK
CallableType[builtins.function]&
builtins.function"builtins.functionrë
json_to_treespec0torch.utils._pytree._ProtocolFn.json_to_treespecK
CallableType[builtins.function]&
builtins.function"builtins.functionrî
_fields'torch.utils._pytree._ProtocolFn._fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrï
_field_types,torch.utils._pytree._ProtocolFn._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrõ
_field_defaults/torch.utils._pytree._ProtocolFn._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrP
_source'torch.utils._pytree._ProtocolFn._source
builtins.str"builtins.strrõ
__annotations__/torch.utils._pytree._ProtocolFn.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict’

_DummyLeaftorch.utils._pytree._DummyLeaf"builtins.object*ï
__repr__'torch.utils._pytree._DummyLeaf.__repr__"
builtins.str"builtins.str*B@
torch.utils._pytree._DummyLeaf"torch.utils._pytree._DummyLeaf⁄

register_pytree_node(torch.utils._pytree.register_pytree_node"
None*%
cls
	Type[Any]
Any"type*≠

flatten_fnú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFunc*±
unflatten_fnû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFunc*`
serialized_type_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *á
to_dumpable_contextÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
None *ã
from_dumpable_contextÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
None *à
flatten_with_keys_fnÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
None ©
_register_namedtuple(torch.utils._pytree._register_namedtuple"
None*%
cls
	Type[Any]
Any"type*6
serialized_type_name
builtins.str"builtins.strÏ

_private_register_pytree_node1torch.utils._pytree._private_register_pytree_node"
None*%
cls
	Type[Any]
Any"type*≠

flatten_fnú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFunc*±
unflatten_fnû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFunc*`
serialized_type_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *á
to_dumpable_contextÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
None *ã
from_dumpable_contextÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
None *à
flatten_with_keys_fnÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
None Ç
_tuple_flatten"torch.utils._pytree._tuple_flatten"î
(Tuple[builtins.list[Any],TypeAlias[Any]],
builtins.list[Any]
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*5
d.
builtins.tuple[Any]
Any"builtins.tuple 
_tuple_flatten_with_keys,torch.utils._pytree._tuple_flatten_with_keys"»
LTuple[builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]],TypeAlias[Any]]ª
6builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]]r
'Tuple[torch.utils._pytree.KeyEntry,Any]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*5
d.
builtins.tuple[Any]
Any"builtins.tupleÌ
_tuple_unflatten$torch.utils._pytree._tuple_unflatten".
builtins.tuple[Any]
Any"builtins.tuple*<
values0
typing.Iterable[Any]
Any"typing.Iterable*E
context8
TypeAlias[Any]
Any"torch.utils._pytree.Context˛
_list_flatten!torch.utils._pytree._list_flatten"î
(Tuple[builtins.list[Any],TypeAlias[Any]],
builtins.list[Any]
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*3
d,
builtins.list[Any]
Any"builtins.list∆
_list_flatten_with_keys+torch.utils._pytree._list_flatten_with_keys"»
LTuple[builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]],TypeAlias[Any]]ª
6builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]]r
'Tuple[torch.utils._pytree.KeyEntry,Any]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*3
d,
builtins.list[Any]
Any"builtins.listÈ
_list_unflatten#torch.utils._pytree._list_unflatten",
builtins.list[Any]
Any"builtins.list*<
values0
typing.Iterable[Any]
Any"typing.Iterable*E
context8
TypeAlias[Any]
Any"torch.utils._pytree.Contextã
_dict_flatten!torch.utils._pytree._dict_flatten"î
(Tuple[builtins.list[Any],TypeAlias[Any]],
builtins.list[Any]
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*@
d9
builtins.dict[Any,Any]
Any
Any"builtins.dict”
_dict_flatten_with_keys+torch.utils._pytree._dict_flatten_with_keys"»
LTuple[builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]],TypeAlias[Any]]ª
6builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]]r
'Tuple[torch.utils._pytree.KeyEntry,Any]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*@
d9
builtins.dict[Any,Any]
Any
Any"builtins.dictˆ
_dict_unflatten#torch.utils._pytree._dict_unflatten"9
builtins.dict[Any,Any]
Any
Any"builtins.dict*<
values0
typing.Iterable[Any]
Any"typing.Iterable*E
context8
TypeAlias[Any]
Any"torch.utils._pytree.ContextÑ
_namedtuple_flatten'torch.utils._pytree._namedtuple_flatten"î
(Tuple[builtins.list[Any],TypeAlias[Any]],
builtins.list[Any]
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*-
d&
typing.NamedTuple"typing.NamedTupleÃ
_namedtuple_flatten_with_keys1torch.utils._pytree._namedtuple_flatten_with_keys"»
LTuple[builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]],TypeAlias[Any]]ª
6builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]]r
'Tuple[torch.utils._pytree.KeyEntry,Any]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*-
d&
typing.NamedTuple"typing.NamedTupleÔ
_namedtuple_unflatten)torch.utils._pytree._namedtuple_unflatten"&
typing.NamedTuple"typing.NamedTuple*<
values0
typing.Iterable[Any]
Any"typing.Iterable*E
context8
TypeAlias[Any]
Any"torch.utils._pytree.ContextÀ
_namedtuple_serialize)torch.utils._pytree._namedtuple_serialize"@
TypeAlias[Any]
Any"#torch.utils._pytree.DumpableContext*E
context8
TypeAlias[Any]
Any"torch.utils._pytree.Contextÿ
_namedtuple_deserialize+torch.utils._pytree._namedtuple_deserialize"8
TypeAlias[Any]
Any"torch.utils._pytree.Context*V
dumpable_context@
TypeAlias[Any]
Any"#torch.utils._pytree.DumpableContext≠
_ordereddict_flatten(torch.utils._pytree._ordereddict_flatten"î
(Tuple[builtins.list[Any],TypeAlias[Any]],
builtins.list[Any]
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*T
dM
 collections.OrderedDict[Any,Any]
Any
Any"collections.OrderedDictı
_ordereddict_flatten_with_keys2torch.utils._pytree._ordereddict_flatten_with_keys"»
LTuple[builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]],TypeAlias[Any]]ª
6builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]]r
'Tuple[torch.utils._pytree.KeyEntry,Any]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*T
dM
 collections.OrderedDict[Any,Any]
Any
Any"collections.OrderedDictò
_ordereddict_unflatten*torch.utils._pytree._ordereddict_unflatten"M
 collections.OrderedDict[Any,Any]
Any
Any"collections.OrderedDict*<
values0
typing.Iterable[Any]
Any"typing.Iterable*E
context8
TypeAlias[Any]
Any"torch.utils._pytree.Context≠
_defaultdict_flatten(torch.utils._pytree._defaultdict_flatten"î
(Tuple[builtins.list[Any],TypeAlias[Any]],
builtins.list[Any]
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*T
dM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdictı
_defaultdict_flatten_with_keys2torch.utils._pytree._defaultdict_flatten_with_keys"»
LTuple[builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]],TypeAlias[Any]]ª
6builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]]r
'Tuple[torch.utils._pytree.KeyEntry,Any]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*T
dM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdictò
_defaultdict_unflatten*torch.utils._pytree._defaultdict_unflatten"M
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict*<
values0
typing.Iterable[Any]
Any"typing.Iterable*E
context8
TypeAlias[Any]
Any"torch.utils._pytree.ContextÕ
_defaultdict_serialize*torch.utils._pytree._defaultdict_serialize"@
TypeAlias[Any]
Any"#torch.utils._pytree.DumpableContext*E
context8
TypeAlias[Any]
Any"torch.utils._pytree.Context⁄
_defaultdict_deserialize,torch.utils._pytree._defaultdict_deserialize"8
TypeAlias[Any]
Any"torch.utils._pytree.Context*V
dumpable_context@
TypeAlias[Any]
Any"#torch.utils._pytree.DumpableContextà
_deque_flatten"torch.utils._pytree._deque_flatten"î
(Tuple[builtins.list[Any],TypeAlias[Any]],
builtins.list[Any]
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*;
d4
collections.deque[Any]
Any"collections.deque–
_deque_flatten_with_keys,torch.utils._pytree._deque_flatten_with_keys"»
LTuple[builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]],TypeAlias[Any]]ª
6builtins.list[Tuple[torch.utils._pytree.KeyEntry,Any]]r
'Tuple[torch.utils._pytree.KeyEntry,Any]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry
Any"builtins.list8
TypeAlias[Any]
Any"torch.utils._pytree.Context*;
d4
collections.deque[Any]
Any"collections.dequeÛ
_deque_unflatten$torch.utils._pytree._deque_unflatten"4
collections.deque[Any]
Any"collections.deque*<
values0
typing.Iterable[Any]
Any"typing.Iterable*E
context8
TypeAlias[Any]
Any"torch.utils._pytree.Contexty
_is_namedtuple_instance+torch.utils._pytree._is_namedtuple_instance"
builtins.bool"builtins.bool*
tree
AnyP
_get_node_type"torch.utils._pytree._get_node_type"
Any*
tree
Any§
_is_leaftorch.utils._pytree._is_leaf"
builtins.bool"builtins.bool*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None î
_tree_flatten_helper(torch.utils._pytree._tree_flatten_helper"<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*8
leaves,
builtins.list[Any]
Any"builtins.list*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None µ
tree_flatten torch.utils._pytree.tree_flatten"¶
6Tuple[builtins.list[Any],torch.utils._pytree.TreeSpec],
builtins.list[Any]
Any"builtins.list<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ˜
tree_unflatten"torch.utils._pytree.tree_unflatten"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*<
leaves0
typing.Iterable[Any]
Any"typing.Iterable*J
treespec<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec∏
	tree_itertorch.utils._pytree.tree_iter"0
typing.Iterable[Any]
Any"typing.Iterable*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ∏
tree_leavestorch.utils._pytree.tree_leaves",
builtins.list[Any]
Any"builtins.list*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None Œ
tree_structure"torch.utils._pytree.tree_structure"<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ÿ
tree_maptorch.utils._pytree.tree_map"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*B
rests7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ⁄
	tree_map_torch.utils._pytree.tree_map_"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*B
rests7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ˚
tree_alltorch.utils._pytree.tree_all"
builtins.bool"builtins.bool*U
predK
CallableType[builtins.function]&
builtins.function"builtins.function*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ˚
tree_anytorch.utils._pytree.tree_any"
builtins.bool"builtins.bool*U
predK
CallableType[builtins.function]&
builtins.function"builtins.function*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None Œ
_broadcast_to_and_flatten-torch.utils._pytree._broadcast_to_and_flatten"Z
Union[builtins.list[Any],None],
builtins.list[Any]
Any"builtins.list
None*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*J
treespec<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None “
_treespec_to_json%torch.utils._pytree._treespec_to_json"J
#torch.utils._pytree._TreeSpecSchema"#torch.utils._pytree._TreeSpecSchema*J
treespec<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpecÀ
_json_to_treespec%torch.utils._pytree._json_to_treespec"<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*Q
json_schema@
TypeAlias[Any]
Any"#torch.utils._pytree.DumpableContextÙ
treespec_dumps"torch.utils._pytree.treespec_dumps"
builtins.str"builtins.str*J
treespec<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*T
protocolD
Union[builtins.int,None]
builtins.int"builtins.int
None †
treespec_loads"torch.utils._pytree.treespec_loads"<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*,

serialized
builtins.str"builtins.str†
treespec_pprint#torch.utils._pytree.treespec_pprint"
builtins.str"builtins.str*J
treespec<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpecÏ
arg_tree_leaves#torch.utils._pytree.arg_tree_leaves",
builtins.list[Any]
Any"builtins.list*A
args7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*C
kwargs7
TypeAlias[Any]
Any"torch.utils._pytree.PyTreeÍ
tree_flatten_with_path*torch.utils._pytree.tree_flatten_with_path"«
uTuple[builtins.list[Tuple[TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]],Any]],torch.utils._pytree.TreeSpec]ç
Qbuiltins.list[Tuple[TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]],Any]]®
BTuple[TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]],Any]÷
7TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]]|
,builtins.tuple[torch.utils._pytree.KeyEntry]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry"builtins.tuple"torch.utils._pytree.KeyPath
Any"builtins.list<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None Æ
tree_leaves_with_path)torch.utils._pytree.tree_leaves_with_path"ç
Qbuiltins.list[Tuple[TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]],Any]]®
BTuple[TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]],Any]÷
7TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]]|
,builtins.tuple[torch.utils._pytree.KeyEntry]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry"builtins.tuple"torch.utils._pytree.KeyPath
Any"builtins.list*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None ñ
_generate_key_paths'torch.utils._pytree._generate_key_paths"ë
Styping.Iterable[Tuple[TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]],Any]]®
BTuple[TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]],Any]÷
7TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]]|
,builtins.tuple[torch.utils._pytree.KeyEntry]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry"builtins.tuple"torch.utils._pytree.KeyPath
Any"typing.Iterable*Â
key_path÷
7TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]]|
,builtins.tuple[torch.utils._pytree.KeyEntry]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry"builtins.tuple"torch.utils._pytree.KeyPath*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None Ï
tree_map_with_path&torch.utils._pytree.tree_map_with_path"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*B
rests7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None §
keystrtorch.utils._pytree.keystr"
builtins.str"builtins.str*ﬂ
kp÷
7TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]]|
,builtins.tuple[torch.utils._pytree.KeyEntry]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry"builtins.tuple"torch.utils._pytree.KeyPath£
key_gettorch.utils._pytree.key_get"
Any*
obj
Any*ﬂ
kp÷
7TypeAlias[builtins.tuple[torch.utils._pytree.KeyEntry]]|
,builtins.tuple[torch.utils._pytree.KeyEntry]<
torch.utils._pytree.KeyEntry"torch.utils._pytree.KeyEntry"builtins.tuple"torch.utils._pytree.KeyPath"Ö
map_onlytorch.utils._pytree.map_onlyÙ
map_onlytorch.utils._pytree.map_only"ö
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.MapOnlyFn*ûõ
ITypeAlias[Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S]]]∞
>Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S]]u
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.S]N
torch.utils._pytree.S"
builtins.object"builtins.object"builtins.object"type"torch.utils._pytree.Type20:overloadX£
map_onlytorch.utils._pytree.map_only"ö
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.MapOnlyFn*Õ 
eTypeAlias[Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S],Type[torch.utils._pytree.U]]]√
ZTuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S],Type[torch.utils._pytree.U]]u
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.S]N
torch.utils._pytree.S"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.U]N
torch.utils._pytree.U"
builtins.object"builtins.object"builtins.object"type"torch.utils._pytree.Type30:overloadXÃ
map_onlytorch.utils._pytree.map_only"ö
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.MapOnlyFn*wu
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"type0:overloadX…
map_onlytorch.utils._pytree.map_only"ö
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.MapOnlyFn*Û
5TypeAlias[Union[Type[Any],builtins.tuple[Type[Any]]]]ó
*Union[Type[Any],builtins.tuple[Type[Any]]]
	Type[Any]
Any"typeI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple"torch.utils._pytree.TypeAny0:overloadX¢
map_onlytorch.utils._pytree.map_only"ö
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.MapOnlyFn*MK
CallableType[builtins.function]&
builtins.function"builtins.function0:overloadX"‘
tree_map_only!torch.utils._pytree.tree_map_onlyÔ
tree_map_only!torch.utils._pytree.tree_map_only"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*wu
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"type*û
funcì
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.Fn*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXò
tree_map_only!torch.utils._pytree.tree_map_only"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ûõ
ITypeAlias[Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S]]]∞
>Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S]]u
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.S]N
torch.utils._pytree.S"
builtins.object"builtins.object"builtins.object"type"torch.utils._pytree.Type2*ü
funcî
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.Fn2*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX«
tree_map_only!torch.utils._pytree.tree_map_only"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*Õ 
eTypeAlias[Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S],Type[torch.utils._pytree.U]]]√
ZTuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S],Type[torch.utils._pytree.U]]u
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.S]N
torch.utils._pytree.S"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.U]N
torch.utils._pytree.U"
builtins.object"builtins.object"builtins.object"type"torch.utils._pytree.Type3*ü
funcî
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.Fn3*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX»
tree_map_only!torch.utils._pytree.tree_map_only"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*MK
CallableType[builtins.function]&
builtins.function"builtins.function*°
funcñ
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FnAny*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX"ﬁ
tree_map_only_"torch.utils._pytree.tree_map_only_Ò
tree_map_only_"torch.utils._pytree.tree_map_only_"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*wu
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"type*û
funcì
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.Fn*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXö
tree_map_only_"torch.utils._pytree.tree_map_only_"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ûõ
ITypeAlias[Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S]]]∞
>Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S]]u
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.S]N
torch.utils._pytree.S"
builtins.object"builtins.object"builtins.object"type"torch.utils._pytree.Type2*ü
funcî
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.Fn2*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX…
tree_map_only_"torch.utils._pytree.tree_map_only_"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*Õ 
eTypeAlias[Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S],Type[torch.utils._pytree.U]]]√
ZTuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S],Type[torch.utils._pytree.U]]u
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.S]N
torch.utils._pytree.S"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.U]N
torch.utils._pytree.U"
builtins.object"builtins.object"builtins.object"type"torch.utils._pytree.Type3*ü
funcî
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.Fn3*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX 
tree_map_only_"torch.utils._pytree.tree_map_only_"7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*MK
CallableType[builtins.function]&
builtins.function"builtins.function*°
funcñ
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FnAny*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX"æ
tree_all_only!torch.utils._pytree.tree_all_only÷
tree_all_only!torch.utils._pytree.tree_all_only"
builtins.bool"builtins.bool*wu
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"type*û
predì
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.Fn*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXˇ
tree_all_only!torch.utils._pytree.tree_all_only"
builtins.bool"builtins.bool*ûõ
ITypeAlias[Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S]]]∞
>Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S]]u
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.S]N
torch.utils._pytree.S"
builtins.object"builtins.object"builtins.object"type"torch.utils._pytree.Type2*ü
predî
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.Fn2*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXÆ
tree_all_only!torch.utils._pytree.tree_all_only"
builtins.bool"builtins.bool*Õ 
eTypeAlias[Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S],Type[torch.utils._pytree.U]]]√
ZTuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S],Type[torch.utils._pytree.U]]u
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.S]N
torch.utils._pytree.S"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.U]N
torch.utils._pytree.U"
builtins.object"builtins.object"builtins.object"type"torch.utils._pytree.Type3*ü
predî
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.Fn3*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX"æ
tree_any_only!torch.utils._pytree.tree_any_only÷
tree_any_only!torch.utils._pytree.tree_any_only"
builtins.bool"builtins.bool*wu
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"type*û
predì
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.Fn*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXˇ
tree_any_only!torch.utils._pytree.tree_any_only"
builtins.bool"builtins.bool*ûõ
ITypeAlias[Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S]]]∞
>Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S]]u
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.S]N
torch.utils._pytree.S"
builtins.object"builtins.object"builtins.object"type"torch.utils._pytree.Type2*ü
predî
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.Fn2*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXÆ
tree_any_only!torch.utils._pytree.tree_any_only"
builtins.bool"builtins.bool*Õ 
eTypeAlias[Tuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S],Type[torch.utils._pytree.U]]]√
ZTuple[Type[torch.utils._pytree.T],Type[torch.utils._pytree.S],Type[torch.utils._pytree.U]]u
Type[torch.utils._pytree.T]N
torch.utils._pytree.T"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.S]N
torch.utils._pytree.S"
builtins.object"builtins.object"builtins.object"typeu
Type[torch.utils._pytree.U]N
torch.utils._pytree.U"
builtins.object"builtins.object"builtins.object"type"torch.utils._pytree.Type3*ü
predî
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.Fn3*A
tree7
TypeAlias[Any]
Any"torch.utils._pytree.PyTree*ñ
is_leafÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX*è
__annotations__#torch.utils._pytree.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*r
__all__torch.utils._pytree.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Ñ
'DEFAULT_TREESPEC_SERIALIZATION_PROTOCOL;torch.utils._pytree.DEFAULT_TREESPEC_SERIALIZATION_PROTOCOL
builtins.int"builtins.int*p
NO_SERIALIZED_TYPE_NAME_FOUND1torch.utils._pytree.NO_SERIALIZED_TYPE_NAME_FOUND
builtins.str"builtins.str*`
_NODE_REGISTRY_LOCK'torch.utils._pytree._NODE_REGISTRY_LOCK 
threading.Lock"threading.Lock*Ë	
SUPPORTED_NODES#torch.utils._pytree.SUPPORTED_NODESØ	
¡builtins.dict[Type[Any],TypeAlias[Tuple[Type[Any],TypeAlias[CallableType[builtins.function]],TypeAlias[CallableType[builtins.function]],Union[TypeAlias[CallableType[builtins.function]],None]]]]
	Type[Any]
Any"typeª
®TypeAlias[Tuple[Type[Any],TypeAlias[CallableType[builtins.function]],TypeAlias[CallableType[builtins.function]],Union[TypeAlias[CallableType[builtins.function]],None]]]Ó
ùTuple[Type[Any],TypeAlias[CallableType[builtins.function]],TypeAlias[CallableType[builtins.function]],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"typeú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree.FlattenFuncû
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"!torch.utils._pytree.UnflattenFuncÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.FlattenWithKeysFunc
None"torch.utils._pytree.NodeDef"builtins.dict*†	
SUPPORTED_SERIALIZED_TYPES.torch.utils._pytree.SUPPORTED_SERIALIZED_TYPES—
Øbuiltins.dict[Type[Any],TypeAlias[Tuple[Type[Any],builtins.str,Union[TypeAlias[CallableType[builtins.function]],None],Union[TypeAlias[CallableType[builtins.function]],None]]]]
	Type[Any]
Any"typeÔ
ñTypeAlias[Tuple[Type[Any],builtins.str,Union[TypeAlias[CallableType[builtins.function]],None],Union[TypeAlias[CallableType[builtins.function]],None]]]™
ãTuple[Type[Any],builtins.str,Union[TypeAlias[CallableType[builtins.function]],None],Union[TypeAlias[CallableType[builtins.function]],None]]
	Type[Any]
Any"type
builtins.str"builtins.strÎ
6Union[TypeAlias[CallableType[builtins.function]],None]§
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"'torch.utils._pytree.ToDumpableContextFn
NoneÌ
6Union[TypeAlias[CallableType[builtins.function]],None]¶
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function")torch.utils._pytree.FromDumpableContextFn
None"%torch.utils._pytree._SerializeNodeDef"builtins.dict*»
SERIALIZED_TYPE_TO_PYTHON_TYPE2torch.utils._pytree.SERIALIZED_TYPE_TO_PYTHON_TYPEr
%builtins.dict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"type"builtins.dict*Å
_odict_flatten"torch.utils._pytree._odict_flattenK
CallableType[builtins.function]&
builtins.function"builtins.function*Ö
_odict_unflatten$torch.utils._pytree._odict_unflattenK
CallableType[builtins.function]&
builtins.function"builtins.function*ó
STANDARD_DICT_TYPES'torch.utils._pytree.STANDARD_DICT_TYPESW
!builtins.frozenset[builtins.type]
builtins.type"builtins.type"builtins.frozenset*ã
BUILTIN_TYPES!torch.utils._pytree.BUILTIN_TYPESW
!builtins.frozenset[builtins.type]
builtins.type"builtins.type"builtins.frozenset*j

_LEAF_SPECtorch.utils._pytree._LEAF_SPEC<
torch.utils._pytree.LeafSpec"torch.utils._pytree.LeafSpec*ø
_SUPPORTED_PROTOCOLS(torch.utils._pytree._SUPPORTED_PROTOCOLS¸
mbuiltins.dict[builtins.int,TypeAlias[Tuple[CallableType[builtins.function],CallableType[builtins.function]]]]
builtins.int"builtins.int›
QTypeAlias[Tuple[CallableType[builtins.function],CallableType[builtins.function]]]‰
FTuple[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function"torch.utils._pytree._ProtocolFn"builtins.dict