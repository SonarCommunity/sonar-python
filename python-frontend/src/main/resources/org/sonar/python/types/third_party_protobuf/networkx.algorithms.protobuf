
networkx.algorithms¶
NetworkXTreewidthBoundExceeded:networkx.algorithms.chordal.NetworkXTreewidthBoundExceeded"$networkx.exception.NetworkXExceptionj36j37j38j39j310j311j312j313Ä6
PlanarEmbedding-networkx.algorithms.planarity.PlanarEmbedding" networkx.classes.digraph.DiGraph*ü
get_data6networkx.algorithms.planarity.PlanarEmbedding.get_data"’
Wbuiltins.dict[networkx.classes.graph._Node,builtins.list[networkx.classes.graph._Node]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableì
+builtins.list[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list"builtins.dict*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbeddingz36z37z38z39z310z311z312z313*¬
set_data6networkx.algorithms.planarity.PlanarEmbedding.set_data"
None*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*Ó
data„
\typing.Mapping[networkx.classes.graph._Node,typing.Reversible[networkx.classes.graph._Node]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableõ
/typing.Reversible[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Reversible"typing.Mappingz36z37z38z39z310z311z312z313*Û
neighbors_cw_order@networkx.algorithms.planarity.PlanarEmbedding.neighbors_cw_order"∑
8typing.Generator[networkx.classes.graph._Node,None,None]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*ﬂ
check_structure=networkx.algorithms.planarity.PlanarEmbedding.check_structure"
None*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbeddingz36z37z38z39z310z311z312z313*û
add_half_edge_ccw?networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_ccw"
None*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*e

start_nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*c
end_nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*m
reference_neighborU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*ú
add_half_edge_cw>networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_cw"
None*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*e

start_nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*c
end_nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*m
reference_neighborU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*°
connect_components@networkx.algorithms.planarity.PlanarEmbedding.connect_components"
None*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
wU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*≥
add_half_edge_firstAnetworkx.algorithms.planarity.PlanarEmbedding.add_half_edge_first"
None*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*e

start_nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*c
end_nodeU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*é
next_face_half_edgeAnetworkx.algorithms.planarity.PlanarEmbedding.next_face_half_edge"Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
wU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashablez36z37z38z39z310z311z312z313*ã	
traverse_face;networkx.algorithms.planarity.PlanarEmbedding.traverse_face"ì
+builtins.list[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list*ﬁ
self”
Knetworkx.algorithms.planarity.PlanarEmbedding[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"-networkx.algorithms.planarity.PlanarEmbedding*\
vU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*\
wU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*Â
mark_half_edgesÕ
_Union[typing.MutableSet[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]],None]›
Styping.MutableSet[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSet
None z36z37z38z39z310z311z312z313Pj36j37j38j39j310j311j312j313π
ArborescenceIterator8networkx.algorithms.tree.branchings.ArborescenceIterator"builtins.object*Ÿ
__init__Anetworkx.algorithms.tree.branchings.ArborescenceIterator.__init__"
None*~
selft
8networkx.algorithms.tree.branchings.ArborescenceIterator"8networkx.algorithms.tree.branchings.ArborescenceIterator*
G
Any**
weight
builtins.str"builtins.str *-
minimum
builtins.bool"builtins.bool *q
init_partition[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z36z37z38z39z310z311z312z313*–
__iter__Anetworkx.algorithms.tree.branchings.ArborescenceIterator.__iter__"e
typing.Iterator[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"typing.Iterator*vt
8networkx.algorithms.tree.branchings.ArborescenceIterator"8networkx.algorithms.tree.branchings.ArborescenceIteratorz36z37z38z39z310z311z312z313*{
__next__Anetworkx.algorithms.tree.branchings.ArborescenceIterator.__next__*
selfz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313rñ
G:networkx.algorithms.tree.branchings.ArborescenceIterator.G1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r†
weight?networkx.algorithms.tree.branchings.ArborescenceIterator.weight1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r¢
minimum@networkx.algorithms.tree.branchings.ArborescenceIterator.minimum1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r†
method?networkx.algorithms.tree.branchings.ArborescenceIterator.method1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rô
partition_keyFnetworkx.algorithms.tree.branchings.ArborescenceIterator.partition_key
builtins.str"builtins.str*36*37*38*39*310*311*312*313r∞
init_partitionGnetworkx.algorithms.tree.branchings.ArborescenceIterator.init_partition1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r≤
partition_queueHnetworkx.algorithms.tree.branchings.ArborescenceIterator.partition_queue1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313~
NotATree(networkx.algorithms.tree.coding.NotATree"$networkx.exception.NetworkXExceptionj36j37j38j39j310j311j312j313Ô
EdgePartition*networkx.algorithms.tree.mst.EdgePartition"	enum.EnumHj36j37j38j39j310j311j312j313ry
OPEN/networkx.algorithms.tree.mst.EdgePartition.OPEN
builtins.int"builtins.int*36*37*38*39*310*311*312*313rÅ
INCLUDED3networkx.algorithms.tree.mst.EdgePartition.INCLUDED
builtins.int"builtins.int*36*37*38*39*310*311*312*313rÅ
EXCLUDED3networkx.algorithms.tree.mst.EdgePartition.EXCLUDED
builtins.int"builtins.int*36*37*38*39*310*311*312*313Î
SpanningTreeIterator1networkx.algorithms.tree.mst.SpanningTreeIterator"builtins.object*É
__init__:networkx.algorithms.tree.mst.SpanningTreeIterator.__init__"
None*p
selff
1networkx.algorithms.tree.mst.SpanningTreeIterator"1networkx.algorithms.tree.mst.SpanningTreeIterator*
G
Any**
weight
builtins.str"builtins.str *-
minimum
builtins.bool"builtins.bool *0

ignore_nan
builtins.bool"builtins.bool z36z37z38z39z310z311z312z313*ª
__iter__:networkx.algorithms.tree.mst.SpanningTreeIterator.__iter__"e
typing.Iterator[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"typing.Iterator*hf
1networkx.algorithms.tree.mst.SpanningTreeIterator"1networkx.algorithms.tree.mst.SpanningTreeIteratorz36z37z38z39z310z311z312z313*t
__next__:networkx.algorithms.tree.mst.SpanningTreeIterator.__next__*
selfz36z37z38z39z310z311z312z313j36j37j38j39j310j311j312j313rè
G3networkx.algorithms.tree.mst.SpanningTreeIterator.G1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rô
weight8networkx.algorithms.tree.mst.SpanningTreeIterator.weight1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rõ
minimum9networkx.algorithms.tree.mst.SpanningTreeIterator.minimum1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313r°

ignore_nan<networkx.algorithms.tree.mst.SpanningTreeIterator.ignore_nan1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313rí
partition_key?networkx.algorithms.tree.mst.SpanningTreeIterator.partition_key
builtins.str"builtins.str*36*37*38*39*310*311*312*313r´
partition_queueAnetworkx.algorithms.tree.mst.SpanningTreeIterator.partition_queue1
TypeAlias[Any]
Any"_typeshed.Incomplete*36*37*38*39*310*311*312*313"«y
edge_boundary*networkx.algorithms.boundary.edge_boundaryﬂ
edge_boundary*networkx.algorithms.boundary.edge_boundary"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *
data
Any *
keys
Any *
default
Any 0:overloadX¡

edge_boundary*networkx.algorithms.boundary.edge_boundary"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*
data
Any*
keys
Any *
default
Any 0:overloadX√

edge_boundary*networkx.algorithms.boundary.edge_boundary"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *
data
Any*
keys
Any *
default
Any 0:overloadXæ
edge_boundary*networkx.algorithms.boundary.edge_boundary"π
òtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]ı
|Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*&
data
builtins.str"builtins.str*
keys
Any *£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX¿
edge_boundary*networkx.algorithms.boundary.edge_boundary"π
òtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]ı
|Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *&
data
builtins.str"builtins.str*
keys
Any *£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadXë	
edge_boundary*networkx.algorithms.boundary.edge_boundary"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*
data
Any*
keys
Any*
default
Any 0:overloadXï	
edge_boundary*networkx.algorithms.boundary.edge_boundary"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *
data
Any *
keys
Any*
default
Any 0:overloadX˜

edge_boundary*networkx.algorithms.boundary.edge_boundary"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*
data
Any*
keys
Any*
default
Any 0:overloadX˘

edge_boundary*networkx.algorithms.boundary.edge_boundary"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *
data
Any*
keys
Any*
default
Any 0:overloadXı
edge_boundary*networkx.algorithms.boundary.edge_boundary"Ú
•typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]°
âTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*&
data
builtins.str"builtins.str*
keys
Any*£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX˜
edge_boundary*networkx.algorithms.boundary.edge_boundary"Ú
•typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]°
âTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *&
data
builtins.str"builtins.str*
keys
Any*£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX"36"37"ÒÄ
edge_boundary*networkx.algorithms.boundary.edge_boundary≈	
edge_boundary*networkx.algorithms.boundary.edge_boundary"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *F
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool *F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
default
Any 0:overloadXß
edge_boundary*networkx.algorithms.boundary.edge_boundary"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
default
Any 0:overloadX©
edge_boundary*networkx.algorithms.boundary.edge_boundary"ﬂ
átyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]¨
kTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
default
Any 0:overloadXÒ
edge_boundary*networkx.algorithms.boundary.edge_boundary"π
òtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]ı
|Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*&
data
builtins.str"builtins.str*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadXÛ
edge_boundary*networkx.algorithms.boundary.edge_boundary"π
òtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]ı
|Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *&
data
builtins.str"builtins.str*F
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool *£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX˜	
edge_boundary*networkx.algorithms.boundary.edge_boundary"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadX˚	
edge_boundary*networkx.algorithms.boundary.edge_boundary"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *F
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool *D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadX›
edge_boundary*networkx.algorithms.boundary.edge_boundary"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadXﬂ
edge_boundary*networkx.algorithms.boundary.edge_boundary"ó
îtyping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]],None,None]◊
xTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,TypeAlias[Any]]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intå
*builtins.dict[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *D
data:
Literal[builtins.bool]	
builtins.bool"builtins.bool*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*
default
Any 0:overloadX®
edge_boundary*networkx.algorithms.boundary.edge_boundary"Ú
•typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]°
âTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ô
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None*&
data
builtins.str"builtins.str*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX™
edge_boundary*networkx.algorithms.boundary.edge_boundary"Ú
•typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]],None,None]°
âTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int,builtins.dict[builtins.str,networkx.algorithms.boundary._U]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.intƒ
;builtins.dict[builtins.str,networkx.algorithms.boundary._U]
builtins.str"builtins.strX
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object"builtins.dict
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*•
nbunch1ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable*Ò
nbunch2·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *&
data
builtins.str"builtins.str*D
keys:
Literal[builtins.bool]	
builtins.bool"builtins.bool*£
defaultì
+Union[networkx.algorithms.boundary._U,None]X
networkx.algorithms.boundary._U"
builtins.object"builtins.object"builtins.object
None 0:overloadX"38"39"310"311"312"313"∏
local_bridges)networkx.algorithms.bridges.local_bridges€
local_bridges)networkx.algorithms.bridges.local_bridges"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
	with_span
Any*¿
weight±
8Union[builtins.str,CallableType[builtins.function],None]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadXï
local_bridges)networkx.algorithms.bridges.local_bridges"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*
	with_span
Any *¿
weight±
8Union[builtins.str,CallableType[builtins.function],None]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX"36"37"≤
local_bridges)networkx.algorithms.bridges.local_bridgesé
local_bridges)networkx.algorithms.bridges.local_bridges"˘
\typing.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node],None,None]Ú
@Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*I
	with_span:
Literal[builtins.bool]	
builtins.bool"builtins.bool*¿
weight±
8Union[builtins.str,CallableType[builtins.function],None]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX»
local_bridges)networkx.algorithms.bridges.local_bridges"±
ityping.Generator[Tuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int],None,None]ù
MTuple[networkx.classes.graph._Node,networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.HashableU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int
None
None"typing.Generator*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*K
	with_span:
Literal[builtins.bool]	
builtins.bool"builtins.bool *¿
weight±
8Union[builtins.str,CallableType[builtins.function],None]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function
None 0:overloadX"38"39"310"311"312"313"°
node_clique_number-networkx.algorithms.clique.node_clique_number”
node_clique_number-networkx.algorithms.clique.node_clique_number"æ
8builtins.dict[networkx.classes.graph._Node,builtins.int]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int"builtins.dict*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*Ô
nodes·
9Union[typing.Iterable[networkx.classes.graph._Node],None]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable
None *÷
cliques∆
JUnion[typing.Iterable[typing.Iterable[networkx.classes.graph._Node]],None]Î
>typing.Iterable[typing.Iterable[networkx.classes.graph._Node]]ó
-typing.Iterable[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"typing.Iterable"typing.Iterable
None *8
separate_nodes"
builtins.object"builtins.object 0:overloadX·
node_clique_number-networkx.algorithms.clique.node_clique_number"
builtins.int"builtins.int*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*`
nodesU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*ó
cliquesá
)Union[typing.Iterable[typing.Sized],None]N
typing.Iterable[typing.Sized]
typing.Sized"typing.Sized"typing.Iterable
None *8
separate_nodes"
builtins.object"builtins.object 0:overloadX"36"37"38"39"310"311"312"313"
shortest_path8networkx.algorithms.shortest_paths.generic.shortest_pathÜ
shortest_path8networkx.algorithms.shortest_paths.generic.shortest_path"ì
+builtins.list[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*a
sourceU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*a
targetU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable*i
weight[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None **
method
builtins.str"builtins.str 0:overloadX˙
shortest_path8networkx.algorithms.shortest_paths.generic.shortest_path"’
Wbuiltins.dict[networkx.classes.graph._Node,builtins.list[networkx.classes.graph._Node]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableì
+builtins.list[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list"builtins.dict*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*a
targetU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable**
method
builtins.str"builtins.str 0:overloadX˙
shortest_path8networkx.algorithms.shortest_paths.generic.shortest_path"’
Wbuiltins.dict[networkx.classes.graph._Node,builtins.list[networkx.classes.graph._Node]]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashableì
+builtins.list[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list"builtins.dict*π
G±
:networkx.classes.graph.Graph[networkx.classes.graph._Node]U
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable"networkx.classes.graph.Graph*a
sourceU
networkx.classes.graph._Node"
typing.Hashable"typing.Hashable"typing.Hashable**
method
builtins.str"builtins.str 0:overloadX"36"37"38"39"310"311"312"313*ò
__path__networkx.algorithms.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*36*37*38*39*310*311*312*313*≥
__annotations__#networkx.algorithms.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*36*37*38*39*310*311*312*313*X
approximation!networkx.algorithms.approximation *36*37*38*39*310*311*312*313*X
assortativity!networkx.algorithms.assortativity *36*37*38*39*310*311*312*313*P
	bipartitenetworkx.algorithms.bipartite *36*37*38*39*310*311*312*313*R

centralitynetworkx.algorithms.centrality *36*37*38*39*310*311*312*313*L
chordalnetworkx.algorithms.chordal *36*37*38*39*310*311*312*313*J
cliquenetworkx.algorithms.clique *36*37*38*39*310*311*312*313*L
clusternetworkx.algorithms.cluster *36*37*38*39*310*311*312*313*N
coloringnetworkx.algorithms.coloring *36*37*38*39*310*311*312*313*P
	communitynetworkx.algorithms.community *36*37*38*39*310*311*312*313*R

componentsnetworkx.algorithms.components *36*37*38*39*310*311*312*313*V
connectivity networkx.algorithms.connectivity *36*37*38*39*310*311*312*313*F
flownetworkx.algorithms.flow *36*37*38*39*310*311*312*313*T
isomorphismnetworkx.algorithms.isomorphism *36*37*38*39*310*311*312*313*X
link_analysis!networkx.algorithms.link_analysis *36*37*38*39*310*311*312*313*l
lowest_common_ancestors+networkx.algorithms.lowest_common_ancestors *36*37*38*39*310*311*312*313*d
node_classification'networkx.algorithms.node_classification *36*37*38*39*310*311*312*313*P
	operatorsnetworkx.algorithms.operators *36*37*38*39*310*311*312*313*Z
shortest_paths"networkx.algorithms.shortest_paths *36*37*38*39*310*311*312*313*R

tournamentnetworkx.algorithms.tournament *36*37*38*39*310*311*312*313*P
	traversalnetworkx.algorithms.traversal *36*37*38*39*310*311*312*313*F
treenetworkx.algorithms.tree *36*37*38*39*310*311*312*313*Ú
information_centralityLnetworkx.algorithms.centrality.current_flow_closeness.information_centralityf
2networkx.utils.backends._dispatchable[Unknown,Any] 
Any"%networkx.utils.backends._dispatchable*36*37*38*39*310*311*312*313*“
load_centrality3networkx.algorithms.centrality.load.load_centralityf
2networkx.utils.backends._dispatchable[Unknown,Any] 
Any"%networkx.utils.backends._dispatchable*36*37*38*39*310*311*312*313*◊
identified_nodes7networkx.algorithms.minors.contraction.identified_nodesf
2networkx.utils.backends._dispatchable[Unknown,Any] 
Any"%networkx.utils.backends._dispatchable*36*37*38*39*310*311*312*313