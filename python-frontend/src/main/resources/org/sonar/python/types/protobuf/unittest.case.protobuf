
unittest.caseunittest.caseî
SkipTestunittest.case.SkipTest"builtins.Exception*builtins.BaseException2Ø
__init__unittest.case.SkipTest.__init__"
None*:
self0
unittest.case.SkipTest"unittest.case.SkipTest*(
reason
builtins.str"builtins.strz35z36z37z38z39r35r36r37r38r39í›
TestCaseunittest.case.TestCase"builtins.object2µ
__init__unittest.case.TestCase.__init__"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*.

methodName
builtins.str"builtins.str z35z36z37z38z392
setUpunittest.case.TestCase.setUp"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z392Ö
tearDownunittest.case.TestCase.tearDown"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z392ª

setUpClass!unittest.case.TestCase.setUpClass"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase0:classmethodpz35z36z37z38z392¡
tearDownClass$unittest.case.TestCase.tearDownClass"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase0:classmethodpz35z36z37z38z392ﬂ
rununittest.case.TestCase.run"n
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*|
resultn
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None z35z36z37z38z392È
__call__unittest.case.TestCase.__call__"n
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*|
resultn
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None z35z36z37z38z392ö
skipTestunittest.case.TestCase.skipTest"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
reason
Anyz35z36z37z38z392‚
subTestunittest.case.TestCase.subTest">
typing.ContextManager[None]
None"typing.ContextManager*:
self0
unittest.case.TestCase"unittest.case.TestCase*
msg
Any *
params
Anyz35z36z37z38z392
debugunittest.case.TestCase.debug"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z392∂
_addSkipunittest.case.TestCase._addSkip"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*D
result8
unittest.result.TestResult"unittest.result.TestResult*?
	test_case0
unittest.case.TestCase"unittest.case.TestCase*(
reason
builtins.str"builtins.strz35z36z37z38z392»
assertEqual"unittest.case.TestCase.assertEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z392Œ
assertNotEqual%unittest.case.TestCase.assertNotEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z392∞

assertTrue!unittest.case.TestCase.assertTrue"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr
Any*
msg
Any z35z36z37z38z392≤
assertFalse"unittest.case.TestCase.assertFalse"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr
Any*
msg
Any z35z36z37z38z392¡
assertIsunittest.case.TestCase.assertIs"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr1
Any*
expr2
Any*
msg
Any z35z36z37z38z392«
assertIsNot"unittest.case.TestCase.assertIsNot"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr1
Any*
expr2
Any*
msg
Any z35z36z37z38z392≥
assertIsNone#unittest.case.TestCase.assertIsNone"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
obj
Any*
msg
Any z35z36z37z38z392π
assertIsNotNone&unittest.case.TestCase.assertIsNotNone"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
obj
Any*
msg
Any z35z36z37z38z392‹
assertInunittest.case.TestCase.assertIn"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
member
Any*´
	containerõ
1Union[typing.Iterable[Any],typing.Container[Any]]0
typing.Iterable[Any]
Any"typing.Iterable2
typing.Container[Any]
Any"typing.Container*
msg
Any z35z36z37z38z392‚
assertNotIn"unittest.case.TestCase.assertNotIn"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
member
Any*´
	containerõ
1Union[typing.Iterable[Any],typing.Container[Any]]0
typing.Iterable[Any]
Any"typing.Iterable2
typing.Container[Any]
Any"typing.Container*
msg
Any z35z36z37z38z392Ô
assertIsInstance'unittest.case.TestCase.assertIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
obj
Any*±
clsß
2Union[builtins.type,builtins.tuple[builtins.type]]
builtins.type"builtins.typeO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*
msg
Any z35z36z37z38z392ı
assertNotIsInstance*unittest.case.TestCase.assertNotIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
obj
Any*±
clsß
2Union[builtins.type,builtins.tuple[builtins.type]]
builtins.type"builtins.typeO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*
msg
Any z35z36z37z38z392√
assertGreater$unittest.case.TestCase.assertGreater"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
Any*
b
Any*
msg
Any z35z36z37z38z392Õ
assertGreaterEqual)unittest.case.TestCase.assertGreaterEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
Any*
b
Any*
msg
Any z35z36z37z38z392Ω

assertLess!unittest.case.TestCase.assertLess"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
Any*
b
Any*
msg
Any z35z36z37z38z392«
assertLessEqual&unittest.case.TestCase.assertLessEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
Any*
b
Any*
msg
Any z35z36z37z38z392…

assertLogs!unittest.case.TestCase.assertLogs"D
 unittest.case._AssertLogsContext" unittest.case._AssertLogsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*É
loggeru
'Union[builtins.str,logging.Logger,None]
builtins.str"builtins.str 
logging.Logger"logging.Logger
None *|
levelo
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None z35z36z37z38z392·
assertRegex"unittest.case.TestCase.assertRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*¢
expected_regexç
2Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]
typing.AnyStrB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
msg
Any z35z36z37z38z392È
assertNotRegex%unittest.case.TestCase.assertNotRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*§
unexpected_regexç
2Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]
typing.AnyStrB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
msg
Any z35z36z37z38z392§
assertCountEqual'unittest.case.TestCase.assertCountEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*;
first0
typing.Iterable[Any]
Any"typing.Iterable*<
second0
typing.Iterable[Any]
Any"typing.Iterable*
msg
Any z35z36z37z38z392õ
addTypeEqualityFunc*unittest.case.TestCase.addTypeEqualityFunc"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*#
typeobj
	Type[Any]
Any*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.functionz35z36z37z38z392Ñ
assertMultiLineEqual+unittest.case.TestCase.assertMultiLineEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*'
first
builtins.str"builtins.str*(
second
builtins.str"builtins.str*
msg
Any z35z36z37z38z392¡
assertSequenceEqual*unittest.case.TestCase.assertSequenceEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*:
seq10
typing.Sequence[Any]
Any"typing.Sequence*:
seq20
typing.Sequence[Any]
Any"typing.Sequence*
msg
Any *ó
seq_typeÜ
&Union[Type[typing.Sequence[Any]],None]P
Type[typing.Sequence[Any]]0
typing.Sequence[Any]
Any"typing.Sequence
None z35z36z37z38z392ô
assertListEqual&unittest.case.TestCase.assertListEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*7
list1,
builtins.list[Any]
Any"builtins.list*7
list2,
builtins.list[Any]
Any"builtins.list*
msg
Any z35z36z37z38z392°
assertTupleEqual'unittest.case.TestCase.assertTupleEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*:
tuple1.
builtins.tuple[Any]
Any"builtins.tuple*:
tuple2.
builtins.tuple[Any]
Any"builtins.tuple*
msg
Any z35z36z37z38z392˜
assertSetEqual%unittest.case.TestCase.assertSetEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*g
set1]
#typing.AbstractSet[builtins.object]"
builtins.object"builtins.object"typing.AbstractSet*g
set2]
#typing.AbstractSet[builtins.object]"
builtins.object"builtins.object"typing.AbstractSet*
msg
Any z35z36z37z38z392ˇ
assertDictEqual&unittest.case.TestCase.assertDictEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*j
d1b
#typing.Mapping[Any,builtins.object]
Any"
builtins.object"builtins.object"typing.Mapping*j
d2b
#typing.Mapping[Any,builtins.object]
Any"
builtins.object"builtins.object"typing.Mapping*
msg
Any z35z36z37z38z392ï
failunittest.case.TestCase.fail"
NoReturn
*:
self0
unittest.case.TestCase"unittest.case.TestCase*
msg
Any z35z36z37z38z392•
countTestCases%unittest.case.TestCase.countTestCases"
builtins.int"builtins.int*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z392«
defaultTestResult(unittest.case.TestCase.defaultTestResult"8
unittest.result.TestResult"unittest.result.TestResult*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z392ç
idunittest.case.TestCase.id"
builtins.str"builtins.str*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z392—
shortDescription'unittest.case.TestCase.shortDescription"D
Union[builtins.str,None]
builtins.str"builtins.str
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z392Ñ

addCleanup!unittest.case.TestCase.addCleanup"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Anyz35z36z372Ä

addCleanup!unittest.case.TestCase.addCleanup"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Y

__functionK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Anyz38z392â

doCleanups!unittest.case.TestCase.doCleanups"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z392£
_formatMessage%unittest.case.TestCase._formatMessage"
builtins.str"builtins.str*:
self0
unittest.case.TestCase"unittest.case.TestCase*M
msgD
Union[builtins.str,None]
builtins.str"builtins.str
None*-
standardMsg
builtins.str"builtins.strz35z36z37z38z392ç
_getAssertEqualityFunc-unittest.case.TestCase._getAssertEqualityFunc"K
CallableType[builtins.function]&
builtins.function"builtins.function*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Anyz35z36z37z38z392–
failUnlessEqual&unittest.case.TestCase.failUnlessEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z392 
assertEquals#unittest.case.TestCase.assertEquals"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z392»
failIfEqual"unittest.case.TestCase.failIfEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z392–
assertNotEquals&unittest.case.TestCase.assertNotEquals"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z392«

failUnless!unittest.case.TestCase.failUnless"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*(
expr
builtins.bool"builtins.bool*
msg
Any z35z36z37z38z392¡
assert_unittest.case.TestCase.assert_"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*(
expr
builtins.bool"builtins.bool*
msg
Any z35z36z37z38z392ø
failIfunittest.case.TestCase.failIf"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*(
expr
builtins.bool"builtins.bool*
msg
Any z35z36z37z38z392∫
failUnlessAlmostEqual,unittest.case.TestCase.failUnlessAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any z35z36z37z38z392„
assertAlmostEquals)unittest.case.TestCase.assertAlmostEquals"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any *-
delta 
builtins.float"builtins.float z35z36z37z38z392≤
failIfAlmostEqual(unittest.case.TestCase.failIfAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any z35z36z37z38z392È
assertNotAlmostEquals,unittest.case.TestCase.assertNotAlmostEquals"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any *-
delta 
builtins.float"builtins.float z35z36z37z38z392Ë
assertRegexpMatches*unittest.case.TestCase.assertRegexpMatches"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*ô
regexç
2Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]
typing.AnyStrB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
msg
Any z35z36z37z38z392Ó
assertNotRegexpMatches-unittest.case.TestCase.assertNotRegexpMatches"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*ô
regexç
2Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]
typing.AnyStrB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
msg
Any z35z36z37z38z392Í
assertDictContainsSubset/unittest.case.TestCase.assertDictContainsSubset"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*G
subset;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*K

dictionary;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*-
msg"
builtins.object"builtins.object z35z36z37z38z392º
addClassCleanup&unittest.case.TestCase.addClassCleanup"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase*Y

__functionK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:classmethodpz38z392π
doClassCleanups&unittest.case.TestCase.doClassCleanups"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase0:classmethodpz38z39:µ	
assertRaises#unittest.case.TestCase.assertRaises„
assertRaises#unittest.case.TestCase.assertRaises"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*÷
expected_exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadXÖ
assertRaises#unittest.case.TestCase.assertRaises"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˇ
expected_exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*
msg
Any 0:overloadX"35"36"37"38"39:ã
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex…
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*÷
expected_exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadXÎ
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˇ
expected_exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*
msg
Any 0:overloadX"35"36"37"38"39:Í
assertWarns"unittest.case.TestCase.assertWarns®
assertWarns"unittest.case.TestCase.assertWarns"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX˜
assertWarns"unittest.case.TestCase.assertWarns"F
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*
msg
Any 0:overloadX"35"36"37"38"39:¿
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegexé
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX›
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegex"F
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*
msg
Any 0:overloadX"35"36"37"38"39:…
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual≠
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *W
deltaJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:overloadX≈
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*1
first&
datetime.datetime"datetime.datetime*2
second&
datetime.datetime"datetime.datetime*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *c
deltaV
Union[datetime.timedelta,None](
datetime.timedelta"datetime.timedelta
None 0:overloadX"35"36"37"38"39:Ì
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqualÜ
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*
msg
Any 0:overloadX⁄
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any 0:overloadXﬂ
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*
msg
Any *W
deltaJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:overloadXÀ
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*1
first&
datetime.datetime"datetime.datetime*2
second&
datetime.datetime"datetime.datetime*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *c
deltaV
Union[datetime.timedelta,None](
datetime.timedelta"datetime.timedelta
None 0:overloadX"35"36"37"38"39:Ω	
failUnlessRaises'unittest.case.TestCase.failUnlessRaises‰
failUnlessRaises'unittest.case.TestCase.failUnlessRaises"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Õ
	exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*[
callableK
CallableType[builtins.function]&
builtins.function"builtins.function *
args
Any*
kwargs
Any0:overloadXÑ
failUnlessRaises'unittest.case.TestCase.failUnlessRaises"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˆ
	exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*
msg
Any 0:overloadX"35"36"37"38"39:ˇ
assertRaisesRegexp)unittest.case.TestCase.assertRaisesRegexp¬
assertRaisesRegexp)unittest.case.TestCase.assertRaisesRegexp"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Õ
	exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX‰
assertRaisesRegexp)unittest.case.TestCase.assertRaisesRegexp"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˆ
	exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*
msg
Any 0:overloadX"35"36"37"38"39r35r36r37r38r39Å
FunctionTestCaseunittest.case.FunctionTestCase"unittest.case.TestCase2Ç
__init__'unittest.case.FunctionTestCase.__init__"
None*J
self@
unittest.case.FunctionTestCase"unittest.case.FunctionTestCase*Y
testFuncK
CallableType[builtins.function]&
builtins.function"builtins.function*î
setUpÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ó
tearDownÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *W
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None z35z36z37z38z392õ
runTest&unittest.case.FunctionTestCase.runTest"
None*J
self@
unittest.case.FunctionTestCase"unittest.case.FunctionTestCasez35z36z37z38z39r35r36r37r38r39ø

_AssertRaisesContext"unittest.case._AssertRaisesContext"builtins.object2π
	__enter__,unittest.case._AssertRaisesContext.__enter__"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*x
selfp
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContextz35z36z37z38z392”
__exit__+unittest.case._AssertRaisesContext.__exit__"
builtins.bool"builtins.bool*x
selfp
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*ó
exc_typeä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*m
exc_valb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*c
exc_tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
Nonez35z36z37z38z392…
__class_getitem__4unittest.case._AssertRaisesContext.__class_getitem__"(
types.GenericAlias"types.GenericAlias*∫
cls∞
:Type[unittest.case._AssertRaisesContext[unittest.case._E]]p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*
item
Anypz39Xr35r36r37r38r39Ÿ
_AssertWarnsContext!unittest.case._AssertWarnsContext"builtins.object2‰
	__enter__+unittest.case._AssertWarnsContext.__enter__"F
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*N
selfF
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContextz35z36z37z38z392í
__exit__*unittest.case._AssertWarnsContext.__exit__"
None*N
selfF
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*ó
exc_typeä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*m
exc_valb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*c
exc_tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
Nonez35z36z37z38z39r35r36r37r38r39Õ	
_AssertLogsContext unittest.case._AssertLogsContext"builtins.object2º
__init__)unittest.case._AssertLogsContext.__init__"
None*N
selfD
 unittest.case._AssertLogsContext" unittest.case._AssertLogsContext*?
	test_case0
unittest.case.TestCase"unittest.case.TestCase*-
logger_name
builtins.str"builtins.str*'
level
builtins.int"builtins.intz35z36z37z38z392ﬂ
	__enter__*unittest.case._AssertLogsContext.__enter__"D
 unittest.case._AssertLogsContext" unittest.case._AssertLogsContext*L
selfD
 unittest.case._AssertLogsContext" unittest.case._AssertLogsContextz35z36z37z38z392Œ
__exit__)unittest.case._AssertLogsContext.__exit__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*L
selfD
 unittest.case._AssertLogsContext" unittest.case._AssertLogsContext*ó
exc_typeä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*m
exc_valb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*c
exc_tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
Nonez35z36z37z38z39r35r36r37r38r39"Å
expectedFailureunittest.case.expectedFailure"
unittest.case._FT*$
	test_item
unittest.case._FTz35z36z37z38z39"•
skipunittest.case.skip"K
CallableType[builtins.function]&
builtins.function"builtins.function*(
reason
builtins.str"builtins.strz35z36z37z38z39"‹
skipIfunittest.case.skipIf"K
CallableType[builtins.function]&
builtins.function"builtins.function*1
	condition"
builtins.object"builtins.object*(
reason
builtins.str"builtins.strz35z36z37z38z39"‰

skipUnlessunittest.case.skipUnless"K
CallableType[builtins.function]&
builtins.function"builtins.function*1
	condition"
builtins.object"builtins.object*(
reason
builtins.str"builtins.strz35z36z37z38z39"«
addModuleCleanupunittest.case.addModuleCleanup"
None*Y

__functionK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Anyz38z39"D
doModuleCleanupsunittest.case.doModuleCleanups"
Nonez38z39