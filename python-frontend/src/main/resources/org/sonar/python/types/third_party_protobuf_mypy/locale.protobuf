
locale˙n
_strbuiltins.str"typing.Sequence*k

capitalizebuiltins.str.capitalize"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*g
casefoldbuiltins.str.casefold"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*À
centerbuiltins.str.center"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*DB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex* 
builtins.str"builtins.str *é
countbuiltins.str.count"
builtins.int"builtins.int*&
self
builtins.str"builtins.str*#
x
builtins.str"builtins.str*Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *¡
encodebuiltins.str.encode" 
builtins.bytes"builtins.bytes*&
self
builtins.str"builtins.str*,
encoding
builtins.str"builtins.str **
errors
builtins.str"builtins.str *ó
endswithbuiltins.str.endswith"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*£†
0Union[builtins.str,builtins.tuple[builtins.str]]
builtins.str"builtins.strL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *æ

expandtabsbuiltins.str.expandtabs"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*Q
tabsizeB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex *á
findbuiltins.str.find"
builtins.int"builtins.int*&
self
builtins.str"builtins.str*
builtins.str"builtins.str*Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *¡
formatbuiltins.str.format"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*,
args"
builtins.object"builtins.object*.
kwargs"
builtins.object"builtins.object*Æ

format_mapbuiltins.str.format_map"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*A
map8
builtins._FormatMapMapping"builtins._FormatMapMapping*â
indexbuiltins.str.index"
builtins.int"builtins.int*&
self
builtins.str"builtins.str*
builtins.str"builtins.str*Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *g
isalnumbuiltins.str.isalnum"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
isalphabuiltins.str.isalpha"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
isasciibuiltins.str.isascii"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*k
	isdecimalbuiltins.str.isdecimal"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
isdigitbuiltins.str.isdigit"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*q
isidentifierbuiltins.str.isidentifier"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
islowerbuiltins.str.islower"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*k
	isnumericbuiltins.str.isnumeric"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*o
isprintablebuiltins.str.isprintable"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
isspacebuiltins.str.isspace"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
istitlebuiltins.str.istitle"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*g
isupperbuiltins.str.isupper"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*±
joinbuiltins.str.join"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*PN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*…
ljustbuiltins.str.ljust"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*DB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex* 
builtins.str"builtins.str *a
lowerbuiltins.str.lower"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*≠
lstripbuiltins.str.lstrip"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *˘
	partitionbuiltins.str.partition"ã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*&
self
builtins.str"builtins.str*
builtins.str"builtins.str*Ì
replacebuiltins.str.replace"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*
builtins.str"builtins.str*
builtins.str"builtins.str*FB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex *â
rfindbuiltins.str.rfind"
builtins.int"builtins.int*&
self
builtins.str"builtins.str*
builtins.str"builtins.str*Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *ã
rindexbuiltins.str.rindex"
builtins.int"builtins.int*&
self
builtins.str"builtins.str*
builtins.str"builtins.str*Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *…
rjustbuiltins.str.rjust"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*DB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex* 
builtins.str"builtins.str *˚

rpartitionbuiltins.str.rpartition"ã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*&
self
builtins.str"builtins.str*
builtins.str"builtins.str*∂
rsplitbuiltins.str.rsplit"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*&
self
builtins.str"builtins.str*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
maxsplitB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex *≠
rstripbuiltins.str.rstrip"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *¥
splitbuiltins.str.split"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*&
self
builtins.str"builtins.str*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
maxsplitB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex *…

splitlinesbuiltins.str.splitlines"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*&
self
builtins.str"builtins.str*.
keepends
builtins.bool"builtins.bool *õ

startswithbuiltins.str.startswith"
builtins.bool"builtins.bool*&
self
builtins.str"builtins.str*£†
0Union[builtins.str,builtins.tuple[builtins.str]]
builtins.str"builtins.strL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *Å}
+Union[typing_extensions.SupportsIndex,None]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
None *´
stripbuiltins.str.strip"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *g
swapcasebuiltins.str.swapcase"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*a
titlebuiltins.str.title"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*°
	translatebuiltins.str.translate"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*64
builtins._TranslateTable"builtins._TranslateTable*a
upperbuiltins.str.upper"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*ß
zfillbuiltins.str.zfill"
builtins.str"builtins.str*&
self
builtins.str"builtins.str*DB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex*}
__add__builtins.str.__add__"
builtins.str"builtins.str*
builtins.str"builtins.str*
builtins.str"builtins.str*â
__contains__builtins.str.__contains__"
builtins.bool"builtins.bool*
builtins.str"builtins.str*
builtins.str"builtins.str*É
__eq__builtins.str.__eq__"
builtins.bool"builtins.bool*
builtins.str"builtins.str*$"
builtins.object"builtins.object*}
__ge__builtins.str.__ge__"
builtins.bool"builtins.bool*
builtins.str"builtins.str*
builtins.str"builtins.str*ä
__getitem__builtins.str.__getitem__"
builtins.str"builtins.str*
builtins.str"builtins.str*¢ü
5Union[typing_extensions.SupportsIndex,builtins.slice]B
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex 
builtins.slice"builtins.slice*}
__gt__builtins.str.__gt__"
builtins.bool"builtins.bool*
builtins.str"builtins.str*
builtins.str"builtins.str*ë
__iter__builtins.str.__iter__"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*
builtins.str"builtins.str*}
__le__builtins.str.__le__"
builtins.bool"builtins.bool*
builtins.str"builtins.str*
builtins.str"builtins.str*]
__len__builtins.str.__len__"
builtins.int"builtins.int*
builtins.str"builtins.str*}
__lt__builtins.str.__lt__"
builtins.bool"builtins.bool*
builtins.str"builtins.str*
builtins.str"builtins.str*h
__mod__builtins.str.__mod__"
builtins.str"builtins.str*
builtins.str"builtins.str*	
Any*£
__mul__builtins.str.__mul__"
builtins.str"builtins.str*
builtins.str"builtins.str*DB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex*É
__ne__builtins.str.__ne__"
builtins.bool"builtins.bool*
builtins.str"builtins.str*$"
builtins.object"builtins.object*•
__rmul__builtins.str.__rmul__"
builtins.str"builtins.str*
builtins.str"builtins.str*DB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex*å
__getnewargs__builtins.str.__getnewargs__"5
Tuple[builtins.str]
builtins.str"builtins.str*&
self
builtins.str"builtins.str2’
__new__builtins.str.__new__ë
__new__builtins.str.__new__"A
builtins.str.Self
builtins.str"builtins.str"builtins.str*m
clsd
Type[builtins.str.Self]A
builtins.str.Self
builtins.str"builtins.str"builtins.str"type*0
object"
builtins.object"builtins.object 0:overloadXü	
__new__builtins.str.__new__"A
builtins.str.Self
builtins.str"builtins.str"builtins.str*m
clsd
Type[builtins.str.Self]A
builtins.str.Self
builtins.str"builtins.str"builtins.str"type*„
object÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*,
encoding
builtins.str"builtins.str **
errors
builtins.str"builtins.str 0:overloadX2£
	maketransbuiltins.str.maketrans≤
	maketransbuiltins.str.maketrans"ú
'builtins.dict[builtins.int,builtins._T]
builtins.int"builtins.intD
builtins._T"
builtins.object"builtins.object"builtins.object"builtins.dict*œÃ
íUnion[builtins.dict[builtins.int,builtins._T],builtins.dict[builtins.str,builtins._T],builtins.dict[Union[builtins.str,builtins.int],builtins._T]]ú
'builtins.dict[builtins.int,builtins._T]
builtins.int"builtins.intD
builtins._T"
builtins.object"builtins.object"builtins.object"builtins.dictú
'builtins.dict[builtins.str,builtins._T]
builtins.str"builtins.strD
builtins._T"
builtins.object"builtins.object"builtins.object"builtins.dictÙ
;builtins.dict[Union[builtins.str,builtins.int],builtins._T]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.intD
builtins._T"
builtins.object"builtins.object"builtins.object"builtins.dict0:staticmethod:overloadXh¯
	maketransbuiltins.str.maketrans"u
(builtins.dict[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.dict*
builtins.str"builtins.str*
builtins.str"builtins.str0:staticmethod:overloadXhÕ
	maketransbuiltins.str.maketrans"©
4builtins.dict[builtins.int,Union[builtins.int,None]]
builtins.int"builtins.intD
Union[builtins.int,None]
builtins.int"builtins.int
None"builtins.dict*
builtins.str"builtins.str*
builtins.str"builtins.str*
builtins.str"builtins.str0:staticmethod:overloadXh)
Errorlocale.Error"builtins.ExceptionÏ
	setlocalelocale.setlocale"
builtins.str"builtins.str**
category
builtins.int"builtins.int*Ç
localeÛ
BUnion[builtins.str,typing.Iterable[Union[builtins.str,None]],None]
builtins.str"builtins.strÇ
)typing.Iterable[Union[builtins.str,None]]D
Union[builtins.str,None]
builtins.str"builtins.str
None"typing.Iterable
None ˆ

localeconvlocale.localeconv"‘
Ytyping.Mapping[builtins.str,Union[builtins.int,builtins.str,builtins.list[builtins.int]]]
builtins.str"builtins.str»
<Union[builtins.int,builtins.str,builtins.list[builtins.int]]
builtins.int"builtins.int
builtins.str"builtins.strJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list"typing.Mapping_
nl_langinfolocale.nl_langinfo"
builtins.str"builtins.str*
builtins.int"builtins.int”
getdefaultlocalelocale.getdefaultlocale"»
8Tuple[Union[builtins.str,None],Union[builtins.str,None]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None*[
envvarsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple ñ
	getlocalelocale.getlocale"»
8Tuple[Union[builtins.str,None],Union[builtins.str,None]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None*,
category
builtins.int"builtins.int Ö
getpreferredencodinglocale.getpreferredencoding"
builtins.str"builtins.str*2
do_setlocale
builtins.bool"builtins.bool i
	normalizelocale.normalize"
builtins.str"builtins.str*,

localename
builtins.str"builtins.strY
resetlocalelocale.resetlocale"
None*,
category
builtins.int"builtins.int w
strcolllocale.strcoll"
builtins.int"builtins.int*
builtins.str"builtins.str*
builtins.str"builtins.strW
strxfrmlocale.strxfrm"
builtins.str"builtins.str*
builtins.str"builtins.strÿ
formatlocale.format"
builtins.str"builtins.str*)
percent
builtins.str"builtins.str*}
valuer
&Union[builtins.float,_decimal.Decimal] 
builtins.float"builtins.float$
_decimal.Decimal"_decimal.Decimal*.
grouping
builtins.bool"builtins.bool *.
monetary
builtins.bool"builtins.bool *

additional
Any⁄
format_stringlocale.format_string"
builtins.str"builtins.str*#
f
builtins.str"builtins.str*
val
Any*.
grouping
builtins.bool"builtins.bool *.
monetary
builtins.bool"builtins.bool …
currencylocale.currency"
builtins.str"builtins.str*{
valr
&Union[builtins.float,_decimal.Decimal] 
builtins.float"builtins.float$
_decimal.Decimal"_decimal.Decimal*,
symbol
builtins.bool"builtins.bool *.
grouping
builtins.bool"builtins.bool *3
international
builtins.bool"builtins.bool g

delocalizelocale.delocalize"
builtins.str"builtins.str*(
string
builtins.str"builtins.str∏
atoflocale.atof" 
builtins.float"builtins.float*(
string
builtins.str"builtins.str*W
funcK
CallableType[builtins.function]&
builtins.function"builtins.function [
atoilocale.atoi"
builtins.int"builtins.int*(
string
builtins.str"builtins.strZ
str
locale.str"
builtins.str"builtins.str*)
val 
builtins.float"builtins.floatW
gettextlocale.gettext"
builtins.str"builtins.str*
builtins.str"builtins.str°
dgettextlocale.dgettext"
builtins.str"builtins.str*FD
Union[builtins.str,None]
builtins.str"builtins.str
None*
builtins.str"builtins.str√
	dcgettextlocale.dcgettext"
builtins.str"builtins.str*FD
Union[builtins.str,None]
builtins.str"builtins.str
None*
builtins.str"builtins.str*
builtins.int"builtins.intÖ

textdomainlocale.textdomain"
builtins.str"builtins.str*FD
Union[builtins.str,None]
builtins.str"builtins.str
None©
bindtextdomainlocale.bindtextdomain"
builtins.str"builtins.str*
builtins.str"builtins.str*¡æ
DUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]È
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath
NoneÁ
bind_textdomain_codesetlocale.bind_textdomain_codeset"D
Union[builtins.str,None]
builtins.str"builtins.str
None*
builtins.str"builtins.str*FD
Union[builtins.str,None]
builtins.str"builtins.str
None*Ç
__annotations__locale.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*e
__all__locale.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*7
CODESETlocale.CODESET
builtins.int"builtins.int*7
D_T_FMTlocale.D_T_FMT
builtins.int"builtins.int*3
D_FMTlocale.D_FMT
builtins.int"builtins.int*3
T_FMTlocale.T_FMT
builtins.int"builtins.int*=

T_FMT_AMPMlocale.T_FMT_AMPM
builtins.int"builtins.int*5
AM_STRlocale.AM_STR
builtins.int"builtins.int*5
PM_STRlocale.PM_STR
builtins.int"builtins.int*3
DAY_1locale.DAY_1
builtins.int"builtins.int*3
DAY_2locale.DAY_2
builtins.int"builtins.int*3
DAY_3locale.DAY_3
builtins.int"builtins.int*3
DAY_4locale.DAY_4
builtins.int"builtins.int*3
DAY_5locale.DAY_5
builtins.int"builtins.int*3
DAY_6locale.DAY_6
builtins.int"builtins.int*3
DAY_7locale.DAY_7
builtins.int"builtins.int*7
ABDAY_1locale.ABDAY_1
builtins.int"builtins.int*7
ABDAY_2locale.ABDAY_2
builtins.int"builtins.int*7
ABDAY_3locale.ABDAY_3
builtins.int"builtins.int*7
ABDAY_4locale.ABDAY_4
builtins.int"builtins.int*7
ABDAY_5locale.ABDAY_5
builtins.int"builtins.int*7
ABDAY_6locale.ABDAY_6
builtins.int"builtins.int*7
ABDAY_7locale.ABDAY_7
builtins.int"builtins.int*3
MON_1locale.MON_1
builtins.int"builtins.int*3
MON_2locale.MON_2
builtins.int"builtins.int*3
MON_3locale.MON_3
builtins.int"builtins.int*3
MON_4locale.MON_4
builtins.int"builtins.int*3
MON_5locale.MON_5
builtins.int"builtins.int*3
MON_6locale.MON_6
builtins.int"builtins.int*3
MON_7locale.MON_7
builtins.int"builtins.int*3
MON_8locale.MON_8
builtins.int"builtins.int*3
MON_9locale.MON_9
builtins.int"builtins.int*5
MON_10locale.MON_10
builtins.int"builtins.int*5
MON_11locale.MON_11
builtins.int"builtins.int*5
MON_12locale.MON_12
builtins.int"builtins.int*7
ABMON_1locale.ABMON_1
builtins.int"builtins.int*7
ABMON_2locale.ABMON_2
builtins.int"builtins.int*7
ABMON_3locale.ABMON_3
builtins.int"builtins.int*7
ABMON_4locale.ABMON_4
builtins.int"builtins.int*7
ABMON_5locale.ABMON_5
builtins.int"builtins.int*7
ABMON_6locale.ABMON_6
builtins.int"builtins.int*7
ABMON_7locale.ABMON_7
builtins.int"builtins.int*7
ABMON_8locale.ABMON_8
builtins.int"builtins.int*7
ABMON_9locale.ABMON_9
builtins.int"builtins.int*9
ABMON_10locale.ABMON_10
builtins.int"builtins.int*9
ABMON_11locale.ABMON_11
builtins.int"builtins.int*9
ABMON_12locale.ABMON_12
builtins.int"builtins.int*;
	RADIXCHARlocale.RADIXCHAR
builtins.int"builtins.int*7
THOUSEPlocale.THOUSEP
builtins.int"builtins.int*7
YESEXPRlocale.YESEXPR
builtins.int"builtins.int*5
NOEXPRlocale.NOEXPR
builtins.int"builtins.int*9
CRNCYSTRlocale.CRNCYSTR
builtins.int"builtins.int*/
ERA
locale.ERA
builtins.int"builtins.int*?
ERA_D_T_FMTlocale.ERA_D_T_FMT
builtins.int"builtins.int*;
	ERA_D_FMTlocale.ERA_D_FMT
builtins.int"builtins.int*;
	ERA_T_FMTlocale.ERA_T_FMT
builtins.int"builtins.int*=

ALT_DIGITSlocale.ALT_DIGITS
builtins.int"builtins.int*9
LC_CTYPElocale.LC_CTYPE
builtins.int"builtins.int*=

LC_COLLATElocale.LC_COLLATE
builtins.int"builtins.int*7
LC_TIMElocale.LC_TIME
builtins.int"builtins.int*?
LC_MONETARYlocale.LC_MONETARY
builtins.int"builtins.int*?
LC_MESSAGESlocale.LC_MESSAGES
builtins.int"builtins.int*=

LC_NUMERIClocale.LC_NUMERIC
builtins.int"builtins.int*5
LC_ALLlocale.LC_ALL
builtins.int"builtins.int*9
CHAR_MAXlocale.CHAR_MAX
builtins.int"builtins.int*ö
locale_aliaslocale.locale_aliasu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*¨
locale_encoding_aliaslocale.locale_encoding_aliasu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*û
windows_localelocale.windows_localeu
(builtins.dict[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"builtins.dict