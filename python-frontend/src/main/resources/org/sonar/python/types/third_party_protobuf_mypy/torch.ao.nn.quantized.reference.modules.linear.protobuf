
.torch.ao.nn.quantized.reference.modules.linearÌ
Linear5torch.ao.nn.quantized.reference.modules.linear.Linear"torch.nn.modules.linear.Linear"Ftorch.ao.nn.quantized.reference.modules.utils.ReferenceQuantizedModule*º
__init__>torch.ao.nn.quantized.reference.modules.linear.Linear.__init__"
None*x
selfn
5torch.ao.nn.quantized.reference.modules.linear.Linear"5torch.ao.nn.quantized.reference.modules.linear.Linear*-
in_features
builtins.int"builtins.int*.
out_features
builtins.int"builtins.int*+
bias_
builtins.bool"builtins.bool *[
deviceM
Union[torch._C.device,None]"
torch._C.device"torch._C.device
None *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None *©
weight_qparamsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *V
	_get_name?torch.ao.nn.quantized.reference.modules.linear.Linear._get_name*
self*•
forward=torch.ao.nn.quantized.reference.modules.linear.Linear.forward",
torch._tensor.Tensor"torch._tensor.Tensor*x
selfn
5torch.ao.nn.quantized.reference.modules.linear.Linear"5torch.ao.nn.quantized.reference.modules.linear.Linear*3
x,
torch._tensor.Tensor"torch._tensor.Tensor*é

from_float@torch.ao.nn.quantized.reference.modules.linear.Linear.from_float*
cls*
float_linear*
weight_qparams0:classmethodprt
_IS_REFERENCECtorch.ao.nn.quantized.reference.modules.linear.Linear._IS_REFERENCE
builtins.bool"builtins.bool*™
__annotations__>torch.ao.nn.quantized.reference.modules.linear.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
nntorch.nn *
Ftorch.nn.functional *ç
__all__6torch.ao.nn.quantized.reference.modules.linear.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list