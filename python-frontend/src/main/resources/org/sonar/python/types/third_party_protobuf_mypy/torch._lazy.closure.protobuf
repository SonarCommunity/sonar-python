
torch._lazy.closure-

EmptyQueuequeue.Empty"builtins.Exceptionü
ClosureHandler"torch._lazy.closure.ClosureHandler"builtins.object*A
__init__+torch._lazy.closure.ClosureHandler.__init__*
self*D
run&torch._lazy.closure.ClosureHandler.run*
self*
closure*O
__call__+torch._lazy.closure.ClosureHandler.__call__*
self*
closures
AsyncClosureHandler'torch._lazy.closure.AsyncClosureHandler""torch._lazy.closure.ClosureHandler*\
__init__0torch._lazy.closure.AsyncClosureHandler.__init__*
self*
max_queue_size *V
start_event_loop8torch._lazy.closure.AsyncClosureHandler.start_event_loop*
self*I
run+torch._lazy.closure.AsyncClosureHandler.run*
self*
closurerr
_closure_queue6torch._lazy.closure.AsyncClosureHandler._closure_queue(
queue.Queue[Any]
Any"queue.Queuerz
_closure_exception:torch._lazy.closure.AsyncClosureHandler._closure_exception(
queue.Queue[Any]
Any"queue.QueuerO
_closure_lock5torch._lazy.closure.AsyncClosureHandler._closure_lock
Anyrm
_closure_event_loop_finishedDtorch._lazy.closure.AsyncClosureHandler._closure_event_loop_finished
Anyr[
_closure_event_loop;torch._lazy.closure.AsyncClosureHandler._closure_event_loop
Anyb
add_step_closure$torch._lazy.closure.add_step_closure*
closure*

args *
	run_async :
run_step_closures%torch._lazy.closure.run_step_closures*è
__annotations__#torch._lazy.closure.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict