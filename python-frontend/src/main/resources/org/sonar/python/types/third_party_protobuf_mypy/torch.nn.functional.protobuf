
torch.nn.functionalÎ

"fractional_max_pool2d_with_indices6torch.nn.functional.fractional_max_pool2d_with_indices"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*è
kernel_size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*Æ
output_sizeö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None *“
output_ratioΩ
9Union[builtins.float,builtins.tuple[builtins.float],None] 
builtins.float"builtins.floatR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple
None *4
return_indices
builtins.bool"builtins.bool *s
_random_samples\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None Î

"fractional_max_pool3d_with_indices6torch.nn.functional.fractional_max_pool3d_with_indices"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*è
kernel_size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*Æ
output_sizeö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None *“
output_ratioΩ
9Union[builtins.float,builtins.tuple[builtins.float],None] 
builtins.float"builtins.floatR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple
None *4
return_indices
builtins.bool"builtins.bool *s
_random_samples\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None ÿ
max_pool1d_with_indices+torch.nn.functional.max_pool1d_with_indices"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*è
kernel_size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*©
strideö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None *ç
padding˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *é
dilation˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *4
return_indices
builtins.bool"builtins.bool ÿ
max_pool2d_with_indices+torch.nn.functional.max_pool2d_with_indices"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*è
kernel_size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*©
strideö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None *ç
padding˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *é
dilation˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *4
return_indices
builtins.bool"builtins.bool ÿ
max_pool3d_with_indices+torch.nn.functional.max_pool3d_with_indices"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*è
kernel_size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*©
strideö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None *ç
padding˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *é
dilation˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *4
return_indices
builtins.bool"builtins.bool —
max_unpool1d torch.nn.functional.max_unpool1d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*9
indices,
torch._tensor.Tensor"torch._tensor.Tensor*è
kernel_size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*©
strideö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None *ç
padding˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *Æ
output_sizeö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None —
max_unpool2d torch.nn.functional.max_unpool2d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*9
indices,
torch._tensor.Tensor"torch._tensor.Tensor*è
kernel_size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*©
strideö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None *ç
padding˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *Æ
output_sizeö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None —
max_unpool3d torch.nn.functional.max_unpool3d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*9
indices,
torch._tensor.Tensor"torch._tensor.Tensor*è
kernel_size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*©
strideö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None *ç
padding˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *Æ
output_sizeö
RUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None Ì
	lp_pool1dtorch.nn.functional.lp_pool1d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*/
	norm_type 
builtins.float"builtins.float*ë
kernel_sizeˇ
STypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]]Ñ
HTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]]â
=Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectt
Tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_1_t"torch.nn.common_types._size_1_t*„
stride‘
dUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None,builtins.int,None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None
builtins.int"builtins.int
None */
	ceil_mode
builtins.bool"builtins.bool †

	lp_pool2dtorch.nn.functional.lp_pool2d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*/
	norm_type 
builtins.float"builtins.float*ƒ
kernel_size≤
kTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]]ü
`TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]å
UUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectﬁ
6Tuple[torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_2_t"torch.nn.common_types._size_2_t*„
stride‘
dUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None,builtins.int,None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None
builtins.int"builtins.int
None */
	ceil_mode
builtins.bool"builtins.bool ”
	lp_pool3dtorch.nn.functional.lp_pool3d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*/
	norm_type 
builtins.float"builtins.float*˜
kernel_sizeÂ
ÉTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]]π
xTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]é
mUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object»
NTuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_3_t"torch.nn.common_types._size_3_t*„
stride‘
dUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int],None,builtins.int,None]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple
None
builtins.int"builtins.int
None */
	ceil_mode
builtins.bool"builtins.bool Ï
 adaptive_max_pool1d_with_indices4torch.nn.functional.adaptive_max_pool1d_with_indices"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*è
output_size˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*4
return_indices
builtins.bool"builtins.bool •
 adaptive_max_pool2d_with_indices4torch.nn.functional.adaptive_max_pool2d_with_indices"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*»
output_size∂
kTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]]ü
`TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]å
UUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectﬁ
6Tuple[torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_2_t"#torch.nn.common_types._size_2_opt_t*4
return_indices
builtins.bool"builtins.bool ÿ	
 adaptive_max_pool3d_with_indices4torch.nn.functional.adaptive_max_pool3d_with_indices"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*˚
output_sizeÈ
ÉTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]]π
xTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]é
mUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object»
NTuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_3_t"#torch.nn.common_types._size_3_opt_t*4
return_indices
builtins.bool"builtins.bool 
adaptive_avg_pool2d'torch.nn.functional.adaptive_avg_pool2d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*»
output_size∂
kTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]]ü
`TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]]å
UUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectﬁ
6Tuple[torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_2_t"#torch.nn.common_types._size_2_opt_t£
adaptive_avg_pool3d'torch.nn.functional.adaptive_avg_pool3d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*˚
output_sizeÈ
ÉTypeAlias[TypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]]π
xTypeAlias[Union[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]]é
mUnion[torch.nn.common_types.T,Tuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object»
NTuple[torch.nn.common_types.T,torch.nn.common_types.T,torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectP
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"*torch.nn.common_types._scalar_or_tuple_3_t"#torch.nn.common_types._size_3_opt_tó
dropouttorch.nn.functional.dropout",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*)
p 
builtins.float"builtins.float *.
training
builtins.bool"builtins.bool *-
inplace
builtins.bool"builtins.bool £
alpha_dropout!torch.nn.functional.alpha_dropout",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*)
p 
builtins.float"builtins.float *.
training
builtins.bool"builtins.bool *-
inplace
builtins.bool"builtins.bool õ
	dropout1dtorch.nn.functional.dropout1d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*)
p 
builtins.float"builtins.float *.
training
builtins.bool"builtins.bool *-
inplace
builtins.bool"builtins.bool õ
	dropout2dtorch.nn.functional.dropout2d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*)
p 
builtins.float"builtins.float *.
training
builtins.bool"builtins.bool *-
inplace
builtins.bool"builtins.bool õ
	dropout3dtorch.nn.functional.dropout3d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*)
p 
builtins.float"builtins.float *.
training
builtins.bool"builtins.bool *-
inplace
builtins.bool"builtins.bool ≥
feature_alpha_dropout)torch.nn.functional.feature_alpha_dropout",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*)
p 
builtins.float"builtins.float *.
training
builtins.bool"builtins.bool *-
inplace
builtins.bool"builtins.bool û
	thresholdtorch.nn.functional.threshold",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*/
	threshold 
builtins.float"builtins.float*+
value 
builtins.float"builtins.float*-
inplace
builtins.bool"builtins.bool ∂
relutorch.nn.functional.relu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
inplace
builtins.bool"builtins.bool Æ
glutorch.nn.functional.glu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*'
dim
builtins.int"builtins.int †
hardtanhtorch.nn.functional.hardtanh",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*/
min_val 
builtins.float"builtins.float */
max_val 
builtins.float"builtins.float *-
inplace
builtins.bool"builtins.bool ∏
relu6torch.nn.functional.relu6",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
inplace
builtins.bool"builtins.bool „
elutorch.nn.functional.elu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
alpha 
builtins.float"builtins.float *-
inplace
builtins.bool"builtins.bool ∂
selutorch.nn.functional.selu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
inplace
builtins.bool"builtins.bool Â
celutorch.nn.functional.celu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
alpha 
builtins.float"builtins.float *-
inplace
builtins.bool"builtins.bool ˙

leaky_relutorch.nn.functional.leaky_relu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*6
negative_slope 
builtins.float"builtins.float *-
inplace
builtins.bool"builtins.bool ∆
rrelutorch.nn.functional.rrelu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
lower 
builtins.float"builtins.float *-
upper 
builtins.float"builtins.float *.
training
builtins.bool"builtins.bool *-
inplace
builtins.bool"builtins.bool I

tanhshrinktorch.nn.functional.tanhshrink"
Any*
input
AnyE
softsigntorch.nn.functional.softsign"
Any*
input
AnyË
softmintorch.nn.functional.softmin",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None */
_stacklevel
builtins.int"builtins.int *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None Ë
softmaxtorch.nn.functional.softmax",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None */
_stacklevel
builtins.int"builtins.int *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None À
gumbel_softmax"torch.nn.functional.gumbel_softmax",
torch._tensor.Tensor"torch._tensor.Tensor*8
logits,
torch._tensor.Tensor"torch._tensor.Tensor*+
tau 
builtins.float"builtins.float **
hard
builtins.bool"builtins.bool *+
eps 
builtins.float"builtins.float *'
dim
builtins.int"builtins.int 
log_softmaxtorch.nn.functional.log_softmax",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None */
_stacklevel
builtins.int"builtins.int *W
dtypeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None =
tanhtorch.nn.functional.tanh"
Any*
input
Anyh
sigmoidtorch.nn.functional.sigmoid",
torch._tensor.Tensor"torch._tensor.Tensor*
input
Anyƒ
hardsigmoidtorch.nn.functional.hardsigmoid",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
inplace
builtins.bool"builtins.bool ∂
silutorch.nn.functional.silu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
inplace
builtins.bool"builtins.bool ∂
mishtorch.nn.functional.mish",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
inplace
builtins.bool"builtins.bool ¿
	hardswishtorch.nn.functional.hardswish",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
inplace
builtins.bool"builtins.bool õ
	embeddingtorch.nn.functional.embedding",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*W
padding_idxD
Union[builtins.int,None]
builtins.int"builtins.int
None *Z
max_normJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *1
	norm_type 
builtins.float"builtins.float *8
scale_grad_by_freq
builtins.bool"builtins.bool *,
sparse
builtins.bool"builtins.bool Ì
embedding_bag!torch.nn.functional.embedding_bag",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*k
offsets\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *Z
max_normJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *1
	norm_type 
builtins.float"builtins.float *8
scale_grad_by_freq
builtins.bool"builtins.bool *(
mode
builtins.str"builtins.str *,
sparse
builtins.bool"builtins.bool *v
per_sample_weights\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *9
include_last_offset
builtins.bool"builtins.bool *W
padding_idxD
Union[builtins.int,None]
builtins.int"builtins.int
None ◊

batch_normtorch.nn.functional.batch_norm",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*n
running_mean\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*m
running_var\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *.
training
builtins.bool"builtins.bool *0
momentum 
builtins.float"builtins.float *+
eps 
builtins.float"builtins.float Ë
instance_norm!torch.nn.functional.instance_norm",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*p
running_mean\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *o
running_var\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *5
use_input_stats
builtins.bool"builtins.bool *0
momentum 
builtins.float"builtins.float *+
eps 
builtins.float"builtins.float ¸

layer_normtorch.nn.functional.layer_norm",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*d
normalized_shapeN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence*j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *+
eps 
builtins.float"builtins.float ∏
rms_normtorch.nn.functional.rms_norm",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*d
normalized_shapeN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence*j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *U
epsJ
Union[builtins.float,None] 
builtins.float"builtins.float
None ƒ

group_normtorch.nn.functional.group_norm",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*,

num_groups
builtins.int"builtins.int*j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *+
eps 
builtins.float"builtins.float ’
local_response_norm'torch.nn.functional.local_response_norm",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*&
size
builtins.int"builtins.int*-
alpha 
builtins.float"builtins.float *,
beta 
builtins.float"builtins.float *)
k 
builtins.float"builtins.float ‡
ctc_losstorch.nn.functional.ctc_loss",
torch._tensor.Tensor"torch._tensor.Tensor*;
	log_probs,
torch._tensor.Tensor"torch._tensor.Tensor*9
targets,
torch._tensor.Tensor"torch._tensor.Tensor*?
input_lengths,
torch._tensor.Tensor"torch._tensor.Tensor*@
target_lengths,
torch._tensor.Tensor"torch._tensor.Tensor*)
blank
builtins.int"builtins.int *-
	reduction
builtins.str"builtins.str *3
zero_infinity
builtins.bool"builtins.bool  
nll_losstorch.nn.functional.nll_loss",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *0
ignore_index
builtins.int"builtins.int *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str ∆
poisson_nll_loss$torch.nn.functional.poisson_nll_loss",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*/
	log_input
builtins.bool"builtins.bool **
full
builtins.bool"builtins.bool *[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *+
eps 
builtins.float"builtins.float *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str ï
gaussian_nll_loss%torch.nn.functional.gaussian_nll_loss",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*5
var,
torch._tensor.Tensor"torch._tensor.Tensor*S
fullG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
epsJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *U
	reductionD
Union[builtins.str,None]
builtins.str"builtins.str
None ⁄
kl_divtorch.nn.functional.kl_div",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str *0

log_target
builtins.bool"builtins.bool ç
cross_entropy!torch.nn.functional.cross_entropy",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *0
ignore_index
builtins.int"builtins.int *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str *7
label_smoothing 
builtins.float"builtins.float ∞
binary_cross_entropy(torch.nn.functional.binary_cross_entropy",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str ∏
 binary_cross_entropy_with_logits4torch.nn.functional.binary_cross_entropy_with_logits",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str *n

pos_weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None Ê
smooth_l1_loss"torch.nn.functional.smooth_l1_loss",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str *,
beta 
builtins.float"builtins.float ´

huber_losstorch.nn.functional.huber_loss",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*-
	reduction
builtins.str"builtins.str *-
delta 
builtins.float"builtins.float ™
l1_losstorch.nn.functional.l1_loss",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str ¨
mse_losstorch.nn.functional.mse_loss",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str ≠
margin_ranking_loss'torch.nn.functional.margin_ranking_loss",
torch._tensor.Tensor"torch._tensor.Tensor*8
input1,
torch._tensor.Tensor"torch._tensor.Tensor*8
input2,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*.
margin 
builtins.float"builtins.float *[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str Ù
hinge_embedding_loss(torch.nn.functional.hinge_embedding_loss",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*.
margin 
builtins.float"builtins.float *[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str »
multilabel_margin_loss*torch.nn.functional.multilabel_margin_loss",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str º
soft_margin_loss$torch.nn.functional.soft_margin_loss",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str æ
multilabel_soft_margin_loss/torch.nn.functional.multilabel_soft_margin_loss",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str ±
cosine_embedding_loss)torch.nn.functional.cosine_embedding_loss",
torch._tensor.Tensor"torch._tensor.Tensor*8
input1,
torch._tensor.Tensor"torch._tensor.Tensor*8
input2,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*.
margin 
builtins.float"builtins.float *[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str Å
multi_margin_loss%torch.nn.functional.multi_margin_loss",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
target,
torch._tensor.Tensor"torch._tensor.Tensor*%
p
builtins.int"builtins.int *.
margin 
builtins.float"builtins.float *j
weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str ú
upsampletorch.nn.functional.upsample"
Any*
input
Any*2
size&
Union[Any,None]
Any
None *:
scale_factor&
Union[Any,None]
Any
None *(
mode
builtins.str"builtins.str *;
align_corners&
Union[Any,None]
Any
None ô
interpolatetorch.nn.functional.interpolate"
Any*
input
Any*2
size&
Union[Any,None]
Any
None *:
scale_factor&
Union[Any,None]
Any
None *(
mode
builtins.str"builtins.str *;
align_corners&
Union[Any,None]
Any
None *D
recompute_scale_factor&
Union[Any,None]
Any
None */
	antialias
builtins.bool"builtins.bool ≈
upsample_nearest$torch.nn.functional.upsample_nearest"
Any*
input
Any*2
size&
Union[Any,None]
Any
None *:
scale_factor&
Union[Any,None]
Any
None «
upsample_bilinear%torch.nn.functional.upsample_bilinear"
Any*
input
Any*2
size&
Union[Any,None]
Any
None *:
scale_factor&
Union[Any,None]
Any
None Ê
grid_sampletorch.nn.functional.grid_sample",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*6
grid,
torch._tensor.Tensor"torch._tensor.Tensor*(
mode
builtins.str"builtins.str *0
padding_mode
builtins.str"builtins.str *;
align_corners&
Union[Any,None]
Any
None ®
affine_gridtorch.nn.functional.affine_grid",
torch._tensor.Tensor"torch._tensor.Tensor*7
theta,
torch._tensor.Tensor"torch._tensor.Tensor*T
sizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*;
align_corners&
Union[Any,None]
Any
None µ
triplet_margin_loss'torch.nn.functional.triplet_margin_loss",
torch._tensor.Tensor"torch._tensor.Tensor*8
anchor,
torch._tensor.Tensor"torch._tensor.Tensor*:
positive,
torch._tensor.Tensor"torch._tensor.Tensor*:
negative,
torch._tensor.Tensor"torch._tensor.Tensor*.
margin 
builtins.float"builtins.float *)
p 
builtins.float"builtins.float *+
eps 
builtins.float"builtins.float **
swap
builtins.bool"builtins.bool *[
size_averageG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
reduceG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *-
	reduction
builtins.str"builtins.str Ë
!triplet_margin_with_distance_loss5torch.nn.functional.triplet_margin_with_distance_loss",
torch._tensor.Tensor"torch._tensor.Tensor*8
anchor,
torch._tensor.Tensor"torch._tensor.Tensor*:
positive,
torch._tensor.Tensor"torch._tensor.Tensor*:
negative,
torch._tensor.Tensor"torch._tensor.Tensor*†
distance_functionÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *.
margin 
builtins.float"builtins.float **
swap
builtins.bool"builtins.bool *-
	reduction
builtins.str"builtins.str ˚
	normalizetorch.nn.functional.normalize",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*)
p 
builtins.float"builtins.float *'
dim
builtins.int"builtins.int *+
eps 
builtins.float"builtins.float *g
out\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None Ö
assert_int_or_pair&torch.nn.functional.assert_int_or_pair"
None*
arg
Any*
arg_name
Any*
message
Any±
unfoldtorch.nn.functional.unfold",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*»
kernel_size∂
\TypeAlias[TypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]]∞
QTypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]™
FUnion[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectã
'builtins.tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"builtins.tuple",torch.nn.common_types._scalar_or_tuple_any_t"!torch.nn.common_types._size_any_t*«
dilation∂
\TypeAlias[TypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]]∞
QTypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]™
FUnion[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectã
'builtins.tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"builtins.tuple",torch.nn.common_types._scalar_or_tuple_any_t"!torch.nn.common_types._size_any_t *∆
padding∂
\TypeAlias[TypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]]∞
QTypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]™
FUnion[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectã
'builtins.tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"builtins.tuple",torch.nn.common_types._scalar_or_tuple_any_t"!torch.nn.common_types._size_any_t *≈
stride∂
\TypeAlias[TypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]]∞
QTypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]™
FUnion[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectã
'builtins.tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"builtins.tuple",torch.nn.common_types._scalar_or_tuple_any_t"!torch.nn.common_types._size_any_t ¯
foldtorch.nn.functional.fold",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*»
output_size∂
\TypeAlias[TypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]]∞
QTypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]™
FUnion[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectã
'builtins.tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"builtins.tuple",torch.nn.common_types._scalar_or_tuple_any_t"!torch.nn.common_types._size_any_t*»
kernel_size∂
\TypeAlias[TypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]]∞
QTypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]™
FUnion[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectã
'builtins.tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"builtins.tuple",torch.nn.common_types._scalar_or_tuple_any_t"!torch.nn.common_types._size_any_t*«
dilation∂
\TypeAlias[TypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]]∞
QTypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]™
FUnion[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectã
'builtins.tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"builtins.tuple",torch.nn.common_types._scalar_or_tuple_any_t"!torch.nn.common_types._size_any_t *∆
padding∂
\TypeAlias[TypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]]∞
QTypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]™
FUnion[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectã
'builtins.tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"builtins.tuple",torch.nn.common_types._scalar_or_tuple_any_t"!torch.nn.common_types._size_any_t *≈
stride∂
\TypeAlias[TypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]]∞
QTypeAlias[Union[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]]™
FUnion[torch.nn.common_types.T,builtins.tuple[torch.nn.common_types.T]]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.objectã
'builtins.tuple[torch.nn.common_types.T]P
torch.nn.common_types.T"
builtins.object"builtins.object"builtins.object"builtins.tuple",torch.nn.common_types._scalar_or_tuple_any_t"!torch.nn.common_types._size_any_t ô
_canonical_mask#torch.nn.functional._canonical_mask"\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*f
mask\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*+
	mask_name
builtins.str"builtins.str*Z

other_typeJ
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None*,

other_name
builtins.str"builtins.str*1
target_type 
torch._C.dtype"torch._C.dtype*1
check_other
builtins.bool"builtins.bool È
_none_or_dtype"torch.nn.functional._none_or_dtype"J
Union[torch._C.dtype,None] 
torch._C.dtype"torch._C.dtype
None*g
input\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None§
multi_head_attention_forward0torch.nn.functional.multi_head_attention_forward"Ã
<Tuple[torch._tensor.Tensor,Union[torch._tensor.Tensor,None]],
torch._tensor.Tensor"torch._tensor.Tensor\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*7
query,
torch._tensor.Tensor"torch._tensor.Tensor*5
key,
torch._tensor.Tensor"torch._tensor.Tensor*7
value,
torch._tensor.Tensor"torch._tensor.Tensor*4
embed_dim_to_check
builtins.int"builtins.int*+
	num_heads
builtins.int"builtins.int*p
in_proj_weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*n
in_proj_bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*h
bias_k\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*h
bias_v\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*1
add_zero_attn
builtins.bool"builtins.bool*/
	dropout_p 
builtins.float"builtins.float*A
out_proj_weight,
torch._tensor.Tensor"torch._tensor.Tensor*o
out_proj_bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None*.
training
builtins.bool"builtins.bool *t
key_padding_mask\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *2
need_weights
builtins.bool"builtins.bool *m
	attn_mask\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *>
use_separate_proj_weight
builtins.bool"builtins.bool *q
q_proj_weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *q
k_proj_weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *q
v_proj_weight\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *l
static_k\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *l
static_v\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *:
average_attn_weights
builtins.bool"builtins.bool */
	is_causal
builtins.bool"builtins.bool ˙
conv_transpose1d,torch._C._VariableFunctions.conv_transpose1d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None * 
strideª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *À
paddingª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *“
output_paddingª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *n
groups`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt *Ã
dilationª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence ˙
conv_transpose2d,torch._C._VariableFunctions.conv_transpose2d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None * 
strideª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *À
paddingª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *“
output_paddingª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *n
groups`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt *Ã
dilationª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence ˙
conv_transpose3d,torch._C._VariableFunctions.conv_transpose3d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None * 
strideª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *À
paddingª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *“
output_paddingª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *n
groups`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt *Ã
dilationª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence ≤
conv_tbc$torch._C._VariableFunctions.conv_tbc",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*6
bias,
torch._tensor.Tensor"torch._tensor.Tensor*'
pad
builtins.int"builtins.int È

avg_pool1d&torch._C._VariableFunctions.avg_pool1d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*ù
strideé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *û
paddingé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *7
count_include_pad
builtins.bool"builtins.bool –
adaptive_avg_pool1d/torch._C._VariableFunctions.adaptive_avg_pool1d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
output_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._sizeë
relu_!torch._C._VariableFunctions.relu_",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensorë
selu_!torch._C._VariableFunctions.selu_",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensorå
celu_!torch._C._VariableFunctions.celu_",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*¯
alphaÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex À
prelu!torch._C._VariableFunctions.prelu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor¢
rrelu_"torch._C._VariableFunctions.rrelu_",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*¯
lowerÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *¯
upperÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *.
training
builtins.bool"builtins.bool *g
	generatorV
Union[torch._C.Generator,None](
torch._C.Generator"torch._C.Generator
None ˇ

hardshrink&torch._C._VariableFunctions.hardshrink",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*¯
lambdÍ
SUnion[TypeAlias[Union[builtins.int,builtins.float,builtins.bool]],builtins.complex]Í
;TypeAlias[Union[builtins.int,builtins.float,builtins.bool]]î
0Union[builtins.int,builtins.float,builtins.bool]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool"torch.types.Number$
builtins.complex"builtins.complex *g
out\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None ˆ
bilinear$torch._C._VariableFunctions.bilinear",
torch._tensor.Tensor"torch._tensor.Tensor*8
input1,
torch._tensor.Tensor"torch._tensor.Tensor*8
input2,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None ”
pixel_shuffle)torch._C._VariableFunctions.pixel_shuffle",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*0
upscale_factor
builtins.int"builtins.intŸ
pixel_unshuffle+torch._C._VariableFunctions.pixel_unshuffle",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*2
downscale_factor
builtins.int"builtins.intì
channel_shuffle+torch._C._VariableFunctions.channel_shuffle",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*l
groups`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt°
native_channel_shuffle2torch._C._VariableFunctions.native_channel_shuffle",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*l
groups`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt„
pairwise_distance-torch._C._VariableFunctions.pairwise_distance",
torch._tensor.Tensor"torch._tensor.Tensor*4
x1,
torch._tensor.Tensor"torch._tensor.Tensor*4
x2,
torch._tensor.Tensor"torch._tensor.Tensor*)
p 
builtins.float"builtins.float *+
eps 
builtins.float"builtins.float *-
keepdim
builtins.bool"builtins.bool º
pdist!torch._C._VariableFunctions.pdist",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*)
p 
builtins.float"builtins.float ≤
cosine_similarity-torch._C._VariableFunctions.cosine_similarity",
torch._tensor.Tensor"torch._tensor.Tensor*4
x1,
torch._tensor.Tensor"torch._tensor.Tensor*4
x2,
torch._tensor.Tensor"torch._tensor.Tensor*'
dim
builtins.int"builtins.int *+
eps 
builtins.float"builtins.float «

avg_pool2dtorch._C._nn.avg_pool2d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*¨
strideù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *û
paddingé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *7
count_include_pad
builtins.bool"builtins.bool *\
divisor_overrideD
Union[builtins.int,None]
builtins.int"builtins.int
None «

avg_pool3dtorch._C._nn.avg_pool3d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*¨
strideù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *û
paddingé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *7
count_include_pad
builtins.bool"builtins.bool *\
divisor_overrideD
Union[builtins.int,None]
builtins.int"builtins.int
None Ï
	hardtanh_torch._C._nn.hardtanh_",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*/
min_val 
builtins.float"builtins.float */
max_val 
builtins.float"builtins.float Ø
elu_torch._C._nn.elu_",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
alpha 
builtins.float"builtins.float ∆
leaky_relu_torch._C._nn.leaky_relu_",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*6
negative_slope 
builtins.float"builtins.float ±
gelutorch._C._nn.gelu",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*/
approximate
builtins.str"builtins.str È
softplustorch._C._nn.softplus",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*,
beta 
builtins.float"builtins.float *1
	threshold 
builtins.float"builtins.float ª

softshrinktorch._C._nn.softshrink",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*-
lambd 
builtins.float"builtins.float ®
lineartorch._C._nn.linear",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None ⁄
padtorch._C._nn.pad",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*W
padN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence*(
mode
builtins.str"builtins.str *W
valueJ
Union[builtins.float,None] 
builtins.float"builtins.float
None ∏
one_hottorch._C._nn.one_hot",
torch._tensor.Tensor"torch._tensor.Tensor*8
tensor,
torch._tensor.Tensor"torch._tensor.Tensor*/
num_classes
builtins.int"builtins.int Ã
scaled_dot_product_attention)torch._C._nn.scaled_dot_product_attention",
torch._tensor.Tensor"torch._tensor.Tensor*7
query,
torch._tensor.Tensor"torch._tensor.Tensor*5
key,
torch._tensor.Tensor"torch._tensor.Tensor*7
value,
torch._tensor.Tensor"torch._tensor.Tensor*m
	attn_mask\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None *1
	dropout_p 
builtins.float"builtins.float */
	is_causal
builtins.bool"builtins.bool *W
scaleJ
Union[builtins.float,None] 
builtins.float"builtins.float
None "œ
conv1d"torch._C._VariableFunctions.conv1dü
conv1d"torch._C._VariableFunctions.conv1d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None * 
strideª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *À
paddingª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *Ã
dilationª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *n
groups`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt 0:overloadX˛
conv1d"torch._C._VariableFunctions.conv1d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None * 
strideª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *+
padding
builtins.str"builtins.str *Ã
dilationª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *n
groups`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt 0:overloadX"œ
conv2d"torch._C._VariableFunctions.conv2dü
conv2d"torch._C._VariableFunctions.conv2d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None * 
strideª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *À
paddingª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *Ã
dilationª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *n
groups`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt 0:overloadX˛
conv2d"torch._C._VariableFunctions.conv2d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None * 
strideª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *+
padding
builtins.str"builtins.str *Ã
dilationª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *n
groups`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt 0:overloadX"œ
conv3d"torch._C._VariableFunctions.conv3dü
conv3d"torch._C._VariableFunctions.conv3d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None * 
strideª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *À
paddingª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *Ã
dilationª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *n
groups`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt 0:overloadX˛
conv3d"torch._C._VariableFunctions.conv3d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*8
weight,
torch._tensor.Tensor"torch._tensor.Tensor*h
bias\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None * 
strideª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *+
padding
builtins.str"builtins.str *Ã
dilationª
RUnion[builtins.int,torch.SymInt,typing.Sequence[Union[builtins.int,torch.SymInt]]]
builtins.int"builtins.int
torch.SymInt"torch.SymInt¶
1typing.Sequence[Union[builtins.int,torch.SymInt]]`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt"typing.Sequence *n
groups`
 Union[builtins.int,torch.SymInt]
builtins.int"builtins.int
torch.SymInt"torch.SymInt 0:overloadX"€
adaptive_max_pool1d'torch.nn.functional.adaptive_max_pool1d®
adaptive_max_pool1d'torch.nn.functional.adaptive_max_pool1d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
output_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*P
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadX·
adaptive_max_pool1d'torch.nn.functional.adaptive_max_pool1d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*.,
torch._tensor.Tensor"torch._tensor.Tensor*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*<:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadXã
adaptive_max_pool1d'torch.nn.functional.adaptive_max_pool1d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
output_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*N
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX"€
adaptive_max_pool2d'torch.nn.functional.adaptive_max_pool2d®
adaptive_max_pool2d'torch.nn.functional.adaptive_max_pool2d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
output_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*P
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadX·
adaptive_max_pool2d'torch.nn.functional.adaptive_max_pool2d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*.,
torch._tensor.Tensor"torch._tensor.Tensor*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*<:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadXã
adaptive_max_pool2d'torch.nn.functional.adaptive_max_pool2d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
output_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*N
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX"€
adaptive_max_pool3d'torch.nn.functional.adaptive_max_pool3d®
adaptive_max_pool3d'torch.nn.functional.adaptive_max_pool3d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
output_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*P
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadX·
adaptive_max_pool3d'torch.nn.functional.adaptive_max_pool3d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*.,
torch._tensor.Tensor"torch._tensor.Tensor*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*<:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadXã
adaptive_max_pool3d'torch.nn.functional.adaptive_max_pool3d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
output_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*N
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX"¬)
fractional_max_pool2d)torch.nn.functional.fractional_max_pool2d™
fractional_max_pool2d)torch.nn.functional.fractional_max_pool2d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*±
output_sizeù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *“
output_ratioΩ
9Union[builtins.float,builtins.tuple[builtins.float],None] 
builtins.float"builtins.floatR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple
None *P
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool *s
_random_samples\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None 0:overloadX¿
fractional_max_pool2d)torch.nn.functional.fractional_max_pool2d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*.,
torch._tensor.Tensor"torch._tensor.Tensor*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*†ù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None*¿Ω
9Union[builtins.float,builtins.tuple[builtins.float],None] 
builtins.float"builtins.floatR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple
None*<:
Literal[builtins.bool]	
builtins.bool"builtins.bool*s
_random_samples\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None 0:overloadXç
fractional_max_pool2d)torch.nn.functional.fractional_max_pool2d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*±
output_sizeù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *“
output_ratioΩ
9Union[builtins.float,builtins.tuple[builtins.float],None] 
builtins.float"builtins.floatR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple
None *N
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool*s
_random_samples\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None 0:overloadX"¬)
fractional_max_pool3d)torch.nn.functional.fractional_max_pool3d™
fractional_max_pool3d)torch.nn.functional.fractional_max_pool3d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*±
output_sizeù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *“
output_ratioΩ
9Union[builtins.float,builtins.tuple[builtins.float],None] 
builtins.float"builtins.floatR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple
None *P
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool *s
_random_samples\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None 0:overloadX¿
fractional_max_pool3d)torch.nn.functional.fractional_max_pool3d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*.,
torch._tensor.Tensor"torch._tensor.Tensor*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*†ù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None*¿Ω
9Union[builtins.float,builtins.tuple[builtins.float],None] 
builtins.float"builtins.floatR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple
None*<:
Literal[builtins.bool]	
builtins.bool"builtins.bool*s
_random_samples\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None 0:overloadXç
fractional_max_pool3d)torch.nn.functional.fractional_max_pool3d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*±
output_sizeù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *“
output_ratioΩ
9Union[builtins.float,builtins.tuple[builtins.float],None] 
builtins.float"builtins.floatR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple
None *N
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool*s
_random_samples\
 Union[torch._tensor.Tensor,None],
torch._tensor.Tensor"torch._tensor.Tensor
None 0:overloadX"∆;

max_pool1dtorch.nn.functional.max_pool1dπ

max_pool1dtorch.nn.functional.max_pool1d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*¨
strideù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *û
paddingé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *ü
dilationé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *P
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadXº

max_pool1dtorch.nn.functional.max_pool1d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*.,
torch._tensor.Tensor"torch._tensor.Tensor*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*†ù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size* 
builtins.bool"builtins.bool*<:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadXú

max_pool1dtorch.nn.functional.max_pool1d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*¨
strideù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *û
paddingé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *ü
dilationé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *N
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX"∆;

max_pool2dtorch.nn.functional.max_pool2dπ

max_pool2dtorch.nn.functional.max_pool2d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*¨
strideù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *û
paddingé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *ü
dilationé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *P
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadXº

max_pool2dtorch.nn.functional.max_pool2d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*.,
torch._tensor.Tensor"torch._tensor.Tensor*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*†ù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size* 
builtins.bool"builtins.bool*<:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadXú

max_pool2dtorch.nn.functional.max_pool2d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*¨
strideù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *û
paddingé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *ü
dilationé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *N
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX"∆;

max_pool3dtorch.nn.functional.max_pool3dπ

max_pool3dtorch.nn.functional.max_pool3d",
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*¨
strideù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *û
paddingé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *ü
dilationé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *P
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:overloadXº

max_pool3dtorch.nn.functional.max_pool3d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*.,
torch._tensor.Tensor"torch._tensor.Tensor*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*†ù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*ëé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size* 
builtins.bool"builtins.bool*<:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadXú

max_pool3dtorch.nn.functional.max_pool3d"ê
0Tuple[torch._tensor.Tensor,torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor,
torch._tensor.Tensor"torch._tensor.Tensor*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*†
kernel_sizeé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size*¨
strideù
qUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]],None]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size
None *û
paddingé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size *ü
dilationé
lUnion[builtins.int,TypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]]
builtins.int"builtins.int˝
XTypeAlias[Union[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]]ã
MUnion[torch._C.Size,builtins.list[builtins.int],builtins.tuple[builtins.int]]
torch._C.Size"torch._C.SizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple"torch.types._size */
	ceil_mode
builtins.bool"builtins.bool *N
return_indices:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:overloadX*è
__annotations__#torch.nn.functional.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*y

logsigmoidtorch.nn.functional.logsigmoidK
CallableType[builtins.function]&
builtins.function"builtins.function