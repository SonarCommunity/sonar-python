
numbersº
Numbernumbers.Number"builtins.object*Å
__hash__numbers.Number.__hash__"
builtins.int"builtins.int**
self 
numbers.Number"numbers.Number0:abstractmethod@@babc.ABCMetaØ
Complexnumbers.Complex"numbers.Number*ê
__complex__numbers.Complex.__complex__"$
builtins.complex"builtins.complex**
self"
numbers.Complex"numbers.Complex0:abstractmethod@*r
__bool__numbers.Complex.__bool__"
builtins.bool"builtins.bool*,
self"
numbers.Complex"numbers.Complex*s
realnumbers.Complex.real"
Any*,
self"
numbers.Complex"numbers.Complex0:property:abstractmethod@`*s
imagnumbers.Complex.imag"
Any*,
self"
numbers.Complex"numbers.Complex0:property:abstractmethod@`*}
__add__numbers.Complex.__add__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any0:abstractmethod@*
__radd__numbers.Complex.__radd__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any0:abstractmethod@*k
__neg__numbers.Complex.__neg__"
Any**
self"
numbers.Complex"numbers.Complex0:abstractmethod@*k
__pos__numbers.Complex.__pos__"
Any**
self"
numbers.Complex"numbers.Complex0:abstractmethod@*i
__sub__numbers.Complex.__sub__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any*k
__rsub__numbers.Complex.__rsub__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any*}
__mul__numbers.Complex.__mul__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any0:abstractmethod@*
__rmul__numbers.Complex.__rmul__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any0:abstractmethod@*Ö
__truediv__numbers.Complex.__truediv__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any0:abstractmethod@*á
__rtruediv__numbers.Complex.__rtruediv__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any0:abstractmethod@*Ä
__pow__numbers.Complex.__pow__"
Any**
self"
numbers.Complex"numbers.Complex*
exponent
Any0:abstractmethod@*~
__rpow__numbers.Complex.__rpow__"
Any**
self"
numbers.Complex"numbers.Complex*
base
Any0:abstractmethod@*l
__abs__numbers.Complex.__abs__"
numbers.Real"numbers.Real**
self"
numbers.Complex"numbers.Complex*]
	conjugatenumbers.Complex.conjugate"
Any*,
self"
numbers.Complex"numbers.Complex*~
__eq__numbers.Complex.__eq__"
builtins.bool"builtins.bool**
self"
numbers.Complex"numbers.Complex*
other
Any≠
Realnumbers.Real"numbers.Complex"typing.SupportsFloat*
	__float__numbers.Real.__float__" 
builtins.float"builtins.float*$
self
numbers.Real"numbers.Real0:abstractmethod@*}
	__trunc__numbers.Real.__trunc__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abstractmethod@*}
	__floor__numbers.Real.__floor__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abstractmethod@*{
__ceil__numbers.Real.__ceil__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abstractmethod@*f

__divmod__numbers.Real.__divmod__"
Any*$
self
numbers.Real"numbers.Real*
other
Any*l
__rdivmod__numbers.Real.__rdivmod__"
Any*&
self
numbers.Real"numbers.Real*
other
Any*ì
__floordiv__numbers.Real.__floordiv__"
builtins.int"builtins.int*$
self
numbers.Real"numbers.Real*
other
Any0:abstractmethod@*ï
__rfloordiv__numbers.Real.__rfloordiv__"
builtins.int"builtins.int*$
self
numbers.Real"numbers.Real*
other
Any0:abstractmethod@*t
__mod__numbers.Real.__mod__"
Any*$
self
numbers.Real"numbers.Real*
other
Any0:abstractmethod@*v
__rmod__numbers.Real.__rmod__"
Any*$
self
numbers.Real"numbers.Real*
other
Any0:abstractmethod@*â
__lt__numbers.Real.__lt__"
builtins.bool"builtins.bool*$
self
numbers.Real"numbers.Real*
other
Any0:abstractmethod@*â
__le__numbers.Real.__le__"
builtins.bool"builtins.bool*$
self
numbers.Real"numbers.Real*
other
Any0:abstractmethod@*s
__complex__numbers.Real.__complex__"$
builtins.complex"builtins.complex*$
self
numbers.Real"numbers.Real*X
realnumbers.Real.real"
Any*&
self
numbers.Real"numbers.Real0:property`*X
imagnumbers.Real.imag"
Any*&
self
numbers.Real"numbers.Real0:property`*T
	conjugatenumbers.Real.conjugate"
Any*&
self
numbers.Real"numbers.Real2Í
	__round__numbers.Real.__round__¢
	__round__numbers.Real.__round__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real*
ndigits
None 0:abstractmethod:overload@Xü
	__round__numbers.Real.__round__"
Any*&
self
numbers.Real"numbers.Real*)
ndigits
builtins.int"builtins.int0:abstractmethod:overload@X◊
Rationalnumbers.Rational"numbers.Real*ï
	numeratornumbers.Rational.numerator"
builtins.int"builtins.int*.
self$
numbers.Rational"numbers.Rational0:property:abstractmethod@`*ô
denominatornumbers.Rational.denominator"
builtins.int"builtins.int*.
self$
numbers.Rational"numbers.Rational0:property:abstractmethod@`*w
	__float__numbers.Rational.__float__" 
builtins.float"builtins.float*,
self$
numbers.Rational"numbers.Rational†
Integralnumbers.Integral"numbers.Rational*É
__int__numbers.Integral.__int__"
builtins.int"builtins.int*,
self$
numbers.Integral"numbers.Integral0:abstractmethod@*u
	__index__numbers.Integral.__index__"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral*∏
__pow__numbers.Integral.__pow__"
Any*,
self$
numbers.Integral"numbers.Integral*
exponent
Any*3
modulus&
Union[Any,None]
Any
None 0:abstractmethod@*Ü

__lshift__numbers.Integral.__lshift__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@*à
__rlshift__numbers.Integral.__rlshift__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@*Ü

__rshift__numbers.Integral.__rshift__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@*à
__rrshift__numbers.Integral.__rrshift__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@*Ä
__and__numbers.Integral.__and__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@*Ç
__rand__numbers.Integral.__rand__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@*Ä
__xor__numbers.Integral.__xor__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@*Ç
__rxor__numbers.Integral.__rxor__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@*~
__or__numbers.Integral.__or__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@*Ä
__ror__numbers.Integral.__ror__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@*t

__invert__numbers.Integral.__invert__"
Any*,
self$
numbers.Integral"numbers.Integral0:abstractmethod@*w
	__float__numbers.Integral.__float__" 
builtins.float"builtins.float*,
self$
numbers.Integral"numbers.Integral*É
	numeratornumbers.Integral.numerator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:property`*á
denominatornumbers.Integral.denominator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:property`