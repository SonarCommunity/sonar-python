
numbersº
Numbernumbers.Number"builtins.object*Å
__hash__numbers.Number.__hash__"
builtins.int"builtins.int**
self 
numbers.Number"numbers.Number0:abstractmethod@@babc.ABCMeta€
Complexnumbers.Complex"numbers.Number*ä
__complex__numbers.Complex.__complex__"$
builtins.complex"builtins.complex*$"
numbers.Complex"numbers.Complex0:abstractmethod@*r
__bool__numbers.Complex.__bool__"
builtins.bool"builtins.bool*,
self"
numbers.Complex"numbers.Complex*s
realnumbers.Complex.real"
Any*,
self"
numbers.Complex"numbers.Complex0:property:abstractmethod@`*s
imagnumbers.Complex.imag"
Any*,
self"
numbers.Complex"numbers.Complex0:property:abstractmethod@`*p
__add__numbers.Complex.__add__"
Any*$"
numbers.Complex"numbers.Complex*	
Any0:abstractmethod@*r
__radd__numbers.Complex.__radd__"
Any*$"
numbers.Complex"numbers.Complex*	
Any0:abstractmethod@*e
__neg__numbers.Complex.__neg__"
Any*$"
numbers.Complex"numbers.Complex0:abstractmethod@*e
__pos__numbers.Complex.__pos__"
Any*$"
numbers.Complex"numbers.Complex0:abstractmethod@*\
__sub__numbers.Complex.__sub__"
Any*$"
numbers.Complex"numbers.Complex*	
Any*^
__rsub__numbers.Complex.__rsub__"
Any*$"
numbers.Complex"numbers.Complex*	
Any*p
__mul__numbers.Complex.__mul__"
Any*$"
numbers.Complex"numbers.Complex*	
Any0:abstractmethod@*r
__rmul__numbers.Complex.__rmul__"
Any*$"
numbers.Complex"numbers.Complex*	
Any0:abstractmethod@*x
__truediv__numbers.Complex.__truediv__"
Any*$"
numbers.Complex"numbers.Complex*	
Any0:abstractmethod@*z
__rtruediv__numbers.Complex.__rtruediv__"
Any*$"
numbers.Complex"numbers.Complex*	
Any0:abstractmethod@*p
__pow__numbers.Complex.__pow__"
Any*$"
numbers.Complex"numbers.Complex*	
Any0:abstractmethod@*r
__rpow__numbers.Complex.__rpow__"
Any*$"
numbers.Complex"numbers.Complex*	
Any0:abstractmethod@*z
__abs__numbers.Complex.__abs__"
numbers.Real"numbers.Real*$"
numbers.Complex"numbers.Complex0:abstractmethod@*q
	conjugatenumbers.Complex.conjugate"
Any*,
self"
numbers.Complex"numbers.Complex0:abstractmethod@*†
__eq__numbers.Complex.__eq__"
builtins.bool"builtins.bool*$"
numbers.Complex"numbers.Complex*$"
builtins.object"builtins.object0:abstractmethod@ƒ
Realnumbers.Real"numbers.Complex"typing.SupportsFloat*y
	__float__numbers.Real.__float__" 
builtins.float"builtins.float*
numbers.Real"numbers.Real0:abstractmethod@*}
	__trunc__numbers.Real.__trunc__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abstractmethod@*}
	__floor__numbers.Real.__floor__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abstractmethod@*{
__ceil__numbers.Real.__ceil__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abstractmethod@*Y

__divmod__numbers.Real.__divmod__"
Any*
numbers.Real"numbers.Real*	
Any*l
__rdivmod__numbers.Real.__rdivmod__"
Any*&
self
numbers.Real"numbers.Real*
other
Any*Ü
__floordiv__numbers.Real.__floordiv__"
builtins.int"builtins.int*
numbers.Real"numbers.Real*	
Any0:abstractmethod@*à
__rfloordiv__numbers.Real.__rfloordiv__"
builtins.int"builtins.int*
numbers.Real"numbers.Real*	
Any0:abstractmethod@*g
__mod__numbers.Real.__mod__"
Any*
numbers.Real"numbers.Real*	
Any0:abstractmethod@*i
__rmod__numbers.Real.__rmod__"
Any*
numbers.Real"numbers.Real*	
Any0:abstractmethod@*|
__lt__numbers.Real.__lt__"
builtins.bool"builtins.bool*
numbers.Real"numbers.Real*	
Any0:abstractmethod@*|
__le__numbers.Real.__le__"
builtins.bool"builtins.bool*
numbers.Real"numbers.Real*	
Any0:abstractmethod@*m
__complex__numbers.Real.__complex__"$
builtins.complex"builtins.complex*
numbers.Real"numbers.Real*X
realnumbers.Real.real"
Any*&
self
numbers.Real"numbers.Real0:property`*X
imagnumbers.Real.imag"
Any*&
self
numbers.Real"numbers.Real0:property`*T
	conjugatenumbers.Real.conjugate"
Any*&
self
numbers.Real"numbers.Real2Í
	__round__numbers.Real.__round__¢
	__round__numbers.Real.__round__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real*
ndigits
None 0:abstractmethod:overload@Xü
	__round__numbers.Real.__round__"
Any*&
self
numbers.Real"numbers.Real*)
ndigits
builtins.int"builtins.int0:abstractmethod:overload@X—
Rationalnumbers.Rational"numbers.Real*ï
	numeratornumbers.Rational.numerator"
builtins.int"builtins.int*.
self$
numbers.Rational"numbers.Rational0:property:abstractmethod@`*ô
denominatornumbers.Rational.denominator"
builtins.int"builtins.int*.
self$
numbers.Rational"numbers.Rational0:property:abstractmethod@`*q
	__float__numbers.Rational.__float__" 
builtins.float"builtins.float*&$
numbers.Rational"numbers.RationalÈ
Integralnumbers.Integral"numbers.Rational*}
__int__numbers.Integral.__int__"
builtins.int"builtins.int*&$
numbers.Integral"numbers.Integral0:abstractmethod@*u
	__index__numbers.Integral.__index__"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral*ü
__pow__numbers.Integral.__pow__"
Any*&$
numbers.Integral"numbers.Integral*	
Any**&
Union[Any,None]
Any
None 0:abstractmethod@*y

__lshift__numbers.Integral.__lshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abstractmethod@*{
__rlshift__numbers.Integral.__rlshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abstractmethod@*y

__rshift__numbers.Integral.__rshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abstractmethod@*{
__rrshift__numbers.Integral.__rrshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abstractmethod@*s
__and__numbers.Integral.__and__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abstractmethod@*u
__rand__numbers.Integral.__rand__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abstractmethod@*s
__xor__numbers.Integral.__xor__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abstractmethod@*u
__rxor__numbers.Integral.__rxor__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abstractmethod@*q
__or__numbers.Integral.__or__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abstractmethod@*s
__ror__numbers.Integral.__ror__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abstractmethod@*n

__invert__numbers.Integral.__invert__"
Any*&$
numbers.Integral"numbers.Integral0:abstractmethod@*q
	__float__numbers.Integral.__float__" 
builtins.float"builtins.float*&$
numbers.Integral"numbers.Integral*É
	numeratornumbers.Integral.numerator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:property`*á
denominatornumbers.Integral.denominator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:property`*É
__annotations__numbers.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*f
__all__numbers.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list