
_pytest.mark.structuresåŸ
ParameterSet$_pytest.mark.structures.ParameterSet"builtins.tuple*Ë
param*_pytest.mark.structures.ParameterSet.param"º
…TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"$_pytest.mark.structures.ParameterSet*°
clsó
ƒType[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"type*.
values"
builtins.object"builtins.object*æ
marks∞
âUnion[_pytest.mark.structures.MarkDecorator,typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecoratorœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.Collection *N
idD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:classmethodp*¿
extract_from1_pytest.mark.structures.ParameterSet.extract_from"º
…TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"$_pytest.mark.structures.ParameterSet*°
clsó
ƒType[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"type*’
parameterset¬
ÅUnion[TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]],typing.Sequence[builtins.object],builtins.object]º
…TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"$_pytest.mark.structures.ParameterSetW
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence"
builtins.object"builtins.object*1
force_tuple
builtins.bool"builtins.bool 0:classmethodp*Ì
_parse_parametrize_args<_pytest.mark.structures.ParameterSet._parse_parametrize_args"¶
2Tuple[typing.Sequence[builtins.str],builtins.bool]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
builtins.bool"builtins.bool*≤
argnames£
1Union[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*˚
	argvaluesÎ
ítyping.Iterable[Union[TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]],typing.Sequence[builtins.object],builtins.object]]¬
ÅUnion[TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]],typing.Sequence[builtins.object],builtins.object]º
…TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"$_pytest.mark.structures.ParameterSetW
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence"
builtins.object"builtins.object"typing.Iterable*
args
Any*
kwargs
Any0:staticmethodh*–
_parse_parametrize_parametersB_pytest.mark.structures.ParameterSet._parse_parametrize_parameters"©

ÿbuiltins.list[TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]]º
…TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"$_pytest.mark.structures.ParameterSet"builtins.list*˚
	argvaluesÎ
ítyping.Iterable[Union[TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]],typing.Sequence[builtins.object],builtins.object]]¬
ÅUnion[TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]],typing.Sequence[builtins.object],builtins.object]º
…TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"$_pytest.mark.structures.ParameterSetW
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence"
builtins.object"builtins.object"typing.Iterable*/
force_tuple
builtins.bool"builtins.bool0:staticmethodh*´&
_for_parametrize5_pytest.mark.structures.ParameterSet._for_parametrize"˛
˝Tuple[typing.Sequence[builtins.str],builtins.list[TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence©

ÿbuiltins.list[TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]]º
…TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"$_pytest.mark.structures.ParameterSet"builtins.list*°
clsó
ƒType[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"type*≤
argnames£
1Union[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*˚
	argvaluesÎ
ítyping.Iterable[Union[TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]],typing.Sequence[builtins.object],builtins.object]]¬
ÅUnion[TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]],typing.Sequence[builtins.object],builtins.object]º
…TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"$_pytest.mark.structures.ParameterSetW
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence"
builtins.object"builtins.object"typing.Iterable*
func
Any*:
config.
_pytest.config.Config"_pytest.config.Config*(
nodeid
builtins.str"builtins.str0:classmethodp*‹
_replace-_pytest.mark.structures.ParameterSet._replace"Ù
(_pytest.mark.structures.ParameterSet._NT≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None*Ä
_selfÙ
(_pytest.mark.structures.ParameterSet._NT≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None*ˆ
valuesÁ
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequence *›
marksœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.Collection *N
idD
Union[builtins.str,None]
builtins.str"builtins.str
None *é
__new__,_pytest.mark.structures.ParameterSet.__new__"Ù
(_pytest.mark.structures.ParameterSet._NT≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None*∫
_clsØ
.Type[_pytest.mark.structures.ParameterSet._NT]Ù
(_pytest.mark.structures.ParameterSet._NT≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"type*Ù
valuesÁ
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequence*€
marksœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.Collection*L
idD
Union[builtins.str,None]
builtins.str"builtins.str
None*ì
_asdict,_pytest.mark.structures.ParameterSet._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ä
_selfÙ
(_pytest.mark.structures.ParameterSet._NT≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None*‡
_make*_pytest.mark.structures.ParameterSet._make"Ù
(_pytest.mark.structures.ParameterSet._NT≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None*∫
_clsØ
.Type[_pytest.mark.structures.ParameterSet._NT]Ù
(_pytest.mark.structures.ParameterSet._NT≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprü
values+_pytest.mark.structures.ParameterSet.valuesÁ
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.SequencerÖ
marks*_pytest.mark.structures.ParameterSet.marksœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.Collectionrs
id'_pytest.mark.structures.ParameterSet.idD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerü
values+_pytest.mark.structures.ParameterSet.valuesÁ
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.SequencerÖ
marks*_pytest.mark.structures.ParameterSet.marksœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.Collectionrs
id'_pytest.mark.structures.ParameterSet.idD
Union[builtins.str,None]
builtins.str"builtins.str
Noner≈
_fields,_pytest.mark.structures.ParameterSet._fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrö
_field_types1_pytest.mark.structures.ParameterSet._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr†
_field_defaults4_pytest.mark.structures.ParameterSet._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrU
_source,_pytest.mark.structures.ParameterSet._source
builtins.str"builtins.strr†
__annotations__4_pytest.mark.structures.ParameterSet.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict˚$
Mark_pytest.mark.structures.Mark"builtins.object*∞
__init__%_pytest.mark.structures.Mark.__init__"
None*F
self<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark*&
name
builtins.str"builtins.str*8
args.
builtins.tuple[Any]
Any"builtins.tuple*e
kwargsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*ä
param_ids_fromt
(Union[_pytest.mark.structures.Mark,None]<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark
None *£
param_ids_generatedá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None */
	_ispytest
builtins.bool"builtins.bool *•
_has_param_ids+_pytest.mark.structures.Mark._has_param_ids"
builtins.bool"builtins.bool*F
self<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark*ä
combined_with*_pytest.mark.structures.Mark.combined_with"<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark*F
self<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark*G
other<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark*ã
__attrs_init__+_pytest.mark.structures.Mark.__attrs_init__"
None*F
self<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark*&
name
builtins.str"builtins.str*8
args.
builtins.tuple[Any]
Any"builtins.tuple*e
kwargsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*ä
param_ids_fromt
(Union[_pytest.mark.structures.Mark,None]<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark
None *£
param_ids_generatedá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *ò
__lt__#_pytest.mark.structures.Mark.__lt__"
builtins.bool"builtins.bool*c
selfY
 _pytest.mark.structures.Mark._AT"
builtins.object"builtins.object"builtins.object*d
otherY
 _pytest.mark.structures.Mark._AT"
builtins.object"builtins.object"builtins.object*ò
__le__#_pytest.mark.structures.Mark.__le__"
builtins.bool"builtins.bool*c
selfY
 _pytest.mark.structures.Mark._AT"
builtins.object"builtins.object"builtins.object*d
otherY
 _pytest.mark.structures.Mark._AT"
builtins.object"builtins.object"builtins.object*ò
__gt__#_pytest.mark.structures.Mark.__gt__"
builtins.bool"builtins.bool*c
selfY
 _pytest.mark.structures.Mark._AT"
builtins.object"builtins.object"builtins.object*d
otherY
 _pytest.mark.structures.Mark._AT"
builtins.object"builtins.object"builtins.object*ò
__ge__#_pytest.mark.structures.Mark.__ge__"
builtins.bool"builtins.bool*c
selfY
 _pytest.mark.structures.Mark._AT"
builtins.object"builtins.object"builtins.object*d
otherY
 _pytest.mark.structures.Mark._AT"
builtins.object"builtins.object"builtins.object8rG
name!_pytest.mark.structures.Mark.name
builtins.str"builtins.strrY
args!_pytest.mark.structures.Mark.args.
builtins.tuple[Any]
Any"builtins.tuplerà
kwargs#_pytest.mark.structures.Mark.kwargsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mappingrµ
_param_ids_from,_pytest.mark.structures.Mark._param_ids_fromt
(Union[_pytest.mark.structures.Mark,None]<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark
Noner”
_param_ids_generated1_pytest.mark.structures.Mark._param_ids_generatedá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
Noner¢
__attrs_attrs__,_pytest.mark.structures.Mark.__attrs_attrs__‡
ÎTuple[attr.Attribute[builtins.str],attr.Attribute[builtins.tuple[Any]],attr.Attribute[typing.Mapping[builtins.str,Any]],attr.Attribute[Union[_pytest.mark.structures.Mark,None]],attr.Attribute[Union[typing.Sequence[builtins.str],None]]]L
attr.Attribute[builtins.str]
builtins.str"builtins.str"attr.Attributee
#attr.Attribute[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"attr.Attributeù
0attr.Attribute[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"attr.Attribute¿
8attr.Attribute[Union[_pytest.mark.structures.Mark,None]]t
(Union[_pytest.mark.structures.Mark,None]<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark
None"attr.Attribute’
9attr.Attribute[Union[typing.Sequence[builtins.str],None]]á
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None"attr.Attributeê"
MarkDecorator%_pytest.mark.structures.MarkDecorator"builtins.object*ó
__init__._pytest.mark.structures.MarkDecorator.__init__"
None*X
selfN
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*F
mark<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark*/
	_ispytest
builtins.bool"builtins.bool *∏
name*_pytest.mark.structures.MarkDecorator.name"
builtins.str"builtins.str*X
selfN
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator0:property`* 
args*_pytest.mark.structures.MarkDecorator.args".
builtins.tuple[Any]
Any"builtins.tuple*X
selfN
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator0:property`*˘
kwargs,_pytest.mark.structures.MarkDecorator.kwargs"Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*X
selfN
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator0:property`*¿
markname._pytest.mark.structures.MarkDecorator.markname"
builtins.str"builtins.str*X
selfN
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator0:property`*ƒ
	with_args/_pytest.mark.structures.MarkDecorator.with_args"N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*X
selfN
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*,
args"
builtins.object"builtins.object*.
kwargs"
builtins.object"builtins.object*Ú
__attrs_init__4_pytest.mark.structures.MarkDecorator.__attrs_init__"
None*X
selfN
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*F
mark<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark*≥
__lt__,_pytest.mark.structures.MarkDecorator.__lt__"
builtins.bool"builtins.bool*l
selfb
)_pytest.mark.structures.MarkDecorator._AT"
builtins.object"builtins.object"builtins.object*m
otherb
)_pytest.mark.structures.MarkDecorator._AT"
builtins.object"builtins.object"builtins.object*≥
__le__,_pytest.mark.structures.MarkDecorator.__le__"
builtins.bool"builtins.bool*l
selfb
)_pytest.mark.structures.MarkDecorator._AT"
builtins.object"builtins.object"builtins.object*m
otherb
)_pytest.mark.structures.MarkDecorator._AT"
builtins.object"builtins.object"builtins.object*≥
__gt__,_pytest.mark.structures.MarkDecorator.__gt__"
builtins.bool"builtins.bool*l
selfb
)_pytest.mark.structures.MarkDecorator._AT"
builtins.object"builtins.object"builtins.object*m
otherb
)_pytest.mark.structures.MarkDecorator._AT"
builtins.object"builtins.object"builtins.object*≥
__ge__,_pytest.mark.structures.MarkDecorator.__ge__"
builtins.bool"builtins.bool*l
selfb
)_pytest.mark.structures.MarkDecorator._AT"
builtins.object"builtins.object"builtins.object*m
otherb
)_pytest.mark.structures.MarkDecorator._AT"
builtins.object"builtins.object"builtins.object2⁄
__call__._pytest.mark.structures.MarkDecorator.__call__ 
__call__._pytest.mark.structures.MarkDecorator.__call__"Ã
 _pytest.mark.structures.Markable•
4Union[CallableType[builtins.function],builtins.type]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.type"builtins.type*X
selfN
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*÷
argÃ
 _pytest.mark.structures.Markable•
4Union[CallableType[builtins.function],builtins.type]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.type"builtins.type0:overloadX–
__call__._pytest.mark.structures.MarkDecorator.__call__"N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*X
selfN
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*,
args"
builtins.object"builtins.object*.
kwargs"
builtins.object"builtins.object0:overloadX8rp
mark*_pytest.mark.structures.MarkDecorator.mark<
_pytest.mark.structures.Mark"_pytest.mark.structures.MarkrÄ
__attrs_attrs__5_pytest.mark.structures.MarkDecorator.__attrs_attrs__µ
3Tuple[attr.Attribute[_pytest.mark.structures.Mark]]|
,attr.Attribute[_pytest.mark.structures.Mark]<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"attr.Attributeµ
_SkipMarkDecorator*_pytest.mark.structures._SkipMarkDecorator"%_pytest.mark.structures.MarkDecorator2À
__call__3_pytest.mark.structures._SkipMarkDecorator.__call__Ÿ
__call__3_pytest.mark.structures._SkipMarkDecorator.__call__"Ã
 _pytest.mark.structures.Markable•
4Union[CallableType[builtins.function],builtins.type]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.type"builtins.type*b
selfX
*_pytest.mark.structures._SkipMarkDecorator"*_pytest.mark.structures._SkipMarkDecorator*÷
argÃ
 _pytest.mark.structures.Markable•
4Union[CallableType[builtins.function],builtins.type]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.type"builtins.type0:overloadX≠
__call__3_pytest.mark.structures._SkipMarkDecorator.__call__"N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*b
selfX
*_pytest.mark.structures._SkipMarkDecorator"*_pytest.mark.structures._SkipMarkDecorator**
reason
builtins.str"builtins.str 0:overloadX˛
_SkipifMarkDecorator,_pytest.mark.structures._SkipifMarkDecorator"%_pytest.mark.structures.MarkDecorator*ê
__call__5_pytest.mark.structures._SkipifMarkDecorator.__call__"N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*f
self\
,_pytest.mark.structures._SkipifMarkDecorator",_pytest.mark.structures._SkipifMarkDecorator*t
	conditionc
!Union[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool *s

conditionsc
!Union[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool**
reason
builtins.str"builtins.str ›
_XfailMarkDecorator+_pytest.mark.structures._XfailMarkDecorator"%_pytest.mark.structures.MarkDecorator2Ò
__call__4_pytest.mark.structures._XfailMarkDecorator.__call__‹
__call__4_pytest.mark.structures._XfailMarkDecorator.__call__"Ã
 _pytest.mark.structures.Markable•
4Union[CallableType[builtins.function],builtins.type]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.type"builtins.type*d
selfZ
+_pytest.mark.structures._XfailMarkDecorator"+_pytest.mark.structures._XfailMarkDecorator*÷
argÃ
 _pytest.mark.structures.Markable•
4Union[CallableType[builtins.function],builtins.type]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.type"builtins.type0:overloadXœ
__call__4_pytest.mark.structures._XfailMarkDecorator.__call__"N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*d
selfZ
+_pytest.mark.structures._XfailMarkDecorator"+_pytest.mark.structures._XfailMarkDecorator*t
	conditionc
!Union[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool *s

conditionsc
!Union[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool**
reason
builtins.str"builtins.str *)
run
builtins.bool"builtins.bool *ÿ
raises…
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"typeò
,builtins.tuple[Type[builtins.BaseException]]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type"builtins.tuple *,
strict
builtins.bool"builtins.bool 0:overloadX≈
_ParametrizeMarkDecorator1_pytest.mark.structures._ParametrizeMarkDecorator"%_pytest.mark.structures.MarkDecorator*Õ
__call__:_pytest.mark.structures._ParametrizeMarkDecorator.__call__"N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*p
selff
1_pytest.mark.structures._ParametrizeMarkDecorator"1_pytest.mark.structures._ParametrizeMarkDecorator*≤
argnames£
1Union[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*˚
	argvaluesÎ
ítyping.Iterable[Union[TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]],typing.Sequence[builtins.object],builtins.object]]¬
ÅUnion[TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]],typing.Sequence[builtins.object],builtins.object]º
…TypeAlias[Tuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]]≈
æTuple[typing.Sequence[Union[builtins.object,_pytest.compat.NotSetType]],typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]],Union[builtins.str,None]]Á
Atyping.Sequence[Union[builtins.object,_pytest.compat.NotSetType]]ê
0Union[builtins.object,_pytest.compat.NotSetType]"
builtins.object"builtins.object6
_pytest.compat.NotSetType"_pytest.compat.NotSetType"typing.Sequenceœ
\typing.Collection[Union[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]]€
IUnion[_pytest.mark.structures.MarkDecorator,_pytest.mark.structures.Mark]N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.CollectionD
Union[builtins.str,None]
builtins.str"builtins.str
None"$_pytest.mark.structures.ParameterSetW
 typing.Sequence[builtins.object]"
builtins.object"builtins.object"typing.Sequence"
builtins.object"builtins.object"typing.Iterable*∑
indirect¶
2Union[builtins.bool,typing.Sequence[builtins.str]]
builtins.bool"builtins.boolN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *†
idsî
Union[typing.Iterable[Union[None,builtins.str,builtins.float,builtins.int,builtins.bool]],CallableType[builtins.function],None]∑
Styping.Iterable[Union[None,builtins.str,builtins.float,builtins.int,builtins.bool]]Œ
BUnion[None,builtins.str,builtins.float,builtins.int,builtins.bool]
None
builtins.str"builtins.str 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.bool"builtins.bool"typing.IterableK
CallableType[builtins.function]&
builtins.function"builtins.function
None *≤
scope§
yUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None ¨
_UsefixturesMarkDecorator1_pytest.mark.structures._UsefixturesMarkDecorator"%_pytest.mark.structures.MarkDecorator*¥
__call__:_pytest.mark.structures._UsefixturesMarkDecorator.__call__"N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*p
selff
1_pytest.mark.structures._UsefixturesMarkDecorator"1_pytest.mark.structures._UsefixturesMarkDecorator**
fixtures
builtins.str"builtins.str∫
_FilterwarningsMarkDecorator4_pytest.mark.structures._FilterwarningsMarkDecorator"%_pytest.mark.structures.MarkDecorator*º
__call__=_pytest.mark.structures._FilterwarningsMarkDecorator.__call__"N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*v
selfl
4_pytest.mark.structures._FilterwarningsMarkDecorator"4_pytest.mark.structures._FilterwarningsMarkDecorator*)
filters
builtins.str"builtins.strâ
MarkGenerator%_pytest.mark.structures.MarkGenerator"builtins.object*œ
__init__._pytest.mark.structures.MarkGenerator.__init__"
None*X
selfN
%_pytest.mark.structures.MarkGenerator"%_pytest.mark.structures.MarkGenerator*/
	_ispytest
builtins.bool"builtins.bool *Ç
__getattr__1_pytest.mark.structures.MarkGenerator.__getattr__"N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*PN
%_pytest.mark.structures.MarkGenerator"%_pytest.mark.structures.MarkGenerator*
builtins.str"builtins.str8rå
skip*_pytest.mark.structures.MarkGenerator.skipX
*_pytest.mark.structures._SkipMarkDecorator"*_pytest.mark.structures._SkipMarkDecoratorrî
skipif,_pytest.mark.structures.MarkGenerator.skipif\
,_pytest.mark.structures._SkipifMarkDecorator",_pytest.mark.structures._SkipifMarkDecoratorrê
xfail+_pytest.mark.structures.MarkGenerator.xfailZ
+_pytest.mark.structures._XfailMarkDecorator"+_pytest.mark.structures._XfailMarkDecoratorr®
parametrize1_pytest.mark.structures.MarkGenerator.parametrizef
1_pytest.mark.structures._ParametrizeMarkDecorator"1_pytest.mark.structures._ParametrizeMarkDecoratorr®
usefixtures1_pytest.mark.structures.MarkGenerator.usefixturesf
1_pytest.mark.structures._UsefixturesMarkDecorator"1_pytest.mark.structures._UsefixturesMarkDecoratorr¥
filterwarnings4_pytest.mark.structures.MarkGenerator.filterwarningsl
4_pytest.mark.structures._FilterwarningsMarkDecorator"4_pytest.mark.structures._FilterwarningsMarkDecoratorrô
_config-_pytest.mark.structures.MarkGenerator._config_
!Union[_pytest.config.Config,None].
_pytest.config.Config"_pytest.config.Config
NonerÑ
_markers._pytest.mark.structures.MarkGenerator._markersH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set¬
NodeKeywords$_pytest.mark.structures.NodeKeywords"typing.MutableMapping*œ
__init__-_pytest.mark.structures.NodeKeywords.__init__"
None*V
selfL
$_pytest.mark.structures.NodeKeywords"$_pytest.mark.structures.NodeKeywords*2
node(
_pytest.nodes.Node"_pytest.nodes.Node*∏
__getitem__0_pytest.mark.structures.NodeKeywords.__getitem__"
Any*NL
$_pytest.mark.structures.NodeKeywords"$_pytest.mark.structures.NodeKeywords*
builtins.str"builtins.str*ƒ
__setitem__0_pytest.mark.structures.NodeKeywords.__setitem__"
None*NL
$_pytest.mark.structures.NodeKeywords"$_pytest.mark.structures.NodeKeywords*
builtins.str"builtins.str*	
Any*◊
__contains__1_pytest.mark.structures.NodeKeywords.__contains__"
builtins.bool"builtins.bool*NL
$_pytest.mark.structures.NodeKeywords"$_pytest.mark.structures.NodeKeywords*$"
builtins.object"builtins.object*Î
update+_pytest.mark.structures.NodeKeywords.update"
None*V
selfL
$_pytest.mark.structures.NodeKeywords"$_pytest.mark.structures.NodeKeywords*æ
other∞
PUnion[typing.Mapping[builtins.str,Any],typing.Iterable[Tuple[builtins.str,Any]]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping
(typing.Iterable[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Iterable *
kwds
Any*π
__delitem__0_pytest.mark.structures.NodeKeywords.__delitem__"
None*NL
$_pytest.mark.structures.NodeKeywords"$_pytest.mark.structures.NodeKeywords*
builtins.str"builtins.str*Ÿ
__iter__-_pytest.mark.structures.NodeKeywords.__iter__"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*NL
$_pytest.mark.structures.NodeKeywords"$_pytest.mark.structures.NodeKeywords*•
__len__,_pytest.mark.structures.NodeKeywords.__len__"
builtins.int"builtins.int*NL
$_pytest.mark.structures.NodeKeywords"$_pytest.mark.structures.NodeKeywords*ß
__repr__-_pytest.mark.structures.NodeKeywords.__repr__"
builtins.str"builtins.str*NL
$_pytest.mark.structures.NodeKeywords"$_pytest.mark.structures.NodeKeywords8r…
	__slots__._pytest.mark.structures.NodeKeywords.__slots__ã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strr[
node)_pytest.mark.structures.NodeKeywords.node(
_pytest.nodes.Node"_pytest.nodes.Noderç
parent+_pytest.mark.structures.NodeKeywords.parentV
Union[_pytest.nodes.Node,None](
_pytest.nodes.Node"_pytest.nodes.Node
Noner≥
_markers-_pytest.mark.structures.NodeKeywords._markersx
)builtins.dict[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool"builtins.dictc

istestfunc"_pytest.mark.structures.istestfunc"
builtins.bool"builtins.bool*
func
Anyœ
get_empty_parameterset_mark3_pytest.mark.structures.get_empty_parameterset_mark"N
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator*:
config.
_pytest.config.Config"_pytest.config.Config*\
argnamesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*
func
AnyÁ
get_unpacked_marks*_pytest.mark.structures.get_unpacked_marks"z
+builtins.list[_pytest.mark.structures.Mark]<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"builtins.list*u
objl
$Union[builtins.object,builtins.type]"
builtins.object"builtins.object
builtins.type"builtins.type*2
consider_mro
builtins.bool"builtins.bool †
normalize_mark_list+_pytest.mark.structures.normalize_mark_list"~
-typing.Iterable[_pytest.mark.structures.Mark]<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark"typing.Iterable*€
	mark_listÀ
Ztyping.Iterable[Union[_pytest.mark.structures.Mark,_pytest.mark.structures.MarkDecorator]]€
IUnion[_pytest.mark.structures.Mark,_pytest.mark.structures.MarkDecorator]<
_pytest.mark.structures.Mark"_pytest.mark.structures.MarkN
%_pytest.mark.structures.MarkDecorator"%_pytest.mark.structures.MarkDecorator"typing.Iterableî

store_mark"_pytest.mark.structures.store_mark"
None*
obj
Any*F
mark<
_pytest.mark.structures.Mark"_pytest.mark.structures.Mark*ì
__annotations__'_pytest.mark.structures.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
collectionscollections *l
EMPTY_PARAMETERSET_OPTION1_pytest.mark.structures.EMPTY_PARAMETERSET_OPTION
builtins.str"builtins.str*|
MARK_GEN _pytest.mark.structures.MARK_GENN
%_pytest.mark.structures.MarkGenerator"%_pytest.mark.structures.MarkGenerator