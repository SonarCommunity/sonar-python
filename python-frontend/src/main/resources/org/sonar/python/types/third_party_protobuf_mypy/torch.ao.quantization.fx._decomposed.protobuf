
$torch.ao.quantization.fx._decomposedœ
FakeQuantPerChannel8torch.ao.quantization.fx._decomposed.FakeQuantPerChannel" torch.autograd.function.Function*¶
forward@torch.ao.quantization.fx._decomposed.FakeQuantPerChannel.forward*
ctx*	
input*

scales*
zero_points*
axis*
	quant_min*
	quant_max0:staticmethodh*p
backwardAtorch.ao.quantization.fx._decomposed.FakeQuantPerChannel.backward*
ctx*
gy0:staticmethodhˆ
_quant_min_max_bounds_check@torch.ao.quantization.fx._decomposed._quant_min_max_bounds_check*
	quant_min*
	quant_max*	
dtyped
_permute_to_axis_zero:torch.ao.quantization.fx._decomposed._permute_to_axis_zero*
x*
axis“
!_per_token_quant_qparam_dim_checkFtorch.ao.quantization.fx._decomposed._per_token_quant_qparam_dim_check*	
input*

scales*
zero_points* 
__annotations__4torch.ao.quantization.fx._decomposed.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*‰
quantized_decomposed_lib=torch.ao.quantization.fx._decomposed.quantized_decomposed_lib.
torch.library.Library"torch.library.Library*™
_INTEGER_DTYPES4torch.ao.quantization.fx._decomposed._INTEGER_DTYPESP
builtins.list[torch._C.dtype] 
torch._C.dtype"torch._C.dtype"builtins.list*•
_FLOAT_DTYPES2torch.ao.quantization.fx._decomposed._FLOAT_DTYPESP
builtins.list[torch._C.dtype] 
torch._C.dtype"torch._C.dtype"builtins.list*­
_DTYPE_TO_QVALUE_BOUNDS<torch.ao.quantization.fx._decomposed._DTYPE_TO_QVALUE_BOUNDSÓ
>builtins.dict[torch._C.dtype,Tuple[builtins.int,builtins.int]] 
torch._C.dtype"torch._C.dtype`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.dict