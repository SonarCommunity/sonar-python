
torch._numpy._normalizations\
normalize_array_like1torch._numpy._normalizations.normalize_array_like*
x*

parm p
normalize_array_like_or_scalar;torch._numpy._normalizations.normalize_array_like_or_scalar*
x*

parm ‚
'normalize_optional_array_like_or_scalarDtorch._numpy._normalizations.normalize_optional_array_like_or_scalar*
x*

parm n
normalize_optional_array_like:torch._numpy._normalizations.normalize_optional_array_like*
x*

parm d
normalize_seq_array_like5torch._numpy._normalizations.normalize_seq_array_like*
x*

parm V
normalize_dtype,torch._numpy._normalizations.normalize_dtype*	
dtype*

parm f
normalize_not_implemented6torch._numpy._normalizations.normalize_not_implemented*
arg*
parm\
normalize_axis_like0torch._numpy._normalizations.normalize_axis_like*
arg*

parm X
normalize_ndarray.torch._numpy._normalizations.normalize_ndarray*
arg*

parm Z
normalize_outarray/torch._numpy._normalizations.normalize_outarray*
arg*

parm X
normalize_casting.torch._numpy._normalizations.normalize_casting*
arg*

parm R
maybe_normalize,torch._numpy._normalizations.maybe_normalize*
arg*
parmm
maybe_copy_to*torch._numpy._normalizations.maybe_copy_to*
out*

result*
promote_scalar_result E
wrap_tensors)torch._numpy._normalizations.wrap_tensors*

resulto
array_or_scalar,torch._numpy._normalizations.array_or_scalar*

values*
py_type *
return_scalar _

normalizer'torch._numpy._normalizations.normalizer*
_func *
promote_scalar_result *˜
__annotations__,torch._numpy._normalizations.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*N
NotImplementedType/torch._numpy._normalizations.NotImplementedType
Any*¾
normalizers(torch._numpy._normalizations.normalizers„
-builtins.dict[builtins.str,builtins.function]
builtins.str"builtins.str&
builtins.function"builtins.function"builtins.dict