
torch.nn.modules.adaptiveŽ

_ASMoutput$torch.nn.modules.adaptive._ASMoutput"builtins.tuple*˜
_replace-torch.nn.modules.adaptive._ASMoutput._replace"R
(torch.nn.modules.adaptive._ASMoutput._NT$
Tuple[Any,Any]
Any
Any*]
_selfR
(torch.nn.modules.adaptive._ASMoutput._NT$
Tuple[Any,Any]
Any
Any*
output
Any *
loss
Any *Í
__new__,torch.nn.modules.adaptive._ASMoutput.__new__"R
(torch.nn.modules.adaptive._ASMoutput._NT$
Tuple[Any,Any]
Any
Any*—
_clsŒ
.Type[torch.nn.modules.adaptive._ASMoutput._NT]R
(torch.nn.modules.adaptive._ASMoutput._NT$
Tuple[Any,Any]
Any
Any"type*
output
Any*
loss
Any*ï
_asdict,torch.nn.modules.adaptive._ASMoutput._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*]
_selfR
(torch.nn.modules.adaptive._ASMoutput._NT$
Tuple[Any,Any]
Any
Any*š
_make*torch.nn.modules.adaptive._ASMoutput._make"R
(torch.nn.modules.adaptive._ASMoutput._NT$
Tuple[Any,Any]
Any
Any*—
_clsŒ
.Type[torch.nn.modules.adaptive._ASMoutput._NT]R
(torch.nn.modules.adaptive._ASMoutput._NT$
Tuple[Any,Any]
Any
Any"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpr>
output+torch.nn.modules.adaptive._ASMoutput.output
Anyr:
loss)torch.nn.modules.adaptive._ASMoutput.loss
Anyr™
_fields,torch.nn.modules.adaptive._ASMoutput._fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrš
_field_types1torch.nn.modules.adaptive._ASMoutput._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr 
_field_defaults4torch.nn.modules.adaptive._ASMoutput._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrU
_source,torch.nn.modules.adaptive._ASMoutput._source
builtins.str"builtins.strr 
__annotations__4torch.nn.modules.adaptive._ASMoutput.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict—
AdaptiveLogSoftmaxWithLoss4torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss"torch.nn.modules.module.Module*•
__init__=torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.__init__"
None*v
selfl
4torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss"4torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss*-
in_features
builtins.int"builtins.int*+
	n_classes
builtins.int"builtins.int*[
cutoffsN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence*1
	div_value 
builtins.float"builtins.float */
	head_bias
builtins.bool"builtins.bool *
device
Any *
dtype
Any *Û
reset_parametersEtorch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.reset_parameters"
None*v
selfl
4torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss"4torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss*Ÿ
forward<torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.forward"i
TypeAlias[Tuple[Any,Any]]$
Tuple[Any,Any]
Any
Any"$torch.nn.modules.adaptive._ASMoutput*v
selfl
4torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss"4torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss*8
input_,
torch._tensor.Tensor"torch._tensor.Tensor*9
target_,
torch._tensor.Tensor"torch._tensor.Tensor*ƒ
_get_full_log_probGtorch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss._get_full_log_prob*
self*	
input*
head_output*¨
log_prob=torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.log_prob",
torch._tensor.Tensor"torch._tensor.Tensor*v
selfl
4torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss"4torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss*7
input,
torch._tensor.Tensor"torch._tensor.Tensor*¦
predict<torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.predict",
torch._tensor.Tensor"torch._tensor.Tensor*v
selfl
4torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss"4torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss*7
input,
torch._tensor.Tensor"torch._tensor.Tensorrm
in_features@torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.in_features
builtins.int"builtins.intri
	n_classes>torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.n_classes
builtins.int"builtins.intr“
cutoffs<torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.cutoffsJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listrm
	div_value>torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.div_value 
builtins.float"builtins.floatrk
	head_bias>torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.head_bias
builtins.bool"builtins.boolrƒ
head9torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.head@
torch.nn.modules.linear.Linear"torch.nn.modules.linear.Linearr‘
tail9torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.tailN
%torch.nn.modules.container.ModuleList"%torch.nn.modules.container.ModuleListrs
shortlist_sizeCtorch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.shortlist_size
builtins.int"builtins.intrk

n_clusters?torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.n_clusters
builtins.int"builtins.intri
	head_size>torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss.head_size
builtins.int"builtins.int*•
__annotations__)torch.nn.modules.adaptive.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*x
__all__!torch.nn.modules.adaptive.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list