
torch.cuda.nccl9
is_availabletorch.cuda.nccl.is_available*
tensors"
versiontorch.cuda.nccl.version&
	unique_idtorch.cuda.nccl.unique_idH
	init_ranktorch.cuda.nccl.init_rank*
	num_ranks*
uid*
rank±
_check_sequence_type$torch.cuda.nccl._check_sequence_type"
None*è
inputsÛ
AUnion[torch._tensor.Tensor,typing.Sequence[torch._tensor.Tensor]],
torch._tensor.Tensor"torch._tensor.Tensorf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequencei

all_reducetorch.cuda.nccl.all_reduce*

inputs*
outputs *
op *
streams *
comms Š
reducetorch.cuda.nccl.reduce"
None*r
inputsf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*ù
outputê
FUnion[torch._tensor.Tensor,typing.Sequence[torch._tensor.Tensor],None],
torch._tensor.Tensor"torch._tensor.Tensorf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence
None *(
root
builtins.int"builtins.int *&
op
builtins.int"builtins.int *Ë
streams»
6Union[typing.Sequence[torch.cuda.streams.Stream],None]u
*typing.Sequence[torch.cuda.streams.Stream]6
torch.cuda.streams.Stream"torch.cuda.streams.Stream"typing.Sequence
None *
comms
Any *·
outputs§
1Union[typing.Sequence[torch._tensor.Tensor],None]f
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence
None ü
	broadcasttorch.cuda.nccl.broadcast"
None*r
inputsf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*(
root
builtins.int"builtins.int *
streams
Any *
comms
Any É

all_gathertorch.cuda.nccl.all_gather"
None*r
inputsf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*s
outputsf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*
streams
Any *
comms
Any ù
reduce_scattertorch.cuda.nccl.reduce_scatter"
None*r
inputsf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*s
outputsf
%typing.Sequence[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"typing.Sequence*&
op
builtins.int"builtins.int *
streams
Any *
comms
Any *‹
__annotations__torch.cuda.nccl.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
torchtorch *n
__all__torch.cuda.nccl.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*8
SUMtorch.cuda.nccl.SUM
builtins.int"builtins.int