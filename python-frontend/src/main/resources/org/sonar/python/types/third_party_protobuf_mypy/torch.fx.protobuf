
torch.fxπ7
Tracertorch.fx._symbolic_trace.Tracer"torch.fx.proxy.TracerBase*“
__init__(torch.fx._symbolic_trace.Tracer.__init__"
None*L
selfB
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer*Y
autowrap_modulesA
Tuple[types.ModuleType]$
types.ModuleType"types.ModuleType *©
autowrap_functionsé
/builtins.tuple[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.tuple *;
param_shapes_constant
builtins.bool"builtins.bool 0*‡
get_fresh_qualname2torch.fx._symbolic_trace.Tracer.get_fresh_qualname"
builtins.str"builtins.str*L
selfB
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer*(
prefix
builtins.str"builtins.str0*Ó

create_arg*torch.fx._symbolic_trace.Tracer.create_arg"”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument*L
selfB
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer*
a
Any0*≤
is_leaf_module.torch.fx._symbolic_trace.Tracer.is_leaf_module"
builtins.bool"builtins.bool*L
selfB
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer*G
m@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*7
module_qualified_name
builtins.str"builtins.str0*˘
path_of_module.torch.fx._symbolic_trace.Tracer.path_of_module"
builtins.str"builtins.str*L
selfB
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer*I
mod@
torch.nn.modules.module.Module"torch.nn.modules.module.Module0*’
call_module+torch.fx._symbolic_trace.Tracer.call_module"
Any*L
selfB
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer*G
m@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*X
forwardK
CallableType[builtins.function]&
builtins.function"builtins.function*8
args.
builtins.tuple[Any]
Any"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0*æ
getattr'torch.fx._symbolic_trace.Tracer.getattr"
Any*L
selfB
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer*&
attr
builtins.str"builtins.str*
attr_val
Any*r
parameter_proxy_cacheW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0*â
create_args_for_root4torch.fx._symbolic_trace.Tracer.create_args_for_root*
self*
root_fn*
	is_module*
concrete_args 0*Ω
trace%torch.fx._symbolic_trace.Tracer.trace",
torch.fx.graph.Graph"torch.fx.graph.Graph*L
selfB
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer*„
rootÿ
EUnion[torch.nn.modules.module.Module,CallableType[builtins.function]]@
torch.nn.modules.module.Module"torch.nn.modules.module.ModuleK
CallableType[builtins.function]&
builtins.function"builtins.function*®
concrete_argsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None 0*P
__deepcopy__,torch.fx._symbolic_trace.Tracer.__deepcopy__*
self*
memo*ç
_proxy_placeholder2torch.fx._symbolic_trace.Tracer._proxy_placeholder*
self*
name*
concrete_args*
sig*
fn_for_analysis8rΩ
_qualname_counter1torch.fx._symbolic_trace.Tracer._qualname_counteru
(builtins.dict[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.dictrö
_autowrap_function_ids6torch.fx._symbolic_trace.Tracer._autowrap_function_idsH
builtins.set[builtins.int]
builtins.int"builtins.int"builtins.setrú
_autowrap_search0torch.fx._symbolic_trace.Tracer._autowrap_searchV
builtins.list[types.ModuleType]$
types.ModuleType"types.ModuleType"builtins.listrn
param_shapes_constant5torch.fx._symbolic_trace.Tracer.param_shapes_constant
builtins.bool"builtins.boolr«
submodule_paths/torch.fx._symbolic_trace.Tracer.submodule_pathsÇ
FUnion[builtins.dict[torch.nn.modules.module.Module,builtins.str],None]´
:builtins.dict[torch.nn.modules.module.Module,builtins.str]@
torch.nn.modules.module.Module"torch.nn.modules.module.Module
builtins.str"builtins.str"builtins.dict
Nonerb
root_module_name0torch.fx._symbolic_trace.Tracer.root_module_name
builtins.str"builtins.strrú
node_name_to_scope2torch.fx._symbolic_trace.Tracer.node_name_to_scope—
=builtins.dict[builtins.str,Tuple[builtins.str,builtins.type]]
builtins.str"builtins.strc
!Tuple[builtins.str,builtins.type]
builtins.str"builtins.str
builtins.type"builtins.type"builtins.dictrn
root$torch.fx._symbolic_trace.Tracer.root@
torch.nn.modules.module.Module"torch.nn.modules.module.Moduler¶
tensor_attrs,torch.fx._symbolic_trace.Tracer.tensor_attrsÁ
Åbuiltins.dict[Union[torch._tensor.Tensor,torch._C.ScriptObject,torch._library.fake_class_registry.FakeScriptObject],builtins.str]≥
eUnion[torch._tensor.Tensor,torch._C.ScriptObject,torch._library.fake_class_registry.FakeScriptObject],
torch._tensor.Tensor"torch._tensor.Tensor.
torch._C.ScriptObject"torch._C.ScriptObjectj
3torch._library.fake_class_registry.FakeScriptObject"3torch._library.fake_class_registry.FakeScriptObject
builtins.str"builtins.str"builtins.dictΩá
Graphtorch.fx.graph.Graph"builtins.object*˛
__init__torch.fx.graph.Graph.__init__"
None*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*ô
owning_moduleÉ
-Union[torch.fx.graph_module.GraphModule,None]F
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule
None *«

tracer_cls¥
1Union[Type[torch.fx._symbolic_trace.Tracer],None]s
%Type[torch.fx._symbolic_trace.Tracer]B
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer"type
None *®
tracer_extrasí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None 0*°
nodestorch.fx.graph.Graph.nodes"6
torch.fx.graph._node_list"torch.fx.graph._node_list*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph0:property`*Ö

find_nodestorch.fx.graph.Graph.find_nodes"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*$
op
builtins.str"builtins.str*¿
target±
8Union[CallableType[builtins.function],builtins.str,None]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str
None **
sort
builtins.bool"builtins.bool 0*∆

graph_copytorch.fx.graph.Graph.graph_copy"⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*3
g,
torch.fx.graph.Graph"torch.fx.graph.Graph*ß
val_mapô
4builtins.dict[torch.fx.node.Node,torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node(
torch.fx.node.Node"torch.fx.node.Node"builtins.dict*!
return_output_node
Any 0*¨
__deepcopy__!torch.fx.graph.Graph.__deepcopy__",
torch.fx.graph.Graph"torch.fx.graph.Graph*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*
memo
Any *⁄.
create_node torch.fx.graph.Graph.create_node"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*$
op
builtins.str"builtins.str*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*Ê
argsŸ
ıUnion[builtins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple
None *ù
kwargsé
ÅUnion[builtins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dict
None *P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *7
	type_expr&
Union[Any,None]
Any
None 0*K
process_inputs#torch.fx.graph.Graph.process_inputs*
self*
args0*L
process_outputs$torch.fx.graph.Graph.process_outputs*
self*
out0*©

erase_nodetorch.fx.graph.Graph.erase_node"
None*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*6
to_erase(
torch.fx.node.Node"torch.fx.node.Node0*›
inserting_before%torch.fx.graph.Graph.inserting_before"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*_
nV
Union[torch.fx.node.Node,None](
torch.fx.node.Node"torch.fx.node.Node
None 0*€
inserting_after$torch.fx.graph.Graph.inserting_after"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*_
nV
Union[torch.fx.node.Node,None](
torch.fx.node.Node"torch.fx.node.Node
None 0*í
placeholder torch.fx.graph.Graph.placeholder"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*&
name
builtins.str"builtins.str*7
	type_expr&
Union[Any,None]
Any
None *
default_value
Any 0*¯
get_attrtorch.fx.graph.Graph.get_attr"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*0
qualified_name
builtins.str"builtins.str*7
	type_expr&
Union[Any,None]
Any
None 0*Ñ,
call_module torch.fx.graph.Graph.call_module"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*-
module_name
builtins.str"builtins.str*Ê
argsŸ
ıUnion[builtins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple
None *ù
kwargsé
ÅUnion[builtins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dict
None *7
	type_expr&
Union[Any,None]
Any
None 0*Ñ,
call_method torch.fx.graph.Graph.call_method"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*-
method_name
builtins.str"builtins.str*Ê
argsŸ
ıUnion[builtins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple
None *ù
kwargsé
ÅUnion[builtins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dict
None *7
	type_expr&
Union[Any,None]
Any
None 0*∏,
call_function"torch.fx.graph.Graph.call_function"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*]
the_functionK
CallableType[builtins.function]&
builtins.function"builtins.function*Ê
argsŸ
ıUnion[builtins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple
None *ù
kwargsé
ÅUnion[builtins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]],None]˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dict
None *7
	type_expr&
Union[Any,None]
Any
None 0*•
	node_copytorch.fx.graph.Graph.node_copy"(
torch.fx.node.Node"torch.fx.node.Node*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*2
node(
torch.fx.node.Node"torch.fx.node.Node*`
arg_transformK
CallableType[builtins.function]&
builtins.function"builtins.function 0*Ñ
outputtorch.fx.graph.Graph.output"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*‡
result”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument*7
	type_expr&
Union[Any,None]
Any
None 0*ò
_target_to_str#torch.fx.graph.Graph._target_to_str"
builtins.str"builtins.str*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*Î
python_code torch.fx.graph.Graph.python_code"6
torch.fx.graph.PythonCode"torch.fx.graph.PythonCode*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*-
root_module
builtins.str"builtins.str*-
verbose
builtins.bool"builtins.bool *4
include_stride
builtins.bool"builtins.bool *4
include_device
builtins.bool"builtins.bool 0*≤
_python_code!torch.fx.graph.Graph._python_code"6
torch.fx.graph.PythonCode"torch.fx.graph.PythonCode*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*-
root_module
builtins.str"builtins.str*E
	namespace6
torch.fx.graph._Namespace"torch.fx.graph._Namespace*-
verbose
builtins.bool"builtins.bool *4
include_stride
builtins.bool"builtins.bool *4
include_device
builtins.bool"builtins.bool *u
__str__torch.fx.graph.Graph.__str__"
builtins.str"builtins.str*.,
torch.fx.graph.Graph"torch.fx.graph.Graph*?
print_tabular"torch.fx.graph.Graph.print_tabular*
self0*-
linttorch.fx.graph.Graph.lint*
self0*K
eliminate_dead_code(torch.fx.graph.Graph.eliminate_dead_code*
self0*±
set_codegen torch.fx.graph.Graph.set_codegen"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*=
codegen0
torch.fx.graph.CodeGen"torch.fx.graph.CodeGen0*ﬂ
on_generate_code%torch.fx.graph.Graph.on_generate_code"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*a
make_transformerK
CallableType[builtins.function]&
builtins.function"builtins.function02°
owning_module"torch.fx.graph.Graph.owning_moduleM
owning_module"torch.fx.graph.Graph.owning_module*
self0:propertyX`ú
owning_module"torch.fx.graph.Graph.owning_module"
Any*6
self,
torch.fx.graph.Graph"torch.fx.graph.Graph*ç
modÉ
-Union[torch.fx.graph_module.GraphModule,None]F
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule
None0:owning_module.setter8rM
_roottorch.fx.graph.Graph._root(
torch.fx.node.Node"torch.fx.node.Noder¶
_used_names torch.fx.graph.Graph._used_namesu
(builtins.dict[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.dictr0
_inserttorch.fx.graph.Graph._insert
Anyr?
_lentorch.fx.graph.Graph._len
builtins.int"builtins.intrq
_graph_namespace%torch.fx.graph.Graph._graph_namespace6
torch.fx.graph._Namespace"torch.fx.graph._Namespacerª
_owning_module#torch.fx.graph.Graph._owning_moduleÉ
-Union[torch.fx.graph_module.GraphModule,None]F
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule
NonerÊ
_tracer_cls torch.fx.graph.Graph._tracer_cls¥
1Union[Type[torch.fx._symbolic_trace.Tracer],None]s
%Type[torch.fx._symbolic_trace.Tracer]B
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer"type
Noner 
_tracer_extras#torch.fx.graph.Graph._tracer_extrasí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
Noner[
_codegentorch.fx.graph.Graph._codegen0
torch.fx.graph.CodeGen"torch.fx.graph.CodeGenrÜ

_co_fieldstorch.fx.graph.Graph._co_fieldsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictró
_find_nodes_lookup_table-torch.fx.graph.Graph._find_nodes_lookup_tableL
$torch.fx.graph._FindNodesLookupTable"$torch.fx.graph._FindNodesLookupTableπ0
GraphModule!torch.fx.graph_module.GraphModule"torch.nn.modules.module.Module*Í
__new__)torch.fx.graph_module.GraphModule.__new__"
Any*Ç
clsy
'Type[torch.fx.graph_module.GraphModule]F
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule"type*
args
Any*
kwargs
Any*Ô
__init__*torch.fx.graph_module.GraphModule.__init__"
None*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*Ô
root‰
EUnion[torch.nn.modules.module.Module,builtins.dict[builtins.str,Any]]@
torch.nn.modules.module.Module"torch.nn.modules.module.ModuleW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*7
graph,
torch.fx.graph.Graph"torch.fx.graph.Graph*.

class_name
builtins.str"builtins.str 0*ƒ
	to_folder+torch.fx.graph_module.GraphModule.to_folder"
Any*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*|
folderp
$Union[builtins.str,os.PathLike[Any]]
builtins.str"builtins.str(
os.PathLike[Any]
Any"os.PathLike*/
module_name
builtins.str"builtins.str 0*ß
add_submodule/torch.fx.graph_module.GraphModule.add_submodule"
builtins.bool"builtins.bool*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*(
target
builtins.str"builtins.str*G
m@
torch.nn.modules.module.Module"torch.nn.modules.module.Module0*‰
delete_submodule2torch.fx.graph_module.GraphModule.delete_submodule"
builtins.bool"builtins.bool*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*(
target
builtins.str"builtins.str0*º
delete_all_unused_submodules>torch.fx.graph_module.GraphModule.delete_all_unused_submodules"
None*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule0*¨
code&torch.fx.graph_module.GraphModule.code"
builtins.str"builtins.str*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule0:property`*ƒ
	recompile+torch.fx.graph_module.GraphModule.recompile"6
torch.fx.graph.PythonCode"torch.fx.graph.PythonCode*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule0*ı
__reduce_deploy__3torch.fx.graph_module.GraphModule.__reduce_deploy__"
Any*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*P
importerB
torch.package.importer.Importer"torch.package.importer.Importer*ï
__reduce_package__4torch.fx.graph_module.GraphModule.__reduce_package__"
Any*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*n
exporter`
.torch.package.package_exporter.PackageExporter".torch.package.package_exporter.PackageExporter*D

__reduce__,torch.fx.graph_module.GraphModule.__reduce__*
self*L
_deepcopy_init0torch.fx.graph_module.GraphModule._deepcopy_init*
self*R
__deepcopy__.torch.fx.graph_module.GraphModule.__deepcopy__*
self*
memo*@
__copy__*torch.fx.graph_module.GraphModule.__copy__*
self*é
print_readable0torch.fx.graph_module.GraphModule.print_readable*
self*
print_output *
include_stride *
include_device 0*ú
__str__)torch.fx.graph_module.GraphModule.__str__"
builtins.str"builtins.str*HF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*h
_replicate_for_data_parallel>torch.fx.graph_module.GraphModule._replicate_for_data_parallel*
self*v
_set_replace_hook3torch.fx.graph_module.GraphModule._set_replace_hook*
self*
f0:contextlib.contextmanager*k
_register_create_node_hook<torch.fx.graph_module.GraphModule._register_create_node_hook*
self*
f*o
_unregister_create_node_hook>torch.fx.graph_module.GraphModule._unregister_create_node_hook*
self*
f*i
_register_erase_node_hook;torch.fx.graph_module.GraphModule._register_erase_node_hook*
self*
f*m
_unregister_erase_node_hook=torch.fx.graph_module.GraphModule._unregister_erase_node_hook*
self*
f2«
graph'torch.fx.graph_module.GraphModule.graph¿
graph'torch.fx.graph_module.GraphModule.graph",
torch.fx.graph.Graph"torch.fx.graph.Graph*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule0:propertyX`—
graph'torch.fx.graph_module.GraphModule.graph"
None*P
selfF
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*3
g,
torch.fx.graph.Graph"torch.fx.graph.Graph0:graph.setter8r§
__jit_unused_properties__;torch.fx.graph_module.GraphModule.__jit_unused_properties__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrÛ
_tracer_cls-torch.fx.graph_module.GraphModule._tracer_cls¥
1Union[Type[torch.fx._symbolic_trace.Tracer],None]s
%Type[torch.fx._symbolic_trace.Tracer]B
torch.fx._symbolic_trace.Tracer"torch.fx._symbolic_trace.Tracer"type
Nonerõ
_tracer_extras0torch.fx.graph_module.GraphModule._tracer_extrasW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrá
meta&torch.fx.graph_module.GraphModule.metaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrJ
_replace_hook/torch.fx.graph_module.GraphModule._replace_hook
NonerŸ
_create_node_hooks4torch.fx.graph_module.GraphModule._create_node_hookså
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.listr◊
_erase_node_hooks3torch.fx.graph_module.GraphModule._erase_node_hookså
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.listr;
_graph(torch.fx.graph_module.GraphModule._graph
Anyrt
_in_spec*torch.fx.graph_module.GraphModule._in_spec<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpecrÆ
	_out_spec+torch.fx.graph_module.GraphModule._out_spect
(Union[torch.utils._pytree.TreeSpec,None]<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec
Noner9
_code'torch.fx.graph_module.GraphModule._code
AnyrE
_lineno_map-torch.fx.graph_module.GraphModule._lineno_map
Any π
Interpreter torch.fx.interpreter.Interpreter"builtins.object*à
__init__)torch.fx.interpreter.Interpreter.__init__"
None*N
selfD
 torch.fx.interpreter.Interpreter" torch.fx.interpreter.Interpreter*L
module@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*<
garbage_collect_values
builtins.bool"builtins.bool *i
graph\
 Union[torch.fx.graph.Graph,None],
torch.fx.graph.Graph"torch.fx.graph.Graph
None 0*ñ
run$torch.fx.interpreter.Interpreter.run"
Any*N
selfD
 torch.fx.interpreter.Interpreter" torch.fx.interpreter.Interpreter*
args
Any*æ
initial_env™
1Union[builtins.dict[torch.fx.node.Node,Any],None]i
%builtins.dict[torch.fx.node.Node,Any](
torch.fx.node.Node"torch.fx.node.Node
Any"builtins.dict
None *:
enable_io_processing
builtins.bool"builtins.bool 0*R
	boxed_run*torch.fx.interpreter.Interpreter.boxed_run*
self*
	args_list0*m
_set_current_node2torch.fx.interpreter.Interpreter._set_current_node*
self*
node0:contextmanager*¡
run_node)torch.fx.interpreter.Interpreter.run_node"
Any*N
selfD
 torch.fx.interpreter.Interpreter" torch.fx.interpreter.Interpreter*/
n(
torch.fx.node.Node"torch.fx.node.Node0*Ë
placeholder,torch.fx.interpreter.Interpreter.placeholder"
Any*N
selfD
 torch.fx.interpreter.Interpreter" torch.fx.interpreter.Interpreter*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*›
args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0*‚
get_attr)torch.fx.interpreter.Interpreter.get_attr"
Any*N
selfD
 torch.fx.interpreter.Interpreter" torch.fx.interpreter.Interpreter*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*›
args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0*Ï
call_function.torch.fx.interpreter.Interpreter.call_function"
Any*N
selfD
 torch.fx.interpreter.Interpreter" torch.fx.interpreter.Interpreter*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*›
args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0*Ë
call_method,torch.fx.interpreter.Interpreter.call_method"
Any*N
selfD
 torch.fx.interpreter.Interpreter" torch.fx.interpreter.Interpreter*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*›
args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0*Ë
call_module,torch.fx.interpreter.Interpreter.call_module"
Any*N
selfD
 torch.fx.interpreter.Interpreter" torch.fx.interpreter.Interpreter*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*›
args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0*ﬁ
output'torch.fx.interpreter.Interpreter.output"
Any*N
selfD
 torch.fx.interpreter.Interpreter" torch.fx.interpreter.Interpreter*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*›
args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0*æ

fetch_attr+torch.fx.interpreter.Interpreter.fetch_attr"
Any*N
selfD
 torch.fx.interpreter.Interpreter" torch.fx.interpreter.Interpreter*(
target
builtins.str"builtins.str0*ˇ
fetch_args_kwargs_from_env;torch.fx.interpreter.Interpreter.fetch_args_kwargs_from_env"†
1Tuple[builtins.tuple[Any],builtins.dict[Any,Any]].
builtins.tuple[Any]
Any"builtins.tuple9
builtins.dict[Any,Any]
Any
Any"builtins.dict*N
selfD
 torch.fx.interpreter.Interpreter" torch.fx.interpreter.Interpreter*/
n(
torch.fx.node.Node"torch.fx.node.Node0*Ö
map_nodes_to_values4torch.fx.interpreter.Interpreter.map_nodes_to_values"”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument*N
selfD
 torch.fx.interpreter.Interpreter" torch.fx.interpreter.Interpreter*ﬁ
args”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument*/
n(
torch.fx.node.Node"torch.fx.node.Node08rs
module'torch.fx.interpreter.Interpreter.module@
torch.nn.modules.module.Module"torch.nn.modules.module.Modulert

submodules+torch.fx.interpreter.Interpreter.submodules9
builtins.dict[Any,Any]
Any
Any"builtins.dictr]
graph&torch.fx.interpreter.Interpreter.graph,
torch.fx.graph.Graph"torch.fx.graph.Graphrñ
env$torch.fx.interpreter.Interpreter.envi
%builtins.dict[torch.fx.node.Node,Any](
torch.fx.node.Node"torch.fx.node.Node
Any"builtins.dictrK
name%torch.fx.interpreter.Interpreter.name
builtins.str"builtins.strrq
garbage_collect_values7torch.fx.interpreter.Interpreter.garbage_collect_values
builtins.bool"builtins.boolrc
extra_traceback0torch.fx.interpreter.Interpreter.extra_traceback
builtins.bool"builtins.boolr¶
user_to_last_uses2torch.fx.interpreter.Interpreter.user_to_last_uses‹
Cbuiltins.dict[torch.fx.node.Node,builtins.list[torch.fx.node.Node]](
torch.fx.node.Node"torch.fx.node.Node\
!builtins.list[torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node"builtins.list"builtins.dictri
	args_iter*torch.fx.interpreter.Interpreter.args_iter0
typing.Iterator[Any]
Any"typing.IteratorË[
Transformer torch.fx.interpreter.Transformer" torch.fx.interpreter.Interpreter*M
__init__)torch.fx.interpreter.Transformer.__init__*
self*

module0*ç
placeholder,torch.fx.interpreter.Transformer.placeholder",
torch.fx.proxy.Proxy"torch.fx.proxy.Proxy*N
selfD
 torch.fx.interpreter.Transformer" torch.fx.interpreter.Transformer*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*›
args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0*á
get_attr)torch.fx.interpreter.Transformer.get_attr",
torch.fx.proxy.Proxy"torch.fx.proxy.Proxy*N
selfD
 torch.fx.interpreter.Transformer" torch.fx.interpreter.Transformer*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*›
args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0*Ë
call_module,torch.fx.interpreter.Transformer.call_module"
Any*N
selfD
 torch.fx.interpreter.Transformer" torch.fx.interpreter.Transformer*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*›
args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0*Ï
call_function.torch.fx.interpreter.Transformer.call_function"
Any*N
selfD
 torch.fx.interpreter.Transformer" torch.fx.interpreter.Transformer*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*›
args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0*—
	transform*torch.fx.interpreter.Transformer.transform"F
!torch.fx.graph_module.GraphModule"!torch.fx.graph_module.GraphModule*N
selfD
 torch.fx.interpreter.Transformer" torch.fx.interpreter.Transformer08r@
	new_graph*torch.fx.interpreter.Transformer.new_graph
Anyr:
tracer'torch.fx.interpreter.Transformer.tracer
Anyµõ
Nodetorch.fx.node.Node"builtins.object*°(
__init__torch.fx.node.Node.__init__"
None*2
self(
torch.fx.node.Node"torch.fx.node.Node*7
graph,
torch.fx.graph.Graph"torch.fx.graph.Graph*&
name
builtins.str"builtins.str*$
op
builtins.str"builtins.str*ä
target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Target*›
args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*à
kwargs˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dict*9
return_type&
Union[Any,None]
Any
None 0*ã
nexttorch.fx.node.Node.next"(
torch.fx.node.Node"torch.fx.node.Node*2
self(
torch.fx.node.Node"torch.fx.node.Node0:property`*ã
prevtorch.fx.node.Node.prev"(
torch.fx.node.Node"torch.fx.node.Node*2
self(
torch.fx.node.Node"torch.fx.node.Node0:property`*ñ
prependtorch.fx.node.Node.prepend"
None*2
self(
torch.fx.node.Node"torch.fx.node.Node*/
x(
torch.fx.node.Node"torch.fx.node.Node0*Ñ
__gt__torch.fx.node.Node.__gt__"
Any**(
torch.fx.node.Node"torch.fx.node.Node**(
torch.fx.node.Node"torch.fx.node.Node*Ñ
__lt__torch.fx.node.Node.__lt__"
Any**(
torch.fx.node.Node"torch.fx.node.Node**(
torch.fx.node.Node"torch.fx.node.Node*Ñ
__ge__torch.fx.node.Node.__ge__"
Any**(
torch.fx.node.Node"torch.fx.node.Node**(
torch.fx.node.Node"torch.fx.node.Node*Ñ
__le__torch.fx.node.Node.__le__"
Any**(
torch.fx.node.Node"torch.fx.node.Node**(
torch.fx.node.Node"torch.fx.node.Node*î
appendtorch.fx.node.Node.append"
None*2
self(
torch.fx.node.Node"torch.fx.node.Node*/
x(
torch.fx.node.Node"torch.fx.node.Node0*C
_remove_from_list$torch.fx.node.Node._remove_from_list*
self*’
all_input_nodes"torch.fx.node.Node.all_input_nodes"\
!builtins.list[torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node"builtins.list*2
self(
torch.fx.node.Node"torch.fx.node.Node0:property`*Ú

update_argtorch.fx.node.Node.update_arg"
None*2
self(
torch.fx.node.Node"torch.fx.node.Node*%
idx
builtins.int"builtins.int*›
arg”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument0*Ú

insert_argtorch.fx.node.Node.insert_arg"
None*2
self(
torch.fx.node.Node"torch.fx.node.Node*%
idx
builtins.int"builtins.int*›
arg”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument0*ˆ
update_kwargtorch.fx.node.Node.update_kwarg"
None*2
self(
torch.fx.node.Node"torch.fx.node.Node*%
key
builtins.str"builtins.str*›
arg”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument0*Ô$
__update_args_kwargs'torch.fx.node.Node.__update_args_kwargs"
Any*2
self(
torch.fx.node.Node"torch.fx.node.Node*·
new_args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*å

new_kwargs˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dict*q
__repr__torch.fx.node.Node.__repr__"
builtins.str"builtins.str**(
torch.fx.node.Node"torch.fx.node.Node*U
_pretty_print_target'torch.fx.node.Node._pretty_print_target*
self*

target*È
format_nodetorch.fx.node.Node.format_node"D
Union[builtins.str,None]
builtins.str"builtins.str
None*2
self(
torch.fx.node.Node"torch.fx.node.Node*õ
placeholder_namesÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *ü
maybe_return_typenameÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None 0*ì
replace_all_uses_with(torch.fx.node.Node.replace_all_uses_with"\
!builtins.list[torch.fx.node.Node](
torch.fx.node.Node"torch.fx.node.Node"builtins.list*2
self(
torch.fx.node.Node"torch.fx.node.Node*:
replace_with(
torch.fx.node.Node"torch.fx.node.Node*a
delete_user_cbK
CallableType[builtins.function]&
builtins.function"builtins.function *
propagate_meta
Any 0*5
	is_impuretorch.fx.node.Node.is_impure*
self0*†
normalized_arguments'torch.fx.node.Node.normalized_arguments"ü
QUnion[TypeAlias[Tuple[builtins.tuple[Any],builtins.dict[builtins.str,Any]]],None]Ω
ETypeAlias[Tuple[builtins.tuple[Any],builtins.dict[builtins.str,Any]]]«
:Tuple[builtins.tuple[Any],builtins.dict[builtins.str,Any]].
builtins.tuple[Any]
Any"builtins.tupleW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"(torch.fx.operator_schemas.ArgsKwargsPair
None*2
self(
torch.fx.node.Node"torch.fx.node.Node*J
root@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*N
	arg_types=
Union[Tuple[Any],None]

Tuple[Any]
Any
None *¶
kwarg_typesí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *B
normalize_to_only_use_kwargs
builtins.bool"builtins.bool 0*Ï
replace_input_with%torch.fx.node.Node.replace_input_with"
Any*2
self(
torch.fx.node.Node"torch.fx.node.Node*7
	old_input(
torch.fx.node.Node"torch.fx.node.Node*7
	new_input(
torch.fx.node.Node"torch.fx.node.Node0*è
_renametorch.fx.node.Node._rename"
Any*2
self(
torch.fx.node.Node"torch.fx.node.Node*+
	candidate
builtins.str"builtins.str*ß
__setattr__torch.fx.node.Node.__setattr__"
None*2
self(
torch.fx.node.Node"torch.fx.node.Node*&
name
builtins.str"builtins.str*
value
Any2•%
argstorch.fx.node.Node.args∏
argstorch.fx.node.Node.args"“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple*2
self(
torch.fx.node.Node"torch.fx.node.Node0:propertyX`»
argstorch.fx.node.Node.args"
Any*2
self(
torch.fx.node.Node"torch.fx.node.Node*⁄
a“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tuple0:args.setter2Ö&
kwargstorch.fx.node.Node.kwargsÂ
kwargstorch.fx.node.Node.kwargs"˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dict*2
self(
torch.fx.node.Node"torch.fx.node.Node0:propertyX`˜
kwargstorch.fx.node.Node.kwargs"
Any*2
self(
torch.fx.node.Node"torch.fx.node.Node*É
k˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dict0:kwargs.setter2ª
stack_tracetorch.fx.node.Node.stack_trace∑
stack_tracetorch.fx.node.Node.stack_trace"D
Union[builtins.str,None]
builtins.str"builtins.str
None*2
self(
torch.fx.node.Node"torch.fx.node.Node0:propertyX`—
stack_tracetorch.fx.node.Node.stack_trace"
Any*2
self(
torch.fx.node.Node"torch.fx.node.Node*O
traceD
Union[builtins.str,None]
builtins.str"builtins.str
None0:stack_trace.setter8rO
graphtorch.fx.node.Node.graph,
torch.fx.graph.Graph"torch.fx.graph.Graphr=
nametorch.fx.node.Node.name
builtins.str"builtins.strr9
optorch.fx.node.Node.op
builtins.str"builtins.strr£
targettorch.fx.node.Node.target˝
>TypeAlias[Union[CallableType[builtins.function],builtins.str]]¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str"torch.fx.node.Targetrú
_input_nodestorch.fx.node.Node._input_nodesk
&builtins.dict[torch.fx.node.Node,None](
torch.fx.node.Node"torch.fx.node.Node
None"builtins.dictré
userstorch.fx.node.Node.usersk
&builtins.dict[torch.fx.node.Node,None](
torch.fx.node.Node"torch.fx.node.Node
None"builtins.dictrG
typetorch.fx.node.Node.type&
Union[Any,None]
Any
NonerK
_prevtorch.fx.node.Node._prev(
torch.fx.node.Node"torch.fx.node.NoderK
_nexttorch.fx.node.Node._next(
torch.fx.node.Node"torch.fx.node.NoderE
_erasedtorch.fx.node.Node._erased
builtins.bool"builtins.boolr2
	_sort_keytorch.fx.node.Node._sort_key
Anyr∞
_repr_fntorch.fx.node.Node._repr_fnÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
Nonerx
metatorch.fx.node.Node.metaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrˆ
_argstorch.fx.node.Node._args“
Èbuiltins.tuple[TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.tupler£
_kwargstorch.fx.node.Node._kwargs˚
ıbuiltins.dict[builtins.str,TypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]]
builtins.str"builtins.str”
ŸTypeAlias[Union[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None]]⁄
ŒUnion[builtins.tuple[Any],builtins.list[Any],builtins.dict[builtins.str,Any],builtins.slice,builtins.range,torch.fx.node.Node,TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]],None].
builtins.tuple[Any]
Any"builtins.tuple,
builtins.list[Any]
Any"builtins.listW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict 
builtins.slice"builtins.slice 
builtins.range"builtins.range(
torch.fx.node.Node"torch.fx.node.Node’
 TypeAlias[Union[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]]‚
øUnion[builtins.str,builtins.int,builtins.float,builtins.bool,builtins.complex,torch._C.dtype,torch._tensor.Tensor,torch._C.device,torch._C.memory_format,torch._C.layout,torch._ops.OpOverload]
builtins.str"builtins.str
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool$
builtins.complex"builtins.complex 
torch._C.dtype"torch._C.dtype,
torch._tensor.Tensor"torch._tensor.Tensor"
torch._C.device"torch._C.device0
torch._C.memory_format"torch._C.memory_format"
torch._C.layout"torch._C.layout.
torch._ops.OpOverload"torch._ops.OpOverload"torch.fx.node.BaseArgumentTypes
None"torch.fx.node.Argument"builtins.dictÆ
Proxytorch.fx.proxy.Proxy"builtins.object*ú
__init__torch.fx.proxy.Proxy.__init__"
None*6
self,
torch.fx.proxy.Proxy"torch.fx.proxy.Proxy*2
node(
torch.fx.node.Node"torch.fx.node.Node*y
tracerk
%Union[torch.fx.proxy.TracerBase,None]6
torch.fx.proxy.TracerBase"torch.fx.proxy.TracerBase
None 0*w
__repr__torch.fx.proxy.Proxy.__repr__"
builtins.str"builtins.str*.,
torch.fx.proxy.Proxy"torch.fx.proxy.Proxy*†
__getattr__ torch.fx.proxy.Proxy.__getattr__"4
torch.fx.proxy.Attribute"torch.fx.proxy.Attribute*.,
torch.fx.proxy.Proxy"torch.fx.proxy.Proxy*	
Any*∑
__call__torch.fx.proxy.Proxy.__call__",
torch.fx.proxy.Proxy"torch.fx.proxy.Proxy*6
self,
torch.fx.proxy.Proxy"torch.fx.proxy.Proxy*
args
Any*
kwargs
Any*¡
__iter__torch.fx.proxy.Proxy.__iter__"f
%typing.Iterator[torch.fx.proxy.Proxy],
torch.fx.proxy.Proxy"torch.fx.proxy.Proxy"typing.Iterator*.,
torch.fx.proxy.Proxy"torch.fx.proxy.Proxy*)
__abs__torch.fx.proxy.Proxy.__abs__* *Å
__bool__torch.fx.proxy.Proxy.__bool__"
builtins.bool"builtins.bool*6
self,
torch.fx.proxy.Proxy"torch.fx.proxy.Proxy*-
keystorch.fx.proxy.Proxy.keys*
self0*)
__len__torch.fx.proxy.Proxy.__len__* *ç
__torch_function__'torch.fx.proxy.Proxy.__torch_function__*
cls*
orig_method*	
types*

args *
kwargs 0:classmethodp8r]
tracertorch.fx.proxy.Proxy.tracer6
torch.fx.proxy.TracerBase"torch.fx.proxy.TracerBaserK
nodetorch.fx.proxy.Proxy.node(
torch.fx.node.Node"torch.fx.node.Node*i
__path__torch.fx.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Ñ
__annotations__torch.fx.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict