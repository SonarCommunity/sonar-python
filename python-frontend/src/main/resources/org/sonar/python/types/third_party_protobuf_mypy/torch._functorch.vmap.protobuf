
torch._functorch.vmape
"doesnt_support_saved_tensors_hooks8torch._functorch.vmap.doesnt_support_saved_tensors_hooks*
f¿
_validate_and_get_batch_size2torch._functorch.vmap._validate_and_get_batch_size"
builtins.int"builtins.int*ê
flat_in_dims~
'builtins.list[Union[builtins.int,None]]D
Union[builtins.int,None]
builtins.int"builtins.int
None"builtins.list*;
	flat_args,
builtins.list[Any]
Any"builtins.list¡
_num_outputs"torch._functorch.vmap._num_outputs"
builtins.int"builtins.int*Ó
batched_outputsÿ
@Union[torch._tensor.Tensor,builtins.tuple[torch._tensor.Tensor]],
torch._tensor.Tensor"torch._tensor.Tensord
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tupleá
	_as_tupletorch._functorch.vmap._as_tuple".
builtins.tuple[Any]
Any"builtins.tuple*
value
Any*.
num_elements
builtins.int"builtins.int*e
error_message_lambdaK
CallableType[builtins.function]&
builtins.function"builtins.function—
_process_batched_inputs-torch._functorch.vmap._process_batched_inputs"í
VTuple[builtins.int,builtins.list[Any],builtins.list[Any],torch.utils._pytree.TreeSpec]
builtins.int"builtins.int,
builtins.list[Any]
Any"builtins.list,
builtins.list[Any]
Any"builtins.list<
torch.utils._pytree.TreeSpec"torch.utils._pytree.TreeSpec*‡
in_dims“
2TypeAlias[Union[builtins.int,builtins.tuple[Any]]]y
'Union[builtins.int,builtins.tuple[Any]]
builtins.int"builtins.int.
builtins.tuple[Any]
Any"builtins.tuple"torch._functorch.vmap.in_dims_t*8
args.
builtins.tuple[Any]
Any"builtins.tuple*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.functionπ
_create_batched_inputs,torch._functorch.vmap._create_batched_inputs".
builtins.tuple[Any]
Any"builtins.tuple*>
flat_in_dims,
builtins.list[Any]
Any"builtins.list*;
	flat_args,
builtins.list[Any]
Any"builtins.list*,

vmap_level
builtins.int"builtins.int*
	args_spec
Anyì
_maybe_remove_batch_dim-torch._functorch.vmap._maybe_remove_batch_dim*
name*
batched_output*

vmap_level*

batch_size*
out_dim¢
_unwrap_batched%torch._functorch.vmap._unwrap_batched".
builtins.tuple[Any]
Any"builtins.tuple*Ó
batched_outputsÿ
@Union[torch._tensor.Tensor,builtins.tuple[torch._tensor.Tensor]],
torch._tensor.Tensor"torch._tensor.Tensord
$builtins.tuple[torch._tensor.Tensor],
torch._tensor.Tensor"torch._tensor.Tensor"builtins.tuple*ì
out_dimsÑ
;TypeAlias[Union[builtins.int,builtins.tuple[builtins.int]]]†
0Union[builtins.int,builtins.tuple[builtins.int]]
builtins.int"builtins.intL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple" torch._functorch.vmap.out_dims_t*,

vmap_level
builtins.int"builtins.int*,

batch_size
builtins.int"builtins.int*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function]
_check_int_or_none(torch._functorch.vmap._check_int_or_none*
x*
func*
out_dimsŸ
$_check_out_dims_is_int_or_int_pytree:torch._functorch.vmap._check_out_dims_is_int_or_int_pytree"
None*ì
out_dimsÑ
;TypeAlias[Union[builtins.int,builtins.tuple[builtins.int]]]†
0Union[builtins.int,builtins.tuple[builtins.int]]
builtins.int"builtins.intL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple" torch._functorch.vmap.out_dims_t*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.functionå
	_get_nametorch._functorch.vmap._get_name"
Any*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.functionJ
lazy_load_decompositions.torch._functorch.vmap.lazy_load_decompositionsá
	vmap_impltorch._functorch.vmap.vmap_impl*
func*
in_dims*
out_dims*

randomness*

chunk_size*
args*

kwargsY
get_chunk_sizes%torch._functorch.vmap.get_chunk_sizes*
total_elems*

chunk_sizeÅ
_get_chunked_inputs)torch._functorch.vmap._get_chunked_inputs*
	flat_args*
flat_in_dims*

batch_size*

chunk_sizeZ
_flatten_chunks_output,torch._functorch.vmap._flatten_chunks_output*
chunks_output_|
_concat_chunked_outputs-torch._functorch.vmap._concat_chunked_outputs*
out_dims*
arg_spec*
flat_output_chunksü
_chunked_vmap#torch._functorch.vmap._chunked_vmap*
func*
flat_in_dims*
chunks_flat_args*
	args_spec*
out_dims*

randomness*

kwargsT
_check_randomness_arg+torch._functorch.vmap._check_randomness_arg*

randomnessR
wrap_batched"torch._functorch.vmap.wrap_batched*
args*	
bdims*	
levelK
unwrap_batched$torch._functorch.vmap.unwrap_batched*
args*	
level*ë
__annotations__%torch._functorch.vmap.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*E
_remove_batch_dim'torch._functorch.vmap._remove_batch_dim
Any*d
DECOMPOSITIONS_LOADED+torch._functorch.vmap.DECOMPOSITIONS_LOADED
builtins.bool"builtins.bool*b
DECOMPOSITIONS_LOCK)torch._functorch.vmap.DECOMPOSITIONS_LOCK 
threading.Lock"threading.Lock*p
VMAP_DECOMPOSITIONS_LIB-torch._functorch.vmap.VMAP_DECOMPOSITIONS_LIB&
Union[Any,None]
Any
None