import java.util.jar.JarInputStream

plugins {
    id 'com.github.johnrengelman.shadow'
}

dependencies {
    api project(':python-frontend')
    api project(':python-checks')
    api "org.sonarsource.api.plugin:sonar-plugin-api:$sonarPluginApi"

    compileOnly 'org.sonarsource.sonarlint.core:sonarlint-plugin-api:8.11.0.56591'

    implementation "org.sonarsource.analyzer-commons:sonar-analyzer-commons:$analyzerCommonsVersion"
    implementation 'org.sonarsource.analyzer-commons:sonar-xml-parsing:2.1.0.1111'
    implementation 'org.sonarsource.analyzer-commons:sonar-performance-measure:2.1.0.1111'
    implementation 'commons-lang:commons-lang:2.6'
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'org.codehaus.staxmate:staxmate:2.0.1'
    implementation "com.google.protobuf:protobuf-java:$protobufVersion"
    testImplementation 'org.sonarsource.sonarqube:sonar-plugin-api-impl:9.7.1.62043'
    testImplementation 'org.sonarsource.sslr:sslr-testing-harness:1.23'
    testImplementation 'org.sonarsource.sonarqube:sonar-testing-harness:9.7.1.62043'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'org.mockito:mockito-inline:4.11.0'
    testImplementation 'org.sonarsource.sonarlint.core:sonarlint-core:8.11.0.56591'
}

// TODO: MS remove?
description = 'Python :: Sonar Plugin'

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest {
        def displayVersion = (project.buildNumber == null ? project.version : project.version.substring(0, project.version.lastIndexOf('.')) + " (build ${project.buildNumber})")
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
          'Build-Time': buildDate,
          'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
          'Plugin-BuildDate': buildDate,
          'Plugin-ChildFirstClassLoader': 'false',
          'Plugin-Class': 'org.sonar.plugins.python.PythonPlugin',
          'Plugin-Description': 'Code Analyzer for Python',
          'Plugin-Developers': 'SonarSource Team',
          'Plugin-Display-Version': displayVersion,
          'Plugin-Homepage': 'http://redirect.sonarsource.com/plugins/python.html',
          'Plugin-IssueTrackerUrl': ' https://jira.sonarsource.com/browse/SONARPY',
          'Plugin-Key': 'python',
          'Plugin-License': 'GNU LGPL 3',
          'Plugin-Name': 'Python Code Quality and Security',
          'Plugin-Organization': 'SonarSource',
          'Plugin-OrganizationUrl': 'http://www.sonarsource.com',
          'Plugin-SourcesUrl': 'https://github.com/SonarCommunity/sonar-python',
          'Plugin-Version': project.version,
          'Sonar-Version': sonarQubeMinVersion,
          'SonarLint-Supported': 'true',
          'Version': "${project.version}",
        )
    }
}

shadowJar {
    minimize()
    dependencies {
        exclude(dependency('org.sonarsource.sonarqube:sonar-plugin-api'))
        exclude(dependency('org.sonarsource.sonarlint.core:sonarlint-core'))

        exclude(dependency('org.codehaus.woodstox:.*'))
        exclude(dependency('org.codehaus.staxmate:.*'))
        exclude(dependency('com.google.code.findbugs:jsr305'))

        exclude 'META-INF/maven/**'
        exclude 'META-INF/LICENSE*'
        exclude 'META-INF/NOTICE*'
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.SF'
        exclude 'LICENSE*'
        exclude 'NOTICE*'
    }
    doLast {
        // TODO: MS This check should be a separate task to benefit from build cache
        enforceJarSizeAndCheckContent(shadowJar.archiveFile.get().asFile, 6_000_000L, 9_000_000L)
    }
}

artifacts {
    archives shadowJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: shadowJar, classifier: null
        }
    }
}

void enforceJarSizeAndCheckContent(File file, long minSize, long maxSize) {
    long size = file.length()
    if (size < minSize)  {
        throw new GradleException("${file.path} size ($size) too small. Min is $minSize")
    } else if (size > maxSize) {
        throw new GradleException("${file.path} size ($size) too large. Max is $maxSize")
    }
    checkJarEntriesPathUniqueness file
}

// A jar should not contain 2 entries with the same path, furthermore Pack200 will fail to unpack it
void checkJarEntriesPathUniqueness(File file) {
    def allNames = new HashSet()
    def duplicatedNames = new HashSet()
    file.withInputStream { input ->
        new JarInputStream(input).withCloseable { jarInput ->
            for (def jarEntry = jarInput.nextJarEntry; jarEntry != null; jarEntry = jarInput.nextJarEntry) {
                if (!allNames.add(jarEntry.name)) {
                    duplicatedNames.add jarEntry.name
                }
            }
        }
    }
    if (!duplicatedNames.empty) {
        throw new GradleException("Duplicated entries in the jar: '${file.path}': ${duplicatedNames.join(', ')}")
    }
}
